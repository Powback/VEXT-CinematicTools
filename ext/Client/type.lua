class 'Type'

function Type:AABBData (p_class, p_guid)
	local s_Instance = AABBData(p_class) 
 	local className = "AABBData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "halfExtents", "Vec3", s_Instance.halfExtents)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
end

function Type:AbstractLeaderboardData (p_class, p_guid)
	local s_Instance = AbstractLeaderboardData(p_class) 
 	local className = "AbstractLeaderboardData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "leaderboardName", "string", s_Instance.leaderboardName)
end

function Type:AbstractLocoWaypointData (p_class, p_guid)
	local s_Instance = AbstractLocoWaypointData(p_class) 
 	local className = "AbstractLocoWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseTask", "AILocoBaseTaskData", s_Instance.baseTask)
end

function Type:ActionNode (p_class, p_guid)
	local s_Instance = ActionNode(p_class) 
 	local className = "ActionNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionAsset", "CtrRef", s_Instance.actionAsset)
	self:SendDefault(s_guid,className, "actionKey", "int", s_Instance.actionKey)
	self:SendDefault(s_guid,className, "appendIncomingParams", "bool", s_Instance.appendIncomingParams)
	self:SendDefault(s_guid,className, "dataInputs", "List<CtrRef)>", s_Instance.dataInputs)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
	self:SendDefault(s_guid,className, "params", "List<string)>", s_Instance.params)
end

function Type:ActionSuppressor (p_class, p_guid)
	local s_Instance = ActionSuppressor(p_class) 
 	local className = "ActionSuppressor"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionToSuppress", "EntryInputActionEnum", s_Instance.actionToSuppress)
	self:SendDefault(s_guid,className, "suppressingValue", "float", s_Instance.suppressingValue)
end

function Type:AdsrNodeData (p_class, p_guid)
	local s_Instance = AdsrNodeData(p_class) 
 	local className = "AdsrNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "AudioGraphNodePort", s_Instance.a)
	self:SendDefault(s_guid,className, "d", "AudioGraphNodePort", s_Instance.d)
	self:SendDefault(s_guid,className, "finished", "AudioGraphNodePort", s_Instance.finished)
	self:SendDefault(s_guid,className, "r", "AudioGraphNodePort", s_Instance.r)
	self:SendDefault(s_guid,className, "release", "AudioGraphNodePort", s_Instance.release)
	self:SendDefault(s_guid,className, "s", "AudioGraphNodePort", s_Instance.s)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
end

function Type:AdvancedDogTagData (p_class, p_guid)
	local s_Instance = AdvancedDogTagData(p_class) 
 	local className = "AdvancedDogTagData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isStatMeasuredInTime", "bool", s_Instance.isStatMeasuredInTime)
	self:SendDefault(s_guid,className, "statCode", "string", s_Instance.statCode)
	self:SendDefault(s_guid,className, "statSID", "string", s_Instance.statSID)
end

function Type:AdvertisementComponentData (p_class, p_guid)
	local s_Instance = AdvertisementComponentData(p_class) 
 	local className = "AdvertisementComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "adTexture", "string", s_Instance.adTexture)
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
end

function Type:AdvertisementLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = AdvertisementLevelDescriptionComponent(p_class) 
 	local className = "AdvertisementLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "members", "List<AdvertisementZoneMember)>", s_Instance.members)
end

function Type:AdvertisementZoneMember (p_class, p_guid)
	local s_Instance = AdvertisementZoneMember(p_class) 
 	local className = "AdvertisementZoneMember"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "filename", "string", s_Instance.filename)
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
end

function Type:AeroDynamicPhysicsData (p_class, p_guid)
	local s_Instance = AeroDynamicPhysicsData(p_class) 
 	local className = "AeroDynamicPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bodyDrag", "Vec3", s_Instance.bodyDrag)
	self:SendDefault(s_guid,className, "bodyDragOffsetXY", "Vec3", s_Instance.bodyDragOffsetXY)
	self:SendDefault(s_guid,className, "bodyDragOffsetXZ", "Vec3", s_Instance.bodyDragOffsetXZ)
	self:SendDefault(s_guid,className, "bodyDragOffsetYZ", "Vec3", s_Instance.bodyDragOffsetYZ)
end

function Type:AIAimingConstraintsData (p_class, p_guid)
	local s_Instance = AIAimingConstraintsData(p_class) 
 	local className = "AIAimingConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxPitch", "float", s_Instance.maxPitch)
	self:SendDefault(s_guid,className, "maxYaw", "float", s_Instance.maxYaw)
	self:SendDefault(s_guid,className, "minPitch", "float", s_Instance.minPitch)
	self:SendDefault(s_guid,className, "minYaw", "float", s_Instance.minYaw)
end

function Type:AIDifficultyData (p_class, p_guid)
	local s_Instance = AIDifficultyData(p_class) 
 	local className = "AIDifficultyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accuracyIncreaseTimeModifier", "float", s_Instance.accuracyIncreaseTimeModifier)
	self:SendDefault(s_guid,className, "finalAccuracyModifierCrouching", "float", s_Instance.finalAccuracyModifierCrouching)
	self:SendDefault(s_guid,className, "finalAccuracyModifierStanding", "float", s_Instance.finalAccuracyModifierStanding)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "readinessReactionTimeMultiplier", "float", s_Instance.readinessReactionTimeMultiplier)
	self:SendDefault(s_guid,className, "startAccuracyModifierCrouching", "float", s_Instance.startAccuracyModifierCrouching)
	self:SendDefault(s_guid,className, "startAccuracyModifierStanding", "float", s_Instance.startAccuracyModifierStanding)
end

function Type:AIEntryData (p_class, p_guid)
	local s_Instance = AIEntryData(p_class) 
 	local className = "AIEntryData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "armament", "CtrRef", s_Instance.armament)
	self:SendDefault(s_guid,className, "equipmentType", "CtrRef", s_Instance.equipmentType)
	self:SendDefault(s_guid,className, "forbidden", "bool", s_Instance.forbidden)
	self:SendDefault(s_guid,className, "hasExposedSoldier", "bool", s_Instance.hasExposedSoldier)
	self:SendDefault(s_guid,className, "interludeOnly", "bool", s_Instance.interludeOnly)
	self:SendDefault(s_guid,className, "invalidForAI", "bool", s_Instance.invalidForAI)
	self:SendDefault(s_guid,className, "mobility", "CtrRef", s_Instance.mobility)
	self:SendDefault(s_guid,className, "reuseTime", "float", s_Instance.reuseTime)
	self:SendDefault(s_guid,className, "strengthType", "fb.StrengthType)", s_Instance.strengthType)
end

function Type:AiffWriterNodeData (p_class, p_guid)
	local s_Instance = AiffWriterNodeData(p_class) 
 	local className = "AiffWriterNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fileName", "string", s_Instance.fileName)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "stop", "AudioGraphNodePort", s_Instance.stop)
end

function Type:AILocoBaseTaskData (p_class, p_guid)
	local s_Instance = AILocoBaseTaskData(p_class) 
 	local className = "AILocoBaseTaskData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attentionChangeMovingTowards", "AntAttentionStateEnum", s_Instance.attentionChangeMovingTowards)
	self:SendDefault(s_guid,className, "attentionStateChange", "AntAttentionStateEnum", s_Instance.attentionStateChange)
	self:SendDefault(s_guid,className, "isScripted", "bool", s_Instance.isScripted)
	self:SendDefault(s_guid,className, "poseChange", "AntPoseEnum", s_Instance.poseChange)
	self:SendDefault(s_guid,className, "poseChangeMovingTowards", "AntPoseEnum", s_Instance.poseChangeMovingTowards)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "speedChangeMovingTowards", "AntSpeedLevel", s_Instance.speedChangeMovingTowards)
	self:SendDefault(s_guid,className, "speedLevelChange", "AntSpeedLevel", s_Instance.speedLevelChange)
end

function Type:AILocoBinding (p_class, p_guid)
	local s_Instance = AILocoBinding(p_class) 
 	local className = "AILocoBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attentionState", "AntRef", s_Instance.attentionState)
	self:SendDefault(s_guid,className, "currentPoseEnum", "AntRef", s_Instance.currentPoseEnum)
	self:SendDefault(s_guid,className, "enableProceduralHeadAim", "AntRef", s_Instance.enableProceduralHeadAim)
	self:SendDefault(s_guid,className, "endPoseEnum", "AntRef", s_Instance.endPoseEnum)
	self:SendDefault(s_guid,className, "enterExitPoseEnum", "AntRef", s_Instance.enterExitPoseEnum)
	self:SendDefault(s_guid,className, "locoTarget", "AntRef", s_Instance.locoTarget)
	self:SendDefault(s_guid,className, "runStyle", "AntRef", s_Instance.runStyle)
	self:SendDefault(s_guid,className, "targetSpeedLevel", "AntRef", s_Instance.targetSpeedLevel)
	self:SendDefault(s_guid,className, "targetWaypointPosition", "AntRef", s_Instance.targetWaypointPosition)
end

function Type:AILocoComponentData (p_class, p_guid)
	local s_Instance = AILocoComponentData(p_class) 
 	local className = "AILocoComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "binding", "AILocoBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "coverBinding", "AILocoCoverBinding", s_Instance.coverBinding)
	self:SendDefault(s_guid,className, "vaultBinding", "AILocoVaultBinding", s_Instance.vaultBinding)
	self:SendDefault(s_guid,className, "wantedYaw", "float", s_Instance.wantedYaw)
end

function Type:AILocoCoverBinding (p_class, p_guid)
	local s_Instance = AILocoCoverBinding(p_class) 
 	local className = "AILocoCoverBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "absoluteDistance", "AntRef", s_Instance.absoluteDistance)
	self:SendDefault(s_guid,className, "angleToNormal", "AntRef", s_Instance.angleToNormal)
	self:SendDefault(s_guid,className, "coverFireStyle", "AntRef", s_Instance.coverFireStyle)
	self:SendDefault(s_guid,className, "coverTypeEnum", "AntRef", s_Instance.coverTypeEnum)
	self:SendDefault(s_guid,className, "distanceScale", "AntRef", s_Instance.distanceScale)
	self:SendDefault(s_guid,className, "enterCover", "AntRef", s_Instance.enterCover)
	self:SendDefault(s_guid,className, "enterStrategy", "AntRef", s_Instance.enterStrategy)
	self:SendDefault(s_guid,className, "exitCover", "AntRef", s_Instance.exitCover)
	self:SendDefault(s_guid,className, "exitStyle", "AntRef", s_Instance.exitStyle)
	self:SendDefault(s_guid,className, "idleBehindCover", "AntRef", s_Instance.idleBehindCover)
	self:SendDefault(s_guid,className, "isCloseCover", "AntRef", s_Instance.isCloseCover)
	self:SendDefault(s_guid,className, "outAngle", "AntRef", s_Instance.outAngle)
	self:SendDefault(s_guid,className, "peekOut", "AntRef", s_Instance.peekOut)
	self:SendDefault(s_guid,className, "peekType", "AntRef", s_Instance.peekType)
	self:SendDefault(s_guid,className, "prepareFire", "AntRef", s_Instance.prepareFire)
	self:SendDefault(s_guid,className, "stopExitCoverOutAround", "AntRef", s_Instance.stopExitCoverOutAround)
	self:SendDefault(s_guid,className, "threatAngle", "AntRef", s_Instance.threatAngle)
	self:SendDefault(s_guid,className, "throwGrenade", "AntRef", s_Instance.throwGrenade)
end

function Type:AILocoCoverTaskData (p_class, p_guid)
	local s_Instance = AILocoCoverTaskData(p_class) 
 	local className = "AILocoCoverTaskData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coverPose", "AntPoseEnum", s_Instance.coverPose)
	self:SendDefault(s_guid,className, "coverType", "AntCoverEnum", s_Instance.coverType)
	self:SendDefault(s_guid,className, "distanceToNextWaypoint", "float", s_Instance.distanceToNextWaypoint)
	self:SendDefault(s_guid,className, "enterStrategy", "CoverEnterStrategy", s_Instance.enterStrategy)
	self:SendDefault(s_guid,className, "exitAngle", "float", s_Instance.exitAngle)
	self:SendDefault(s_guid,className, "exitPose", "AntPoseEnum", s_Instance.exitPose)
	self:SendDefault(s_guid,className, "exitStyle", "CoverExitStyle", s_Instance.exitStyle)
	self:SendDefault(s_guid,className, "forceExitCover", "bool", s_Instance.forceExitCover)
	self:SendDefault(s_guid,className, "offsetLength", "float", s_Instance.offsetLength)
	self:SendDefault(s_guid,className, "peekOut", "CoverPeekType", s_Instance.peekOut)
	self:SendDefault(s_guid,className, "prepareFireType", "CoverFireType", s_Instance.prepareFireType)
	self:SendDefault(s_guid,className, "threatPosition", "Vec3", s_Instance.threatPosition)
	self:SendDefault(s_guid,className, "useClientPosition", "bool", s_Instance.useClientPosition)
	self:SendDefault(s_guid,className, "waitTime", "float", s_Instance.waitTime)
	self:SendDefault(s_guid,className, "wantedPos", "Vec3", s_Instance.wantedPos)
	self:SendDefault(s_guid,className, "worldAngle", "float", s_Instance.worldAngle)
end

function Type:AILocoMoveTaskData (p_class, p_guid)
	local s_Instance = AILocoMoveTaskData(p_class) 
 	local className = "AILocoMoveTaskData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enterPose", "AntPoseEnum", s_Instance.enterPose)
	self:SendDefault(s_guid,className, "exitPose", "AntPoseEnum", s_Instance.exitPose)
	self:SendDefault(s_guid,className, "overrideAngle", "bool", s_Instance.overrideAngle)
	self:SendDefault(s_guid,className, "useClientPosition", "bool", s_Instance.useClientPosition)
	self:SendDefault(s_guid,className, "waitTime", "float", s_Instance.waitTime)
	self:SendDefault(s_guid,className, "wantedPos", "Vec3", s_Instance.wantedPos)
	self:SendDefault(s_guid,className, "worldAngle", "float", s_Instance.worldAngle)
end

function Type:AILocoVaultBinding (p_class, p_guid)
	local s_Instance = AILocoVaultBinding(p_class) 
 	local className = "AILocoVaultBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceAfterVault", "AntRef", s_Instance.distanceAfterVault)
	self:SendDefault(s_guid,className, "distanceBeforeVault", "AntRef", s_Instance.distanceBeforeVault)
	self:SendDefault(s_guid,className, "heightAfterVault", "AntRef", s_Instance.heightAfterVault)
	self:SendDefault(s_guid,className, "heightBeforeVault", "AntRef", s_Instance.heightBeforeVault)
	self:SendDefault(s_guid,className, "lengthOfVaultableObject", "AntRef", s_Instance.lengthOfVaultableObject)
	self:SendDefault(s_guid,className, "vault", "AntRef", s_Instance.vault)
	self:SendDefault(s_guid,className, "vaultType", "AntRef", s_Instance.vaultType)
end

function Type:AILocoVaultTaskData (p_class, p_guid)
	local s_Instance = AILocoVaultTaskData(p_class) 
 	local className = "AILocoVaultTaskData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceAfterVault", "float", s_Instance.distanceAfterVault)
	self:SendDefault(s_guid,className, "distanceBeforeVault", "float", s_Instance.distanceBeforeVault)
	self:SendDefault(s_guid,className, "heightAfterVault", "float", s_Instance.heightAfterVault)
	self:SendDefault(s_guid,className, "heightBeforeVault", "float", s_Instance.heightBeforeVault)
	self:SendDefault(s_guid,className, "lengthOfVaultableObject", "float", s_Instance.lengthOfVaultableObject)
	self:SendDefault(s_guid,className, "startPoint", "Vec3", s_Instance.startPoint)
	self:SendDefault(s_guid,className, "useClientPosition", "bool", s_Instance.useClientPosition)
	self:SendDefault(s_guid,className, "vaultType", "WaypointVaultType", s_Instance.vaultType)
	self:SendDefault(s_guid,className, "worldAngle", "float", s_Instance.worldAngle)
end

function Type:AimerModifierData (p_class, p_guid)
	local s_Instance = AimerModifierData(p_class) 
 	local className = "AimerModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lookSpeedMultiplier", "float", s_Instance.lookSpeedMultiplier)
	self:SendDefault(s_guid,className, "onlyInSupportedShooting", "bool", s_Instance.onlyInSupportedShooting)
end

function Type:AimingConstraintEntityBinding (p_class, p_guid)
	local s_Instance = AimingConstraintEntityBinding(p_class) 
 	local className = "AimingConstraintEntityBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "proneAimDistance", "AntRef", s_Instance.proneAimDistance)
	self:SendDefault(s_guid,className, "proneAimLimit", "AntRef", s_Instance.proneAimLimit)
end

function Type:AimingConstraintEntityCommonData (p_class, p_guid)
	local s_Instance = AimingConstraintEntityCommonData(p_class) 
 	local className = "AimingConstraintEntityCommonData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "AimingConstraintsData", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "aimingConstraintsBinding", "AimingConstraintEntityBinding", s_Instance.aimingConstraintsBinding)
	self:SendDefault(s_guid,className, "constraintMoveSpeedMultiplier", "float", s_Instance.constraintMoveSpeedMultiplier)
	self:SendDefault(s_guid,className, "disableAimingConstraintsDelay", "float", s_Instance.disableAimingConstraintsDelay)
	self:SendDefault(s_guid,className, "shuffleAnimationDelay", "float", s_Instance.shuffleAnimationDelay)
	self:SendDefault(s_guid,className, "shuffleAnimationThreshold", "float", s_Instance.shuffleAnimationThreshold)
end

function Type:AimingConstraintEntityData (p_class, p_guid)
	local s_Instance = AimingConstraintEntityData(p_class) 
 	local className = "AimingConstraintEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "commonData", "CtrRef", s_Instance.commonData)
	self:SendDefault(s_guid,className, "enabledInProne", "bool", s_Instance.enabledInProne)
end

function Type:AimingConstraintsData (p_class, p_guid)
	local s_Instance = AimingConstraintsData(p_class) 
 	local className = "AimingConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxPitch", "float", s_Instance.maxPitch)
	self:SendDefault(s_guid,className, "maxYaw", "float", s_Instance.maxYaw)
	self:SendDefault(s_guid,className, "minPitch", "float", s_Instance.minPitch)
	self:SendDefault(s_guid,className, "minYaw", "float", s_Instance.minYaw)
end

function Type:AimingPoseData (p_class, p_guid)
	local s_Instance = AimingPoseData(p_class) 
 	local className = "AimingPoseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimSteadiness", "float", s_Instance.aimSteadiness)
	self:SendDefault(s_guid,className, "maximumPitch", "float", s_Instance.maximumPitch)
	self:SendDefault(s_guid,className, "minimumPitch", "float", s_Instance.minimumPitch)
	self:SendDefault(s_guid,className, "recoilMultiplier", "float", s_Instance.recoilMultiplier)
	self:SendDefault(s_guid,className, "speedMultiplier", "float", s_Instance.speedMultiplier)
	self:SendDefault(s_guid,className, "targetingFov", "float", s_Instance.targetingFov)
end

function Type:AIProximityReactionsBinding (p_class, p_guid)
	local s_Instance = AIProximityReactionsBinding(p_class) 
 	local className = "AIProximityReactionsBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aIExplosionForce", "AntRef", s_Instance.aIExplosionForce)
	self:SendDefault(s_guid,className, "aIExplosionReaction", "AntRef", s_Instance.aIExplosionReaction)
	self:SendDefault(s_guid,className, "aimUpAndDown", "AntRef", s_Instance.aimUpAndDown)
	self:SendDefault(s_guid,className, "aIReaction", "AntRef", s_Instance.aIReaction)
	self:SendDefault(s_guid,className, "aIReactionDirection", "AntRef", s_Instance.aIReactionDirection)
	self:SendDefault(s_guid,className, "aIStunReaction", "AntRef", s_Instance.aIStunReaction)
	self:SendDefault(s_guid,className, "aIStunReactionRandomFactor", "AntRef", s_Instance.aIStunReactionRandomFactor)
	self:SendDefault(s_guid,className, "enableProceduralHeadAim", "AntRef", s_Instance.enableProceduralHeadAim)
	self:SendDefault(s_guid,className, "fireNearby", "AntRef", s_Instance.fireNearby)
	self:SendDefault(s_guid,className, "focusAiming", "AntRef", s_Instance.focusAiming)
	self:SendDefault(s_guid,className, "focusAimScale", "AntRef", s_Instance.focusAimScale)
	self:SendDefault(s_guid,className, "killFromAnimation", "AntRef", s_Instance.killFromAnimation)
	self:SendDefault(s_guid,className, "playerAnimationKill", "AntRef", s_Instance.playerAnimationKill)
	self:SendDefault(s_guid,className, "playerInitiatedRagdoll", "AntRef", s_Instance.playerInitiatedRagdoll)
end

function Type:AIProximityReactionsComponentData (p_class, p_guid)
	local s_Instance = AIProximityReactionsComponentData(p_class) 
 	local className = "AIProximityReactionsComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "AIProximityReactionsBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "fireReactionDistance", "float", s_Instance.fireReactionDistance)
	self:SendDefault(s_guid,className, "maxExplosionLookDistance", "float", s_Instance.maxExplosionLookDistance)
	self:SendDefault(s_guid,className, "minExplosionImpulseForce", "float", s_Instance.minExplosionImpulseForce)
end

function Type:AirMissileJammingData (p_class, p_guid)
	local s_Instance = AirMissileJammingData(p_class) 
 	local className = "AirMissileJammingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enableAirMissileJamming", "bool", s_Instance.enableAirMissileJamming)
	self:SendDefault(s_guid,className, "jammingTime", "float", s_Instance.jammingTime)
	self:SendDefault(s_guid,className, "maxRadius", "float", s_Instance.maxRadius)
	self:SendDefault(s_guid,className, "maxTurnSpeed", "float", s_Instance.maxTurnSpeed)
	self:SendDefault(s_guid,className, "minRadius", "float", s_Instance.minRadius)
	self:SendDefault(s_guid,className, "minTurnSpeed", "float", s_Instance.minTurnSpeed)
	self:SendDefault(s_guid,className, "phi", "float", s_Instance.phi)
	self:SendDefault(s_guid,className, "quietModeProbability", "float", s_Instance.quietModeProbability)
	self:SendDefault(s_guid,className, "quietModeTime", "float", s_Instance.quietModeTime)
	self:SendDefault(s_guid,className, "theta", "float", s_Instance.theta)
	self:SendDefault(s_guid,className, "turnCalculationTime", "float", s_Instance.turnCalculationTime)
	self:SendDefault(s_guid,className, "updateJammingPositionTime", "float", s_Instance.updateJammingPositionTime)
end

function Type:AirRadarData (p_class, p_guid)
	local s_Instance = AirRadarData(p_class) 
 	local className = "AirRadarData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "centerIcon", "UIHudIcon", s_Instance.centerIcon)
	self:SendDefault(s_guid,className, "eastIcon", "UIHudIcon", s_Instance.eastIcon)
	self:SendDefault(s_guid,className, "enemyIcon", "UIHudIcon", s_Instance.enemyIcon)
	self:SendDefault(s_guid,className, "friendlyIcon", "UIHudIcon", s_Instance.friendlyIcon)
	self:SendDefault(s_guid,className, "heatSensitivity", "float", s_Instance.heatSensitivity)
	self:SendDefault(s_guid,className, "laserPaintedIcon", "UIHudIcon", s_Instance.laserPaintedIcon)
	self:SendDefault(s_guid,className, "missileIcon", "UIHudIcon", s_Instance.missileIcon)
	self:SendDefault(s_guid,className, "northIcon", "UIHudIcon", s_Instance.northIcon)
	self:SendDefault(s_guid,className, "radarRange", "float", s_Instance.radarRange)
	self:SendDefault(s_guid,className, "radarSensitivity", "float", s_Instance.radarSensitivity)
	self:SendDefault(s_guid,className, "southIcon", "UIHudIcon", s_Instance.southIcon)
	self:SendDefault(s_guid,className, "subScreen", "SubScreenData", s_Instance.subScreen)
	self:SendDefault(s_guid,className, "trackLaserPaintedObjects", "bool", s_Instance.trackLaserPaintedObjects)
	self:SendDefault(s_guid,className, "trackOnlyUsedVehicles", "bool", s_Instance.trackOnlyUsedVehicles)
	self:SendDefault(s_guid,className, "useCameraComponentTransform", "bool", s_Instance.useCameraComponentTransform)
	self:SendDefault(s_guid,className, "westIcon", "UIHudIcon", s_Instance.westIcon)
end

function Type:AirResistanceData (p_class, p_guid)
	local s_Instance = AirResistanceData(p_class) 
 	local className = "AirResistanceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dragFactor", "float", s_Instance.dragFactor)
end

function Type:AISettingsData (p_class, p_guid)
	local s_Instance = AISettingsData(p_class) 
 	local className = "AISettingsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coverConstants", "CtrRef", s_Instance.coverConstants)
	self:SendDefault(s_guid,className, "debugConstants", "CtrRef", s_Instance.debugConstants)
	self:SendDefault(s_guid,className, "decisionConstants", "CtrRef", s_Instance.decisionConstants)
	self:SendDefault(s_guid,className, "defaultBehaviourTemplate", "CtrRef", s_Instance.defaultBehaviourTemplate)
	self:SendDefault(s_guid,className, "defaultVehicleType", "CtrRef", s_Instance.defaultVehicleType)
	self:SendDefault(s_guid,className, "positionEvaluationConstants", "CtrRef", s_Instance.positionEvaluationConstants)
	self:SendDefault(s_guid,className, "readinessLevels", "fb.ReadinessLevels)", s_Instance.readinessLevels)
	self:SendDefault(s_guid,className, "soundEnvironmentConstants", "CtrRef", s_Instance.soundEnvironmentConstants)
	self:SendDefault(s_guid,className, "timingConstants", "CtrRef", s_Instance.timingConstants)
end

function Type:AISystemAsset (p_class, p_guid)
	local s_Instance = AISystemAsset(p_class) 
 	local className = "AISystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "behaviours", "CtrRef", s_Instance.behaviours)
	self:SendDefault(s_guid,className, "orders", "CtrRef", s_Instance.orders)
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
end

function Type:AIVehicleBehaviourData (p_class, p_guid)
	local s_Instance = AIVehicleBehaviourData(p_class) 
 	local className = "AIVehicleBehaviourData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "behaviours", "List<string)>", s_Instance.behaviours)
	self:SendDefault(s_guid,className, "controls", "List<string)>", s_Instance.controls)
	self:SendDefault(s_guid,className, "goals", "List<string)>", s_Instance.goals)
	self:SendDefault(s_guid,className, "intents", "List<IntentData)>", s_Instance.intents)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:AIVehicleTypes (p_class, p_guid)
	local s_Instance = AIVehicleTypes(p_class) 
 	local className = "AIVehicleTypes"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "goals", "List<CtrRef)>", s_Instance.goals)
	self:SendDefault(s_guid,className, "intents", "List<CtrRef)>", s_Instance.intents)
	self:SendDefault(s_guid,className, "vehicleTypes", "List<CtrRef)>", s_Instance.vehicleTypes)
end

function Type:AIWeaponData (p_class, p_guid)
	local s_Instance = AIWeaponData(p_class) 
 	local className = "AIWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalMinimumAccuracyAtMinRange", "float", s_Instance.additionalMinimumAccuracyAtMinRange)
	self:SendDefault(s_guid,className, "aimAngularVelocity", "float", s_Instance.aimAngularVelocity)
	self:SendDefault(s_guid,className, "aimHighIndirectPath", "bool", s_Instance.aimHighIndirectPath)
	self:SendDefault(s_guid,className, "aimOrigin", "fb.AimOrigin)", s_Instance.aimOrigin)
	self:SendDefault(s_guid,className, "aimTransitionFireDelay", "float", s_Instance.aimTransitionFireDelay)
	self:SendDefault(s_guid,className, "aimWhileReloading", "bool", s_Instance.aimWhileReloading)
	self:SendDefault(s_guid,className, "allowedAgainstImmortals", "bool", s_Instance.allowedAgainstImmortals)
	self:SendDefault(s_guid,className, "angleToTargetSnap", "float", s_Instance.angleToTargetSnap)
	self:SendDefault(s_guid,className, "burstLimitFar", "BurstLimit", s_Instance.burstLimitFar)
	self:SendDefault(s_guid,className, "burstLimitNear", "BurstLimit", s_Instance.burstLimitNear)
	self:SendDefault(s_guid,className, "canAltAttack", "bool", s_Instance.canAltAttack)
	self:SendDefault(s_guid,className, "canSuppress", "bool", s_Instance.canSuppress)
	self:SendDefault(s_guid,className, "disableWeaponSway", "bool", s_Instance.disableWeaponSway)
	self:SendDefault(s_guid,className, "finalAccuracyPercentage", "float", s_Instance.finalAccuracyPercentage)
	self:SendDefault(s_guid,className, "gravityModifier", "float", s_Instance.gravityModifier)
	self:SendDefault(s_guid,className, "inaccuracyFollowsTarget", "bool", s_Instance.inaccuracyFollowsTarget)
	self:SendDefault(s_guid,className, "indirect", "bool", s_Instance.indirect)
	self:SendDefault(s_guid,className, "innerInaccurateDistance", "float", s_Instance.innerInaccurateDistance)
	self:SendDefault(s_guid,className, "isAiAllowed", "bool", s_Instance.isAiAllowed)
	self:SendDefault(s_guid,className, "isBlindFireAllowed", "bool", s_Instance.isBlindFireAllowed)
	self:SendDefault(s_guid,className, "isMelee", "bool", s_Instance.isMelee)
	self:SendDefault(s_guid,className, "isStandStill", "bool", s_Instance.isStandStill)
	self:SendDefault(s_guid,className, "lostTargetBurstCoolDownModifier", "float", s_Instance.lostTargetBurstCoolDownModifier)
	self:SendDefault(s_guid,className, "maxBurstCoolDownTime", "float", s_Instance.maxBurstCoolDownTime)
	self:SendDefault(s_guid,className, "maxExtraReloadTime", "float", s_Instance.maxExtraReloadTime)
	self:SendDefault(s_guid,className, "maxRange", "float", s_Instance.maxRange)
	self:SendDefault(s_guid,className, "minBurstCoolDownTime", "float", s_Instance.minBurstCoolDownTime)
	self:SendDefault(s_guid,className, "minExtraReloadTime", "float", s_Instance.minExtraReloadTime)
	self:SendDefault(s_guid,className, "minimumAccuracyBeforeFiring", "float", s_Instance.minimumAccuracyBeforeFiring)
	self:SendDefault(s_guid,className, "minRange", "float", s_Instance.minRange)
	self:SendDefault(s_guid,className, "optimalRangePercentage", "float", s_Instance.optimalRangePercentage)
	self:SendDefault(s_guid,className, "outerInaccurateDistance", "float", s_Instance.outerInaccurateDistance)
	self:SendDefault(s_guid,className, "reloadBehavior", "fb.ReloadBehavior)", s_Instance.reloadBehavior)
	self:SendDefault(s_guid,className, "startAccuracyPercentage", "float", s_Instance.startAccuracyPercentage)
	self:SendDefault(s_guid,className, "strengths", "fb.Strengths)", s_Instance.strengths)
	self:SendDefault(s_guid,className, "sweepDistance", "float", s_Instance.sweepDistance)
	self:SendDefault(s_guid,className, "sweepFirstAttack", "bool", s_Instance.sweepFirstAttack)
	self:SendDefault(s_guid,className, "sweepTime", "float", s_Instance.sweepTime)
	self:SendDefault(s_guid,className, "sweepType", "SweepSelectionType", s_Instance.sweepType)
	self:SendDefault(s_guid,className, "useFromCover", "bool", s_Instance.useFromCover)
	self:SendDefault(s_guid,className, "useInaccuracyAtCloseRange", "bool", s_Instance.useInaccuracyAtCloseRange)
	self:SendDefault(s_guid,className, "useZoom", "bool", s_Instance.useZoom)
	self:SendDefault(s_guid,className, "waitTimeBeforeFire", "float", s_Instance.waitTimeBeforeFire)
end

function Type:AlignmentData (p_class, p_guid)
	local s_Instance = AlignmentData(p_class) 
 	local className = "AlignmentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alignAction", "EntryInputActionEnum", s_Instance.alignAction)
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
	self:SendDefault(s_guid,className, "stopTolerance", "float", s_Instance.stopTolerance)
end

function Type:AlternateCameraViewData (p_class, p_guid)
	local s_Instance = AlternateCameraViewData(p_class) 
 	local className = "AlternateCameraViewData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowFieldOfViewScaling", "bool", s_Instance.allowFieldOfViewScaling)
	self:SendDefault(s_guid,className, "blackDuration", "float", s_Instance.blackDuration)
	self:SendDefault(s_guid,className, "fadeInDuration", "float", s_Instance.fadeInDuration)
	self:SendDefault(s_guid,className, "fadeOutDuration", "float", s_Instance.fadeOutDuration)
	self:SendDefault(s_guid,className, "fadeToBlack", "bool", s_Instance.fadeToBlack)
	self:SendDefault(s_guid,className, "fieldOfView", "float", s_Instance.fieldOfView)
	self:SendDefault(s_guid,className, "fLIREnabled", "bool", s_Instance.fLIREnabled)
	self:SendDefault(s_guid,className, "fovTransitionTime", "float", s_Instance.fovTransitionTime)
	self:SendDefault(s_guid,className, "hud", "HudData", s_Instance.hud)
	self:SendDefault(s_guid,className, "inputSuppression", "InputSuppressionData", s_Instance.inputSuppression)
	self:SendDefault(s_guid,className, "lockMeshToRenderView", "bool", s_Instance.lockMeshToRenderView)
	self:SendDefault(s_guid,className, "maskMeshBlueprint", "CtrRef", s_Instance.maskMeshBlueprint)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "meshOffset", "Vec3", s_Instance.meshOffset)
	self:SendDefault(s_guid,className, "screenExposureAreaScale", "float", s_Instance.screenExposureAreaScale)
	self:SendDefault(s_guid,className, "toggleViewChange", "bool", s_Instance.toggleViewChange)
	self:SendDefault(s_guid,className, "useProfileOptionForToggleViewChange", "bool", s_Instance.useProfileOptionForToggleViewChange)
	self:SendDefault(s_guid,className, "worldSpaceLockEfficiency", "float", s_Instance.worldSpaceLockEfficiency)
end

function Type:AlternateSpawnEntityData (p_class, p_guid)
	local s_Instance = AlternateSpawnEntityData(p_class) 
 	local className = "AlternateSpawnEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "priority", "float", s_Instance.priority)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
end

function Type:AmmoConfigData (p_class, p_guid)
	local s_Instance = AmmoConfigData(p_class) 
 	local className = "AmmoConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammoBagPickupAmount", "int", s_Instance.ammoBagPickupAmount)
	self:SendDefault(s_guid,className, "ammoBagPickupDelayMultiplier", "float", s_Instance.ammoBagPickupDelayMultiplier)
	self:SendDefault(s_guid,className, "ammoPickupMaxAmount", "uint", s_Instance.ammoPickupMaxAmount)
	self:SendDefault(s_guid,className, "ammoPickupMinAmount", "uint", s_Instance.ammoPickupMinAmount)
	self:SendDefault(s_guid,className, "autoReplenishDelay", "float", s_Instance.autoReplenishDelay)
	self:SendDefault(s_guid,className, "autoReplenishMagazine", "bool", s_Instance.autoReplenishMagazine)
	self:SendDefault(s_guid,className, "magazineCapacity", "int", s_Instance.magazineCapacity)
	self:SendDefault(s_guid,className, "numberOfMagazines", "int", s_Instance.numberOfMagazines)
	self:SendDefault(s_guid,className, "traceFrequency", "uint", s_Instance.traceFrequency)
end

function Type:AmmoCrateEntityData (p_class, p_guid)
	local s_Instance = AmmoCrateEntityData(p_class) 
 	local className = "AmmoCrateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enableReplenish", "bool", s_Instance.enableReplenish)
	self:SendDefault(s_guid,className, "marker", "CtrRef", s_Instance.marker)
	self:SendDefault(s_guid,className, "model", "CtrRef", s_Instance.model)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "refillDelay", "float", s_Instance.refillDelay)
end

function Type:AndEntityData (p_class, p_guid)
	local s_Instance = AndEntityData(p_class) 
 	local className = "AndEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "bool", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "bool", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:AngleOfImpactData (p_class, p_guid)
	local s_Instance = AngleOfImpactData(p_class) 
 	local className = "AngleOfImpactData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "zone12Delimiter", "float", s_Instance.zone12Delimiter)
	self:SendDefault(s_guid,className, "zone1Multiplier", "float", s_Instance.zone1Multiplier)
	self:SendDefault(s_guid,className, "zone23Delimiter", "float", s_Instance.zone23Delimiter)
	self:SendDefault(s_guid,className, "zone2Multiplier", "float", s_Instance.zone2Multiplier)
	self:SendDefault(s_guid,className, "zone3Multiplier", "float", s_Instance.zone3Multiplier)
end

function Type:Animated1pOnlyWeaponBinding (p_class, p_guid)
	local s_Instance = Animated1pOnlyWeaponBinding(p_class) 
 	local className = "Animated1pOnlyWeaponBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraFreeWeight", "AntRef", s_Instance.cameraFreeWeight)
	self:SendDefault(s_guid,className, "deploy1P", "AntRef", s_Instance.deploy1P)
	self:SendDefault(s_guid,className, "hideWeapon1p", "AntRef", s_Instance.hideWeapon1p)
	self:SendDefault(s_guid,className, "undeployFinished", "AntRef", s_Instance.undeployFinished)
end

function Type:Animated3pOnlyWeaponBinding (p_class, p_guid)
	local s_Instance = Animated3pOnlyWeaponBinding(p_class) 
 	local className = "Animated3pOnlyWeaponBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deploy3P", "AntRef", s_Instance.deploy3P)
	self:SendDefault(s_guid,className, "hideWeapon3p", "AntRef", s_Instance.hideWeapon3p)
end

function Type:AnimatedCameraData (p_class, p_guid)
	local s_Instance = AnimatedCameraData(p_class) 
 	local className = "AnimatedCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraBone", "string", s_Instance.cameraBone)
	self:SendDefault(s_guid,className, "fovBone", "string", s_Instance.fovBone)
	self:SendDefault(s_guid,className, "skeleton", "CtrRef", s_Instance.skeleton)
end

function Type:AnimatedDriverEntityData (p_class, p_guid)
	local s_Instance = AnimatedDriverEntityData(p_class) 
 	local className = "AnimatedDriverEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delayAnimationWheelTransform", "bool", s_Instance.delayAnimationWheelTransform)
	self:SendDefault(s_guid,className, "inputTransform", "LinearTransform", s_Instance.inputTransform)
	self:SendDefault(s_guid,className, "movementStateStandThreshold", "float", s_Instance.movementStateStandThreshold)
	self:SendDefault(s_guid,className, "pitch", "NormalizeSettings", s_Instance.pitch)
	self:SendDefault(s_guid,className, "roll", "NormalizeSettings", s_Instance.roll)
	self:SendDefault(s_guid,className, "vehicleBoost", "AntRef", s_Instance.vehicleBoost)
	self:SendDefault(s_guid,className, "vehicleBrake", "AntRef", s_Instance.vehicleBrake)
	self:SendDefault(s_guid,className, "vehicleClutch", "AntRef", s_Instance.vehicleClutch)
	self:SendDefault(s_guid,className, "vehicleMovementState", "AntRef", s_Instance.vehicleMovementState)
	self:SendDefault(s_guid,className, "vehicleSpeed", "AntRef", s_Instance.vehicleSpeed)
	self:SendDefault(s_guid,className, "yaw", "NormalizeSettings", s_Instance.yaw)
end

function Type:AnimatedPointCloudAttributeDesc (p_class, p_guid)
	local s_Instance = AnimatedPointCloudAttributeDesc(p_class) 
 	local className = "AnimatedPointCloudAttributeDesc"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dFrameQuantization", "PointCloudAttributeQuantization", s_Instance.dFrameQuantization)
	self:SendDefault(s_guid,className, "iFrameQuantization", "PointCloudAttributeQuantization", s_Instance.iFrameQuantization)
	self:SendDefault(s_guid,className, "usage", "PointCloudAttributeUsage", s_Instance.usage)
end

function Type:AnimatedPointCloudComponentData (p_class, p_guid)
	local s_Instance = AnimatedPointCloudComponentData(p_class) 
 	local className = "AnimatedPointCloudComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "pointCloud", "CtrRef", s_Instance.pointCloud)
	self:SendDefault(s_guid,className, "startPaused", "bool", s_Instance.startPaused)
end

function Type:AnimatedPointCloudEntityData (p_class, p_guid)
	local s_Instance = AnimatedPointCloudEntityData(p_class) 
 	local className = "AnimatedPointCloudEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "pointCloud", "CtrRef", s_Instance.pointCloud)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "startPaused", "bool", s_Instance.startPaused)
end

function Type:AnimatedSkeletonDatabase (p_class, p_guid)
	local s_Instance = AnimatedSkeletonDatabase(p_class) 
 	local className = "AnimatedSkeletonDatabase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "items", "List<AnimatedSkeletonDatabaseItem)>", s_Instance.items)
	self:SendDefault(s_guid,className, "ragdolls", "List<CtrRef)>", s_Instance.ragdolls)
end

function Type:AnimatedSkeletonDatabaseItem (p_class, p_guid)
	local s_Instance = AnimatedSkeletonDatabaseItem(p_class) 
 	local className = "AnimatedSkeletonDatabaseItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
	self:SendDefault(s_guid,className, "headBone", "string", s_Instance.headBone)
	self:SendDefault(s_guid,className, "hipBone", "string", s_Instance.hipBone)
	self:SendDefault(s_guid,className, "names", "List<int)>", s_Instance.names)
	self:SendDefault(s_guid,className, "ragdoll", "CtrRef", s_Instance.ragdoll)
	self:SendDefault(s_guid,className, "ragdollCollision", "CtrRef", s_Instance.ragdollCollision)
	self:SendDefault(s_guid,className, "soldierCollision", "CtrRef", s_Instance.soldierCollision)
	self:SendDefault(s_guid,className, "specialBones", "List<string)>", s_Instance.specialBones)
end

function Type:AnimatedTransformEntityData (p_class, p_guid)
	local s_Instance = AnimatedTransformEntityData(p_class) 
 	local className = "AnimatedTransformEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatable", "AntRef", s_Instance.animatable)
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
	self:SendDefault(s_guid,className, "controller", "AntRef", s_Instance.controller)
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
end

function Type:AnimatedWeaponBinding (p_class, p_guid)
	local s_Instance = AnimatedWeaponBinding(p_class) 
 	local className = "AnimatedWeaponBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "abortVehicleDeploy", "AntRef", s_Instance.abortVehicleDeploy)
	self:SendDefault(s_guid,className, "aIAllowFire", "AntRef", s_Instance.aIAllowFire)
	self:SendDefault(s_guid,className, "aIAltFireFromAnt", "AntRef", s_Instance.aIAltFireFromAnt)
	self:SendDefault(s_guid,className, "aimBody", "AntRef", s_Instance.aimBody)
	self:SendDefault(s_guid,className, "aimBodyWeight", "AntRef", s_Instance.aimBodyWeight)
	self:SendDefault(s_guid,className, "aimingEnabled", "AntRef", s_Instance.aimingEnabled)
	self:SendDefault(s_guid,className, "aimTargetPosBody", "AntRef", s_Instance.aimTargetPosBody)
	self:SendDefault(s_guid,className, "altDeploy", "AntRef", s_Instance.altDeploy)
	self:SendDefault(s_guid,className, "alwaysAimHead", "AntRef", s_Instance.alwaysAimHead)
	self:SendDefault(s_guid,className, "animType", "AntRef", s_Instance.animType)
	self:SendDefault(s_guid,className, "aTType", "AntRef", s_Instance.aTType)
	self:SendDefault(s_guid,className, "bagType", "AntRef", s_Instance.bagType)
	self:SendDefault(s_guid,className, "boltAction", "AntRef", s_Instance.boltAction)
	self:SendDefault(s_guid,className, "breathControl", "AntRef", s_Instance.breathControl)
	self:SendDefault(s_guid,className, "bulletsLeftInGun", "AntRef", s_Instance.bulletsLeftInGun)
	self:SendDefault(s_guid,className, "currentProjectileIndex", "AntRef", s_Instance.currentProjectileIndex)
	self:SendDefault(s_guid,className, "deploy", "AntRef", s_Instance.deploy)
	self:SendDefault(s_guid,className, "deploySpeed", "AntRef", s_Instance.deploySpeed)
	self:SendDefault(s_guid,className, "disableZoomToggleWeight", "AntRef", s_Instance.disableZoomToggleWeight)
	self:SendDefault(s_guid,className, "dispersion", "AntRef", s_Instance.dispersion)
	self:SendDefault(s_guid,className, "fire", "AntRef", s_Instance.fire)
	self:SendDefault(s_guid,className, "fireHoldAndRelease", "AntRef", s_Instance.fireHoldAndRelease)
	self:SendDefault(s_guid,className, "fireModeChanged", "AntRef", s_Instance.fireModeChanged)
	self:SendDefault(s_guid,className, "fireSimple", "AntRef", s_Instance.fireSimple)
	self:SendDefault(s_guid,className, "fireSingle", "AntRef", s_Instance.fireSingle)
	self:SendDefault(s_guid,className, "firstShotSpawned", "AntRef", s_Instance.firstShotSpawned)
	self:SendDefault(s_guid,className, "gunDown", "AntRef", s_Instance.gunDown)
	self:SendDefault(s_guid,className, "hgrType", "AntRef", s_Instance.hgrType)
	self:SendDefault(s_guid,className, "isSprinting", "AntRef", s_Instance.isSprinting)
	self:SendDefault(s_guid,className, "justStartedSprinting", "AntRef", s_Instance.justStartedSprinting)
	self:SendDefault(s_guid,className, "kickBackInIronSight", "AntRef", s_Instance.kickBackInIronSight)
	self:SendDefault(s_guid,className, "lightEnabled", "AntRef", s_Instance.lightEnabled)
	self:SendDefault(s_guid,className, "lMGType", "AntRef", s_Instance.lMGType)
	self:SendDefault(s_guid,className, "lowerGun", "AntRef", s_Instance.lowerGun)
	self:SendDefault(s_guid,className, "meleeAttack", "AntRef", s_Instance.meleeAttack)
	self:SendDefault(s_guid,className, "numberOfBulletsLeftInGun", "AntRef", s_Instance.numberOfBulletsLeftInGun)
	self:SendDefault(s_guid,className, "offsetX", "AntRef", s_Instance.offsetX)
	self:SendDefault(s_guid,className, "offsetY", "AntRef", s_Instance.offsetY)
	self:SendDefault(s_guid,className, "offsetZ", "AntRef", s_Instance.offsetZ)
	self:SendDefault(s_guid,className, "oneHanded", "AntRef", s_Instance.oneHanded)
	self:SendDefault(s_guid,className, "oneHandedAiming", "AntRef", s_Instance.oneHandedAiming)
	self:SendDefault(s_guid,className, "preparingToBash", "AntRef", s_Instance.preparingToBash)
	self:SendDefault(s_guid,className, "pstlType", "AntRef", s_Instance.pstlType)
	self:SendDefault(s_guid,className, "pumpAction", "AntRef", s_Instance.pumpAction)
	self:SendDefault(s_guid,className, "quickSwitch", "AntRef", s_Instance.quickSwitch)
	self:SendDefault(s_guid,className, "quickThrow", "AntRef", s_Instance.quickThrow)
	self:SendDefault(s_guid,className, "quickThrowType", "AntRef", s_Instance.quickThrowType)
	self:SendDefault(s_guid,className, "reload", "AntRef", s_Instance.reload)
	self:SendDefault(s_guid,className, "reloadShotgun", "AntRef", s_Instance.reloadShotgun)
	self:SendDefault(s_guid,className, "rflType", "AntRef", s_Instance.rflType)
	self:SendDefault(s_guid,className, "shgType", "AntRef", s_Instance.shgType)
	self:SendDefault(s_guid,className, "snpType", "AntRef", s_Instance.snpType)
	self:SendDefault(s_guid,className, "triggerZoomGunTwitch", "AntRef", s_Instance.triggerZoomGunTwitch)
	self:SendDefault(s_guid,className, "undeploy", "AntRef", s_Instance.undeploy)
	self:SendDefault(s_guid,className, "unDeploySpeed", "AntRef", s_Instance.unDeploySpeed)
	self:SendDefault(s_guid,className, "weaponActionESIG", "AntRef", s_Instance.weaponActionESIG)
	self:SendDefault(s_guid,className, "weaponChooserSignal", "AntRef", s_Instance.weaponChooserSignal)
	self:SendDefault(s_guid,className, "weaponClassSignal", "AntRef", s_Instance.weaponClassSignal)
	self:SendDefault(s_guid,className, "zoom", "AntRef", s_Instance.zoom)
	self:SendDefault(s_guid,className, "zoomingTime", "AntRef", s_Instance.zoomingTime)
	self:SendDefault(s_guid,className, "zoomInSpeed", "AntRef", s_Instance.zoomInSpeed)
	self:SendDefault(s_guid,className, "zoomOutSpeed", "AntRef", s_Instance.zoomOutSpeed)
	self:SendDefault(s_guid,className, "zoomParameter", "AntRef", s_Instance.zoomParameter)
	self:SendDefault(s_guid,className, "zoomScaleFactor", "AntRef", s_Instance.zoomScaleFactor)
end

function Type:AnimationConfigurationData (p_class, p_guid)
	local s_Instance = AnimationConfigurationData(p_class) 
 	local className = "AnimationConfigurationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shootModuleData", "AnimationConfigurationShootModuleData", s_Instance.shootModuleData)
	self:SendDefault(s_guid,className, "weaponOffsetModuleData", "CtrRef", s_Instance.weaponOffsetModuleData)
	self:SendDefault(s_guid,className, "weaponSpeedModuleData", "CtrRef", s_Instance.weaponSpeedModuleData)
end

function Type:AnimationConfigurationShootModuleData (p_class, p_guid)
	local s_Instance = AnimationConfigurationShootModuleData(p_class) 
 	local className = "AnimationConfigurationShootModuleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "zoomedKickbackFactor", "float", s_Instance.zoomedKickbackFactor)
end

function Type:AnimationControlledStateData (p_class, p_guid)
	local s_Instance = AnimationControlledStateData(p_class) 
 	local className = "AnimationControlledStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "upNormalTolerance", "float", s_Instance.upNormalTolerance)
end

function Type:AnimationDrivenBinding (p_class, p_guid)
	local s_Instance = AnimationDrivenBinding(p_class) 
 	local className = "AnimationDrivenBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enableCollision", "AntRef", s_Instance.enableCollision)
	self:SendDefault(s_guid,className, "velocity", "AntRef", s_Instance.velocity)
end

function Type:AnimationEnumerationChoiceEntityData (p_class, p_guid)
	local s_Instance = AnimationEnumerationChoiceEntityData(p_class) 
 	local className = "AnimationEnumerationChoiceEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:AnimationEnumerationEntityData (p_class, p_guid)
	local s_Instance = AnimationEnumerationEntityData(p_class) 
 	local className = "AnimationEnumerationEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antEnum", "CtrRef", s_Instance.antEnum)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:AnimationSignalEntityData (p_class, p_guid)
	local s_Instance = AnimationSignalEntityData(p_class) 
 	local className = "AnimationSignalEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "continuous", "bool", s_Instance.continuous)
	self:SendDefault(s_guid,className, "floatGameState", "AntRef", s_Instance.floatGameState)
	self:SendDefault(s_guid,className, "intGameState", "AntRef", s_Instance.intGameState)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "reset", "bool", s_Instance.reset)
	self:SendDefault(s_guid,className, "signal", "AntRef", s_Instance.signal)
	self:SendDefault(s_guid,className, "valueFloat", "float", s_Instance.valueFloat)
	self:SendDefault(s_guid,className, "valueInt", "int", s_Instance.valueInt)
end

function Type:AnimationSpawnTemplate (p_class, p_guid)
	local s_Instance = AnimationSpawnTemplate(p_class) 
 	local className = "AnimationSpawnTemplate"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "runStyle", "CtrRef", s_Instance.runStyle)
end

function Type:AnimationTurretRotationComponentData (p_class, p_guid)
	local s_Instance = AnimationTurretRotationComponentData(p_class) 
 	local className = "AnimationTurretRotationComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outputWorldTransform", "bool", s_Instance.outputWorldTransform)
	self:SendDefault(s_guid,className, "rotations", "List<TurretRotationInfo)>", s_Instance.rotations)
	self:SendDefault(s_guid,className, "soldierBaseIndex", "int", s_Instance.soldierBaseIndex)
	self:SendDefault(s_guid,className, "useVehicleWorldTransform", "bool", s_Instance.useVehicleWorldTransform)
end

function Type:AntAnimatableComponentData (p_class, p_guid)
	local s_Instance = AntAnimatableComponentData(p_class) 
 	local className = "AntAnimatableComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationControlledFromStart", "bool", s_Instance.animationControlledFromStart)
	self:SendDefault(s_guid,className, "animationData", "AntAnimationHandlerData", s_Instance.animationData)
	self:SendDefault(s_guid,className, "autoActivate", "bool", s_Instance.autoActivate)
	self:SendDefault(s_guid,className, "forceDisableCulling", "bool", s_Instance.forceDisableCulling)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "subRealm", "fb.SubRealm)", s_Instance.subRealm)
end

function Type:AntAnimatableData (p_class, p_guid)
	local s_Instance = AntAnimatableData(p_class) 
 	local className = "AntAnimatableData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actor", "AntRef", s_Instance.actor)
	self:SendDefault(s_guid,className, "leftHandEffectorDisableOverride", "AntRef", s_Instance.leftHandEffectorDisableOverride)
	self:SendDefault(s_guid,className, "masterSkeletonAsset", "CtrRef", s_Instance.masterSkeletonAsset)
	self:SendDefault(s_guid,className, "proceduralAwareness", "CtrRef", s_Instance.proceduralAwareness)
	self:SendDefault(s_guid,className, "rightHandEffectorDisableOverride", "AntRef", s_Instance.rightHandEffectorDisableOverride)
end

function Type:AntAnimationHandlerData (p_class, p_guid)
	local s_Instance = AntAnimationHandlerData(p_class) 
 	local className = "AntAnimationHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatable", "AntAnimatableData", s_Instance.animatable)
	self:SendDefault(s_guid,className, "antPackageData", "List<CtrRef)>", s_Instance.antPackageData)
	self:SendDefault(s_guid,className, "bonesToMirror", "List<GameplayBone)>", s_Instance.bonesToMirror)
	self:SendDefault(s_guid,className, "enableMasterSlaveCopy", "bool", s_Instance.enableMasterSlaveCopy)
	self:SendDefault(s_guid,className, "isProp", "bool", s_Instance.isProp)
	self:SendDefault(s_guid,className, "lodBinding", "fb.LodBinding)", s_Instance.lodBinding)
	self:SendDefault(s_guid,className, "reportBackFromAnt", "bool", s_Instance.reportBackFromAnt)
	self:SendDefault(s_guid,className, "rootController", "AntRef", s_Instance.rootController)
end

function Type:AntAnimationSetAsset (p_class, p_guid)
	local s_Instance = AntAnimationSetAsset(p_class) 
 	local className = "AntAnimationSetAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actorAssetIndex", "int", s_Instance.actorAssetIndex)
	self:SendDefault(s_guid,className, "allowAnimationCulling", "bool", s_Instance.allowAnimationCulling)
	self:SendDefault(s_guid,className, "clipAssetIndices", "List<int)>", s_Instance.clipAssetIndices)
	self:SendDefault(s_guid,className, "loopingClipAssetIndices", "List<int)>", s_Instance.loopingClipAssetIndices)
	self:SendDefault(s_guid,className, "sceneOpMatrixAssetIndex", "int", s_Instance.sceneOpMatrixAssetIndex)
	self:SendDefault(s_guid,className, "skeletonAsset", "CtrRef", s_Instance.skeletonAsset)
	self:SendDefault(s_guid,className, "useTraj2Ref", "bool", s_Instance.useTraj2Ref)
end

function Type:AntDrivenComponentData (p_class, p_guid)
	local s_Instance = AntDrivenComponentData(p_class) 
 	local className = "AntDrivenComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "characterGameState", "AnimationDrivenBinding", s_Instance.characterGameState)
end

function Type:AntDynamicAvoidanceBinding (p_class, p_guid)
	local s_Instance = AntDynamicAvoidanceBinding(p_class) 
 	local className = "AntDynamicAvoidanceBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceUntilCollision", "AntRef", s_Instance.distanceUntilCollision)
	self:SendDefault(s_guid,className, "normalizedVelocity", "AntRef", s_Instance.normalizedVelocity)
	self:SendDefault(s_guid,className, "speed", "AntRef", s_Instance.speed)
	self:SendDefault(s_guid,className, "timeUntilCollision", "AntRef", s_Instance.timeUntilCollision)
end

function Type:AntEnumeration (p_class, p_guid)
	local s_Instance = AntEnumeration(p_class) 
 	local className = "AntEnumeration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antAsset", "AntRef", s_Instance.antAsset)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:AntEventData (p_class, p_guid)
	local s_Instance = AntEventData(p_class) 
 	local className = "AntEventData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "event", "EventSpec", s_Instance.event)
	self:SendDefault(s_guid,className, "tagId", "int", s_Instance.tagId)
end

function Type:AntEventEntityData (p_class, p_guid)
	local s_Instance = AntEventEntityData(p_class) 
 	local className = "AntEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoActivate", "bool", s_Instance.autoActivate)
	self:SendDefault(s_guid,className, "onEnterEvents", "List<AntEventData)>", s_Instance.onEnterEvents)
	self:SendDefault(s_guid,className, "onLeaveEvents", "List<AntEventData)>", s_Instance.onLeaveEvents)
	self:SendDefault(s_guid,className, "onUpdateEvents", "List<AntEventData)>", s_Instance.onUpdateEvents)
	self:SendDefault(s_guid,className, "sendAsPlayerEvent", "bool", s_Instance.sendAsPlayerEvent)
end

function Type:AntInteractionBinding (p_class, p_guid)
	local s_Instance = AntInteractionBinding(p_class) 
 	local className = "AntInteractionBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "otherAnimatableID", "AntRef", s_Instance.otherAnimatableID)
end

function Type:AntInteractionData (p_class, p_guid)
	local s_Instance = AntInteractionData(p_class) 
 	local className = "AntInteractionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antBindings", "AntInteractionBinding", s_Instance.antBindings)
end

function Type:AntiRollBar (p_class, p_guid)
	local s_Instance = AntiRollBar(p_class) 
 	local className = "AntiRollBar"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "stiffness", "float", s_Instance.stiffness)
	self:SendDefault(s_guid,className, "torqueActivationLimit", "float", s_Instance.torqueActivationLimit)
end

function Type:AntiRollBars (p_class, p_guid)
	local s_Instance = AntiRollBars(p_class) 
 	local className = "AntiRollBars"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "front", "CtrRef", s_Instance.front)
	self:SendDefault(s_guid,className, "rear", "CtrRef", s_Instance.rear)
end

function Type:AntiSpamConfig (p_class, p_guid)
	local s_Instance = AntiSpamConfig(p_class) 
 	local className = "AntiSpamConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "detectionInterval", "float", s_Instance.detectionInterval)
	self:SendDefault(s_guid,className, "detectionIntervalMaxMessageCount", "uint", s_Instance.detectionIntervalMaxMessageCount)
	self:SendDefault(s_guid,className, "notificationSid", "string", s_Instance.notificationSid)
	self:SendDefault(s_guid,className, "secondsBlocked", "uint", s_Instance.secondsBlocked)
	self:SendDefault(s_guid,className, "serverSideMessageCountTolerance", "uint", s_Instance.serverSideMessageCountTolerance)
	self:SendDefault(s_guid,className, "serverSideSecondsBlockedTolerance", "uint", s_Instance.serverSideSecondsBlockedTolerance)
	self:SendDefault(s_guid,className, "stillBlockedSid", "string", s_Instance.stillBlockedSid)
	self:SendDefault(s_guid,className, "warningSound", "CtrRef", s_Instance.warningSound)
end

function Type:AntMemorySettings (p_class, p_guid)
	local s_Instance = AntMemorySettings(p_class) 
 	local className = "AntMemorySettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rTPoolChooserControllers", "int", s_Instance.rTPoolChooserControllers)
	self:SendDefault(s_guid,className, "rTPoolClipControllers", "int", s_Instance.rTPoolClipControllers)
	self:SendDefault(s_guid,className, "rTPoolLayersControllers", "int", s_Instance.rTPoolLayersControllers)
	self:SendDefault(s_guid,className, "rTPoolLoopingControllers", "int", s_Instance.rTPoolLoopingControllers)
	self:SendDefault(s_guid,className, "rTPoolStateflowControllers", "int", s_Instance.rTPoolStateflowControllers)
	self:SendDefault(s_guid,className, "rTPoolStateflowNodeControllers", "int", s_Instance.rTPoolStateflowNodeControllers)
	self:SendDefault(s_guid,className, "rTPoolTransitionControllers", "int", s_Instance.rTPoolTransitionControllers)
	self:SendDefault(s_guid,className, "rTPoolTransparentControllers", "int", s_Instance.rTPoolTransparentControllers)
end

function Type:AntPackageAsset (p_class, p_guid)
	local s_Instance = AntPackageAsset(p_class) 
 	local className = "AntPackageAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chunkSize", "uint", s_Instance.chunkSize)
	self:SendDefault(s_guid,className, "packagingType", "AntPackagingType", s_Instance.packagingType)
	self:SendDefault(s_guid,className, "streamingGuid", "GUID", s_Instance.streamingGuid)
	self:SendDefault(s_guid,className, "win32FileName", "string", s_Instance.win32FileName)
	self:SendDefault(s_guid,className, "xePs3FileName", "string", s_Instance.xePs3FileName)
end

function Type:AntProjectAsset (p_class, p_guid)
	local s_Instance = AntProjectAsset(p_class) 
 	local className = "AntProjectAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antNativeProjectName", "string", s_Instance.antNativeProjectName)
	self:SendDefault(s_guid,className, "packageAssets", "List<CtrRef)>", s_Instance.packageAssets)
	self:SendDefault(s_guid,className, "projectId", "int", s_Instance.projectId)
	self:SendDefault(s_guid,className, "sceneOp", "AntRef", s_Instance.sceneOp)
end

function Type:AntRef (p_class, p_guid)
	local s_Instance = AntRef(p_class) 
 	local className = "AntRef"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assetId", "int", s_Instance.assetId)
end

function Type:AntSettings (p_class, p_guid)
	local s_Instance = AntSettings(p_class) 
 	local className = "AntSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowVariableTickLength", "bool", s_Instance.allowVariableTickLength)
	self:SendDefault(s_guid,className, "blockOnJobs", "bool", s_Instance.blockOnJobs)
	self:SendDefault(s_guid,className, "checkGiantSoldiers", "float", s_Instance.checkGiantSoldiers)
	self:SendDefault(s_guid,className, "clientEmulatesServer", "bool", s_Instance.clientEmulatesServer)
	self:SendDefault(s_guid,className, "detailedCollisionSpeedLimit", "float", s_Instance.detailedCollisionSpeedLimit)
	self:SendDefault(s_guid,className, "disableAILodFeature", "bool", s_Instance.disableAILodFeature)
	self:SendDefault(s_guid,className, "disableAnimManagerSceneOps", "bool", s_Instance.disableAnimManagerSceneOps)
	self:SendDefault(s_guid,className, "disableModelAnimationCulling", "bool", s_Instance.disableModelAnimationCulling)
	self:SendDefault(s_guid,className, "enableDebugLogFile", "bool", s_Instance.enableDebugLogFile)
	self:SendDefault(s_guid,className, "enableJobs", "bool", s_Instance.enableJobs)
	self:SendDefault(s_guid,className, "enablePA", "bool", s_Instance.enablePA)
	self:SendDefault(s_guid,className, "enablePackageCache", "bool", s_Instance.enablePackageCache)
	self:SendDefault(s_guid,className, "enablePoseJobs", "bool", s_Instance.enablePoseJobs)
	self:SendDefault(s_guid,className, "forceLodDistance", "float", s_Instance.forceLodDistance)
	self:SendDefault(s_guid,className, "forcePoseUpdate", "bool", s_Instance.forcePoseUpdate)
	self:SendDefault(s_guid,className, "interpolatePoses", "bool", s_Instance.interpolatePoses)
	self:SendDefault(s_guid,className, "leanSignalClamp", "float", s_Instance.leanSignalClamp)
	self:SendDefault(s_guid,className, "leanSignalScale", "float", s_Instance.leanSignalScale)
	self:SendDefault(s_guid,className, "maxAnimatablesPerPoseJob", "int", s_Instance.maxAnimatablesPerPoseJob)
	self:SendDefault(s_guid,className, "maxInterpolationSlots", "int", s_Instance.maxInterpolationSlots)
	self:SendDefault(s_guid,className, "maxSingleBoneInterpolationSlots", "int", s_Instance.maxSingleBoneInterpolationSlots)
	self:SendDefault(s_guid,className, "reducedInterpolationDistance", "float", s_Instance.reducedInterpolationDistance)
	self:SendDefault(s_guid,className, "runAsHighPriority", "bool", s_Instance.runAsHighPriority)
	self:SendDefault(s_guid,className, "trajectoryInterpolationDistance", "float", s_Instance.trajectoryInterpolationDistance)
	self:SendDefault(s_guid,className, "updateEnable", "bool", s_Instance.updateEnable)
	self:SendDefault(s_guid,className, "updateLoddingEnable", "bool", s_Instance.updateLoddingEnable)
	self:SendDefault(s_guid,className, "useCameraFov", "bool", s_Instance.useCameraFov)
	self:SendDefault(s_guid,className, "useHIK", "bool", s_Instance.useHIK)
	self:SendDefault(s_guid,className, "usePA", "bool", s_Instance.usePA)
	self:SendDefault(s_guid,className, "useWeaponFov", "bool", s_Instance.useWeaponFov)
end

function Type:AntTrackData (p_class, p_guid)
	local s_Instance = AntTrackData(p_class) 
 	local className = "AntTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antTrackItemDatas", "List<CtrRef)>", s_Instance.antTrackItemDatas)
end

function Type:AntTrackItemData (p_class, p_guid)
	local s_Instance = AntTrackItemData(p_class) 
 	local className = "AntTrackItemData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "controller", "AntRef", s_Instance.controller)
	self:SendDefault(s_guid,className, "numTicks", "uint", s_Instance.numTicks)
	self:SendDefault(s_guid,className, "resumeAtEnd", "bool", s_Instance.resumeAtEnd)
	self:SendDefault(s_guid,className, "sequenceTrackIndex", "int", s_Instance.sequenceTrackIndex)
	self:SendDefault(s_guid,className, "startTime", "int", s_Instance.startTime)
end

function Type:AreaProximityEntityData (p_class, p_guid)
	local s_Instance = AreaProximityEntityData(p_class) 
 	local className = "AreaProximityEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "proximityDistance", "float", s_Instance.proximityDistance)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "updatePass", "fb.UpdatePass)", s_Instance.updatePass)
end

function Type:AreaTriggerEntityData (p_class, p_guid)
	local s_Instance = AreaTriggerEntityData(p_class) 
 	local className = "AreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "geometryTransform", "LinearTransform", s_Instance.geometryTransform)
	self:SendDefault(s_guid,className, "include", "AreaTriggerInclude", s_Instance.include)
	self:SendDefault(s_guid,className, "insideAreaEventRepeatTime", "float", s_Instance.insideAreaEventRepeatTime)
	self:SendDefault(s_guid,className, "oneInsideAreaEventPerSoldier", "bool", s_Instance.oneInsideAreaEventPerSoldier)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "resetOnEnable", "bool", s_Instance.resetOnEnable)
	self:SendDefault(s_guid,className, "triggerOnLeaveOnDeath", "bool", s_Instance.triggerOnLeaveOnDeath)
	self:SendDefault(s_guid,className, "triggerOnLeaveOnDisable", "bool", s_Instance.triggerOnLeaveOnDisable)
	self:SendDefault(s_guid,className, "triggerOnlyOnLeave", "bool", s_Instance.triggerOnlyOnLeave)
	self:SendDefault(s_guid,className, "useCharacterEntity", "bool", s_Instance.useCharacterEntity)
end

function Type:AreaValueTeam (p_class, p_guid)
	local s_Instance = AreaValueTeam(p_class) 
 	local className = "AreaValueTeam"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "areaValue", "int", s_Instance.areaValue)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
end

function Type:ArmamentData (p_class, p_guid)
	local s_Instance = ArmamentData(p_class) 
 	local className = "ArmamentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isAntiAircraft", "bool", s_Instance.isAntiAircraft)
	self:SendDefault(s_guid,className, "threatLength", "int", s_Instance.threatLength)
	self:SendDefault(s_guid,className, "turretData", "CtrRef", s_Instance.turretData)
end

function Type:ArtilleryStrikeEntityData (p_class, p_guid)
	local s_Instance = ArtilleryStrikeEntityData(p_class) 
 	local className = "ArtilleryStrikeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "durationOfArtilleryStrike", "float", s_Instance.durationOfArtilleryStrike)
	self:SendDefault(s_guid,className, "followSoldier", "bool", s_Instance.followSoldier)
	self:SendDefault(s_guid,className, "heightOffsetWhenFollowingSoldier", "float", s_Instance.heightOffsetWhenFollowingSoldier)
	self:SendDefault(s_guid,className, "maxDelayBetweenProjectiles", "float", s_Instance.maxDelayBetweenProjectiles)
	self:SendDefault(s_guid,className, "maxDelayBetweenStrikes", "float", s_Instance.maxDelayBetweenStrikes)
	self:SendDefault(s_guid,className, "maxProjectilesPerStrike", "uint", s_Instance.maxProjectilesPerStrike)
	self:SendDefault(s_guid,className, "minDelayBetweenProjectiles", "float", s_Instance.minDelayBetweenProjectiles)
	self:SendDefault(s_guid,className, "minDelayBetweenStrikes", "float", s_Instance.minDelayBetweenStrikes)
	self:SendDefault(s_guid,className, "minProjectilesPerStrike", "uint", s_Instance.minProjectilesPerStrike)
	self:SendDefault(s_guid,className, "minRadiusToSoldier", "float", s_Instance.minRadiusToSoldier)
	self:SendDefault(s_guid,className, "missileData", "CtrRef", s_Instance.missileData)
	self:SendDefault(s_guid,className, "missileSpawnRadius", "float", s_Instance.missileSpawnRadius)
	self:SendDefault(s_guid,className, "numberOfStrikes", "uint", s_Instance.numberOfStrikes)
	self:SendDefault(s_guid,className, "radiusWhenFollowingSoldier", "float", s_Instance.radiusWhenFollowingSoldier)
end

function Type:ArtilleryStrikeWeaponData (p_class, p_guid)
	local s_Instance = ArtilleryStrikeWeaponData(p_class) 
 	local className = "ArtilleryStrikeWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingCameraFov", "float", s_Instance.aimingCameraFov)
	self:SendDefault(s_guid,className, "aimingCameraHeight", "float", s_Instance.aimingCameraHeight)
	self:SendDefault(s_guid,className, "aimingCameraOffset", "float", s_Instance.aimingCameraOffset)
	self:SendDefault(s_guid,className, "camera", "CtrRef", s_Instance.camera)
	self:SendDefault(s_guid,className, "delayBeforeAimingCamera", "float", s_Instance.delayBeforeAimingCamera)
	self:SendDefault(s_guid,className, "enableCameraRotation", "bool", s_Instance.enableCameraRotation)
	self:SendDefault(s_guid,className, "enableProjectileTrails", "bool", s_Instance.enableProjectileTrails)
	self:SendDefault(s_guid,className, "fireCameraTime", "float", s_Instance.fireCameraTime)
	self:SendDefault(s_guid,className, "fireProjectileFromWeapon", "bool", s_Instance.fireProjectileFromWeapon)
	self:SendDefault(s_guid,className, "increaseSpawnHeightWithDistance", "bool", s_Instance.increaseSpawnHeightWithDistance)
	self:SendDefault(s_guid,className, "maxRandomSpawnHeight", "float", s_Instance.maxRandomSpawnHeight)
	self:SendDefault(s_guid,className, "maxStrikeDistance", "float", s_Instance.maxStrikeDistance)
	self:SendDefault(s_guid,className, "spawnHeight", "float", s_Instance.spawnHeight)
	self:SendDefault(s_guid,className, "spawnHeightMultiplier", "float", s_Instance.spawnHeightMultiplier)
	self:SendDefault(s_guid,className, "strikeCameraFov", "float", s_Instance.strikeCameraFov)
	self:SendDefault(s_guid,className, "strikeCameraHeight", "float", s_Instance.strikeCameraHeight)
	self:SendDefault(s_guid,className, "strikeCameraOffset", "float", s_Instance.strikeCameraOffset)
	self:SendDefault(s_guid,className, "strikeCameraTime", "float", s_Instance.strikeCameraTime)
	self:SendDefault(s_guid,className, "strikeRadius", "float", s_Instance.strikeRadius)
	self:SendDefault(s_guid,className, "validMaxAngle", "float", s_Instance.validMaxAngle)
	self:SendDefault(s_guid,className, "validMaxDistance", "float", s_Instance.validMaxDistance)
	self:SendDefault(s_guid,className, "validMinDistance", "float", s_Instance.validMinDistance)
end

function Type:Asset (p_class, p_guid)
	local s_Instance = Asset(p_class) 
 	local className = "Asset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:AssetAabbs (p_class, p_guid)
	local s_Instance = AssetAabbs(p_class) 
 	local className = "AssetAabbs"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "partAabb", "List<AxisAlignedBox)>", s_Instance.partAabb)
end

function Type:AudioCurve (p_class, p_guid)
	local s_Instance = AudioCurve(p_class) 
 	local className = "AudioCurve"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "curveType", "AudioCurveType", s_Instance.curveType)
	self:SendDefault(s_guid,className, "points", "List<AudioCurvePoint)>", s_Instance.points)
end

function Type:AudioCurvePoint (p_class, p_guid)
	local s_Instance = AudioCurvePoint(p_class) 
 	local className = "AudioCurvePoint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "k", "float", s_Instance.k)
	self:SendDefault(s_guid,className, "x", "float", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "float", s_Instance.y)
end

function Type:AudioGraphData (p_class, p_guid)
	local s_Instance = AudioGraphData(p_class) 
 	local className = "AudioGraphData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nodes", "List<CtrRef)>", s_Instance.nodes)
	self:SendDefault(s_guid,className, "publicAssetParameters", "List<CtrRef)>", s_Instance.publicAssetParameters)
	self:SendDefault(s_guid,className, "publicEvents", "List<CtrRef)>", s_Instance.publicEvents)
	self:SendDefault(s_guid,className, "publicParameters", "List<CtrRef)>", s_Instance.publicParameters)
	self:SendDefault(s_guid,className, "publicValueCount", "ushort", s_Instance.publicValueCount)
	self:SendDefault(s_guid,className, "valueCount", "ushort", s_Instance.valueCount)
end

function Type:AudioGraphNodePort (p_class, p_guid)
	local s_Instance = AudioGraphNodePort(p_class) 
 	local className = "AudioGraphNodePort"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isConnected", "bool", s_Instance.isConnected)
	self:SendDefault(s_guid,className, "unconnectedValue", "float", s_Instance.unconnectedValue)
	self:SendDefault(s_guid,className, "valueIndex", "ushort", s_Instance.valueIndex)
end

function Type:AudioGraphParameter (p_class, p_guid)
	local s_Instance = AudioGraphParameter(p_class) 
 	local className = "AudioGraphParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "float", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
	self:SendDefault(s_guid,className, "valueIndex", "ushort", s_Instance.valueIndex)
end

function Type:AudioLanguage (p_class, p_guid)
	local s_Instance = AudioLanguage(p_class) 
 	local className = "AudioLanguage"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "languageMapping", "LanguageFormat", s_Instance.languageMapping)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:AudioLanguageMapping (p_class, p_guid)
	local s_Instance = AudioLanguageMapping(p_class) 
 	local className = "AudioLanguageMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
end

function Type:AudioLanguagesDependancyObject (p_class, p_guid)
	local s_Instance = AudioLanguagesDependancyObject(p_class) 
 	local className = "AudioLanguagesDependancyObject"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "audioLanguages", "List<CtrRef)>", s_Instance.audioLanguages)
end

function Type:AudioLanguageSetting (p_class, p_guid)
	local s_Instance = AudioLanguageSetting(p_class) 
 	local className = "AudioLanguageSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "displayName", "string", s_Instance.displayName)
	self:SendDefault(s_guid,className, "isDefault", "bool", s_Instance.isDefault)
	self:SendDefault(s_guid,className, "mappings", "List<AudioLanguageMapping)>", s_Instance.mappings)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
end

function Type:AudioObstructionMaterialInfo (p_class, p_guid)
	local s_Instance = AudioObstructionMaterialInfo(p_class) 
 	local className = "AudioObstructionMaterialInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gainReduction", "float", s_Instance.gainReduction)
	self:SendDefault(s_guid,className, "material", "CtrRef", s_Instance.material)
	self:SendDefault(s_guid,className, "obstructionFrequency", "float", s_Instance.obstructionFrequency)
end

function Type:AudioSettings (p_class, p_guid)
	local s_Instance = AudioSettings(p_class) 
 	local className = "AudioSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "audioCoreCpuLoadLimit", "float", s_Instance.audioCoreCpuLoadLimit)
	self:SendDefault(s_guid,className, "audioCoreCpuLoadRecovery", "float", s_Instance.audioCoreCpuLoadRecovery)
	self:SendDefault(s_guid,className, "audioCoreMaxMixJobThreadCount", "int", s_Instance.audioCoreMaxMixJobThreadCount)
	self:SendDefault(s_guid,className, "audioCoreMinProcStageVoicesToGoWide", "int", s_Instance.audioCoreMinProcStageVoicesToGoWide)
	self:SendDefault(s_guid,className, "audioCoreMixJobThreadCount", "int", s_Instance.audioCoreMixJobThreadCount)
	self:SendDefault(s_guid,className, "audioCoreMultipleMixJobsEnabled", "bool", s_Instance.audioCoreMultipleMixJobsEnabled)
	self:SendDefault(s_guid,className, "audioCoreThread", "int", s_Instance.audioCoreThread)
	self:SendDefault(s_guid,className, "delayLineAllocSize", "uint", s_Instance.delayLineAllocSize)
	self:SendDefault(s_guid,className, "maxAudibleSoundCount", "uint", s_Instance.maxAudibleSoundCount)
	self:SendDefault(s_guid,className, "reverbAllocSize", "uint", s_Instance.reverbAllocSize)
	self:SendDefault(s_guid,className, "waveCacheHeadroom", "uint", s_Instance.waveCacheHeadroom)
	self:SendDefault(s_guid,className, "waveCacheMaxReadActiveCount", "uint", s_Instance.waveCacheMaxReadActiveCount)
	self:SendDefault(s_guid,className, "waveCacheMaxReadIssueCount", "uint", s_Instance.waveCacheMaxReadIssueCount)
	self:SendDefault(s_guid,className, "waveCachePruneTimeLimit", "float", s_Instance.waveCachePruneTimeLimit)
	self:SendDefault(s_guid,className, "waveCacheRsxPruneTimeLimit", "float", s_Instance.waveCacheRsxPruneTimeLimit)
	self:SendDefault(s_guid,className, "waveCacheRsxSize", "uint", s_Instance.waveCacheRsxSize)
	self:SendDefault(s_guid,className, "waveCacheSize", "uint", s_Instance.waveCacheSize)
end

function Type:AudioSystemAsset (p_class, p_guid)
	local s_Instance = AudioSystemAsset(p_class) 
 	local className = "AudioSystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultLanguage", "CtrRef", s_Instance.defaultLanguage)
	self:SendDefault(s_guid,className, "defaultWave", "CtrRef", s_Instance.defaultWave)
	self:SendDefault(s_guid,className, "dopplerFactor", "float", s_Instance.dopplerFactor)
	self:SendDefault(s_guid,className, "languages", "List<CtrRef)>", s_Instance.languages)
	self:SendDefault(s_guid,className, "languageSettings", "List<CtrRef)>", s_Instance.languageSettings)
	self:SendDefault(s_guid,className, "masterPatch", "CtrRef", s_Instance.masterPatch)
	self:SendDefault(s_guid,className, "mixerSystem", "CtrRef", s_Instance.mixerSystem)
	self:SendDefault(s_guid,className, "sampleRate", "uint", s_Instance.sampleRate)
	self:SendDefault(s_guid,className, "scopes", "List<CtrRef)>", s_Instance.scopes)
	self:SendDefault(s_guid,className, "scopeSetups", "List<CtrRef)>", s_Instance.scopeSetups)
	self:SendDefault(s_guid,className, "scopeStrategies", "List<CtrRef)>", s_Instance.scopeStrategies)
	self:SendDefault(s_guid,className, "soundSpeed", "float", s_Instance.soundSpeed)
	self:SendDefault(s_guid,className, "streamPools", "List<CtrRef)>", s_Instance.streamPools)
	self:SendDefault(s_guid,className, "tests", "CtrRef", s_Instance.tests)
end

function Type:AutoAimData (p_class, p_guid)
	local s_Instance = AutoAimData(p_class) 
 	local className = "AutoAimData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoAimInnerBoxExtends", "Vec3", s_Instance.autoAimInnerBoxExtends)
	self:SendDefault(s_guid,className, "autoAimInnerBoxOffset", "Vec3", s_Instance.autoAimInnerBoxOffset)
	self:SendDefault(s_guid,className, "autoAimOuterBoxExtends", "Vec3", s_Instance.autoAimOuterBoxExtends)
	self:SendDefault(s_guid,className, "autoAimOuterBoxOffset", "Vec3", s_Instance.autoAimOuterBoxOffset)
	self:SendDefault(s_guid,className, "poseType", "CharacterPoseType", s_Instance.poseType)
end

function Type:AutoSquadEntityData (p_class, p_guid)
	local s_Instance = AutoSquadEntityData(p_class) 
 	local className = "AutoSquadEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "squadId", "fb.SquadId)", s_Instance.squadId)
end

function Type:AutoTeamEntityData (p_class, p_guid)
	local s_Instance = AutoTeamEntityData(p_class) 
 	local className = "AutoTeamEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoBalance", "bool", s_Instance.autoBalance)
	self:SendDefault(s_guid,className, "forceIntoSquad", "bool", s_Instance.forceIntoSquad)
	self:SendDefault(s_guid,className, "playerCountNeededToAutoBalance", "uint", s_Instance.playerCountNeededToAutoBalance)
	self:SendDefault(s_guid,className, "rotateTeamOnNewRound", "bool", s_Instance.rotateTeamOnNewRound)
	self:SendDefault(s_guid,className, "teamAssignMode", "fb.TeamAssignMode)", s_Instance.teamAssignMode)
	self:SendDefault(s_guid,className, "teamDifferenceToAutoBalance", "uint", s_Instance.teamDifferenceToAutoBalance)
end

function Type:AvengerScoringHandlerData (p_class, p_guid)
	local s_Instance = AvengerScoringHandlerData(p_class) 
 	local className = "AvengerScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "avengerKillTimeout", "float", s_Instance.avengerKillTimeout)
end

function Type:AwardableTreeBase (p_class, p_guid)
	local s_Instance = AwardableTreeBase(p_class) 
 	local className = "AwardableTreeBase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "generalCriteria", "List<CtrRef)>", s_Instance.generalCriteria)
	self:SendDefault(s_guid,className, "generalStatistics", "bool", s_Instance.generalStatistics)
	self:SendDefault(s_guid,className, "statCategoryTreeCollection", "CtrRef", s_Instance.statCategoryTreeCollection)
end

function Type:AwardData (p_class, p_guid)
	local s_Instance = AwardData(p_class) 
 	local className = "AwardData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeOnCreation", "bool", s_Instance.activeOnCreation)
	self:SendDefault(s_guid,className, "bucket", "ScoringBucket", s_Instance.bucket)
	self:SendDefault(s_guid,className, "code", "string", s_Instance.code)
	self:SendDefault(s_guid,className, "criteria", "List<CtrRef)>", s_Instance.criteria)
	self:SendDefault(s_guid,className, "dependencies", "List<CriteriaAward)>", s_Instance.dependencies)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "filteredChildAwards", "List<CtrRef)>", s_Instance.filteredChildAwards)
	self:SendDefault(s_guid,className, "group", "AwardGroup", s_Instance.group)
	self:SendDefault(s_guid,className, "imageFancyName", "string", s_Instance.imageFancyName)
	self:SendDefault(s_guid,className, "imageName", "string", s_Instance.imageName)
	self:SendDefault(s_guid,className, "imageSmallName", "string", s_Instance.imageSmallName)
	self:SendDefault(s_guid,className, "kitAssociation", "AwardKitAssociation", s_Instance.kitAssociation)
	self:SendDefault(s_guid,className, "licenses", "List<string)>", s_Instance.licenses)
	self:SendDefault(s_guid,className, "maxRepetitions", "uint", s_Instance.maxRepetitions)
	self:SendDefault(s_guid,className, "multiplicity", "StatsMultiplicity", s_Instance.multiplicity)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "parentAward", "CtrRef", s_Instance.parentAward)
	self:SendDefault(s_guid,className, "repeat", "AwardType", s_Instance.repeatValue)
	self:SendDefault(s_guid,className, "score", "float", s_Instance.score)
	self:SendDefault(s_guid,className, "soundName", "string", s_Instance.soundName)
	self:SendDefault(s_guid,className, "unlockGates", "CtrRef", s_Instance.unlockGates)
	self:SendDefault(s_guid,className, "unlockInfos", "List<BasicUnlockInfo)>", s_Instance.unlockInfos)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:AwardDataTree (p_class, p_guid)
	local s_Instance = AwardDataTree(p_class) 
 	local className = "AwardDataTree"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "filteredAwards", "List<CtrRef)>", s_Instance.filteredAwards)
end

function Type:AwardHeaderData (p_class, p_guid)
	local s_Instance = AwardHeaderData(p_class) 
 	local className = "AwardHeaderData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "group", "AwardGroup", s_Instance.group)
	self:SendDefault(s_guid,className, "multiplicity", "StatsMultiplicity", s_Instance.multiplicity)
end

function Type:AwardStarData (p_class, p_guid)
	local s_Instance = AwardStarData(p_class) 
 	local className = "AwardStarData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "starTemplate", "CtrRef", s_Instance.starTemplate)
end

function Type:AwardStarNameData (p_class, p_guid)
	local s_Instance = AwardStarNameData(p_class) 
 	local className = "AwardStarNameData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameInstances", "List<AwardStarNameInstance)>", s_Instance.nameInstances)
end

function Type:AwardStarNameInstance (p_class, p_guid)
	local s_Instance = AwardStarNameInstance(p_class) 
 	local className = "AwardStarNameInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "CtrRef", s_Instance.category)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:AwardStatus (p_class, p_guid)
	local s_Instance = AwardStatus(p_class) 
 	local className = "AwardStatus"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "code", "string", s_Instance.code)
	self:SendDefault(s_guid,className, "counters", "List<CounterStatus)>", s_Instance.counters)
	self:SendDefault(s_guid,className, "currentValue", "uint", s_Instance.currentValue)
	self:SendDefault(s_guid,className, "isCounting", "bool", s_Instance.isCounting)
	self:SendDefault(s_guid,className, "originalValue", "uint", s_Instance.originalValue)
end

function Type:AxesInputActionData (p_class, p_guid)
	local s_Instance = AxesInputActionData(p_class) 
 	local className = "AxesInputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "axis", "InputDeviceAxes", s_Instance.axis)
	self:SendDefault(s_guid,className, "normalizeInput", "bool", s_Instance.normalizeInput)
end

function Type:BandPassFir64NodeData (p_class, p_guid)
	local s_Instance = BandPassFir64NodeData(p_class) 
 	local className = "BandPassFir64NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bandwidth", "AudioGraphNodePort", s_Instance.bandwidth)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:BandPassIir2NodeData (p_class, p_guid)
	local s_Instance = BandPassIir2NodeData(p_class) 
 	local className = "BandPassIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bandwidth", "AudioGraphNodePort", s_Instance.bandwidth)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:BangerEntityData (p_class, p_guid)
	local s_Instance = BangerEntityData(p_class) 
 	local className = "BangerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "destructiblePartCount", "uint", s_Instance.destructiblePartCount)
	self:SendDefault(s_guid,className, "explosion", "CtrRef", s_Instance.explosion)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "scales", "List<float)>", s_Instance.scales)
	self:SendDefault(s_guid,className, "timeToLive", "float", s_Instance.timeToLive)
	self:SendDefault(s_guid,className, "useVariableNetworkFrequency", "bool", s_Instance.useVariableNetworkFrequency)
end

function Type:BangerSpawnImpulseParams (p_class, p_guid)
	local s_Instance = BangerSpawnImpulseParams(p_class) 
 	local className = "BangerSpawnImpulseParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularDamping", "float", s_Instance.angularDamping)
	self:SendDefault(s_guid,className, "linearDamping", "float", s_Instance.linearDamping)
	self:SendDefault(s_guid,className, "maxHorizontalAngle", "float", s_Instance.maxHorizontalAngle)
	self:SendDefault(s_guid,className, "maxStrength", "float", s_Instance.maxStrength)
	self:SendDefault(s_guid,className, "maxVerticalAngle", "float", s_Instance.maxVerticalAngle)
	self:SendDefault(s_guid,className, "minHorizontalAngle", "float", s_Instance.minHorizontalAngle)
	self:SendDefault(s_guid,className, "minStrength", "float", s_Instance.minStrength)
	self:SendDefault(s_guid,className, "minVerticalAngle", "float", s_Instance.minVerticalAngle)
	self:SendDefault(s_guid,className, "waterStrengthModifier", "float", s_Instance.waterStrengthModifier)
end

function Type:BaseEmitterData (p_class, p_guid)
	local s_Instance = BaseEmitterData(p_class) 
 	local className = "BaseEmitterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emitterAsset", "CtrRef", s_Instance.emitterAsset)
end

function Type:BasicUnlockInfo (p_class, p_guid)
	local s_Instance = BasicUnlockInfo(p_class) 
 	local className = "BasicUnlockInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalLicenses", "List<string)>", s_Instance.additionalLicenses)
	self:SendDefault(s_guid,className, "identifier", "uint", s_Instance.identifier)
	self:SendDefault(s_guid,className, "licenses", "List<string)>", s_Instance.licenses)
	self:SendDefault(s_guid,className, "stringId", "string", s_Instance.stringId)
	self:SendDefault(s_guid,className, "unlockGuid", "GUID", s_Instance.unlockGuid)
	self:SendDefault(s_guid,className, "unlockScore", "uint", s_Instance.unlockScore)
end

function Type:BehaviourData (p_class, p_guid)
	local s_Instance = BehaviourData(p_class) 
 	local className = "BehaviourData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:BehaviourTemplateData (p_class, p_guid)
	local s_Instance = BehaviourTemplateData(p_class) 
 	local className = "BehaviourTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accuracyIncreaseTime", "float", s_Instance.accuracyIncreaseTime)
	self:SendDefault(s_guid,className, "accuracyModifier", "float", s_Instance.accuracyModifier)
	self:SendDefault(s_guid,className, "accuracyModifierVsNonHumans", "float", s_Instance.accuracyModifierVsNonHumans)
	self:SendDefault(s_guid,className, "altAttackProbability", "float", s_Instance.altAttackProbability)
	self:SendDefault(s_guid,className, "alwaysInFirePose", "CoverFireType", s_Instance.alwaysInFirePose)
	self:SendDefault(s_guid,className, "alwaysStrafeToCoversBehindMe", "bool", s_Instance.alwaysStrafeToCoversBehindMe)
	self:SendDefault(s_guid,className, "alwaysStrafeToCoversWithinDistance", "float", s_Instance.alwaysStrafeToCoversWithinDistance)
	self:SendDefault(s_guid,className, "alwaysStrafeToFirstCover", "bool", s_Instance.alwaysStrafeToFirstCover)
	self:SendDefault(s_guid,className, "alwaysUpdate", "bool", s_Instance.alwaysUpdate)
	self:SendDefault(s_guid,className, "attackUrgencyModifier", "float", s_Instance.attackUrgencyModifier)
	self:SendDefault(s_guid,className, "canMeleeFromScriptedCover", "bool", s_Instance.canMeleeFromScriptedCover)
	self:SendDefault(s_guid,className, "chargeSurpriseFlankedDistance", "float", s_Instance.chargeSurpriseFlankedDistance)
	self:SendDefault(s_guid,className, "chargeSurpriseNearDistance", "float", s_Instance.chargeSurpriseNearDistance)
	self:SendDefault(s_guid,className, "chargeSurpriseVelocity", "float", s_Instance.chargeSurpriseVelocity)
	self:SendDefault(s_guid,className, "closeRangeAccuracyDistanceOverride", "float", s_Instance.closeRangeAccuracyDistanceOverride)
	self:SendDefault(s_guid,className, "coverSwitchTime", "FloatRangeDefaultZero", s_Instance.coverSwitchTime)
	self:SendDefault(s_guid,className, "coverWaitTime", "FloatRange", s_Instance.coverWaitTime)
	self:SendDefault(s_guid,className, "crouchProbability", "float", s_Instance.crouchProbability)
	self:SendDefault(s_guid,className, "disableMissileGravity", "bool", s_Instance.disableMissileGravity)
	self:SendDefault(s_guid,className, "explosiveObjectChance", "float", s_Instance.explosiveObjectChance)
	self:SendDefault(s_guid,className, "fireBlindOutBurstCount", "UIntRange", s_Instance.fireBlindOutBurstCount)
	self:SendDefault(s_guid,className, "fireBlindOutChance", "float", s_Instance.fireBlindOutChance)
	self:SendDefault(s_guid,className, "fireBlindOverBurstCount", "UIntRange", s_Instance.fireBlindOverBurstCount)
	self:SendDefault(s_guid,className, "fireBlindOverChance", "float", s_Instance.fireBlindOverChance)
	self:SendDefault(s_guid,className, "fireGrenadeBlindOverBurstCount", "UIntRange", s_Instance.fireGrenadeBlindOverBurstCount)
	self:SendDefault(s_guid,className, "fireGrenadeBlindOverChance", "float", s_Instance.fireGrenadeBlindOverChance)
	self:SendDefault(s_guid,className, "fireGrenadeStepOutBurstCount", "UIntRange", s_Instance.fireGrenadeStepOutBurstCount)
	self:SendDefault(s_guid,className, "fireGrenadeStepOutChance", "float", s_Instance.fireGrenadeStepOutChance)
	self:SendDefault(s_guid,className, "fireLeanBurstCount", "UIntRange", s_Instance.fireLeanBurstCount)
	self:SendDefault(s_guid,className, "fireLeanChance", "float", s_Instance.fireLeanChance)
	self:SendDefault(s_guid,className, "fireLmgBurstCount", "UIntRange", s_Instance.fireLmgBurstCount)
	self:SendDefault(s_guid,className, "fireLmgChance", "float", s_Instance.fireLmgChance)
	self:SendDefault(s_guid,className, "fireOverBurstCount", "UIntRange", s_Instance.fireOverBurstCount)
	self:SendDefault(s_guid,className, "fireOverChance", "float", s_Instance.fireOverChance)
	self:SendDefault(s_guid,className, "fireStepOutBurstCount", "UIntRange", s_Instance.fireStepOutBurstCount)
	self:SendDefault(s_guid,className, "fireStepOutChance", "float", s_Instance.fireStepOutChance)
	self:SendDefault(s_guid,className, "fireStepOutFireFromHipBurstCount", "UIntRange", s_Instance.fireStepOutFireFromHipBurstCount)
	self:SendDefault(s_guid,className, "fireStepOutFireFromHipChance", "float", s_Instance.fireStepOutFireFromHipChance)
	self:SendDefault(s_guid,className, "fireStepOutSlowBurstCount", "UIntRange", s_Instance.fireStepOutSlowBurstCount)
	self:SendDefault(s_guid,className, "fireStepOutSlowChance", "float", s_Instance.fireStepOutSlowChance)
	self:SendDefault(s_guid,className, "fireStepOutStandToCrouchBurstCount", "UIntRange", s_Instance.fireStepOutStandToCrouchBurstCount)
	self:SendDefault(s_guid,className, "fireStepOutStandToCrouchChance", "float", s_Instance.fireStepOutStandToCrouchChance)
	self:SendDefault(s_guid,className, "fireStepOutUrgentBurstCount", "UIntRange", s_Instance.fireStepOutUrgentBurstCount)
	self:SendDefault(s_guid,className, "fireStepOutUrgentChance", "float", s_Instance.fireStepOutUrgentChance)
	self:SendDefault(s_guid,className, "fireStyleTimeout", "float", s_Instance.fireStyleTimeout)
	self:SendDefault(s_guid,className, "investigateStopDelay", "float", s_Instance.investigateStopDelay)
	self:SendDefault(s_guid,className, "investigateVisualTestDist", "float", s_Instance.investigateVisualTestDist)
	self:SendDefault(s_guid,className, "leaveVehicleOnSearchAndDestroyOrder", "bool", s_Instance.leaveVehicleOnSearchAndDestroyOrder)
	self:SendDefault(s_guid,className, "maxAngleDiffForBlindFire", "float", s_Instance.maxAngleDiffForBlindFire)
	self:SendDefault(s_guid,className, "maxAttackBursts", "uint", s_Instance.maxAttackBursts)
	self:SendDefault(s_guid,className, "maxSuppressTime", "float", s_Instance.maxSuppressTime)
	self:SendDefault(s_guid,className, "meleeMaxTime", "float", s_Instance.meleeMaxTime)
	self:SendDefault(s_guid,className, "meleeProbability", "float", s_Instance.meleeProbability)
	self:SendDefault(s_guid,className, "meleeRange", "float", s_Instance.meleeRange)
	self:SendDefault(s_guid,className, "minAttackBursts", "uint", s_Instance.minAttackBursts)
	self:SendDefault(s_guid,className, "readinessReactionTimeMultiplier", "float", s_Instance.readinessReactionTimeMultiplier)
	self:SendDefault(s_guid,className, "reloadBelowPercent", "float", s_Instance.reloadBelowPercent)
	self:SendDefault(s_guid,className, "shotAtFireBlindOutChance", "float", s_Instance.shotAtFireBlindOutChance)
	self:SendDefault(s_guid,className, "shotAtFireBlindOverChance", "float", s_Instance.shotAtFireBlindOverChance)
	self:SendDefault(s_guid,className, "shotAtFireGrenadeBlindOverChance", "float", s_Instance.shotAtFireGrenadeBlindOverChance)
	self:SendDefault(s_guid,className, "shouldFireThroughSmoke", "bool", s_Instance.shouldFireThroughSmoke)
	self:SendDefault(s_guid,className, "soldierMovementVolumeOverride", "float", s_Instance.soldierMovementVolumeOverride)
	self:SendDefault(s_guid,className, "standProbability", "float", s_Instance.standProbability)
	self:SendDefault(s_guid,className, "stepBackIfBeingShot", "bool", s_Instance.stepBackIfBeingShot)
	self:SendDefault(s_guid,className, "strafeToCoverProbablity", "float", s_Instance.strafeToCoverProbablity)
	self:SendDefault(s_guid,className, "suppressIndirectProbability", "float", s_Instance.suppressIndirectProbability)
	self:SendDefault(s_guid,className, "suppressingBurstCount", "int", s_Instance.suppressingBurstCount)
	self:SendDefault(s_guid,className, "suppressingBurstCountMax", "int", s_Instance.suppressingBurstCountMax)
	self:SendDefault(s_guid,className, "suppressingBurstCountMin", "int", s_Instance.suppressingBurstCountMin)
	self:SendDefault(s_guid,className, "targetDangerFactor", "float", s_Instance.targetDangerFactor)
	self:SendDefault(s_guid,className, "targetDistanceFactor", "float", s_Instance.targetDistanceFactor)
	self:SendDefault(s_guid,className, "targetIsAttackingFactor", "float", s_Instance.targetIsAttackingFactor)
	self:SendDefault(s_guid,className, "targetStrengthFactor", "float", s_Instance.targetStrengthFactor)
	self:SendDefault(s_guid,className, "turnAgainstTargetDistance", "float", s_Instance.turnAgainstTargetDistance)
	self:SendDefault(s_guid,className, "useShotAtSettings", "bool", s_Instance.useShotAtSettings)
end

function Type:BFAISettingsData (p_class, p_guid)
	local s_Instance = BFAISettingsData(p_class) 
 	local className = "BFAISettingsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "combatConstants", "CtrRef", s_Instance.combatConstants)
	self:SendDefault(s_guid,className, "followConstants", "CtrRef", s_Instance.followConstants)
	self:SendDefault(s_guid,className, "movementConstants", "CtrRef", s_Instance.movementConstants)
	self:SendDefault(s_guid,className, "searchAndDestroyConstants", "CtrRef", s_Instance.searchAndDestroyConstants)
	self:SendDefault(s_guid,className, "turretControlConstants", "CtrRef", s_Instance.turretControlConstants)
end

function Type:BFOrderEntityData (p_class, p_guid)
	local s_Instance = BFOrderEntityData(p_class) 
 	local className = "BFOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forbiddenToFire", "bool", s_Instance.forbiddenToFire)
end

function Type:BFServerConfiguration (p_class, p_guid)
	local s_Instance = BFServerConfiguration(p_class) 
 	local className = "BFServerConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "schedules", "List<BFServerConfigurationSchedule)>", s_Instance.schedules)
end

function Type:BFServerConfigurationData (p_class, p_guid)
	local s_Instance = BFServerConfigurationData(p_class) 
 	local className = "BFServerConfigurationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "licenses", "string", s_Instance.licenses)
	self:SendDefault(s_guid,className, "scoreMultiplier", "uint", s_Instance.scoreMultiplier)
end

function Type:BFServerConfigurationSchedule (p_class, p_guid)
	local s_Instance = BFServerConfigurationSchedule(p_class) 
 	local className = "BFServerConfigurationSchedule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "BFServerConfigurationData", s_Instance.data)
	self:SendDefault(s_guid,className, "levels", "List<string)>", s_Instance.levels)
	self:SendDefault(s_guid,className, "licenses", "List<string)>", s_Instance.licenses)
end

function Type:BFServerSettings (p_class, p_guid)
	local s_Instance = BFServerSettings(p_class) 
 	local className = "BFServerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoBalance", "bool", s_Instance.autoBalance)
	self:SendDefault(s_guid,className, "bannerUrl", "string", s_Instance.bannerUrl)
	self:SendDefault(s_guid,className, "cTFRoundTimeModifier", "float", s_Instance.cTFRoundTimeModifier)
	self:SendDefault(s_guid,className, "deathmatchFriendZoneFallbackCount", "int", s_Instance.deathmatchFriendZoneFallbackCount)
	self:SendDefault(s_guid,className, "defaultVoiceChannel", "VoiceChannel", s_Instance.defaultVoiceChannel)
	self:SendDefault(s_guid,className, "forceTeamForPlayerTag", "string", s_Instance.forceTeamForPlayerTag)
	self:SendDefault(s_guid,className, "forceTeamForPlayerTagTeam", "int", s_Instance.forceTeamForPlayerTagTeam)
	self:SendDefault(s_guid,className, "gameMod", "string", s_Instance.gameMod)
	self:SendDefault(s_guid,className, "gameSize", "uint", s_Instance.gameSize)
	self:SendDefault(s_guid,className, "gunMasterWeaponsPresetIndex", "uint", s_Instance.gunMasterWeaponsPresetIndex)
	self:SendDefault(s_guid,className, "isKillerCameraEnabled", "bool", s_Instance.isKillerCameraEnabled)
	self:SendDefault(s_guid,className, "isManDownRotationEnabled", "bool", s_Instance.isManDownRotationEnabled)
	self:SendDefault(s_guid,className, "kickAPlayerOnVIPJoin", "bool", s_Instance.kickAPlayerOnVIPJoin)
	self:SendDefault(s_guid,className, "mapSequencerEnabled", "bool", s_Instance.mapSequencerEnabled)
	self:SendDefault(s_guid,className, "noInteractivityBanRoundCount", "uint", s_Instance.noInteractivityBanRoundCount)
	self:SendDefault(s_guid,className, "noInteractivityThresholdLimit", "float", s_Instance.noInteractivityThresholdLimit)
	self:SendDefault(s_guid,className, "noInteractivityTimeoutTime", "float", s_Instance.noInteractivityTimeoutTime)
	self:SendDefault(s_guid,className, "overrideAutoBalance", "bool", s_Instance.overrideAutoBalance)
	self:SendDefault(s_guid,className, "overrideServerConfigurationStartTime", "string", s_Instance.overrideServerConfigurationStartTime)
	self:SendDefault(s_guid,className, "pingSite", "string", s_Instance.pingSite)
	self:SendDefault(s_guid,className, "premiumStatus", "bool", s_Instance.premiumStatus)
	self:SendDefault(s_guid,className, "punkBusterVersion", "string", s_Instance.punkBusterVersion)
	self:SendDefault(s_guid,className, "roundLockdownCountdown", "int", s_Instance.roundLockdownCountdown)
	self:SendDefault(s_guid,className, "roundMaxPlayerCount", "int", s_Instance.roundMaxPlayerCount)
	self:SendDefault(s_guid,className, "roundMinPlayerCount", "int", s_Instance.roundMinPlayerCount)
	self:SendDefault(s_guid,className, "roundRestartCountdown", "int", s_Instance.roundRestartCountdown)
	self:SendDefault(s_guid,className, "roundWarmupTimeout", "int", s_Instance.roundWarmupTimeout)
	self:SendDefault(s_guid,className, "serverAdministrationMapRotation", "string", s_Instance.serverAdministrationMapRotation)
	self:SendDefault(s_guid,className, "serverAdministrationMapRotationInformation", "string", s_Instance.serverAdministrationMapRotationInformation)
	self:SendDefault(s_guid,className, "serverAdministrationRoundsPerMap", "uint", s_Instance.serverAdministrationRoundsPerMap)
	self:SendDefault(s_guid,className, "serverAdministrationSettings", "string", s_Instance.serverAdministrationSettings)
	self:SendDefault(s_guid,className, "serverConfigurationRefreshInterval", "int", s_Instance.serverConfigurationRefreshInterval)
	self:SendDefault(s_guid,className, "serverDescription", "string", s_Instance.serverDescription)
	self:SendDefault(s_guid,className, "serverMessage", "string", s_Instance.serverMessage)
	self:SendDefault(s_guid,className, "serverPreset", "string", s_Instance.serverPreset)
	self:SendDefault(s_guid,className, "spectators", "string", s_Instance.spectators)
	self:SendDefault(s_guid,className, "teamKillCountForKick", "uint", s_Instance.teamKillCountForKick)
	self:SendDefault(s_guid,className, "teamKillKickForBan", "uint", s_Instance.teamKillKickForBan)
	self:SendDefault(s_guid,className, "teamKillValueDecreasePerSecond", "float", s_Instance.teamKillValueDecreasePerSecond)
	self:SendDefault(s_guid,className, "teamKillValueForKick", "float", s_Instance.teamKillValueForKick)
	self:SendDefault(s_guid,className, "teamKillValueIncrease", "float", s_Instance.teamKillValueIncrease)
	self:SendDefault(s_guid,className, "teamSwitchImbalanceLimit", "uint", s_Instance.teamSwitchImbalanceLimit)
end

function Type:BFTargetEvaluatorComponentData (p_class, p_guid)
	local s_Instance = BFTargetEvaluatorComponentData(p_class) 
 	local className = "BFTargetEvaluatorComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
end

function Type:BigWorldSetting (p_class, p_guid)
	local s_Instance = BigWorldSetting(p_class) 
 	local className = "BigWorldSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxDelayTimeInMinutes", "float", s_Instance.maxDelayTimeInMinutes)
	self:SendDefault(s_guid,className, "maxDistance", "int", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "minDelayTimeInMinutes", "float", s_Instance.minDelayTimeInMinutes)
	self:SendDefault(s_guid,className, "minDistance", "int", s_Instance.minDistance)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:BigWorldSettingsAsset (p_class, p_guid)
	local s_Instance = BigWorldSettingsAsset(p_class) 
 	local className = "BigWorldSettingsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "List<CtrRef)>", s_Instance.settings)
end

function Type:BinaryLogicNode (p_class, p_guid)
	local s_Instance = BinaryLogicNode(p_class) 
 	local className = "BinaryLogicNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSourceInfo", "UIDataSourceInfo", s_Instance.dataSourceInfo)
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:BinaryOption (p_class, p_guid)
	local s_Instance = BinaryOption(p_class) 
 	local className = "BinaryOption"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:BlazeCreateGameParameters (p_class, p_guid)
	local s_Instance = BlazeCreateGameParameters(p_class) 
 	local className = "BlazeCreateGameParameters"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "base", "MatchmakingCreateGameParameters", s_Instance.base)
end

function Type:BlazePresenceBackendData (p_class, p_guid)
	local s_Instance = BlazePresenceBackendData(p_class) 
 	local className = "BlazePresenceBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "matchmakingSessions", "List<CtrRef)>", s_Instance.matchmakingSessions)
	self:SendDefault(s_guid,className, "useDemanglerService", "bool", s_Instance.useDemanglerService)
end

function Type:BlazeServerBackendData (p_class, p_guid)
	local s_Instance = BlazeServerBackendData(p_class) 
 	local className = "BlazeServerBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "configUrl", "OnlineEnvironmentConsoleUrl", s_Instance.configUrl)
	self:SendDefault(s_guid,className, "createParameters", "BlazeCreateGameParameters", s_Instance.createParameters)
end

function Type:BlueprintAndVariationPair (p_class, p_guid)
	local s_Instance = BlueprintAndVariationPair(p_class) 
 	local className = "BlueprintAndVariationPair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseAsset", "CtrRef", s_Instance.baseAsset)
	self:SendDefault(s_guid,className, "variation", "CtrRef", s_Instance.variation)
end

function Type:BlueprintBundle (p_class, p_guid)
	local s_Instance = BlueprintBundle(p_class) 
 	local className = "BlueprintBundle"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blueprint", "CtrRef", s_Instance.blueprint)
	self:SendDefault(s_guid,className, "registryContainer", "CtrRef", s_Instance.registryContainer)
end

function Type:BlueprintBundleMetadata (p_class, p_guid)
	local s_Instance = BlueprintBundleMetadata(p_class) 
 	local className = "BlueprintBundleMetadata"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blueprintName", "string", s_Instance.blueprintName)
	self:SendDefault(s_guid,className, "bundleName", "string", s_Instance.bundleName)
	self:SendDefault(s_guid,className, "bundlePathName", "string", s_Instance.bundlePathName)
end

function Type:BlueprintBundleMetadataContainer (p_class, p_guid)
	local s_Instance = BlueprintBundleMetadataContainer(p_class) 
 	local className = "BlueprintBundleMetadataContainer"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "items", "List<CtrRef)>", s_Instance.items)
end

function Type:BlueprintBundleSelectorEntityData (p_class, p_guid)
	local s_Instance = BlueprintBundleSelectorEntityData(p_class) 
 	local className = "BlueprintBundleSelectorEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blueprintSelector", "CtrRef", s_Instance.blueprintSelector)
end

function Type:BlueprintBundleStateLogicEntityData (p_class, p_guid)
	local s_Instance = BlueprintBundleStateLogicEntityData(p_class) 
 	local className = "BlueprintBundleStateLogicEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bundleNames", "List<string)>", s_Instance.bundleNames)
end

function Type:BlueprintContainerItem (p_class, p_guid)
	local s_Instance = BlueprintContainerItem(p_class) 
 	local className = "BlueprintContainerItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "metadata", "CtrRef", s_Instance.metadata)
end

function Type:BlurEffectData (p_class, p_guid)
	local s_Instance = BlurEffectData(p_class) 
 	local className = "BlurEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bulletFalloffSpeed", "float", s_Instance.bulletFalloffSpeed)
	self:SendDefault(s_guid,className, "bulletStrength", "float", s_Instance.bulletStrength)
	self:SendDefault(s_guid,className, "dispersionStrength", "float", s_Instance.dispersionStrength)
	self:SendDefault(s_guid,className, "dispersionThreshhold", "float", s_Instance.dispersionThreshhold)
	self:SendDefault(s_guid,className, "explosionFalloffSpeed", "float", s_Instance.explosionFalloffSpeed)
	self:SendDefault(s_guid,className, "explosionStrength", "float", s_Instance.explosionStrength)
end

function Type:BoatFloatPhysicsData (p_class, p_guid)
	local s_Instance = BoatFloatPhysicsData(p_class) 
 	local className = "BoatFloatPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frontRatio", "float", s_Instance.frontRatio)
end

function Type:BoltActionData (p_class, p_guid)
	local s_Instance = BoltActionData(p_class) 
 	local className = "BoltActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boltActionDelay", "float", s_Instance.boltActionDelay)
	self:SendDefault(s_guid,className, "boltActionTime", "float", s_Instance.boltActionTime)
	self:SendDefault(s_guid,className, "forceBoltActionOnFireTrigger", "bool", s_Instance.forceBoltActionOnFireTrigger)
	self:SendDefault(s_guid,className, "holdBoltActionUntilFireRelease", "bool", s_Instance.holdBoltActionUntilFireRelease)
	self:SendDefault(s_guid,className, "holdBoltActionUntilZoomRelease", "bool", s_Instance.holdBoltActionUntilZoomRelease)
	self:SendDefault(s_guid,className, "returnToZoomAfterBoltAction", "bool", s_Instance.returnToZoomAfterBoltAction)
	self:SendDefault(s_guid,className, "unZoomOnBoltAction", "bool", s_Instance.unZoomOnBoltAction)
end

function Type:BoneCollisionComponentData (p_class, p_guid)
	local s_Instance = BoneCollisionComponentData(p_class) 
 	local className = "BoneCollisionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "skeletonCollisionData", "CtrRef", s_Instance.skeletonCollisionData)
end

function Type:BoneCollisionData (p_class, p_guid)
	local s_Instance = BoneCollisionData(p_class) 
 	local className = "BoneCollisionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationHitReactionType", "HitReactionType", s_Instance.animationHitReactionType)
	self:SendDefault(s_guid,className, "boneAxis", "int", s_Instance.boneAxis)
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
	self:SendDefault(s_guid,className, "capsuleLength", "float", s_Instance.capsuleLength)
	self:SendDefault(s_guid,className, "capsuleOffset", "Vec3", s_Instance.capsuleOffset)
	self:SendDefault(s_guid,className, "capsuleRadius", "float", s_Instance.capsuleRadius)
	self:SendDefault(s_guid,className, "deactivateIfBehindWall", "bool", s_Instance.deactivateIfBehindWall)
	self:SendDefault(s_guid,className, "debugDrawColor", "Vec4", s_Instance.debugDrawColor)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "maxPitch", "PitchModifier", s_Instance.maxPitch)
	self:SendDefault(s_guid,className, "minPitch", "PitchModifier", s_Instance.minPitch)
	self:SendDefault(s_guid,className, "usePhysicsRotation", "bool", s_Instance.usePhysicsRotation)
	self:SendDefault(s_guid,className, "validInHiLod", "bool", s_Instance.validInHiLod)
	self:SendDefault(s_guid,className, "validInLowLod", "bool", s_Instance.validInLowLod)
end

function Type:BoneFakePhysicsData (p_class, p_guid)
	local s_Instance = BoneFakePhysicsData(p_class) 
 	local className = "BoneFakePhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneId", "int", s_Instance.boneId)
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
	self:SendDefault(s_guid,className, "fakePhysics", "CtrRef", s_Instance.fakePhysics)
end

function Type:BoolEntityData (p_class, p_guid)
	local s_Instance = BoolEntityData(p_class) 
 	local className = "BoolEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "bool", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:BoolHubEntityData (p_class, p_guid)
	local s_Instance = BoolHubEntityData(p_class) 
 	local className = "BoolHubEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputCount", "int", s_Instance.inputCount)
	self:SendDefault(s_guid,className, "inputSelect", "int", s_Instance.inputSelect)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:BoolPropertyTrackData (p_class, p_guid)
	local s_Instance = BoolPropertyTrackData(p_class) 
 	local className = "BoolPropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<bool)>", s_Instance.values)
end

function Type:BoolRecordingData (p_class, p_guid)
	local s_Instance = BoolRecordingData(p_class) 
 	local className = "BoolRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<bool)>", s_Instance.values)
end

function Type:BoolShaderParameter (p_class, p_guid)
	local s_Instance = BoolShaderParameter(p_class) 
 	local className = "BoolShaderParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "value", "bool", s_Instance.value)
end

function Type:BoolToEventEntityData (p_class, p_guid)
	local s_Instance = BoolToEventEntityData(p_class) 
 	local className = "BoolToEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "initalEvent", "bool", s_Instance.initalEvent)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "value", "bool", s_Instance.value)
end

function Type:BoolUnlockValuePair (p_class, p_guid)
	local s_Instance = BoolUnlockValuePair(p_class) 
 	local className = "BoolUnlockValuePair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "bool", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "unlockedValue", "bool", s_Instance.unlockedValue)
end

function Type:Boost (p_class, p_guid)
	local s_Instance = Boost(p_class) 
 	local className = "Boost"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accelerationScale", "float", s_Instance.accelerationScale)
	self:SendDefault(s_guid,className, "crawlStrength", "float", s_Instance.crawlStrength)
	self:SendDefault(s_guid,className, "dissipationTime", "float", s_Instance.dissipationTime)
	self:SendDefault(s_guid,className, "forwardStrength", "float", s_Instance.forwardStrength)
	self:SendDefault(s_guid,className, "recoveryTime", "float", s_Instance.recoveryTime)
	self:SendDefault(s_guid,className, "reverseStrength", "float", s_Instance.reverseStrength)
end

function Type:BotPriorityConfigData (p_class, p_guid)
	local s_Instance = BotPriorityConfigData(p_class) 
 	local className = "BotPriorityConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angleOffset", "float", s_Instance.angleOffset)
	self:SendDefault(s_guid,className, "appliesToDecisions", "bool", s_Instance.appliesToDecisions)
	self:SendDefault(s_guid,className, "appliesToExecution", "bool", s_Instance.appliesToExecution)
	self:SendDefault(s_guid,className, "debugColor", "Vec3", s_Instance.debugColor)
	self:SendDefault(s_guid,className, "distance", "float", s_Instance.distance)
	self:SendDefault(s_guid,className, "period", "int", s_Instance.period)
end

function Type:BoxEvaluatorData (p_class, p_guid)
	local s_Instance = BoxEvaluatorData(p_class) 
 	local className = "BoxEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dimensions", "Vec3", s_Instance.dimensions)
	self:SendDefault(s_guid,className, "pivot", "Vec3", s_Instance.pivot)
end

function Type:BreakableControllerComponentData (p_class, p_guid)
	local s_Instance = BreakableControllerComponentData(p_class) 
 	local className = "BreakableControllerComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "breakablePartCount", "uint", s_Instance.breakablePartCount)
	self:SendDefault(s_guid,className, "networkIdCount", "uint", s_Instance.networkIdCount)
end

function Type:BreakableModelEntityData (p_class, p_guid)
	local s_Instance = BreakableModelEntityData(p_class) 
 	local className = "BreakableModelEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneCount", "uint", s_Instance.boneCount)
	self:SendDefault(s_guid,className, "decalVolumeScaleFactor", "float", s_Instance.decalVolumeScaleFactor)
	self:SendDefault(s_guid,className, "decalVolumeShader", "CtrRef", s_Instance.decalVolumeShader)
	self:SendDefault(s_guid,className, "edgeModelLightMapData", "CtrRef", s_Instance.edgeModelLightMapData)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
end

function Type:BreakablePartComponentData (p_class, p_guid)
	local s_Instance = BreakablePartComponentData(p_class) 
 	local className = "BreakablePartComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collapsable", "bool", s_Instance.collapsable)
	self:SendDefault(s_guid,className, "destroyNearbyStaticEntities", "bool", s_Instance.destroyNearbyStaticEntities)
	self:SendDefault(s_guid,className, "healthPercentage", "uint", s_Instance.healthPercentage)
end

function Type:BreakableRuinComponentData (p_class, p_guid)
	local s_Instance = BreakableRuinComponentData(p_class) 
 	local className = "BreakableRuinComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ruinModel", "CtrRef", s_Instance.ruinModel)
end

function Type:BreathControlData (p_class, p_guid)
	local s_Instance = BreathControlData(p_class) 
 	local className = "BreathControlData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "breathControlPenaltyMultiplier", "float", s_Instance.breathControlPenaltyMultiplier)
	self:SendDefault(s_guid,className, "breathControlPenaltyTimeout", "float", s_Instance.breathControlPenaltyTimeout)
	self:SendDefault(s_guid,className, "breathControlReleaseTime", "float", s_Instance.breathControlReleaseTime)
	self:SendDefault(s_guid,className, "breathControlTime", "float", s_Instance.breathControlTime)
end

function Type:BulletEntityData (p_class, p_guid)
	local s_Instance = BulletEntityData(p_class) 
 	local className = "BulletEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageFalloffEndDistance", "float", s_Instance.damageFalloffEndDistance)
	self:SendDefault(s_guid,className, "damageFalloffStartDistance", "float", s_Instance.damageFalloffStartDistance)
	self:SendDefault(s_guid,className, "detonationTimeVariation", "float", s_Instance.detonationTimeVariation)
	self:SendDefault(s_guid,className, "distributeDamageOverTime", "float", s_Instance.distributeDamageOverTime)
	self:SendDefault(s_guid,className, "dudExplosion", "CtrRef", s_Instance.dudExplosion)
	self:SendDefault(s_guid,className, "endDamage", "float", s_Instance.endDamage)
	self:SendDefault(s_guid,className, "firstFrameTravelDistance", "float", s_Instance.firstFrameTravelDistance)
	self:SendDefault(s_guid,className, "flyBySound", "CtrRef", s_Instance.flyBySound)
	self:SendDefault(s_guid,className, "flyBySoundRadius", "float", s_Instance.flyBySoundRadius)
	self:SendDefault(s_guid,className, "flyBySoundSpeed", "float", s_Instance.flyBySoundSpeed)
	self:SendDefault(s_guid,className, "gravity", "float", s_Instance.gravity)
	self:SendDefault(s_guid,className, "hasVehicleDetonation", "bool", s_Instance.hasVehicleDetonation)
	self:SendDefault(s_guid,className, "impactImpulse", "float", s_Instance.impactImpulse)
	self:SendDefault(s_guid,className, "instantHit", "bool", s_Instance.instantHit)
	self:SendDefault(s_guid,className, "stamina", "float", s_Instance.stamina)
	self:SendDefault(s_guid,className, "startDamage", "float", s_Instance.startDamage)
	self:SendDefault(s_guid,className, "stopTrailEffectOnUnspawn", "bool", s_Instance.stopTrailEffectOnUnspawn)
	self:SendDefault(s_guid,className, "timeToArmExplosion", "float", s_Instance.timeToArmExplosion)
	self:SendDefault(s_guid,className, "vehicleDetonationActivationDelay", "float", s_Instance.vehicleDetonationActivationDelay)
	self:SendDefault(s_guid,className, "vehicleDetonationRadius", "float", s_Instance.vehicleDetonationRadius)
end

function Type:BulletHitInfo (p_class, p_guid)
	local s_Instance = BulletHitInfo(p_class) 
 	local className = "BulletHitInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneType", "int", s_Instance.boneType)
	self:SendDefault(s_guid,className, "direction", "Vec3", s_Instance.direction)
	self:SendDefault(s_guid,className, "shooterPlayerId", "int", s_Instance.shooterPlayerId)
	self:SendDefault(s_guid,className, "spawnPosition", "Vec3", s_Instance.spawnPosition)
	self:SendDefault(s_guid,className, "weaponType", "AntHitReactionWeaponType", s_Instance.weaponType)
	self:SendDefault(s_guid,className, "weaponUnlockAsset", "CtrRef", s_Instance.weaponUnlockAsset)
end

function Type:BurstLimit (p_class, p_guid)
	local s_Instance = BurstLimit(p_class) 
 	local className = "BurstLimit"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "int", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "int", s_Instance.min)
end

function Type:BusNodeData (p_class, p_guid)
	local s_Instance = BusNodeData(p_class) 
 	local className = "BusNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "vuPlugin", "SoundGraphPluginRef", s_Instance.vuPlugin)
end

function Type:CameraActionData (p_class, p_guid)
	local s_Instance = CameraActionData(p_class) 
 	local className = "CameraActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionMode", "CameraMovementActionMode", s_Instance.actionMode)
end

function Type:CameraBinding (p_class, p_guid)
	local s_Instance = CameraBinding(p_class) 
 	local className = "CameraBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forceRender1pInForeground", "AntRef", s_Instance.forceRender1pInForeground)
	self:SendDefault(s_guid,className, "render1pInBackground", "AntRef", s_Instance.render1pInBackground)
end

function Type:CameraComponentData (p_class, p_guid)
	local s_Instance = CameraComponentData(p_class) 
 	local className = "CameraComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alternateView", "CtrRef", s_Instance.alternateView)
	self:SendDefault(s_guid,className, "alternateViewEnabled", "bool", s_Instance.alternateViewEnabled)
	self:SendDefault(s_guid,className, "camera", "CtrRef", s_Instance.camera)
	self:SendDefault(s_guid,className, "cameraSoundData", "CtrRef", s_Instance.cameraSoundData)
	self:SendDefault(s_guid,className, "cameraTransitionPos", "Vec3", s_Instance.cameraTransitionPos)
	self:SendDefault(s_guid,className, "cameraTransitionTime", "float", s_Instance.cameraTransitionTime)
	self:SendDefault(s_guid,className, "enableCameraMesh", "bool", s_Instance.enableCameraMesh)
	self:SendDefault(s_guid,className, "fieldOfView", "float", s_Instance.fieldOfView)
	self:SendDefault(s_guid,className, "forceFieldOfView", "float", s_Instance.forceFieldOfView)
	self:SendDefault(s_guid,className, "freezeHeight", "float", s_Instance.freezeHeight)
	self:SendDefault(s_guid,className, "ignoreOwnerOrientation", "bool", s_Instance.ignoreOwnerOrientation)
	self:SendDefault(s_guid,className, "isFirstPerson", "bool", s_Instance.isFirstPerson)
	self:SendDefault(s_guid,className, "meshParentComponentNumber", "uint", s_Instance.meshParentComponentNumber)
	self:SendDefault(s_guid,className, "receiveImpulsesAsThirdPerson", "bool", s_Instance.receiveImpulsesAsThirdPerson)
	self:SendDefault(s_guid,className, "regularView", "RegularCameraViewData", s_Instance.regularView)
	self:SendDefault(s_guid,className, "soldierAnimatedCamera", "SoldierAnimatedCameraData", s_Instance.soldierAnimatedCamera)
	self:SendDefault(s_guid,className, "stanceData", "StanceCameraData", s_Instance.stanceData)
	self:SendDefault(s_guid,className, "useCameraTransition", "bool", s_Instance.useCameraTransition)
end

function Type:CameraComponentSoundData (p_class, p_guid)
	local s_Instance = CameraComponentSoundData(p_class) 
 	local className = "CameraComponentSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "switchToAlternateViewSound", "CtrRef", s_Instance.switchToAlternateViewSound)
	self:SendDefault(s_guid,className, "switchToNormalViewSound", "CtrRef", s_Instance.switchToNormalViewSound)
end

function Type:CameraData (p_class, p_guid)
	local s_Instance = CameraData(p_class) 
 	local className = "CameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fadeTime", "float", s_Instance.fadeTime)
	self:SendDefault(s_guid,className, "fadeWaitTime", "float", s_Instance.fadeWaitTime)
	self:SendDefault(s_guid,className, "nearPlane", "float", s_Instance.nearPlane)
	self:SendDefault(s_guid,className, "occlusionRayOffset", "Vec3", s_Instance.occlusionRayOffset)
	self:SendDefault(s_guid,className, "preFadeTime", "float", s_Instance.preFadeTime)
	self:SendDefault(s_guid,className, "shadowViewDistanceScale", "float", s_Instance.shadowViewDistanceScale)
	self:SendDefault(s_guid,className, "shakeFactor", "float", s_Instance.shakeFactor)
	self:SendDefault(s_guid,className, "soundListenerRadius", "float", s_Instance.soundListenerRadius)
	self:SendDefault(s_guid,className, "soundOcclusion", "float", s_Instance.soundOcclusion)
	self:SendDefault(s_guid,className, "stayFadedWhileStreaming", "bool", s_Instance.stayFadedWhileStreaming)
	self:SendDefault(s_guid,className, "viewFx", "CtrRef", s_Instance.viewFx)
end

function Type:CameraEnterAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = CameraEnterAreaTriggerEntityData(p_class) 
 	local className = "CameraEnterAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "timeTreshold", "float", s_Instance.timeTreshold)
	self:SendDefault(s_guid,className, "updatePass", "fb.UpdatePass)", s_Instance.updatePass)
end

function Type:CameraEntityBaseData (p_class, p_guid)
	local s_Instance = CameraEntityBaseData(p_class) 
 	local className = "CameraEntityBaseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "nameId", "string", s_Instance.nameId)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
end

function Type:CameraEntityData (p_class, p_guid)
	local s_Instance = CameraEntityData(p_class) 
 	local className = "CameraEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fov", "float", s_Instance.fov)
end

function Type:CameraLeapData (p_class, p_guid)
	local s_Instance = CameraLeapData(p_class) 
 	local className = "CameraLeapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fovModifier", "float", s_Instance.fovModifier)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:CameraLoosePartPhysicsData (p_class, p_guid)
	local s_Instance = CameraLoosePartPhysicsData(p_class) 
 	local className = "CameraLoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:CameraParamsComponentData (p_class, p_guid)
	local s_Instance = CameraParamsComponentData(p_class) 
 	local className = "CameraParamsComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nearPlane", "float", s_Instance.nearPlane)
	self:SendDefault(s_guid,className, "sunShadowmapViewDistance", "float", s_Instance.sunShadowmapViewDistance)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
end

function Type:CameraProximityEvaluatorData (p_class, p_guid)
	local s_Instance = CameraProximityEvaluatorData(p_class) 
 	local className = "CameraProximityEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forwardOffset", "float", s_Instance.forwardOffset)
	self:SendDefault(s_guid,className, "innerRadius", "float", s_Instance.innerRadius)
	self:SendDefault(s_guid,className, "innerRadiusDirection", "Vec3", s_Instance.innerRadiusDirection)
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "size", "Vec3", s_Instance.size)
end

function Type:CameraRecoilData (p_class, p_guid)
	local s_Instance = CameraRecoilData(p_class) 
 	local className = "CameraRecoilData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "springConstant", "float", s_Instance.springConstant)
	self:SendDefault(s_guid,className, "springDamping", "float", s_Instance.springDamping)
	self:SendDefault(s_guid,className, "springMinThresholdAngle", "float", s_Instance.springMinThresholdAngle)
end

function Type:CameraShakeNodeData (p_class, p_guid)
	local s_Instance = CameraShakeNodeData(p_class) 
 	local className = "CameraShakeNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pitch", "AudioGraphNodePort", s_Instance.pitch)
	self:SendDefault(s_guid,className, "roll", "AudioGraphNodePort", s_Instance.roll)
	self:SendDefault(s_guid,className, "yaw", "AudioGraphNodePort", s_Instance.yaw)
end

function Type:CameraSineCurveData (p_class, p_guid)
	local s_Instance = CameraSineCurveData(p_class) 
 	local className = "CameraSineCurveData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "float", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "frequency", "float", s_Instance.frequency)
	self:SendDefault(s_guid,className, "phaseShift", "float", s_Instance.phaseShift)
end

function Type:CannedAnimationBinding (p_class, p_guid)
	local s_Instance = CannedAnimationBinding(p_class) 
 	local className = "CannedAnimationBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actorIndex", "AntRef", s_Instance.actorIndex)
	self:SendDefault(s_guid,className, "advanceScenario", "AntRef", s_Instance.advanceScenario)
	self:SendDefault(s_guid,className, "blendValue", "AntRef", s_Instance.blendValue)
	self:SendDefault(s_guid,className, "enteredLoop", "AntRef", s_Instance.enteredLoop)
	self:SendDefault(s_guid,className, "exitCannedAnimation", "AntRef", s_Instance.exitCannedAnimation)
	self:SendDefault(s_guid,className, "externalTime", "AntRef", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "levelIndex", "AntRef", s_Instance.levelIndex)
	self:SendDefault(s_guid,className, "partIndex", "AntRef", s_Instance.partIndex)
	self:SendDefault(s_guid,className, "scenarioIndex", "AntRef", s_Instance.scenarioIndex)
	self:SendDefault(s_guid,className, "triggerCannedAnimation", "AntRef", s_Instance.triggerCannedAnimation)
end

function Type:CannedScenarioEntityData (p_class, p_guid)
	local s_Instance = CannedScenarioEntityData(p_class) 
 	local className = "CannedScenarioEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alwaysClearEntitySpaceWhenInScenario", "bool", s_Instance.alwaysClearEntitySpaceWhenInScenario)
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "cannedAnimBinding", "CannedAnimationBinding", s_Instance.cannedAnimBinding)
end

function Type:CapturePointEntityData (p_class, p_guid)
	local s_Instance = CapturePointEntityData(p_class) 
 	local className = "CapturePointEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "addedMultiplierPerPlayer", "float", s_Instance.addedMultiplierPerPlayer)
	self:SendDefault(s_guid,className, "areaValue", "int", s_Instance.areaValue)
	self:SendDefault(s_guid,className, "areaValues", "List<AreaValueTeam)>", s_Instance.areaValues)
	self:SendDefault(s_guid,className, "capturableType", "fb.CapturableType)", s_Instance.capturableType)
	self:SendDefault(s_guid,className, "capturePoint", "CtrRef", s_Instance.capturePoint)
	self:SendDefault(s_guid,className, "captureRadius", "float", s_Instance.captureRadius)
	self:SendDefault(s_guid,className, "disableIfEnemyInside", "bool", s_Instance.disableIfEnemyInside)
	self:SendDefault(s_guid,className, "disableWhenLosingControl", "bool", s_Instance.disableWhenLosingControl)
	self:SendDefault(s_guid,className, "enemyTicketLossWhenCaptured", "int", s_Instance.enemyTicketLossWhenCaptured)
	self:SendDefault(s_guid,className, "flagTemplates", "List<CtrRef)>", s_Instance.flagTemplates)
	self:SendDefault(s_guid,className, "forceSnap", "bool", s_Instance.forceSnap)
	self:SendDefault(s_guid,className, "hideRadius", "float", s_Instance.hideRadius)
	self:SendDefault(s_guid,className, "hoistFlag", "bool", s_Instance.hoistFlag)
	self:SendDefault(s_guid,className, "initialOwnerTeam", "TeamId", s_Instance.initialOwnerTeam)
	self:SendDefault(s_guid,className, "intruderWarning", "bool", s_Instance.intruderWarning)
	self:SendDefault(s_guid,className, "intruderWarningSID", "string", s_Instance.intruderWarningSID)
	self:SendDefault(s_guid,className, "isCapturedInUpperSphere", "bool", s_Instance.isCapturedInUpperSphere)
	self:SendDefault(s_guid,className, "isVisible", "bool", s_Instance.isVisible)
	self:SendDefault(s_guid,className, "loseControlWhenNotClose", "bool", s_Instance.loseControlWhenNotClose)
	self:SendDefault(s_guid,className, "maxCaptureMultiplier", "int", s_Instance.maxCaptureMultiplier)
	self:SendDefault(s_guid,className, "minNrToTakeControl", "int", s_Instance.minNrToTakeControl)
	self:SendDefault(s_guid,className, "modify3DIconVerticalOffset", "float", s_Instance.modify3DIconVerticalOffset)
	self:SendDefault(s_guid,className, "onlyTakeableByTeam", "int", s_Instance.onlyTakeableByTeam)
	self:SendDefault(s_guid,className, "removeWhenCaptured", "bool", s_Instance.removeWhenCaptured)
	self:SendDefault(s_guid,className, "returnMultiplier", "float", s_Instance.returnMultiplier)
	self:SendDefault(s_guid,className, "seesawCapturing", "bool", s_Instance.seesawCapturing)
	self:SendDefault(s_guid,className, "showOnMinimap", "bool", s_Instance.showOnMinimap)
	self:SendDefault(s_guid,className, "showRadius", "float", s_Instance.showRadius)
	self:SendDefault(s_guid,className, "spawnMenuListOrdinal", "uint", s_Instance.spawnMenuListOrdinal)
	self:SendDefault(s_guid,className, "startAtBottom", "bool", s_Instance.startAtBottom)
	self:SendDefault(s_guid,className, "timeToGetControl", "int", s_Instance.timeToGetControl)
	self:SendDefault(s_guid,className, "timeToLoseControl", "int", s_Instance.timeToLoseControl)
	self:SendDefault(s_guid,className, "useAreaValuesPerTeam", "bool", s_Instance.useAreaValuesPerTeam)
end

function Type:CapturePointScoringHandlerData (p_class, p_guid)
	local s_Instance = CapturePointScoringHandlerData(p_class) 
 	local className = "CapturePointScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "squadCappingBonus", "float", s_Instance.squadCappingBonus)
end

function Type:CellDetailSelectionRule (p_class, p_guid)
	local s_Instance = CellDetailSelectionRule(p_class) 
 	local className = "CellDetailSelectionRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "detail", "PackagingDetailLevel", s_Instance.detail)
end

function Type:ChangeReadinessOrderEntityData (p_class, p_guid)
	local s_Instance = ChangeReadinessOrderEntityData(p_class) 
 	local className = "ChangeReadinessOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowDecrease", "bool", s_Instance.allowDecrease)
	self:SendDefault(s_guid,className, "minimum", "ReadinessLevel", s_Instance.minimum)
	self:SendDefault(s_guid,className, "pulse", "ReadinessLevel", s_Instance.pulse)
end

function Type:CharacterAnimationEntityData (p_class, p_guid)
	local s_Instance = CharacterAnimationEntityData(p_class) 
 	local className = "CharacterAnimationEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "controller", "AntRef", s_Instance.controller)
	self:SendDefault(s_guid,className, "entitySpaceTransform", "LinearTransform", s_Instance.entitySpaceTransform)
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "restoreControllerOnFinish", "bool", s_Instance.restoreControllerOnFinish)
	self:SendDefault(s_guid,className, "trackLength", "float", s_Instance.trackLength)
	self:SendDefault(s_guid,className, "warpAnimationBlendTime", "float", s_Instance.warpAnimationBlendTime)
end

function Type:CharacterAnimationSpaceEntityData (p_class, p_guid)
	local s_Instance = CharacterAnimationSpaceEntityData(p_class) 
 	local className = "CharacterAnimationSpaceEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "spacePositionGS", "AntRef", s_Instance.spacePositionGS)
	self:SendDefault(s_guid,className, "spaceRotationGS", "AntRef", s_Instance.spaceRotationGS)
	self:SendDefault(s_guid,className, "warpAnimationBlendTime", "float", s_Instance.warpAnimationBlendTime)
end

function Type:CharacterCameraComponentData (p_class, p_guid)
	local s_Instance = CharacterCameraComponentData(p_class) 
 	local className = "CharacterCameraComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraBoneName", "string", s_Instance.cameraBoneName)
	self:SendDefault(s_guid,className, "cameras", "List<CtrRef)>", s_Instance.cameras)
end

function Type:CharacterCustomizationAsset (p_class, p_guid)
	local s_Instance = CharacterCustomizationAsset(p_class) 
 	local className = "CharacterCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "labelSid", "string", s_Instance.labelSid)
	self:SendDefault(s_guid,className, "specializationTable", "CtrRef", s_Instance.specializationTable)
	self:SendDefault(s_guid,className, "uIHudIcon", "fb.UIHudIcon)", s_Instance.uIHudIcon)
	self:SendDefault(s_guid,className, "visualTable", "CtrRef", s_Instance.visualTable)
	self:SendDefault(s_guid,className, "voiceOverLabels", "List<CtrRef)>", s_Instance.voiceOverLabels)
end

function Type:CharacterCustomizationComponentData (p_class, p_guid)
	local s_Instance = CharacterCustomizationComponentData(p_class) 
 	local className = "CharacterCustomizationComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sharedLodGroup", "CtrRef", s_Instance.sharedLodGroup)
	self:SendDefault(s_guid,className, "socketList", "CtrRef", s_Instance.socketList)
end

function Type:CharacterEntityData (p_class, p_guid)
	local s_Instance = CharacterEntityData(p_class) 
 	local className = "CharacterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "characterLightingEnable", "bool", s_Instance.characterLightingEnable)
	self:SendDefault(s_guid,className, "defaultViewMode", "PersonViewMode", s_Instance.defaultViewMode)
	self:SendDefault(s_guid,className, "playerSpawnType", "fb.PlayerSpawnType)", s_Instance.playerSpawnType)
end

function Type:CharacterHealthComponentData (p_class, p_guid)
	local s_Instance = CharacterHealthComponentData(p_class) 
 	local className = "CharacterHealthComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isImmortal", "bool", s_Instance.isImmortal)
	self:SendDefault(s_guid,className, "maxHealth", "float", s_Instance.maxHealth)
	self:SendDefault(s_guid,className, "regenerateHealth", "bool", s_Instance.regenerateHealth)
	self:SendDefault(s_guid,className, "regenerateHealthPerSecond", "float", s_Instance.regenerateHealthPerSecond)
end

function Type:CharacterInVehicleScenarioEntityData (p_class, p_guid)
	local s_Instance = CharacterInVehicleScenarioEntityData(p_class) 
 	local className = "CharacterInVehicleScenarioEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actorId", "int", s_Instance.actorId)
	self:SendDefault(s_guid,className, "levelId", "int", s_Instance.levelId)
	self:SendDefault(s_guid,className, "partId", "int", s_Instance.partId)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scenarioAntRef", "AntRef", s_Instance.scenarioAntRef)
	self:SendDefault(s_guid,className, "scenarioId", "int", s_Instance.scenarioId)
end

function Type:CharacterLightingComponentData (p_class, p_guid)
	local s_Instance = CharacterLightingComponentData(p_class) 
 	local className = "CharacterLightingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blendFactor", "float", s_Instance.blendFactor)
	self:SendDefault(s_guid,className, "bottomLight", "Vec3", s_Instance.bottomLight)
	self:SendDefault(s_guid,className, "cameraUpRotation", "float", s_Instance.cameraUpRotation)
	self:SendDefault(s_guid,className, "characterLightEnable", "bool", s_Instance.characterLightEnable)
	self:SendDefault(s_guid,className, "characterLightingMode", "fb.CharacterLightingMode)", s_Instance.characterLightingMode)
	self:SendDefault(s_guid,className, "firstPersonEnable", "bool", s_Instance.firstPersonEnable)
	self:SendDefault(s_guid,className, "lockToCameraDirection", "bool", s_Instance.lockToCameraDirection)
	self:SendDefault(s_guid,className, "topLight", "Vec3", s_Instance.topLight)
	self:SendDefault(s_guid,className, "topLightDirX", "float", s_Instance.topLightDirX)
	self:SendDefault(s_guid,className, "topLightDirY", "float", s_Instance.topLightDirY)
end

function Type:CharacterMeleeBinding (p_class, p_guid)
	local s_Instance = CharacterMeleeBinding(p_class) 
 	local className = "CharacterMeleeBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meleeActive", "AntRef", s_Instance.meleeActive)
	self:SendDefault(s_guid,className, "otherActor", "AntRef", s_Instance.otherActor)
	self:SendDefault(s_guid,className, "selfActor", "AntRef", s_Instance.selfActor)
	self:SendDefault(s_guid,className, "triggerMelee", "AntRef", s_Instance.triggerMelee)
end

function Type:CharacterMeleeCommonBinding (p_class, p_guid)
	local s_Instance = CharacterMeleeCommonBinding(p_class) 
 	local className = "CharacterMeleeCommonBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "closeToTarget", "AntRef", s_Instance.closeToTarget)
	self:SendDefault(s_guid,className, "meleeAborted", "AntRef", s_Instance.meleeAborted)
	self:SendDefault(s_guid,className, "meleeAngle", "AntRef", s_Instance.meleeAngle)
	self:SendDefault(s_guid,className, "meleeDefenceTime", "AntRef", s_Instance.meleeDefenceTime)
	self:SendDefault(s_guid,className, "meleeDistance", "AntRef", s_Instance.meleeDistance)
	self:SendDefault(s_guid,className, "meleeSequenceTime", "AntRef", s_Instance.meleeSequenceTime)
	self:SendDefault(s_guid,className, "meleeType", "AntRef", s_Instance.meleeType)
end

function Type:CharacterPhysicsComponentData (p_class, p_guid)
	local s_Instance = CharacterPhysicsComponentData(p_class) 
 	local className = "CharacterPhysicsComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "characterPhysics", "CtrRef", s_Instance.characterPhysics)
	self:SendDefault(s_guid,className, "enableCollisionOnSpawn", "bool", s_Instance.enableCollisionOnSpawn)
end

function Type:CharacterPhysicsData (p_class, p_guid)
	local s_Instance = CharacterPhysicsData(p_class) 
 	local className = "CharacterPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowPoseChangeDuringTransition", "bool", s_Instance.allowPoseChangeDuringTransition)
	self:SendDefault(s_guid,className, "defaultState", "CharacterStateType", s_Instance.defaultState)
	self:SendDefault(s_guid,className, "inputAcceleration", "float", s_Instance.inputAcceleration)
	self:SendDefault(s_guid,className, "jumpPenaltyFactor", "float", s_Instance.jumpPenaltyFactor)
	self:SendDefault(s_guid,className, "jumpPenaltyTime", "float", s_Instance.jumpPenaltyTime)
	self:SendDefault(s_guid,className, "ladderAcceptAngle", "float", s_Instance.ladderAcceptAngle)
	self:SendDefault(s_guid,className, "ladderAcceptAnglePitch", "float", s_Instance.ladderAcceptAnglePitch)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "maxAscendAngle", "float", s_Instance.maxAscendAngle)
	self:SendDefault(s_guid,className, "physicalRadius", "float", s_Instance.physicalRadius)
	self:SendDefault(s_guid,className, "poses", "List<CtrRef)>", s_Instance.poses)
	self:SendDefault(s_guid,className, "pushableObjectWeight", "int", s_Instance.pushableObjectWeight)
	self:SendDefault(s_guid,className, "radiusToPredictCollisionOnCharacters", "float", s_Instance.radiusToPredictCollisionOnCharacters)
	self:SendDefault(s_guid,className, "sprint", "CtrRef", s_Instance.sprint)
	self:SendDefault(s_guid,className, "states", "List<CtrRef)>", s_Instance.states)
	self:SendDefault(s_guid,className, "waterDepthLimit", "float", s_Instance.waterDepthLimit)
end

function Type:CharacterPoseConstraintsData (p_class, p_guid)
	local s_Instance = CharacterPoseConstraintsData(p_class) 
 	local className = "CharacterPoseConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchPose", "bool", s_Instance.crouchPose)
	self:SendDefault(s_guid,className, "pronePose", "bool", s_Instance.pronePose)
	self:SendDefault(s_guid,className, "standPose", "bool", s_Instance.standPose)
end

function Type:CharacterPoseData (p_class, p_guid)
	local s_Instance = CharacterPoseData(p_class) 
 	local className = "CharacterPoseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collisionBoxMaxExpand", "Vec3", s_Instance.collisionBoxMaxExpand)
	self:SendDefault(s_guid,className, "collisionBoxMinExpand", "Vec3", s_Instance.collisionBoxMinExpand)
	self:SendDefault(s_guid,className, "collisionType", "CharacterPoseCollisionType", s_Instance.collisionType)
	self:SendDefault(s_guid,className, "eyePosition", "Vec3", s_Instance.eyePosition)
	self:SendDefault(s_guid,className, "height", "float", s_Instance.height)
	self:SendDefault(s_guid,className, "lookConstraints", "LookConstraintsData", s_Instance.lookConstraints)
	self:SendDefault(s_guid,className, "poseType", "CharacterPoseType", s_Instance.poseType)
	self:SendDefault(s_guid,className, "stepHeight", "float", s_Instance.stepHeight)
	self:SendDefault(s_guid,className, "throttleModifierCurve", "List<Vec2)>", s_Instance.throttleModifierCurve)
	self:SendDefault(s_guid,className, "transitionTimes", "List<PoseTransitionTime)>", s_Instance.transitionTimes)
end

function Type:CharacterSocketListAsset (p_class, p_guid)
	local s_Instance = CharacterSocketListAsset(p_class) 
 	local className = "CharacterSocketListAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gameplaySockets", "List<CtrRef)>", s_Instance.gameplaySockets)
	self:SendDefault(s_guid,className, "rigidVisualSockets", "List<CtrRef)>", s_Instance.rigidVisualSockets)
	self:SendDefault(s_guid,className, "skinnedVisualSockets", "List<CtrRef)>", s_Instance.skinnedVisualSockets)
end

function Type:CharacterSpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = CharacterSpawnReferenceObjectData(p_class) 
 	local className = "CharacterSpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "affectMinimapPosition", "bool", s_Instance.affectMinimapPosition)
	self:SendDefault(s_guid,className, "allowFallbackOnNextAvailabeVehicleEntry", "bool", s_Instance.allowFallbackOnNextAvailabeVehicleEntry)
	self:SendDefault(s_guid,className, "checkMaxPlayersInVehicle", "bool", s_Instance.checkMaxPlayersInVehicle)
	self:SendDefault(s_guid,className, "humanTargetPreference", "float", s_Instance.humanTargetPreference)
	self:SendDefault(s_guid,className, "ignoreVehicleIcon", "bool", s_Instance.ignoreVehicleIcon)
	self:SendDefault(s_guid,className, "isTarget", "bool", s_Instance.isTarget)
	self:SendDefault(s_guid,className, "minimapIcon", "UIHudIcon", s_Instance.minimapIcon)
	self:SendDefault(s_guid,className, "playerType", "PlayerSpawnType", s_Instance.playerType)
	self:SendDefault(s_guid,className, "template", "CtrRef", s_Instance.template)
	self:SendDefault(s_guid,className, "vehicleEntryIndex", "uint", s_Instance.vehicleEntryIndex)
end

function Type:CharacterSprintData (p_class, p_guid)
	local s_Instance = CharacterSprintData(p_class) 
 	local className = "CharacterSprintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowContinousSprinting", "bool", s_Instance.allowContinousSprinting)
	self:SendDefault(s_guid,className, "sprintMinimumPower", "float", s_Instance.sprintMinimumPower)
	self:SendDefault(s_guid,className, "sprintPowerDecreasePerSecond", "float", s_Instance.sprintPowerDecreasePerSecond)
	self:SendDefault(s_guid,className, "sprintPowerIncreasePerSecond", "float", s_Instance.sprintPowerIncreasePerSecond)
end

function Type:CharacterStateData (p_class, p_guid)
	local s_Instance = CharacterStateData(p_class) 
 	local className = "CharacterStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "poseInfo", "List<CtrRef)>", s_Instance.poseInfo)
end

function Type:CharacterStatePoseInfo (p_class, p_guid)
	local s_Instance = CharacterStatePoseInfo(p_class) 
 	local className = "CharacterStatePoseInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accelerationGain", "float", s_Instance.accelerationGain)
	self:SendDefault(s_guid,className, "decelerationGain", "float", s_Instance.decelerationGain)
	self:SendDefault(s_guid,className, "poseType", "CharacterPoseType", s_Instance.poseType)
	self:SendDefault(s_guid,className, "speedModifier", "SpeedModifierData", s_Instance.speedModifier)
	self:SendDefault(s_guid,className, "sprintGain", "float", s_Instance.sprintGain)
	self:SendDefault(s_guid,className, "sprintMultiplier", "float", s_Instance.sprintMultiplier)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:CharacterStateTriggerEntityData (p_class, p_guid)
	local s_Instance = CharacterStateTriggerEntityData(p_class) 
 	local className = "CharacterStateTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeWeaponSlot", "uint", s_Instance.activeWeaponSlot)
	self:SendDefault(s_guid,className, "ammoToSet", "uint", s_Instance.ammoToSet)
	self:SendDefault(s_guid,className, "characterPose", "CharacterPoseAction", s_Instance.characterPose)
	self:SendDefault(s_guid,className, "checkAllWeapons", "bool", s_Instance.checkAllWeapons)
	self:SendDefault(s_guid,className, "checkHealthGreaterOrEqual", "bool", s_Instance.checkHealthGreaterOrEqual)
	self:SendDefault(s_guid,className, "continueToCheckIfHoldingWrongWeapon", "bool", s_Instance.continueToCheckIfHoldingWrongWeapon)
	self:SendDefault(s_guid,className, "disablePhysicsWhenLeavingVehicle", "bool", s_Instance.disablePhysicsWhenLeavingVehicle)
	self:SendDefault(s_guid,className, "excludeConnectedVehicles", "bool", s_Instance.excludeConnectedVehicles)
	self:SendDefault(s_guid,className, "healthToCheck", "uint", s_Instance.healthToCheck)
	self:SendDefault(s_guid,className, "healthToSet", "uint", s_Instance.healthToSet)
	self:SendDefault(s_guid,className, "pitch", "float", s_Instance.pitch)
	self:SendDefault(s_guid,className, "poseToCheck", "CharacterPoseAction", s_Instance.poseToCheck)
	self:SendDefault(s_guid,className, "seatIndex", "uint", s_Instance.seatIndex)
	self:SendDefault(s_guid,className, "shouldCheckSeatIndex", "bool", s_Instance.shouldCheckSeatIndex)
	self:SendDefault(s_guid,className, "stayInVehicleOnMove", "bool", s_Instance.stayInVehicleOnMove)
	self:SendDefault(s_guid,className, "useExitPointWhenLeavingVehicle", "bool", s_Instance.useExitPointWhenLeavingVehicle)
	self:SendDefault(s_guid,className, "usePitch", "bool", s_Instance.usePitch)
	self:SendDefault(s_guid,className, "weapon", "CtrRef", s_Instance.weapon)
end

function Type:CharacterWeaponBinding (p_class, p_guid)
	local s_Instance = CharacterWeaponBinding(p_class) 
 	local className = "CharacterWeaponBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponId", "AntRef", s_Instance.weaponId)
end

function Type:CharacterWeaponComponentData (p_class, p_guid)
	local s_Instance = CharacterWeaponComponentData(p_class) 
 	local className = "CharacterWeaponComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimBoneName", "string", s_Instance.aimBoneName)
	self:SendDefault(s_guid,className, "defaultWeaponBlueprint", "CtrRef", s_Instance.defaultWeaponBlueprint)
	self:SendDefault(s_guid,className, "weaponSkeleton", "CtrRef", s_Instance.weaponSkeleton)
end

function Type:ChaseCameraData (p_class, p_guid)
	local s_Instance = ChaseCameraData(p_class) 
 	local className = "ChaseCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "awayFromTargetForceScale", "float", s_Instance.awayFromTargetForceScale)
	self:SendDefault(s_guid,className, "collisionRadius", "float", s_Instance.collisionRadius)
	self:SendDefault(s_guid,className, "forceFieldForceScale", "float", s_Instance.forceFieldForceScale)
	self:SendDefault(s_guid,className, "forceFieldRadius", "float", s_Instance.forceFieldRadius)
	self:SendDefault(s_guid,className, "hasCollision", "bool", s_Instance.hasCollision)
	self:SendDefault(s_guid,className, "inheritTargetVelocity", "bool", s_Instance.inheritTargetVelocity)
	self:SendDefault(s_guid,className, "keepTargetPitch", "bool", s_Instance.keepTargetPitch)
	self:SendDefault(s_guid,className, "lookDistanceInFrontOfTarget", "float", s_Instance.lookDistanceInFrontOfTarget)
	self:SendDefault(s_guid,className, "lookDistanceScale", "float", s_Instance.lookDistanceScale)
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "maxVelocity", "float", s_Instance.maxVelocity)
	self:SendDefault(s_guid,className, "maxViewRotationAngleDeg", "float", s_Instance.maxViewRotationAngleDeg)
	self:SendDefault(s_guid,className, "pillExpandSizeSpeedAcceleration", "float", s_Instance.pillExpandSizeSpeedAcceleration)
	self:SendDefault(s_guid,className, "pillMaximumCollisionRadius", "float", s_Instance.pillMaximumCollisionRadius)
	self:SendDefault(s_guid,className, "pillMinimumCollisionLength", "float", s_Instance.pillMinimumCollisionLength)
	self:SendDefault(s_guid,className, "pillMinimumCollisionRadius", "float", s_Instance.pillMinimumCollisionRadius)
	self:SendDefault(s_guid,className, "shouldRollWithTarget", "bool", s_Instance.shouldRollWithTarget)
	self:SendDefault(s_guid,className, "snapDistance", "float", s_Instance.snapDistance)
	self:SendDefault(s_guid,className, "targetOffset", "Vec3", s_Instance.targetOffset)
	self:SendDefault(s_guid,className, "targetRotationOffset", "float", s_Instance.targetRotationOffset)
	self:SendDefault(s_guid,className, "toWantedPositionScale", "Vec3", s_Instance.toWantedPositionScale)
	self:SendDefault(s_guid,className, "updateRate", "uint", s_Instance.updateRate)
	self:SendDefault(s_guid,className, "velocityDrag", "float", s_Instance.velocityDrag)
	self:SendDefault(s_guid,className, "wantedAngleDeg", "float", s_Instance.wantedAngleDeg)
	self:SendDefault(s_guid,className, "wantedDistance", "float", s_Instance.wantedDistance)
end

function Type:ChassisComponentData (p_class, p_guid)
	local s_Instance = ChassisComponentData(p_class) 
 	local className = "ChassisComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowNegativeThrottle", "bool", s_Instance.allowNegativeThrottle)
	self:SendDefault(s_guid,className, "alwaysFullThrottle", "bool", s_Instance.alwaysFullThrottle)
	self:SendDefault(s_guid,className, "forceLandingGearsRetract", "bool", s_Instance.forceLandingGearsRetract)
	self:SendDefault(s_guid,className, "gearboxConfig", "CtrRef", s_Instance.gearboxConfig)
	self:SendDefault(s_guid,className, "landingGearLogic", "CtrRef", s_Instance.landingGearLogic)
	self:SendDefault(s_guid,className, "triggerGroundEffectImpulse", "float", s_Instance.triggerGroundEffectImpulse)
	self:SendDefault(s_guid,className, "vehicleConfig", "CtrRef", s_Instance.vehicleConfig)
	self:SendDefault(s_guid,className, "waterEffects", "List<CtrRef)>", s_Instance.waterEffects)
	self:SendDefault(s_guid,className, "waterStreakEffects", "List<CtrRef)>", s_Instance.waterStreakEffects)
end

function Type:ChatSettings (p_class, p_guid)
	local s_Instance = ChatSettings(p_class) 
 	local className = "ChatSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antiSpam", "AntiSpamConfig", s_Instance.antiSpam)
	self:SendDefault(s_guid,className, "channels", "List<ChatChannelType)>", s_Instance.channels)
	self:SendDefault(s_guid,className, "chatSettings",  "readonly", s_Instance.chatSettings)
	self:SendDefault(s_guid,className, "chatChannelType",  "uint", s_Instance.chatChannelType)
end

function Type:ChildComponentData (p_class, p_guid)
	local s_Instance = ChildComponentData(p_class) 
 	local className = "ChildComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alignmentSettings", "CtrRef", s_Instance.alignmentSettings)
	self:SendDefault(s_guid,className, "alignTransform", "LinearTransform", s_Instance.alignTransform)
	self:SendDefault(s_guid,className, "enableAlignToCamera", "bool", s_Instance.enableAlignToCamera)
	self:SendDefault(s_guid,className, "healthZone", "VehicleHealthZoneData", s_Instance.healthZone)
	self:SendDefault(s_guid,className, "movingBody", "CtrRef", s_Instance.movingBody)
	self:SendDefault(s_guid,className, "soundEffect", "CtrRef", s_Instance.soundEffect)
	self:SendDefault(s_guid,className, "soundEffectStartRpm", "float", s_Instance.soundEffectStartRpm)
	self:SendDefault(s_guid,className, "soundEffectStopRpm", "float", s_Instance.soundEffectStopRpm)
	self:SendDefault(s_guid,className, "worldSpacePositionLock", "bool", s_Instance.worldSpacePositionLock)
end

function Type:ChildMovingBodyData (p_class, p_guid)
	local s_Instance = ChildMovingBodyData(p_class) 
 	local className = "ChildMovingBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputAction", "EntryInputActionEnum", s_Instance.inputAction)
	self:SendDefault(s_guid,className, "inputDelay", "float", s_Instance.inputDelay)
	self:SendDefault(s_guid,className, "isOneShotInput", "bool", s_Instance.isOneShotInput)
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
	self:SendDefault(s_guid,className, "triggerImpulse", "float", s_Instance.triggerImpulse)
end

function Type:ChildRotationBodyData (p_class, p_guid)
	local s_Instance = ChildRotationBodyData(p_class) 
 	local className = "ChildRotationBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forceModifier", "float", s_Instance.forceModifier)
	self:SendDefault(s_guid,className, "resetForceInputThreshold", "float", s_Instance.resetForceInputThreshold)
	self:SendDefault(s_guid,className, "resetForceModifier", "float", s_Instance.resetForceModifier)
	self:SendDefault(s_guid,className, "rotationInput", "EntryInputActionEnum", s_Instance.rotationInput)
	self:SendDefault(s_guid,className, "useLinearInput", "bool", s_Instance.useLinearInput)
	self:SendDefault(s_guid,className, "worldSpaceLockEfficiency", "float", s_Instance.worldSpaceLockEfficiency)
end

function Type:ChildStaticModelNetworkInfo (p_class, p_guid)
	local s_Instance = ChildStaticModelNetworkInfo(p_class) 
 	local className = "ChildStaticModelNetworkInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "instanceIndex", "uint", s_Instance.instanceIndex)
	self:SendDefault(s_guid,className, "networkRange", "IndexRange", s_Instance.networkRange)
	self:SendDefault(s_guid,className, "parentHealthStateIndex", "uint", s_Instance.parentHealthStateIndex)
	self:SendDefault(s_guid,className, "parentPartComponentIndex", "uint", s_Instance.parentPartComponentIndex)
end

function Type:ChunkStreamerCell (p_class, p_guid)
	local s_Instance = ChunkStreamerCell(p_class) 
 	local className = "ChunkStreamerCell"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bundleName", "string", s_Instance.bundleName)
	self:SendDefault(s_guid,className, "shape", "List<Vec2)>", s_Instance.shape)
end

function Type:ChunkStreamerEntityData (p_class, p_guid)
	local s_Instance = ChunkStreamerEntityData(p_class) 
 	local className = "ChunkStreamerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cells", "List<ChunkStreamerCell)>", s_Instance.cells)
end

function Type:ClearAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = ClearAreaTriggerEntityData(p_class) 
 	local className = "ClearAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "excludeImmortalSoldiersInTeam", "bool", s_Instance.excludeImmortalSoldiersInTeam)
	self:SendDefault(s_guid,className, "removeBangers", "bool", s_Instance.removeBangers)
	self:SendDefault(s_guid,className, "removeDebrisClusters", "bool", s_Instance.removeDebrisClusters)
	self:SendDefault(s_guid,className, "removeEffects", "bool", s_Instance.removeEffects)
	self:SendDefault(s_guid,className, "removeMeshProxies", "bool", s_Instance.removeMeshProxies)
	self:SendDefault(s_guid,className, "removeSoldiers", "bool", s_Instance.removeSoldiers)
	self:SendDefault(s_guid,className, "removeStaticModels", "bool", s_Instance.removeStaticModels)
	self:SendDefault(s_guid,className, "removeVehicles", "bool", s_Instance.removeVehicles)
	self:SendDefault(s_guid,className, "teamOfImmortalSoldiers", "TeamId", s_Instance.teamOfImmortalSoldiers)
end

function Type:ClientEffectMaskVolumeEntityData (p_class, p_guid)
	local s_Instance = ClientEffectMaskVolumeEntityData(p_class) 
 	local className = "ClientEffectMaskVolumeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "applyEffectCurve", "Vec4", s_Instance.applyEffectCurve)
	self:SendDefault(s_guid,className, "lifeTimeInSeconds", "float", s_Instance.lifeTimeInSeconds)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "updatePeriodInSeconds", "float", s_Instance.updatePeriodInSeconds)
end

function Type:ClientJuiceState (p_class, p_guid)
	local s_Instance = ClientJuiceState(p_class) 
 	local className = "ClientJuiceState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sessionId", "int", s_Instance.sessionId)
end

function Type:ClientMetricsSettings (p_class, p_guid)
	local s_Instance = ClientMetricsSettings(p_class) 
 	local className = "ClientMetricsSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
end

function Type:ClientPlayerInputPlaybackEntityData (p_class, p_guid)
	local s_Instance = ClientPlayerInputPlaybackEntityData(p_class) 
 	local className = "ClientPlayerInputPlaybackEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fileName", "string", s_Instance.fileName)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ClientPlayerInputRecorderEntityData (p_class, p_guid)
	local s_Instance = ClientPlayerInputRecorderEntityData(p_class) 
 	local className = "ClientPlayerInputRecorderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fileNameBase", "string", s_Instance.fileNameBase)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ClientSettings (p_class, p_guid)
	local s_Instance = ClientSettings(p_class) 
 	local className = "ClientSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimScale", "float", s_Instance.aimScale)
	self:SendDefault(s_guid,className, "asyncClientBulletEntity", "bool", s_Instance.asyncClientBulletEntity)
	self:SendDefault(s_guid,className, "autoUnspawnDynamicObjects", "bool", s_Instance.autoUnspawnDynamicObjects)
	self:SendDefault(s_guid,className, "corruptionChance", "float", s_Instance.corruptionChance)
	self:SendDefault(s_guid,className, "debrisClusterEnabled", "bool", s_Instance.debrisClusterEnabled)
	self:SendDefault(s_guid,className, "debugMenuOnLThumb", "bool", s_Instance.debugMenuOnLThumb)
	self:SendDefault(s_guid,className, "dropSpikeChance", "float", s_Instance.dropSpikeChance)
	self:SendDefault(s_guid,className, "duplicationChance", "float", s_Instance.duplicationChance)
	self:SendDefault(s_guid,className, "effectsEnabled", "bool", s_Instance.effectsEnabled)
	self:SendDefault(s_guid,className, "emittersEnabled", "bool", s_Instance.emittersEnabled)
	self:SendDefault(s_guid,className, "enableRestTool", "bool", s_Instance.enableRestTool)
	self:SendDefault(s_guid,className, "extractPersistenceInformation", "bool", s_Instance.extractPersistenceInformation)
	self:SendDefault(s_guid,className, "havokCaptureToFile", "bool", s_Instance.havokCaptureToFile)
	self:SendDefault(s_guid,className, "havokVDBShowsEffectsWorld", "bool", s_Instance.havokVDBShowsEffectsWorld)
	self:SendDefault(s_guid,className, "havokVisualDebugger", "bool", s_Instance.havokVisualDebugger)
	self:SendDefault(s_guid,className, "ignoreClientFireRateMultiplier", "bool", s_Instance.ignoreClientFireRateMultiplier)
	self:SendDefault(s_guid,className, "incomingFrequency", "float", s_Instance.incomingFrequency)
	self:SendDefault(s_guid,className, "incomingRate", "uint", s_Instance.incomingRate)
	self:SendDefault(s_guid,className, "ingameTimeout", "float", s_Instance.ingameTimeout)
	self:SendDefault(s_guid,className, "inputEnable", "bool", s_Instance.inputEnable)
	self:SendDefault(s_guid,className, "invertFreeCamera", "bool", s_Instance.invertFreeCamera)
	self:SendDefault(s_guid,className, "invertPadPcRightStick", "bool", s_Instance.invertPadPcRightStick)
	self:SendDefault(s_guid,className, "invertPitch", "bool", s_Instance.invertPitch)
	self:SendDefault(s_guid,className, "invertYaw", "bool", s_Instance.invertYaw)
	self:SendDefault(s_guid,className, "isInternetSimulationEnabled", "bool", s_Instance.isInternetSimulationEnabled)
	self:SendDefault(s_guid,className, "isPresenceEnabled", "bool", s_Instance.isPresenceEnabled)
	self:SendDefault(s_guid,className, "isSpectator", "bool", s_Instance.isSpectator)
	self:SendDefault(s_guid,className, "lipSyncEnabled", "bool", s_Instance.lipSyncEnabled)
	self:SendDefault(s_guid,className, "loadedTimeout", "float", s_Instance.loadedTimeout)
	self:SendDefault(s_guid,className, "loadingTimeout", "float", s_Instance.loadingTimeout)
	self:SendDefault(s_guid,className, "loadMenu", "bool", s_Instance.loadMenu)
	self:SendDefault(s_guid,className, "localVehicleSimulationEnabled", "bool", s_Instance.localVehicleSimulationEnabled)
	self:SendDefault(s_guid,className, "maxDropDuration", "float", s_Instance.maxDropDuration)
	self:SendDefault(s_guid,className, "maxIncomingLatency", "float", s_Instance.maxIncomingLatency)
	self:SendDefault(s_guid,className, "maxLatency", "float", s_Instance.maxLatency)
	self:SendDefault(s_guid,className, "minDropDuration", "float", s_Instance.minDropDuration)
	self:SendDefault(s_guid,className, "minIncomingLatency", "float", s_Instance.minIncomingLatency)
	self:SendDefault(s_guid,className, "minLatency", "float", s_Instance.minLatency)
	self:SendDefault(s_guid,className, "occludersEnabled", "bool", s_Instance.occludersEnabled)
	self:SendDefault(s_guid,className, "onDamageSpottingEnabled", "bool", s_Instance.onDamageSpottingEnabled)
	self:SendDefault(s_guid,className, "outgoingRate", "uint", s_Instance.outgoingRate)
	self:SendDefault(s_guid,className, "overgrowthEnabled", "bool", s_Instance.overgrowthEnabled)
	self:SendDefault(s_guid,className, "packetDrops", "float", s_Instance.packetDrops)
	self:SendDefault(s_guid,className, "padRumbleEnabled", "bool", s_Instance.padRumbleEnabled)
	self:SendDefault(s_guid,className, "pauseGameOnStartUp", "bool", s_Instance.pauseGameOnStartUp)
	self:SendDefault(s_guid,className, "quitGameOnServerDisconnect", "bool", s_Instance.quitGameOnServerDisconnect)
	self:SendDefault(s_guid,className, "renderTags", "bool", s_Instance.renderTags)
	self:SendDefault(s_guid,className, "reorderingChance", "float", s_Instance.reorderingChance)
	self:SendDefault(s_guid,className, "scheme0FlipY", "bool", s_Instance.scheme0FlipY)
	self:SendDefault(s_guid,className, "scheme1FlipY", "bool", s_Instance.scheme1FlipY)
	self:SendDefault(s_guid,className, "scheme2FlipY", "bool", s_Instance.scheme2FlipY)
	self:SendDefault(s_guid,className, "screenshotFilename", "string", s_Instance.screenshotFilename)
	self:SendDefault(s_guid,className, "screenshotSuffix", "string", s_Instance.screenshotSuffix)
	self:SendDefault(s_guid,className, "screenshotToFile", "bool", s_Instance.screenshotToFile)
	self:SendDefault(s_guid,className, "secondaryServerIp", "string", s_Instance.secondaryServerIp)
	self:SendDefault(s_guid,className, "serverIp", "string", s_Instance.serverIp)
	self:SendDefault(s_guid,className, "showBuildId", "bool", s_Instance.showBuildId)
	self:SendDefault(s_guid,className, "skipFastLevelLoad", "bool", s_Instance.skipFastLevelLoad)
	self:SendDefault(s_guid,className, "spawnPointIndex", "int", s_Instance.spawnPointIndex)
	self:SendDefault(s_guid,className, "team", "uint", s_Instance.team)
	self:SendDefault(s_guid,className, "terrainEnabled", "bool", s_Instance.terrainEnabled)
	self:SendDefault(s_guid,className, "threadedLoadingEnable", "bool", s_Instance.threadedLoadingEnable)
	self:SendDefault(s_guid,className, "useGlobalGamePadInput", "bool", s_Instance.useGlobalGamePadInput)
	self:SendDefault(s_guid,className, "useMouseAndKeyboardSystem", "bool", s_Instance.useMouseAndKeyboardSystem)
	self:SendDefault(s_guid,className, "vegetationEnabled", "bool", s_Instance.vegetationEnabled)
	self:SendDefault(s_guid,className, "visualFrameInterpolation", "bool", s_Instance.visualFrameInterpolation)
	self:SendDefault(s_guid,className, "vsyncEnable", "bool", s_Instance.vsyncEnable)
	self:SendDefault(s_guid,className, "waterPhysicsEnabled", "bool", s_Instance.waterPhysicsEnabled)
	self:SendDefault(s_guid,className, "worldRenderEnabled", "bool", s_Instance.worldRenderEnabled)
end

function Type:ClimbingStateData (p_class, p_guid)
	local s_Instance = ClimbingStateData(p_class) 
 	local className = "ClimbingStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attractionVelocity", "float", s_Instance.attractionVelocity)
	self:SendDefault(s_guid,className, "climbHeightOffset", "float", s_Instance.climbHeightOffset)
	self:SendDefault(s_guid,className, "climbOffHorizontalDistance", "float", s_Instance.climbOffHorizontalDistance)
	self:SendDefault(s_guid,className, "climbOffHorizontalTime", "float", s_Instance.climbOffHorizontalTime)
	self:SendDefault(s_guid,className, "climbOffVerticalDistance", "float", s_Instance.climbOffVerticalDistance)
	self:SendDefault(s_guid,className, "climbOffVerticalTime", "float", s_Instance.climbOffVerticalTime)
	self:SendDefault(s_guid,className, "downAngleLimit", "float", s_Instance.downAngleLimit)
	self:SendDefault(s_guid,className, "dropOffAngle", "float", s_Instance.dropOffAngle)
	self:SendDefault(s_guid,className, "lateralInputScale", "float", s_Instance.lateralInputScale)
	self:SendDefault(s_guid,className, "pushAwayVelocity", "float", s_Instance.pushAwayVelocity)
end

function Type:ClimbLadderBinding (p_class, p_guid)
	local s_Instance = ClimbLadderBinding(p_class) 
 	local className = "ClimbLadderBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "climbLadderConnectPhase", "AntRef", s_Instance.climbLadderConnectPhase)
	self:SendDefault(s_guid,className, "climbLadderPhase", "AntRef", s_Instance.climbLadderPhase)
	self:SendDefault(s_guid,className, "climbLadderTransitionPhase", "AntRef", s_Instance.climbLadderTransitionPhase)
	self:SendDefault(s_guid,className, "fallHigh", "AntRef", s_Instance.fallHigh)
	self:SendDefault(s_guid,className, "ladderTopTransition", "AntRef", s_Instance.ladderTopTransition)
	self:SendDefault(s_guid,className, "onLadder", "AntRef", s_Instance.onLadder)
end

function Type:ClimbLadderComponentData (p_class, p_guid)
	local s_Instance = ClimbLadderComponentData(p_class) 
 	local className = "ClimbLadderComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "ClimbLadderBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "climbPhase", "int", s_Instance.climbPhase)
	self:SendDefault(s_guid,className, "connectJointDisplacement", "float", s_Instance.connectJointDisplacement)
	self:SendDefault(s_guid,className, "connectPhase", "int", s_Instance.connectPhase)
end

function Type:ClosestInstancesScopeStrategyData (p_class, p_guid)
	local s_Instance = ClosestInstancesScopeStrategyData(p_class) 
 	local className = "ClosestInstancesScopeStrategyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "count", "uint", s_Instance.count)
end

function Type:CollisionData (p_class, p_guid)
	local s_Instance = CollisionData(p_class) 
 	local className = "CollisionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageAtHorizVelocity", "List<ValueAtX)>", s_Instance.damageAtHorizVelocity)
	self:SendDefault(s_guid,className, "damageAtVerticalVelocity", "List<ValueAtX)>", s_Instance.damageAtVerticalVelocity)
end

function Type:ColorCorrectionComponentData (p_class, p_guid)
	local s_Instance = ColorCorrectionComponentData(p_class) 
 	local className = "ColorCorrectionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "brightness", "Vec3", s_Instance.brightness)
	self:SendDefault(s_guid,className, "colorGradingEnable", "bool", s_Instance.colorGradingEnable)
	self:SendDefault(s_guid,className, "colorGradingTexture", "CtrRef", s_Instance.colorGradingTexture)
	self:SendDefault(s_guid,className, "contrast", "Vec3", s_Instance.contrast)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "hue", "float", s_Instance.hue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "saturation", "Vec3", s_Instance.saturation)
end

function Type:ColorReference (p_class, p_guid)
	local s_Instance = ColorReference(p_class) 
 	local className = "ColorReference"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "Vec4", s_Instance.color)
end

function Type:ColorTintData (p_class, p_guid)
	local s_Instance = ColorTintData(p_class) 
 	local className = "ColorTintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "brightness", "Vec3", s_Instance.brightness)
	self:SendDefault(s_guid,className, "contrast", "Vec3", s_Instance.contrast)
	self:SendDefault(s_guid,className, "hue", "float", s_Instance.hue)
	self:SendDefault(s_guid,className, "saturation", "Vec3", s_Instance.saturation)
end

function Type:ColorTintScopeFilterData (p_class, p_guid)
	local s_Instance = ColorTintScopeFilterData(p_class) 
 	local className = "ColorTintScopeFilterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "colorTintData", "fb.ColorTintData)", s_Instance.colorTintData)
end

function Type:ColorUnlockPartData (p_class, p_guid)
	local s_Instance = ColorUnlockPartData(p_class) 
 	local className = "ColorUnlockPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "colorReference", "CtrRef", s_Instance.colorReference)
end

function Type:CombatActionTriggerEntityData (p_class, p_guid)
	local s_Instance = CombatActionTriggerEntityData(p_class) 
 	local className = "CombatActionTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "timeToTriggerOnNoAction", "float", s_Instance.timeToTriggerOnNoAction)
end

function Type:CombatAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = CombatAreaTriggerEntityData(p_class) 
 	local className = "CombatAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deserterProjectile", "CtrRef", s_Instance.deserterProjectile)
	self:SendDefault(s_guid,className, "initalSpeed", "float", s_Instance.initalSpeed)
	self:SendDefault(s_guid,className, "isAiAllowedOutside", "bool", s_Instance.isAiAllowedOutside)
	self:SendDefault(s_guid,className, "isTeamSpecific", "bool", s_Instance.isTeamSpecific)
	self:SendDefault(s_guid,className, "maxRandomSpawnHeight", "float", s_Instance.maxRandomSpawnHeight)
	self:SendDefault(s_guid,className, "spawnHeight", "float", s_Instance.spawnHeight)
	self:SendDefault(s_guid,className, "strikeRadius", "float", s_Instance.strikeRadius)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
	self:SendDefault(s_guid,className, "timeToReturn", "uint", s_Instance.timeToReturn)
end

function Type:CombatConstantData (p_class, p_guid)
	local s_Instance = CombatConstantData(p_class) 
 	local className = "CombatConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowCrouchFiringWaterLevel", "float", s_Instance.allowCrouchFiringWaterLevel)
	self:SendDefault(s_guid,className, "avoidC4Time", "float", s_Instance.avoidC4Time)
	self:SendDefault(s_guid,className, "changePoseStopDelay", "float", s_Instance.changePoseStopDelay)
	self:SendDefault(s_guid,className, "closeRangeAccuracyDistance", "float", s_Instance.closeRangeAccuracyDistance)
	self:SendDefault(s_guid,className, "explosionInterestRange", "float", s_Instance.explosionInterestRange)
	self:SendDefault(s_guid,className, "explosiveBlastMultiplier", "float", s_Instance.explosiveBlastMultiplier)
	self:SendDefault(s_guid,className, "explosiveObjectSearchRadius", "float", s_Instance.explosiveObjectSearchRadius)
	self:SendDefault(s_guid,className, "fightFromPathRadius", "float", s_Instance.fightFromPathRadius)
	self:SendDefault(s_guid,className, "investigateAroundTargetRadius", "float", s_Instance.investigateAroundTargetRadius)
	self:SendDefault(s_guid,className, "investigateCoverSearchWidth", "float", s_Instance.investigateCoverSearchWidth)
	self:SendDefault(s_guid,className, "investigateFreeLookRadius", "float", s_Instance.investigateFreeLookRadius)
	self:SendDefault(s_guid,className, "investigatePauseTimeMax", "float", s_Instance.investigatePauseTimeMax)
	self:SendDefault(s_guid,className, "investigatePauseTimeMin", "float", s_Instance.investigatePauseTimeMin)
	self:SendDefault(s_guid,className, "maxSuppressDistance", "float", s_Instance.maxSuppressDistance)
	self:SendDefault(s_guid,className, "maxSuppressorsRatio", "float", s_Instance.maxSuppressorsRatio)
	self:SendDefault(s_guid,className, "meleeCooldown", "float", s_Instance.meleeCooldown)
	self:SendDefault(s_guid,className, "poseChangeLockoutTime", "float", s_Instance.poseChangeLockoutTime)
	self:SendDefault(s_guid,className, "poseTransitionFireDelay", "float", s_Instance.poseTransitionFireDelay)
	self:SendDefault(s_guid,className, "precisionTimeout", "float", s_Instance.precisionTimeout)
	self:SendDefault(s_guid,className, "smokeLifeTime", "float", s_Instance.smokeLifeTime)
	self:SendDefault(s_guid,className, "smokeRadius", "float", s_Instance.smokeRadius)
	self:SendDefault(s_guid,className, "standStillMinTime", "float", s_Instance.standStillMinTime)
	self:SendDefault(s_guid,className, "stationaryBailDistance", "float", s_Instance.stationaryBailDistance)
	self:SendDefault(s_guid,className, "suppressMinLOFDistance", "float", s_Instance.suppressMinLOFDistance)
	self:SendDefault(s_guid,className, "suppressMinLOFOffsetDistance", "float", s_Instance.suppressMinLOFOffsetDistance)
	self:SendDefault(s_guid,className, "suppressOffsetXz", "float", s_Instance.suppressOffsetXz)
	self:SendDefault(s_guid,className, "suppressOffsetY", "float", s_Instance.suppressOffsetY)
end

function Type:CompareBoolEntityData (p_class, p_guid)
	local s_Instance = CompareBoolEntityData(p_class) 
 	local className = "CompareBoolEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bool", "bool", s_Instance.bool)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "triggerOnPropertyChange", "bool", s_Instance.triggerOnPropertyChange)
end

function Type:CompareEntityData (p_class, p_guid)
	local s_Instance = CompareEntityData(p_class) 
 	local className = "CompareEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "floatIn0", "float", s_Instance.floatIn0)
	self:SendDefault(s_guid,className, "floatIn1", "float", s_Instance.floatIn1)
	self:SendDefault(s_guid,className, "intIn0", "int", s_Instance.intIn0)
	self:SendDefault(s_guid,className, "intIn1", "int", s_Instance.intIn1)
	self:SendDefault(s_guid,className, "operator", "CompareOp", s_Instance.operator)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:CompareFloatEntityData (p_class, p_guid)
	local s_Instance = CompareFloatEntityData(p_class) 
 	local className = "CompareFloatEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "float", s_Instance.a)
	self:SendDefault(s_guid,className, "b", "float", s_Instance.b)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "triggerOnPropertyChange", "bool", s_Instance.triggerOnPropertyChange)
	self:SendDefault(s_guid,className, "triggerOnStart", "bool", s_Instance.triggerOnStart)
end

function Type:CompareIntEntityData (p_class, p_guid)
	local s_Instance = CompareIntEntityData(p_class) 
 	local className = "CompareIntEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "int", s_Instance.a)
	self:SendDefault(s_guid,className, "b", "int", s_Instance.b)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "triggerOnPropertyChange", "bool", s_Instance.triggerOnPropertyChange)
	self:SendDefault(s_guid,className, "triggerOnStart", "bool", s_Instance.triggerOnStart)
end

function Type:ComparisonLogicNode (p_class, p_guid)
	local s_Instance = ComparisonLogicNode(p_class) 
 	local className = "ComparisonLogicNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSourceInfo", "UIDataSourceInfo", s_Instance.dataSourceInfo)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "skipFractionals", "bool", s_Instance.skipFractionals)
end

function Type:ComponentData (p_class, p_guid)
	local s_Instance = ComponentData(p_class) 
 	local className = "ComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "components", "List<CtrRef)>", s_Instance.components)
	self:SendDefault(s_guid,className, "excluded", "bool", s_Instance.excluded)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:CompositeMeshEntityData (p_class, p_guid)
	local s_Instance = CompositeMeshEntityData(p_class) 
 	local className = "CompositeMeshEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
end

function Type:CompressorNodeData (p_class, p_guid)
	local s_Instance = CompressorNodeData(p_class) 
 	local className = "CompressorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackTime", "AudioGraphNodePort", s_Instance.attackTime)
	self:SendDefault(s_guid,className, "channelMode", "CompressorChannelMode", s_Instance.channelMode)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "ratio", "AudioGraphNodePort", s_Instance.ratio)
	self:SendDefault(s_guid,className, "releaseTime", "AudioGraphNodePort", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "threshold", "AudioGraphNodePort", s_Instance.threshold)
end

function Type:CompressorSettings (p_class, p_guid)
	local s_Instance = CompressorSettings(p_class) 
 	local className = "CompressorSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attack", "float", s_Instance.attack)
	self:SendDefault(s_guid,className, "ratio", "float", s_Instance.ratio)
	self:SendDefault(s_guid,className, "release", "float", s_Instance.release)
	self:SendDefault(s_guid,className, "threshold", "float", s_Instance.threshold)
end

function Type:ConditionGroup (p_class, p_guid)
	local s_Instance = ConditionGroup(p_class) 
 	local className = "ConditionGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "condition", "ConditionType", s_Instance.condition)
	self:SendDefault(s_guid,className, "true", "AudioGraphNodePort", s_Instance.trueValue)
	self:SendDefault(s_guid,className, "x", "AudioGraphNodePort", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
end

function Type:ConditionNodeData (p_class, p_guid)
	local s_Instance = ConditionNodeData(p_class) 
 	local className = "ConditionNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "conditions", "List<CtrRef)>", s_Instance.conditions)
end

function Type:ConeOutputNodeData (p_class, p_guid)
	local s_Instance = ConeOutputNodeData(p_class) 
 	local className = "ConeOutputNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "centerLevel", "AudioGraphNodePort", s_Instance.centerLevel)
	self:SendDefault(s_guid,className, "direction", "Vec3", s_Instance.direction)
	self:SendDefault(s_guid,className, "hFDampingAngle", "float", s_Instance.hFDampingAngle)
	self:SendDefault(s_guid,className, "innerAngle", "AudioGraphNodePort", s_Instance.innerAngle)
	self:SendDefault(s_guid,className, "lfeLevel", "AudioGraphNodePort", s_Instance.lfeLevel)
	self:SendDefault(s_guid,className, "outerAngle", "AudioGraphNodePort", s_Instance.outerAngle)
	self:SendDefault(s_guid,className, "outsideGain", "float", s_Instance.outsideGain)
	self:SendDefault(s_guid,className, "panPlugin", "SoundGraphPluginRef", s_Instance.panPlugin)
	self:SendDefault(s_guid,className, "panSize", "float", s_Instance.panSize)
	self:SendDefault(s_guid,className, "positionX", "AudioGraphNodePort", s_Instance.positionX)
	self:SendDefault(s_guid,className, "positionY", "AudioGraphNodePort", s_Instance.positionY)
	self:SendDefault(s_guid,className, "positionZ", "AudioGraphNodePort", s_Instance.positionZ)
	self:SendDefault(s_guid,className, "reverbGain", "float", s_Instance.reverbGain)
	self:SendDefault(s_guid,className, "reverbSend", "CtrRef", s_Instance.reverbSend)
	self:SendDefault(s_guid,className, "reverbSendPlugin", "SoundGraphPluginRef", s_Instance.reverbSendPlugin)
end

function Type:ConsoleCommandEntityData (p_class, p_guid)
	local s_Instance = ConsoleCommandEntityData(p_class) 
 	local className = "ConsoleCommandEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "commands", "List<string)>", s_Instance.commands)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ConsoleCommandTriggerEntityData (p_class, p_guid)
	local s_Instance = ConsoleCommandTriggerEntityData(p_class) 
 	local className = "ConsoleCommandTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "commandName", "string", s_Instance.commandName)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ConstantEvaluatorData (p_class, p_guid)
	local s_Instance = ConstantEvaluatorData(p_class) 
 	local className = "ConstantEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:ConstantForceData (p_class, p_guid)
	local s_Instance = ConstantForceData(p_class) 
 	local className = "ConstantForceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "condition", "ForceCondition", s_Instance.condition)
	self:SendDefault(s_guid,className, "space", "SpaceType", s_Instance.space)
	self:SendDefault(s_guid,className, "typeOfForce", "ForceType", s_Instance.typeOfForce)
	self:SendDefault(s_guid,className, "value", "Vec3", s_Instance.value)
end

function Type:Consumable (p_class, p_guid)
	local s_Instance = Consumable(p_class) 
 	local className = "Consumable"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "group", "ConsumableGroup", s_Instance.group)
	self:SendDefault(s_guid,className, "instance", "GUID", s_Instance.instance)
end

function Type:ConsumablesLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = ConsumablesLevelDescriptionComponent(p_class) 
 	local className = "ConsumablesLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "consumables", "List<Consumable)>", s_Instance.consumables)
end

function Type:ConsumableTriggerEntityData (p_class, p_guid)
	local s_Instance = ConsumableTriggerEntityData(p_class) 
 	local className = "ConsumableTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "consumableGroup", "fb.ConsumableGroup)", s_Instance.consumableGroup)
	self:SendDefault(s_guid,className, "persistent", "bool", s_Instance.persistent)
end

function Type:ContinueWeaponAmmoData (p_class, p_guid)
	local s_Instance = ContinueWeaponAmmoData(p_class) 
 	local className = "ContinueWeaponAmmoData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minMags", "int", s_Instance.minMags)
	self:SendDefault(s_guid,className, "weaponSlot", "int", s_Instance.weaponSlot)
end

function Type:ControllableEntityData (p_class, p_guid)
	local s_Instance = ControllableEntityData(p_class) 
 	local className = "ControllableEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultTeam", "TeamId", s_Instance.defaultTeam)
	self:SendDefault(s_guid,className, "fakeImmortal", "bool", s_Instance.fakeImmortal)
	self:SendDefault(s_guid,className, "forceForegroundRendering", "bool", s_Instance.forceForegroundRendering)
	self:SendDefault(s_guid,className, "immortal", "bool", s_Instance.immortal)
	self:SendDefault(s_guid,className, "lowHealthThreshold", "float", s_Instance.lowHealthThreshold)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "resetTeamOnLastPlayerExits", "bool", s_Instance.resetTeamOnLastPlayerExits)
	self:SendDefault(s_guid,className, "usePrediction", "bool", s_Instance.usePrediction)
end

function Type:CoopLobbyEntityData (p_class, p_guid)
	local s_Instance = CoopLobbyEntityData(p_class) 
 	local className = "CoopLobbyEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientConnectionTimeout", "float", s_Instance.clientConnectionTimeout)
	self:SendDefault(s_guid,className, "isInGame", "bool", s_Instance.isInGame)
end

function Type:CoreSettings (p_class, p_guid)
	local s_Instance = CoreSettings(p_class) 
 	local className = "CoreSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "availableLanguages", "string", s_Instance.availableLanguages)
	self:SendDefault(s_guid,className, "crashOnFatalErrors", "bool", s_Instance.crashOnFatalErrors)
	self:SendDefault(s_guid,className, "displayAsserts", "bool", s_Instance.displayAsserts)
	self:SendDefault(s_guid,className, "gameConfigurationName", "string", s_Instance.gameConfigurationName)
	self:SendDefault(s_guid,className, "hardwareCpuBias", "float", s_Instance.hardwareCpuBias)
	self:SendDefault(s_guid,className, "hardwareGpuBias", "float", s_Instance.hardwareGpuBias)
	self:SendDefault(s_guid,className, "hardwareProfile", "fb.HardwareProfile)", s_Instance.hardwareProfile)
	self:SendDefault(s_guid,className, "host", "string", s_Instance.host)
	self:SendDefault(s_guid,className, "hostUser", "string", s_Instance.hostUser)
	self:SendDefault(s_guid,className, "hostUserDomain", "string", s_Instance.hostUserDomain)
	self:SendDefault(s_guid,className, "initSeed", "string", s_Instance.initSeed)
	self:SendDefault(s_guid,className, "jobProcessorCount", "int", s_Instance.jobProcessorCount)
	self:SendDefault(s_guid,className, "liveEditingEnable", "bool", s_Instance.liveEditingEnable)
	self:SendDefault(s_guid,className, "logLevel", "CoreLogLevel", s_Instance.logLevel)
	self:SendDefault(s_guid,className, "maxJobThreadCount", "int", s_Instance.maxJobThreadCount)
	self:SendDefault(s_guid,className, "profileDirectoryName", "string", s_Instance.profileDirectoryName)
	self:SendDefault(s_guid,className, "randomSessionId", "int", s_Instance.randomSessionId)
	self:SendDefault(s_guid,className, "randomTickSeed", "int", s_Instance.randomTickSeed)
	self:SendDefault(s_guid,className, "randomTimeSeed", "int", s_Instance.randomTimeSeed)
	self:SendDefault(s_guid,className, "useDiskCaching", "bool", s_Instance.useDiskCaching)
	self:SendDefault(s_guid,className, "useStorageServer", "bool", s_Instance.useStorageServer)
end

function Type:CountDownEntityData (p_class, p_guid)
	local s_Instance = CountDownEntityData(p_class) 
 	local className = "CountDownEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
	self:SendDefault(s_guid,className, "startValue", "int", s_Instance.startValue)
end

function Type:CounterHelper (p_class, p_guid)
	local s_Instance = CounterHelper(p_class) 
 	local className = "CounterHelper"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dummy", "bool", s_Instance.dummy)
end

function Type:CounterStatus (p_class, p_guid)
	local s_Instance = CounterStatus(p_class) 
 	local className = "CounterStatus"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "currentValue", "float", s_Instance.currentValue)
	self:SendDefault(s_guid,className, "originalValue", "float", s_Instance.originalValue)
end

function Type:CoverConstantData (p_class, p_guid)
	local s_Instance = CoverConstantData(p_class) 
 	local className = "CoverConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackPositionEvaluationWeight", "float", s_Instance.attackPositionEvaluationWeight)
	self:SendDefault(s_guid,className, "continueMeleeFromCoverDistance", "float", s_Instance.continueMeleeFromCoverDistance)
	self:SendDefault(s_guid,className, "coverFailIgnoreTime", "float", s_Instance.coverFailIgnoreTime)
	self:SendDefault(s_guid,className, "coverSelectionMethod", "fb.CoverSelectionMethod)", s_Instance.coverSelectionMethod)
	self:SendDefault(s_guid,className, "crouchCoverModifier", "float", s_Instance.crouchCoverModifier)
	self:SendDefault(s_guid,className, "crouchHeight", "float", s_Instance.crouchHeight)
	self:SendDefault(s_guid,className, "dislikePreviousCoverWeight", "float", s_Instance.dislikePreviousCoverWeight)
	self:SendDefault(s_guid,className, "distanceEvaluationWeight", "float", s_Instance.distanceEvaluationWeight)
	self:SendDefault(s_guid,className, "enemiesEvaluationWeight", "float", s_Instance.enemiesEvaluationWeight)
	self:SendDefault(s_guid,className, "extraCoverSize", "float", s_Instance.extraCoverSize)
	self:SendDefault(s_guid,className, "inCoverDistance", "float", s_Instance.inCoverDistance)
	self:SendDefault(s_guid,className, "intermediateCoverSlotModifier", "float", s_Instance.intermediateCoverSlotModifier)
	self:SendDefault(s_guid,className, "maxCoversInMemory", "int", s_Instance.maxCoversInMemory)
	self:SendDefault(s_guid,className, "maxHeightDifference", "float", s_Instance.maxHeightDifference)
	self:SendDefault(s_guid,className, "mediumCoverModifier", "float", s_Instance.mediumCoverModifier)
	self:SendDefault(s_guid,className, "mediumHeight", "float", s_Instance.mediumHeight)
	self:SendDefault(s_guid,className, "minAttackableEnemyDistance", "float", s_Instance.minAttackableEnemyDistance)
	self:SendDefault(s_guid,className, "minimumOpenCoverWidth", "float", s_Instance.minimumOpenCoverWidth)
	self:SendDefault(s_guid,className, "optimalWeaponDistanceEvaluationWeight", "float", s_Instance.optimalWeaponDistanceEvaluationWeight)
	self:SendDefault(s_guid,className, "proneCoverModifier", "float", s_Instance.proneCoverModifier)
	self:SendDefault(s_guid,className, "proneHeight", "float", s_Instance.proneHeight)
	self:SendDefault(s_guid,className, "reevaluationTime", "float", s_Instance.reevaluationTime)
	self:SendDefault(s_guid,className, "searchRadius", "float", s_Instance.searchRadius)
	self:SendDefault(s_guid,className, "slotBlockedEdgeDistance", "float", s_Instance.slotBlockedEdgeDistance)
	self:SendDefault(s_guid,className, "slotEdgeDistance", "float", s_Instance.slotEdgeDistance)
	self:SendDefault(s_guid,className, "slotSize", "float", s_Instance.slotSize)
	self:SendDefault(s_guid,className, "slotSpacing", "float", s_Instance.slotSpacing)
	self:SendDefault(s_guid,className, "standCoverModifier", "float", s_Instance.standCoverModifier)
	self:SendDefault(s_guid,className, "standHeight", "float", s_Instance.standHeight)
	self:SendDefault(s_guid,className, "startMeleeFromCoverDistance", "float", s_Instance.startMeleeFromCoverDistance)
	self:SendDefault(s_guid,className, "switchCoverUrgencyThreshold", "float", s_Instance.switchCoverUrgencyThreshold)
	self:SendDefault(s_guid,className, "threatRadius", "float", s_Instance.threatRadius)
end

function Type:CoverEntityData (p_class, p_guid)
	local s_Instance = CoverEntityData(p_class) 
 	local className = "CoverEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coverType", "fb.CoverType)", s_Instance.coverType)
	self:SendDefault(s_guid,className, "leftEdgeBlocked", "bool", s_Instance.leftEdgeBlocked)
	self:SendDefault(s_guid,className, "rightEdgeBlocked", "bool", s_Instance.rightEdgeBlocked)
	self:SendDefault(s_guid,className, "slots", "List<CoverSlot)>", s_Instance.slots)
	self:SendDefault(s_guid,className, "topBlocked", "bool", s_Instance.topBlocked)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:CoverSlot (p_class, p_guid)
	local s_Instance = CoverSlot(p_class) 
 	local className = "CoverSlot"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
end

function Type:CoverWaypointData (p_class, p_guid)
	local s_Instance = CoverWaypointData(p_class) 
 	local className = "CoverWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coverTask", "AILocoCoverTaskData", s_Instance.coverTask)
end

function Type:CreateDestructionVolumeParams (p_class, p_guid)
	local s_Instance = CreateDestructionVolumeParams(p_class) 
 	local className = "CreateDestructionVolumeParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assetName", "string", s_Instance.assetName)
end

function Type:CreateRawFileParams (p_class, p_guid)
	local s_Instance = CreateRawFileParams(p_class) 
 	local className = "CreateRawFileParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assetName", "string", s_Instance.assetName)
	self:SendDefault(s_guid,className, "createResource", "bool", s_Instance.createResource)
	self:SendDefault(s_guid,className, "sourceFile", "string", s_Instance.sourceFile)
end

function Type:CriteriaAward (p_class, p_guid)
	local s_Instance = CriteriaAward(p_class) 
 	local className = "CriteriaAward"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "award", "CtrRef", s_Instance.award)
	self:SendDefault(s_guid,className, "count", "uint", s_Instance.count)
	self:SendDefault(s_guid,className, "sid", "string", s_Instance.sid)
end

function Type:CriteriaData (p_class, p_guid)
	local s_Instance = CriteriaData(p_class) 
 	local className = "CriteriaData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "completionValue", "float", s_Instance.completionValue)
	self:SendDefault(s_guid,className, "countEvents", "bool", s_Instance.countEvents)
	self:SendDefault(s_guid,className, "criteriaType", "fb.CriteriaType)", s_Instance.criteriaType)
	self:SendDefault(s_guid,className, "descriptionSid", "string", s_Instance.descriptionSid)
	self:SendDefault(s_guid,className, "gateList", "CtrRef", s_Instance.gateList)
	self:SendDefault(s_guid,className, "measuring", "StatEvent", s_Instance.measuring)
	self:SendDefault(s_guid,className, "orParamsX", "List<CtrRef)>", s_Instance.orParamsX)
	self:SendDefault(s_guid,className, "paramX", "CtrRef", s_Instance.paramX)
	self:SendDefault(s_guid,className, "paramY", "CtrRef", s_Instance.paramY)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
	self:SendDefault(s_guid,className, "scaleFactor", "float", s_Instance.scaleFactor)
	self:SendDefault(s_guid,className, "shouldHide", "bool", s_Instance.shouldHide)
	self:SendDefault(s_guid,className, "shouldSummarize", "bool", s_Instance.shouldSummarize)
end

function Type:CriteriaGateList (p_class, p_guid)
	local s_Instance = CriteriaGateList(p_class) 
 	local className = "CriteriaGateList"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criteriaGates", "List<float)>", s_Instance.criteriaGates)
end

function Type:CriteriaStarCategoryData (p_class, p_guid)
	local s_Instance = CriteriaStarCategoryData(p_class) 
 	local className = "CriteriaStarCategoryData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criteriaInstances", "List<CriteriaStarCategoryInstance)>", s_Instance.criteriaInstances)
end

function Type:CriteriaStarCategoryInstance (p_class, p_guid)
	local s_Instance = CriteriaStarCategoryInstance(p_class) 
 	local className = "CriteriaStarCategoryInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "paramX", "CtrRef", s_Instance.paramX)
	self:SendDefault(s_guid,className, "paramY", "CtrRef", s_Instance.paramY)
end

function Type:CriteriaStarData (p_class, p_guid)
	local s_Instance = CriteriaStarData(p_class) 
 	local className = "CriteriaStarData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "starTemplate", "CtrRef", s_Instance.starTemplate)
end

function Type:Crossfader2NodeData (p_class, p_guid)
	local s_Instance = Crossfader2NodeData(p_class) 
 	local className = "Crossfader2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ctrl", "AudioGraphNodePort", s_Instance.ctrl)
	self:SendDefault(s_guid,className, "ctrlOut1", "AudioGraphNodePort", s_Instance.ctrlOut1)
	self:SendDefault(s_guid,className, "ctrlOut2", "AudioGraphNodePort", s_Instance.ctrlOut2)
end

function Type:CrossfaderNodeData (p_class, p_guid)
	local s_Instance = CrossfaderNodeData(p_class) 
 	local className = "CrossfaderNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ctrl", "AudioGraphNodePort", s_Instance.ctrl)
	self:SendDefault(s_guid,className, "in1", "AudioGraphNodePort", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "AudioGraphNodePort", s_Instance.in2)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin1", "SoundGraphPluginRef", s_Instance.plugin1)
	self:SendDefault(s_guid,className, "plugin2", "SoundGraphPluginRef", s_Instance.plugin2)
end

function Type:CTFScoringHandlerData (p_class, p_guid)
	local s_Instance = CTFScoringHandlerData(p_class) 
 	local className = "CTFScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "captureAssistRadius", "float", s_Instance.captureAssistRadius)
	self:SendDefault(s_guid,className, "enemySuppressionTimeout", "float", s_Instance.enemySuppressionTimeout)
	self:SendDefault(s_guid,className, "enemyThreatRadius", "float", s_Instance.enemyThreatRadius)
	self:SendDefault(s_guid,className, "maxTeams", "int", s_Instance.maxTeams)
	self:SendDefault(s_guid,className, "pickUpAssistRadius", "float", s_Instance.pickUpAssistRadius)
end

function Type:Curve2D (p_class, p_guid)
	local s_Instance = Curve2D(p_class) 
 	local className = "Curve2D"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "curve", "List<Vec2)>", s_Instance.curve)
end

function Type:CustomizationTable (p_class, p_guid)
	local s_Instance = CustomizationTable(p_class) 
 	local className = "CustomizationTable"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "unlockParts", "List<CtrRef)>", s_Instance.unlockParts)
end

function Type:CustomizationUnlockParts (p_class, p_guid)
	local s_Instance = CustomizationUnlockParts(p_class) 
 	local className = "CustomizationUnlockParts"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "selectableUnlocks", "List<CtrRef)>", s_Instance.selectableUnlocks)
	self:SendDefault(s_guid,className, "uICategorySid", "string", s_Instance.uICategorySid)
end

function Type:CustomizeBaseEntityData (p_class, p_guid)
	local s_Instance = CustomizeBaseEntityData(p_class) 
 	local className = "CustomizeBaseEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:CustomizeCharacterData (p_class, p_guid)
	local s_Instance = CustomizeCharacterData(p_class) 
 	local className = "CustomizeCharacterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clearVisualState", "bool", s_Instance.clearVisualState)
	self:SendDefault(s_guid,className, "overrideCriticalHealthThreshold", "float", s_Instance.overrideCriticalHealthThreshold)
	self:SendDefault(s_guid,className, "overrideMaxHealth", "float", s_Instance.overrideMaxHealth)
	self:SendDefault(s_guid,className, "restoreToOriginalVisualState", "bool", s_Instance.restoreToOriginalVisualState)
	self:SendDefault(s_guid,className, "unlocks", "List<CtrRef)>", s_Instance.unlocks)
	self:SendDefault(s_guid,className, "visualGroups", "List<CustomizeVisual)>", s_Instance.visualGroups)
end

function Type:CustomizeCharacterEntityData (p_class, p_guid)
	local s_Instance = CustomizeCharacterEntityData(p_class) 
 	local className = "CustomizeCharacterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customizeCharacterData", "CtrRef", s_Instance.customizeCharacterData)
end

function Type:CustomizedMaterialData (p_class, p_guid)
	local s_Instance = CustomizedMaterialData(p_class) 
 	local className = "CustomizedMaterialData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "colorParameters", "List<CtrRef)>", s_Instance.colorParameters)
	self:SendDefault(s_guid,className, "materialNames", "List<string)>", s_Instance.materialNames)
	self:SendDefault(s_guid,className, "textureParameters", "List<CtrRef)>", s_Instance.textureParameters)
	self:SendDefault(s_guid,className, "textureSliceParameters", "List<CtrRef)>", s_Instance.textureSliceParameters)
end

function Type:CustomizedMeshMaterialsData (p_class, p_guid)
	local s_Instance = CustomizedMeshMaterialsData(p_class) 
 	local className = "CustomizedMeshMaterialsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "materialNames", "List<string)>", s_Instance.materialNames)
	self:SendDefault(s_guid,className, "meshBlueprint", "CtrRef", s_Instance.meshBlueprint)
end

function Type:CustomizeSoldierData (p_class, p_guid)
	local s_Instance = CustomizeSoldierData(p_class) 
 	local className = "CustomizeSoldierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeSlot", "WeaponSlot", s_Instance.activeSlot)
	self:SendDefault(s_guid,className, "deathPickup", "CtrRef", s_Instance.deathPickup)
	self:SendDefault(s_guid,className, "disableDeathPickup", "bool", s_Instance.disableDeathPickup)
	self:SendDefault(s_guid,className, "removeAllExistingWeapons", "bool", s_Instance.removeAllExistingWeapons)
	self:SendDefault(s_guid,className, "weapons", "List<UnlockWeaponAndSlot)>", s_Instance.weapons)
end

function Type:CustomizeSoldierEntityData (p_class, p_guid)
	local s_Instance = CustomizeSoldierEntityData(p_class) 
 	local className = "CustomizeSoldierEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customizeSoldierData", "CtrRef", s_Instance.customizeSoldierData)
end

function Type:CustomizeVisual (p_class, p_guid)
	local s_Instance = CustomizeVisual(p_class) 
 	local className = "CustomizeVisual"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "visual", "List<CtrRef)>", s_Instance.visual)
end

function Type:CustomReportValueData (p_class, p_guid)
	local s_Instance = CustomReportValueData(p_class) 
 	local className = "CustomReportValueData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataType", "PersistentValueDataType", s_Instance.dataType)
	self:SendDefault(s_guid,className, "kind", "CustomReportValueKind", s_Instance.kind)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:CustomSequenceTrackData (p_class, p_guid)
	local s_Instance = CustomSequenceTrackData(p_class) 
 	local className = "CustomSequenceTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventMap", "List<CtrRef)>", s_Instance.eventMap)
	self:SendDefault(s_guid,className, "inputLinkMap", "List<CtrRef)>", s_Instance.inputLinkMap)
	self:SendDefault(s_guid,className, "outputLinkMap", "List<CtrRef)>", s_Instance.outputLinkMap)
	self:SendDefault(s_guid,className, "sourceAndTargetPropertyMap", "List<CtrRef)>", s_Instance.sourceAndTargetPropertyMap)
	self:SendDefault(s_guid,className, "sourcePropertyMap", "List<CtrRef)>", s_Instance.sourcePropertyMap)
	self:SendDefault(s_guid,className, "targetPropertyMap", "List<CtrRef)>", s_Instance.targetPropertyMap)
	self:SendDefault(s_guid,className, "trackName", "string", s_Instance.trackName)
end

function Type:CustomSequenceTrackEventMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackEventMapping(p_class) 
 	local className = "CustomSequenceTrackEventMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sequenceEventID", "int", s_Instance.sequenceEventID)
	self:SendDefault(s_guid,className, "trackEventID", "int", s_Instance.trackEventID)
end

function Type:CustomSequenceTrackLinkMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackLinkMapping(p_class) 
 	local className = "CustomSequenceTrackLinkMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sequenceLinkID", "int", s_Instance.sequenceLinkID)
	self:SendDefault(s_guid,className, "trackLinkID", "int", s_Instance.trackLinkID)
end

function Type:CustomSequenceTrackPropertyMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackPropertyMapping(p_class) 
 	local className = "CustomSequenceTrackPropertyMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sequencePropertyID", "int", s_Instance.sequencePropertyID)
	self:SendDefault(s_guid,className, "trackPropertyID", "int", s_Instance.trackPropertyID)
end

function Type:DacNodeData (p_class, p_guid)
	local s_Instance = DacNodeData(p_class) 
 	local className = "DacNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dacPlugin", "SoundGraphPluginRef", s_Instance.dacPlugin)
	self:SendDefault(s_guid,className, "gainPlugin", "SoundGraphPluginRef", s_Instance.gainPlugin)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "sampleRate", "AudioGraphNodePort", s_Instance.sampleRate)
	self:SendDefault(s_guid,className, "speakerCount", "AudioGraphNodePort", s_Instance.speakerCount)
	self:SendDefault(s_guid,className, "vuPlugin", "SoundGraphPluginRef", s_Instance.vuPlugin)
end

function Type:DamageAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = DamageAreaTriggerEntityData(p_class) 
 	local className = "DamageAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageBangers", "bool", s_Instance.damageBangers)
	self:SendDefault(s_guid,className, "damageCharacters", "bool", s_Instance.damageCharacters)
	self:SendDefault(s_guid,className, "damagePerSecond", "float", s_Instance.damagePerSecond)
	self:SendDefault(s_guid,className, "damageTime", "float", s_Instance.damageTime)
	self:SendDefault(s_guid,className, "damageVehicles", "bool", s_Instance.damageVehicles)
	self:SendDefault(s_guid,className, "excludeImmortalCharactersInTeam", "bool", s_Instance.excludeImmortalCharactersInTeam)
	self:SendDefault(s_guid,className, "excludeShieldedSoldiers", "bool", s_Instance.excludeShieldedSoldiers)
	self:SendDefault(s_guid,className, "teamOfImmortalCharacters", "TeamId", s_Instance.teamOfImmortalCharacters)
end

function Type:DamageEffectComponentData (p_class, p_guid)
	local s_Instance = DamageEffectComponentData(p_class) 
 	local className = "DamageEffectComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bottomDamage", "Vec4", s_Instance.bottomDamage)
	self:SendDefault(s_guid,className, "debugDamage", "bool", s_Instance.debugDamage)
	self:SendDefault(s_guid,className, "endCriticalEffectHealthThreshold", "float", s_Instance.endCriticalEffectHealthThreshold)
	self:SendDefault(s_guid,className, "fallofTime", "float", s_Instance.fallofTime)
	self:SendDefault(s_guid,className, "frameWidth", "float", s_Instance.frameWidth)
	self:SendDefault(s_guid,className, "innerFrameOpacity", "float", s_Instance.innerFrameOpacity)
	self:SendDefault(s_guid,className, "leftDamage", "Vec4", s_Instance.leftDamage)
	self:SendDefault(s_guid,className, "maxOpacityDamagePercentage", "float", s_Instance.maxOpacityDamagePercentage)
	self:SendDefault(s_guid,className, "minDamagePercentageThreshold", "float", s_Instance.minDamagePercentageThreshold)
	self:SendDefault(s_guid,className, "outerFrameOpacity", "float", s_Instance.outerFrameOpacity)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "rightDamage", "Vec4", s_Instance.rightDamage)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
	self:SendDefault(s_guid,className, "startCriticalEffectHealthThreshold", "float", s_Instance.startCriticalEffectHealthThreshold)
	self:SendDefault(s_guid,className, "topDamage", "Vec4", s_Instance.topDamage)
end

function Type:DamageScoringHandlerData (p_class, p_guid)
	local s_Instance = DamageScoringHandlerData(p_class) 
 	local className = "DamageScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageTeamVehicleLimit", "float", s_Instance.damageTeamVehicleLimit)
	self:SendDefault(s_guid,className, "hotVehicleTimeout", "float", s_Instance.hotVehicleTimeout)
	self:SendDefault(s_guid,className, "killAssistLimit", "float", s_Instance.killAssistLimit)
	self:SendDefault(s_guid,className, "killAssistTimeout", "float", s_Instance.killAssistTimeout)
	self:SendDefault(s_guid,className, "repairVehicleLimit", "float", s_Instance.repairVehicleLimit)
	self:SendDefault(s_guid,className, "saviorDamageLimit", "float", s_Instance.saviorDamageLimit)
	self:SendDefault(s_guid,className, "saviorKillTimeout", "float", s_Instance.saviorKillTimeout)
	self:SendDefault(s_guid,className, "teamDamageLimit", "float", s_Instance.teamDamageLimit)
	self:SendDefault(s_guid,className, "teamHealingLimit", "float", s_Instance.teamHealingLimit)
	self:SendDefault(s_guid,className, "vehicleDestroyAssistLimit", "float", s_Instance.vehicleDestroyAssistLimit)
end

function Type:DamageToVehicleEvent (p_class, p_guid)
	local s_Instance = DamageToVehicleEvent(p_class) 
 	local className = "DamageToVehicleEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageAmount", "float", s_Instance.damageAmount)
	self:SendDefault(s_guid,className, "vehicleName", "string", s_Instance.vehicleName)
	self:SendDefault(s_guid,className, "weaponName", "string", s_Instance.weaponName)
end

function Type:DataBusData (p_class, p_guid)
	local s_Instance = DataBusData(p_class) 
 	local className = "DataBusData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "linkConnections", "List<LinkConnection)>", s_Instance.linkConnections)
	self:SendDefault(s_guid,className, "propertyConnections", "List<PropertyConnection)>", s_Instance.propertyConnections)
end

function Type:DataContainerAsset (p_class, p_guid)
	local s_Instance = DataContainerAsset(p_class) 
 	local className = "DataContainerAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "CtrRef", s_Instance.data)
end

function Type:DataCopSettings (p_class, p_guid)
	local s_Instance = DataCopSettings(p_class) 
 	local className = "DataCopSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<DataCopValueSetting)>", s_Instance.values)
end

function Type:DataCopValueSetting (p_class, p_guid)
	local s_Instance = DataCopValueSetting(p_class) 
 	local className = "DataCopValueSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataKey", "int", s_Instance.dataKey)
	self:SendDefault(s_guid,className, "frameSpacing", "int", s_Instance.frameSpacing)
	self:SendDefault(s_guid,className, "offset", "int", s_Instance.offset)
end

function Type:DataField (p_class, p_guid)
	local s_Instance = DataField(p_class) 
 	local className = "DataField"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accessType", "FieldAccessType", s_Instance.accessType)
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
	self:SendDefault(s_guid,className, "valueRef", "CtrRef", s_Instance.valueRef)
end

function Type:DataGetNode (p_class, p_guid)
	local s_Instance = DataGetNode(p_class) 
 	local className = "DataGetNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:DataIncrementNode (p_class, p_guid)
	local s_Instance = DataIncrementNode(p_class) 
 	local className = "DataIncrementNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "incrementSize", "float", s_Instance.incrementSize)
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:DataSetNode (p_class, p_guid)
	local s_Instance = DataSetNode(p_class) 
 	local className = "DataSetNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "forceUpdate", "bool", s_Instance.forceUpdate)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
	self:SendDefault(s_guid,className, "param", "string", s_Instance.param)
	self:SendDefault(s_guid,className, "setToEmptyString", "bool", s_Instance.setToEmptyString)
end

function Type:DataSource (p_class, p_guid)
	local s_Instance = DataSource(p_class) 
 	local className = "DataSource"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "CtrRef", s_Instance.category)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:DataStepNode (p_class, p_guid)
	local s_Instance = DataStepNode(p_class) 
 	local className = "DataStepNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "currentStepDataSource", "UIDataSourceInfo", s_Instance.currentStepDataSource)
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
	self:SendDefault(s_guid,className, "steps", "List<float)>", s_Instance.steps)
end

function Type:DataToggleNode (p_class, p_guid)
	local s_Instance = DataToggleNode(p_class) 
 	local className = "DataToggleNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:DataVisualizerValue (p_class, p_guid)
	local s_Instance = DataVisualizerValue(p_class) 
 	local className = "DataVisualizerValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:DeathAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = DeathAreaTriggerEntityData(p_class) 
 	local className = "DeathAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damage", "float", s_Instance.damage)
	self:SendDefault(s_guid,className, "timeToReturn", "float", s_Instance.timeToReturn)
end

function Type:DeathEvent (p_class, p_guid)
	local s_Instance = DeathEvent(p_class) 
 	local className = "DeathEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "killerId", "ulong", s_Instance.killerId)
	self:SendDefault(s_guid,className, "killerPosition", "Vec3", s_Instance.killerPosition)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
	self:SendDefault(s_guid,className, "weapon", "string", s_Instance.weapon)
end

function Type:DebrisClusterData (p_class, p_guid)
	local s_Instance = DebrisClusterData(p_class) 
 	local className = "DebrisClusterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activateOnSpawn", "bool", s_Instance.activateOnSpawn)
	self:SendDefault(s_guid,className, "activationEffect", "CtrRef", s_Instance.activationEffect)
	self:SendDefault(s_guid,className, "activationPushForceMul", "float", s_Instance.activationPushForceMul)
	self:SendDefault(s_guid,className, "clientSideOnly", "bool", s_Instance.clientSideOnly)
	self:SendDefault(s_guid,className, "clusterLifetime", "float", s_Instance.clusterLifetime)
	self:SendDefault(s_guid,className, "compositePartCount", "uint", s_Instance.compositePartCount)
	self:SendDefault(s_guid,className, "deactivatePartsOnSleep", "bool", s_Instance.deactivatePartsOnSleep)
	self:SendDefault(s_guid,className, "effect", "CtrRef", s_Instance.effect)
	self:SendDefault(s_guid,className, "explosion", "CtrRef", s_Instance.explosion)
	self:SendDefault(s_guid,className, "inEffectWorldOnly", "bool", s_Instance.inEffectWorldOnly)
	self:SendDefault(s_guid,className, "initRotationRndMul", "Vec3", s_Instance.initRotationRndMul)
	self:SendDefault(s_guid,className, "killPartsOnCollision", "bool", s_Instance.killPartsOnCollision)
	self:SendDefault(s_guid,className, "maxActivePartsCount", "uint", s_Instance.maxActivePartsCount)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "noCollision", "bool", s_Instance.noCollision)
	self:SendDefault(s_guid,className, "onPartCollisionEnable", "bool", s_Instance.onPartCollisionEnable)
	self:SendDefault(s_guid,className, "onPartCollisionSpeedThreshold", "float", s_Instance.onPartCollisionSpeedThreshold)
	self:SendDefault(s_guid,className, "partHierarchy", "List<DebrisClusterPartInfoData)>", s_Instance.partHierarchy)
	self:SendDefault(s_guid,className, "partialDestruction", "bool", s_Instance.partialDestruction)
	self:SendDefault(s_guid,className, "physicsData", "CtrRef", s_Instance.physicsData)
	self:SendDefault(s_guid,className, "projectileForceTransferMul", "float", s_Instance.projectileForceTransferMul)
	self:SendDefault(s_guid,className, "pushVelocityMul", "Vec3", s_Instance.pushVelocityMul)
	self:SendDefault(s_guid,className, "pushVelocityRndMul", "Vec3", s_Instance.pushVelocityRndMul)
	self:SendDefault(s_guid,className, "spawnExplosionOnFirstImpactOnly", "bool", s_Instance.spawnExplosionOnFirstImpactOnly)
end

function Type:DebrisClusterPartInfoData (p_class, p_guid)
	local s_Instance = DebrisClusterPartInfoData(p_class) 
 	local className = "DebrisClusterPartInfoData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularVelocity", "Vec3", s_Instance.angularVelocity)
	self:SendDefault(s_guid,className, "inEffectWorldOnly", "bool", s_Instance.inEffectWorldOnly)
	self:SendDefault(s_guid,className, "linearVelocity", "Vec3", s_Instance.linearVelocity)
	self:SendDefault(s_guid,className, "numberOfChildren", "int", s_Instance.numberOfChildren)
	self:SendDefault(s_guid,className, "partIndex", "int", s_Instance.partIndex)
	self:SendDefault(s_guid,className, "splitSpeedThreshold", "float", s_Instance.splitSpeedThreshold)
	self:SendDefault(s_guid,className, "syncContinous", "bool", s_Instance.syncContinous)
	self:SendDefault(s_guid,className, "syncRestPosition", "bool", s_Instance.syncRestPosition)
end

function Type:DebrisHavokInfo (p_class, p_guid)
	local s_Instance = DebrisHavokInfo(p_class) 
 	local className = "DebrisHavokInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "havokAsset", "CtrRef", s_Instance.havokAsset)
	self:SendDefault(s_guid,className, "reserveCount", "int", s_Instance.reserveCount)
end

function Type:DebrisSystemAsset (p_class, p_guid)
	local s_Instance = DebrisSystemAsset(p_class) 
 	local className = "DebrisSystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "havokMeshCount", "int", s_Instance.havokMeshCount)
	self:SendDefault(s_guid,className, "havokMeshes", "List<DebrisHavokInfo)>", s_Instance.havokMeshes)
end

function Type:DebrisSystemMetrics (p_class, p_guid)
	local s_Instance = DebrisSystemMetrics(p_class) 
 	local className = "DebrisSystemMetrics"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "havokParticleCount", "int", s_Instance.havokParticleCount)
	self:SendDefault(s_guid,className, "havokParticlePartCount", "int", s_Instance.havokParticlePartCount)
end

function Type:DebrisSystemSettings (p_class, p_guid)
	local s_Instance = DebrisSystemSettings(p_class) 
 	local className = "DebrisSystemSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawStats", "uint", s_Instance.drawStats)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "enableJobs", "bool", s_Instance.enableJobs)
	self:SendDefault(s_guid,className, "meshBatchCountLimit", "uint", s_Instance.meshBatchCountLimit)
	self:SendDefault(s_guid,className, "meshCullingDistance", "float", s_Instance.meshCullingDistance)
	self:SendDefault(s_guid,className, "meshDrawBoundingBoxes", "bool", s_Instance.meshDrawBoundingBoxes)
	self:SendDefault(s_guid,className, "meshDrawCountLimit", "uint", s_Instance.meshDrawCountLimit)
	self:SendDefault(s_guid,className, "meshDrawCullStats", "bool", s_Instance.meshDrawCullStats)
	self:SendDefault(s_guid,className, "meshDrawTransforms", "bool", s_Instance.meshDrawTransforms)
	self:SendDefault(s_guid,className, "meshHavokRenderingEnable", "bool", s_Instance.meshHavokRenderingEnable)
	self:SendDefault(s_guid,className, "meshRenderingEnable", "bool", s_Instance.meshRenderingEnable)
	self:SendDefault(s_guid,className, "meshShadowEnable", "bool", s_Instance.meshShadowEnable)
	self:SendDefault(s_guid,className, "meshStreamingPriorityMultiplier", "float", s_Instance.meshStreamingPriorityMultiplier)
	self:SendDefault(s_guid,className, "meshViewCullingEnable", "bool", s_Instance.meshViewCullingEnable)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
end

function Type:DebugComponentData (p_class, p_guid)
	local s_Instance = DebugComponentData(p_class) 
 	local className = "DebugComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugTexture", "CtrRef", s_Instance.debugTexture)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "fullscreen", "bool", s_Instance.fullscreen)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:DebugConstantData (p_class, p_guid)
	local s_Instance = DebugConstantData(p_class) 
 	local className = "DebugConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "botDebugDistance", "float", s_Instance.botDebugDistance)
	self:SendDefault(s_guid,className, "graphDataBuffer", "uint", s_Instance.graphDataBuffer)
	self:SendDefault(s_guid,className, "inaccuracyEnabled", "bool", s_Instance.inaccuracyEnabled)
	self:SendDefault(s_guid,className, "inViewModeFOV", "float", s_Instance.inViewModeFOV)
	self:SendDefault(s_guid,className, "minDecisionTime", "float", s_Instance.minDecisionTime)
end

function Type:DebugEventInput (p_class, p_guid)
	local s_Instance = DebugEventInput(p_class) 
 	local className = "DebugEventInput"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "e", "AudioGraphNodePort", s_Instance.e)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "requireTriggeredAndSet", "bool", s_Instance.requireTriggeredAndSet)
end

function Type:DebugMenuItemEntityData (p_class, p_guid)
	local s_Instance = DebugMenuItemEntityData(p_class) 
 	local className = "DebugMenuItemEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "itemType", "DebugMenuItemType", s_Instance.itemType)
	self:SendDefault(s_guid,className, "text", "string", s_Instance.text)
end

function Type:DebugMenuSubMenuEntityData (p_class, p_guid)
	local s_Instance = DebugMenuSubMenuEntityData(p_class) 
 	local className = "DebugMenuSubMenuEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "text", "string", s_Instance.text)
end

function Type:DebugRenderSettings (p_class, p_guid)
	local s_Instance = DebugRenderSettings(p_class) 
 	local className = "DebugRenderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawStatsEnable", "bool", s_Instance.drawStatsEnable)
	self:SendDefault(s_guid,className, "dxLine2dAntialiasingEnable", "bool", s_Instance.dxLine2dAntialiasingEnable)
	self:SendDefault(s_guid,className, "dxLine3dAntialiasingEnable", "bool", s_Instance.dxLine3dAntialiasingEnable)
	self:SendDefault(s_guid,className, "dxMaxVertexCount", "uint", s_Instance.dxMaxVertexCount)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "processJobCount", "int", s_Instance.processJobCount)
	self:SendDefault(s_guid,className, "ps3SpuEnable", "bool", s_Instance.ps3SpuEnable)
	self:SendDefault(s_guid,className, "ps3SpuFrameBufferSize", "uint", s_Instance.ps3SpuFrameBufferSize)
	self:SendDefault(s_guid,className, "textQueueLocationTop", "bool", s_Instance.textQueueLocationTop)
	self:SendDefault(s_guid,className, "textQueueMaxLineCount", "uint", s_Instance.textQueueMaxLineCount)
	self:SendDefault(s_guid,className, "textQueueTimeVisible", "float", s_Instance.textQueueTimeVisible)
	self:SendDefault(s_guid,className, "textViewDistance", "float", s_Instance.textViewDistance)
end

function Type:DebugSurveyEvent (p_class, p_guid)
	local s_Instance = DebugSurveyEvent(p_class) 
 	local className = "DebugSurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "playerName", "string", s_Instance.playerName)
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
end

function Type:DebugTextEntityData (p_class, p_guid)
	local s_Instance = DebugTextEntityData(p_class) 
 	local className = "DebugTextEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "centered", "bool", s_Instance.centered)
	self:SendDefault(s_guid,className, "debugText", "string", s_Instance.debugText)
	self:SendDefault(s_guid,className, "depthTest", "bool", s_Instance.depthTest)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
	self:SendDefault(s_guid,className, "scaleWithDistance", "bool", s_Instance.scaleWithDistance)
	self:SendDefault(s_guid,className, "textColor", "Vec3", s_Instance.textColor)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:DebugValueInput (p_class, p_guid)
	local s_Instance = DebugValueInput(p_class) 
 	local className = "DebugValueInput"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "renderType", "DebugRenderType", s_Instance.renderType)
	self:SendDefault(s_guid,className, "v", "AudioGraphNodePort", s_Instance.v)
end

function Type:DecalAtlasTile (p_class, p_guid)
	local s_Instance = DecalAtlasTile(p_class) 
 	local className = "DecalAtlasTile"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flipX", "bool", s_Instance.flipX)
	self:SendDefault(s_guid,className, "flipY", "bool", s_Instance.flipY)
	self:SendDefault(s_guid,className, "tileCountX", "float", s_Instance.tileCountX)
	self:SendDefault(s_guid,className, "tileCountY", "float", s_Instance.tileCountY)
	self:SendDefault(s_guid,className, "tileIndexX", "float", s_Instance.tileIndexX)
	self:SendDefault(s_guid,className, "tileIndexY", "float", s_Instance.tileIndexY)
end

function Type:DecalEntityData (p_class, p_guid)
	local s_Instance = DecalEntityData(p_class) 
 	local className = "DecalEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasTile", "DecalAtlasTile", s_Instance.atlasTile)
	self:SendDefault(s_guid,className, "materialIndex", "sbyte", s_Instance.materialIndex)
	self:SendDefault(s_guid,className, "projected", "bool", s_Instance.projected)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
	self:SendDefault(s_guid,className, "sortingPriority", "sbyte", s_Instance.sortingPriority)
end

function Type:DecalSettings (p_class, p_guid)
	local s_Instance = DecalSettings(p_class) 
 	local className = "DecalSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugMemUsageEnable", "bool", s_Instance.debugMemUsageEnable)
	self:SendDefault(s_guid,className, "debugWarningsEnable", "bool", s_Instance.debugWarningsEnable)
	self:SendDefault(s_guid,className, "drawEnable", "bool", s_Instance.drawEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "nvidiaStreamOutputWorkaroundEnable", "bool", s_Instance.nvidiaStreamOutputWorkaroundEnable)
	self:SendDefault(s_guid,className, "ringBufferMaxVertexCount", "uint", s_Instance.ringBufferMaxVertexCount)
	self:SendDefault(s_guid,className, "staticBufferMaxVertexCount", "uint", s_Instance.staticBufferMaxVertexCount)
	self:SendDefault(s_guid,className, "systemEnable", "bool", s_Instance.systemEnable)
	self:SendDefault(s_guid,className, "systemEnable2", "bool", s_Instance.systemEnable2)
end

function Type:DecalTemplateData (p_class, p_guid)
	local s_Instance = DecalTemplateData(p_class) 
 	local className = "DecalTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasTile", "DecalAtlasTile", s_Instance.atlasTile)
	self:SendDefault(s_guid,className, "clipAngle", "float", s_Instance.clipAngle)
	self:SendDefault(s_guid,className, "materialIndex", "sbyte", s_Instance.materialIndex)
	self:SendDefault(s_guid,className, "meshUVIndex", "int", s_Instance.meshUVIndex)
	self:SendDefault(s_guid,className, "normalOffset", "float", s_Instance.normalOffset)
	self:SendDefault(s_guid,className, "projected", "bool", s_Instance.projected)
	self:SendDefault(s_guid,className, "projectMultiple", "bool", s_Instance.projectMultiple)
	self:SendDefault(s_guid,className, "proximityRadiusFactor", "float", s_Instance.proximityRadiusFactor)
	self:SendDefault(s_guid,className, "randomRotation", "float", s_Instance.randomRotation)
	self:SendDefault(s_guid,className, "randomSize", "float", s_Instance.randomSize)
	self:SendDefault(s_guid,className, "rotation", "float", s_Instance.rotation)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
	self:SendDefault(s_guid,className, "size", "float", s_Instance.size)
	self:SendDefault(s_guid,className, "sortingPriority", "sbyte", s_Instance.sortingPriority)
end

function Type:DecisionConstantData (p_class, p_guid)
	local s_Instance = DecisionConstantData(p_class) 
 	local className = "DecisionConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowEmergencyGoalInterrupt", "bool", s_Instance.allowEmergencyGoalInterrupt)
	self:SendDefault(s_guid,className, "allowUninterruptibleBehaviours", "bool", s_Instance.allowUninterruptibleBehaviours)
	self:SendDefault(s_guid,className, "newEnemyDecideMaxDistance", "float", s_Instance.newEnemyDecideMaxDistance)
end

function Type:DefaultSelectionItem (p_class, p_guid)
	local s_Instance = DefaultSelectionItem(p_class) 
 	local className = "DefaultSelectionItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultSelectionIndex", "int", s_Instance.defaultSelectionIndex)
	self:SendDefault(s_guid,className, "defaultSelectionQuery", "UIDataSourceInfo", s_Instance.defaultSelectionQuery)
end

function Type:DefibrillatorWeaponData (p_class, p_guid)
	local s_Instance = DefibrillatorWeaponData(p_class) 
 	local className = "DefibrillatorWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackTime", "float", s_Instance.attackTime)
	self:SendDefault(s_guid,className, "reviveTime", "float", s_Instance.reviveTime)
end

function Type:DelayEntityData (p_class, p_guid)
	local s_Instance = DelayEntityData(p_class) 
 	local className = "DelayEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "delay", "float", s_Instance.delay)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "removeDuplicateEvents", "bool", s_Instance.removeDuplicateEvents)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
end

function Type:DelayNodeData (p_class, p_guid)
	local s_Instance = DelayNodeData(p_class) 
 	local className = "DelayNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delayTime", "AudioGraphNodePort", s_Instance.delayTime)
	self:SendDefault(s_guid,className, "feedback", "AudioGraphNodePort", s_Instance.feedback)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "maxDelayTime", "float", s_Instance.maxDelayTime)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:DelayTriggerEntityData (p_class, p_guid)
	local s_Instance = DelayTriggerEntityData(p_class) 
 	local className = "DelayTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoTriggerEvent", "bool", s_Instance.autoTriggerEvent)
end

function Type:DeltaGroup (p_class, p_guid)
	local s_Instance = DeltaGroup(p_class) 
 	local className = "DeltaGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delta", "AudioGraphNodePort", s_Instance.delta)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
end

function Type:DeltaNodeData (p_class, p_guid)
	local s_Instance = DeltaNodeData(p_class) 
 	local className = "DeltaNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deltas", "List<CtrRef)>", s_Instance.deltas)
end

function Type:DemoSettings (p_class, p_guid)
	local s_Instance = DemoSettings(p_class) 
 	local className = "DemoSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowOverwrite", "bool", s_Instance.allowOverwrite)
	self:SendDefault(s_guid,className, "changePlayerInterval", "uint", s_Instance.changePlayerInterval)
	self:SendDefault(s_guid,className, "forcedDeltaTickCount", "uint", s_Instance.forcedDeltaTickCount)
	self:SendDefault(s_guid,className, "lockToPlayerName", "string", s_Instance.lockToPlayerName)
	self:SendDefault(s_guid,className, "lockToRandomPlayer", "bool", s_Instance.lockToRandomPlayer)
	self:SendDefault(s_guid,className, "logPerformance", "bool", s_Instance.logPerformance)
	self:SendDefault(s_guid,className, "loopingDemo", "bool", s_Instance.loopingDemo)
	self:SendDefault(s_guid,className, "pauseOnStartup", "bool", s_Instance.pauseOnStartup)
	self:SendDefault(s_guid,className, "playbackDemoFileName", "string", s_Instance.playbackDemoFileName)
	self:SendDefault(s_guid,className, "recordDemoFileName", "string", s_Instance.recordDemoFileName)
	self:SendDefault(s_guid,className, "shutdownOnDemoComplete", "bool", s_Instance.shutdownOnDemoComplete)
	self:SendDefault(s_guid,className, "startProfilingOnFrame", "uint", s_Instance.startProfilingOnFrame)
	self:SendDefault(s_guid,className, "stopProfilingOnFrame", "uint", s_Instance.stopProfilingOnFrame)
	self:SendDefault(s_guid,className, "suppressDebugLog", "bool", s_Instance.suppressDebugLog)
	self:SendDefault(s_guid,className, "takeScreenshotOnFrame", "uint", s_Instance.takeScreenshotOnFrame)
	self:SendDefault(s_guid,className, "timeDemo", "string", s_Instance.timeDemo)
end

function Type:DeMuxNodeData (p_class, p_guid)
	local s_Instance = DeMuxNodeData(p_class) 
 	local className = "DeMuxNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
	self:SendDefault(s_guid,className, "wrapValue", "bool", s_Instance.wrapValue)
end

function Type:DeMuxOutput (p_class, p_guid)
	local s_Instance = DeMuxOutput(p_class) 
 	local className = "DeMuxOutput"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
end

function Type:DestroyLevelCommandEntityData (p_class, p_guid)
	local s_Instance = DestroyLevelCommandEntityData(p_class) 
 	local className = "DestroyLevelCommandEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "destroyDelay", "uint", s_Instance.destroyDelay)
	self:SendDefault(s_guid,className, "instanceCountDestroyedPerFrame", "uint", s_Instance.instanceCountDestroyedPerFrame)
end

function Type:DestructionCommandEntityData (p_class, p_guid)
	local s_Instance = DestructionCommandEntityData(p_class) 
 	local className = "DestructionCommandEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "instanceCountDestroyedPerFrame", "uint", s_Instance.instanceCountDestroyedPerFrame)
	self:SendDefault(s_guid,className, "instanceCountDestroyedPerType", "uint", s_Instance.instanceCountDestroyedPerType)
end

function Type:DestructionControllerComponentData (p_class, p_guid)
	local s_Instance = DestructionControllerComponentData(p_class) 
 	local className = "DestructionControllerComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attachToNearbyObjects", "bool", s_Instance.attachToNearbyObjects)
	self:SendDefault(s_guid,className, "debrisClusters", "List<CtrRef)>", s_Instance.debrisClusters)
end

function Type:DestructionMaskVolumeEntityData (p_class, p_guid)
	local s_Instance = DestructionMaskVolumeEntityData(p_class) 
 	local className = "DestructionMaskVolumeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dustAccumulationCurve", "Vec4", s_Instance.dustAccumulationCurve)
	self:SendDefault(s_guid,className, "dustAccumulationLifeTime", "float", s_Instance.dustAccumulationLifeTime)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "shader", "SurfaceShaderInstanceDataStruct", s_Instance.shader)
	self:SendDefault(s_guid,className, "shaderUserMasks", "Vec4", s_Instance.shaderUserMasks)
end

function Type:DestructionPartComponentData (p_class, p_guid)
	local s_Instance = DestructionPartComponentData(p_class) 
 	local className = "DestructionPartComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "connectivityType", "DestructionConnectivityType", s_Instance.connectivityType)
	self:SendDefault(s_guid,className, "fixed", "bool", s_Instance.fixed)
	self:SendDefault(s_guid,className, "fragile", "bool", s_Instance.fragile)
	self:SendDefault(s_guid,className, "objects", "List<CtrRef)>", s_Instance.objects)
	self:SendDefault(s_guid,className, "partIndex", "uint", s_Instance.partIndex)
end

function Type:DestructionVolumeAsset (p_class, p_guid)
	local s_Instance = DestructionVolumeAsset(p_class) 
 	local className = "DestructionVolumeAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasTextureScale", "float", s_Instance.atlasTextureScale)
	self:SendDefault(s_guid,className, "diffuseAtlas", "CtrRef", s_Instance.diffuseAtlas)
	self:SendDefault(s_guid,className, "normalmapAtlas", "CtrRef", s_Instance.normalmapAtlas)
end

function Type:DestructionVolumeAtlasTextureData (p_class, p_guid)
	local s_Instance = DestructionVolumeAtlasTextureData(p_class) 
 	local className = "DestructionVolumeAtlasTextureData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasAlphaInfluence", "float", s_Instance.atlasAlphaInfluence)
	self:SendDefault(s_guid,className, "maskEdgeThickness", "float", s_Instance.maskEdgeThickness)
end

function Type:DestructionVolumeComponentData (p_class, p_guid)
	local s_Instance = DestructionVolumeComponentData(p_class) 
 	local className = "DestructionVolumeComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "destructionVolumeData", "CtrRef", s_Instance.destructionVolumeData)
end

function Type:DestructionVolumeData (p_class, p_guid)
	local s_Instance = DestructionVolumeData(p_class) 
 	local className = "DestructionVolumeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
	self:SendDefault(s_guid,className, "boundingBox", "AxisAlignedBox", s_Instance.boundingBox)
	self:SendDefault(s_guid,className, "impacts", "List<Vec4)>", s_Instance.impacts)
	self:SendDefault(s_guid,className, "partToImpactIndices", "List<uint)>", s_Instance.partToImpactIndices)
end

function Type:DestructionVolumeProjectionData (p_class, p_guid)
	local s_Instance = DestructionVolumeProjectionData(p_class) 
 	local className = "DestructionVolumeProjectionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "normal", "Vec3", s_Instance.normal)
	self:SendDefault(s_guid,className, "tangentAngle", "float", s_Instance.tangentAngle)
end

function Type:DetonatedWeaponData (p_class, p_guid)
	local s_Instance = DetonatedWeaponData(p_class) 
 	local className = "DetonatedWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lockingController", "CtrRef", s_Instance.lockingController)
	self:SendDefault(s_guid,className, "range", "float", s_Instance.range)
end

function Type:DialogNode (p_class, p_guid)
	local s_Instance = DialogNode(p_class) 
 	local className = "DialogNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buttons", "List<UIPopupButton)>", s_Instance.buttons)
	self:SendDefault(s_guid,className, "dialogText", "string", s_Instance.dialogText)
	self:SendDefault(s_guid,className, "dialogTitle", "string", s_Instance.dialogTitle)
end

function Type:DialogSamplerNodeData (p_class, p_guid)
	local s_Instance = DialogSamplerNodeData(p_class) 
 	local className = "DialogSamplerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "continue", "AudioGraphNodePort", s_Instance.continue)
	self:SendDefault(s_guid,className, "finished", "AudioGraphNodePort", s_Instance.finished)
	self:SendDefault(s_guid,className, "gainPlugin", "SoundGraphPluginRef", s_Instance.gainPlugin)
	self:SendDefault(s_guid,className, "output", "AudioGraphNodePort", s_Instance.output)
	self:SendDefault(s_guid,className, "pausePlugin", "SoundGraphPluginRef", s_Instance.pausePlugin)
	self:SendDefault(s_guid,className, "pitch", "AudioGraphNodePort", s_Instance.pitch)
	self:SendDefault(s_guid,className, "resamplePlugin", "SoundGraphPluginRef", s_Instance.resamplePlugin)
	self:SendDefault(s_guid,className, "sndPlayerPlugin", "SoundGraphPluginRef", s_Instance.sndPlayerPlugin)
	self:SendDefault(s_guid,className, "tailLength", "float", s_Instance.tailLength)
	self:SendDefault(s_guid,className, "triggered", "AudioGraphNodePort", s_Instance.triggered)
end

function Type:DifficultyData (p_class, p_guid)
	local s_Instance = DifficultyData(p_class) 
 	local className = "DifficultyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "adrenalineKillLimit", "int", s_Instance.adrenalineKillLimit)
	self:SendDefault(s_guid,className, "aiBulletDamageHumanCooldown", "float", s_Instance.aiBulletDamageHumanCooldown)
	self:SendDefault(s_guid,className, "aIData", "CtrRef", s_Instance.aIData)
	self:SendDefault(s_guid,className, "criticalFakeImmortalModifier", "float", s_Instance.criticalFakeImmortalModifier)
	self:SendDefault(s_guid,className, "criticalHealthJesusModeTimeModifier", "float", s_Instance.criticalHealthJesusModeTimeModifier)
	self:SendDefault(s_guid,className, "difficulty", "fb.Difficulty)", s_Instance.difficulty)
	self:SendDefault(s_guid,className, "enemiesHealthModifier", "float", s_Instance.enemiesHealthModifier)
	self:SendDefault(s_guid,className, "friendlyDamageModifier", "float", s_Instance.friendlyDamageModifier)
	self:SendDefault(s_guid,className, "friendsHealthModifier", "float", s_Instance.friendsHealthModifier)
	self:SendDefault(s_guid,className, "gameType", "PersistenceGameType", s_Instance.gameType)
	self:SendDefault(s_guid,className, "humanHealthModifier", "float", s_Instance.humanHealthModifier)
	self:SendDefault(s_guid,className, "humanInCriticalHealth", "float", s_Instance.humanInCriticalHealth)
	self:SendDefault(s_guid,className, "humanInCriticalHealthDamageModifier", "float", s_Instance.humanInCriticalHealthDamageModifier)
	self:SendDefault(s_guid,className, "humanRegenerationRateModifier", "float", s_Instance.humanRegenerationRateModifier)
	self:SendDefault(s_guid,className, "interactiveManDownDamageModifier", "float", s_Instance.interactiveManDownDamageModifier)
	self:SendDefault(s_guid,className, "interactiveManDownReviveTime", "float", s_Instance.interactiveManDownReviveTime)
	self:SendDefault(s_guid,className, "interactiveManDownTimeMultiplier", "float", s_Instance.interactiveManDownTimeMultiplier)
	self:SendDefault(s_guid,className, "snapBoxModifier", "Vec3", s_Instance.snapBoxModifier)
	self:SendDefault(s_guid,className, "stickyBoxModifier", "Vec3", s_Instance.stickyBoxModifier)
	self:SendDefault(s_guid,className, "suckZoomModifier", "float", s_Instance.suckZoomModifier)
	self:SendDefault(s_guid,className, "usePitchZoomSnap", "bool", s_Instance.usePitchZoomSnap)
	self:SendDefault(s_guid,className, "vehicleDamageModifier", "float", s_Instance.vehicleDamageModifier)
end

function Type:DifficultyDatas (p_class, p_guid)
	local s_Instance = DifficultyDatas(p_class) 
 	local className = "DifficultyDatas"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "difficulties", "List<CtrRef)>", s_Instance.difficulties)
end

function Type:DifficultyIndexEntityData (p_class, p_guid)
	local s_Instance = DifficultyIndexEntityData(p_class) 
 	local className = "DifficultyIndexEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:DirectWeaponSwitchingMapData (p_class, p_guid)
	local s_Instance = DirectWeaponSwitchingMapData(p_class) 
 	local className = "DirectWeaponSwitchingMapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "action", "EntryInputActionEnum", s_Instance.action)
	self:SendDefault(s_guid,className, "fireAndSwitchBackToPrev", "bool", s_Instance.fireAndSwitchBackToPrev)
	self:SendDefault(s_guid,className, "preventMeleeRepeatTime", "float", s_Instance.preventMeleeRepeatTime)
	self:SendDefault(s_guid,className, "switchBackToPrevMaxTimePressed", "float", s_Instance.switchBackToPrevMaxTimePressed)
	self:SendDefault(s_guid,className, "toWeapon", "WeaponSwitchingEnum", s_Instance.toWeapon)
	self:SendDefault(s_guid,className, "useQuickSwitch", "bool", s_Instance.useQuickSwitch)
end

function Type:DistortionClipNodeData (p_class, p_guid)
	local s_Instance = DistortionClipNodeData(p_class) 
 	local className = "DistortionClipNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clipLevel", "AudioGraphNodePort", s_Instance.clipLevel)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:DivisibleLoopPlayerNodeData (p_class, p_guid)
	local s_Instance = DivisibleLoopPlayerNodeData(p_class) 
 	local className = "DivisibleLoopPlayerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "crossFadeLength", "float", s_Instance.crossFadeLength)
	self:SendDefault(s_guid,className, "externalWave", "AudioGraphNodePort", s_Instance.externalWave)
	self:SendDefault(s_guid,className, "freezeSegment", "AudioGraphNodePort", s_Instance.freezeSegment)
	self:SendDefault(s_guid,className, "output", "AudioGraphNodePort", s_Instance.output)
	self:SendDefault(s_guid,className, "plugins", "List<DivisibleLoopPlayerPlugins)>", s_Instance.plugins)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "startAtRandomPosition", "bool", s_Instance.startAtRandomPosition)
	self:SendDefault(s_guid,className, "stop", "AudioGraphNodePort", s_Instance.stop)
	self:SendDefault(s_guid,className, "wave", "CtrRef", s_Instance.wave)
end

function Type:DivisibleLoopPlayerPlugins (p_class, p_guid)
	local s_Instance = DivisibleLoopPlayerPlugins(p_class) 
 	local className = "DivisibleLoopPlayerPlugins"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gain", "SoundGraphPluginRef", s_Instance.gain)
	self:SendDefault(s_guid,className, "gainFader", "SoundGraphPluginRef", s_Instance.gainFader)
	self:SendDefault(s_guid,className, "pause", "SoundGraphPluginRef", s_Instance.pause)
	self:SendDefault(s_guid,className, "sndPlayer", "SoundGraphPluginRef", s_Instance.sndPlayer)
end

function Type:DofComponentData (p_class, p_guid)
	local s_Instance = DofComponentData(p_class) 
 	local className = "DofComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurAdd", "float", s_Instance.blurAdd)
	self:SendDefault(s_guid,className, "blurFilter", "fb.BlurFilter)", s_Instance.blurFilter)
	self:SendDefault(s_guid,className, "blurFilterDeviation", "float", s_Instance.blurFilterDeviation)
	self:SendDefault(s_guid,className, "diffusionDofAperture", "float", s_Instance.diffusionDofAperture)
	self:SendDefault(s_guid,className, "diffusionDofEnable", "bool", s_Instance.diffusionDofEnable)
	self:SendDefault(s_guid,className, "diffusionDofFocalLength", "float", s_Instance.diffusionDofFocalLength)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "farDistanceScale", "float", s_Instance.farDistanceScale)
	self:SendDefault(s_guid,className, "focusDistance", "float", s_Instance.focusDistance)
	self:SendDefault(s_guid,className, "nearDistanceScale", "float", s_Instance.nearDistanceScale)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:DogTagData (p_class, p_guid)
	local s_Instance = DogTagData(p_class) 
 	local className = "DogTagData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "DogTagCategory", s_Instance.category)
	self:SendDefault(s_guid,className, "descriptionSID", "string", s_Instance.descriptionSID)
	self:SendDefault(s_guid,className, "excludedOnPs3", "bool", s_Instance.excludedOnPs3)
	self:SendDefault(s_guid,className, "excludedOnWin32", "bool", s_Instance.excludedOnWin32)
	self:SendDefault(s_guid,className, "excludedOnXenon", "bool", s_Instance.excludedOnXenon)
	self:SendDefault(s_guid,className, "imageName", "string", s_Instance.imageName)
	self:SendDefault(s_guid,className, "invertText", "bool", s_Instance.invertText)
	self:SendDefault(s_guid,className, "isAlwaysAvailable", "bool", s_Instance.isAlwaysAvailable)
	self:SendDefault(s_guid,className, "nameSID", "string", s_Instance.nameSID)
	self:SendDefault(s_guid,className, "smallImageName", "string", s_Instance.smallImageName)
end

function Type:DogTagsAsset (p_class, p_guid)
	local s_Instance = DogTagsAsset(p_class) 
 	local className = "DogTagsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "advancedDogTags", "List<CtrRef)>", s_Instance.advancedDogTags)
	self:SendDefault(s_guid,className, "basicDogTags", "List<CtrRef)>", s_Instance.basicDogTags)
	self:SendDefault(s_guid,className, "meleeKillWeapon", "CtrRef", s_Instance.meleeKillWeapon)
end

function Type:DriverComponentData (p_class, p_guid)
	local s_Instance = DriverComponentData(p_class) 
 	local className = "DriverComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
	self:SendDefault(s_guid,className, "wantedSpeed", "float", s_Instance.wantedSpeed)
end

function Type:DriverSettings (p_class, p_guid)
	local s_Instance = DriverSettings(p_class) 
 	local className = "DriverSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accDiffAtMaxThrottleVelocityAccelerating", "float", s_Instance.accDiffAtMaxThrottleVelocityAccelerating)
	self:SendDefault(s_guid,className, "accDiffAtMaxThrottleVelocityDecelerating", "float", s_Instance.accDiffAtMaxThrottleVelocityDecelerating)
	self:SendDefault(s_guid,className, "accDiffAtMinThrottleVelocityAccelerating", "float", s_Instance.accDiffAtMinThrottleVelocityAccelerating)
	self:SendDefault(s_guid,className, "accDiffAtMinThrottleVelocityDecelerating", "float", s_Instance.accDiffAtMinThrottleVelocityDecelerating)
	self:SendDefault(s_guid,className, "angleDiffForFullSlowdown", "float", s_Instance.angleDiffForFullSlowdown)
	self:SendDefault(s_guid,className, "angleDiffForNoSlowdown", "float", s_Instance.angleDiffForNoSlowdown)
	self:SendDefault(s_guid,className, "d", "float", s_Instance.d)
	self:SendDefault(s_guid,className, "i", "float", s_Instance.i)
	self:SendDefault(s_guid,className, "lookAheadTime", "float", s_Instance.lookAheadTime)
	self:SendDefault(s_guid,className, "maxAcc", "float", s_Instance.maxAcc)
	self:SendDefault(s_guid,className, "maxBrakeOutput", "float", s_Instance.maxBrakeOutput)
	self:SendDefault(s_guid,className, "maxDec", "float", s_Instance.maxDec)
	self:SendDefault(s_guid,className, "maxError", "float", s_Instance.maxError)
	self:SendDefault(s_guid,className, "maxITerm", "float", s_Instance.maxITerm)
	self:SendDefault(s_guid,className, "maxPTerm", "float", s_Instance.maxPTerm)
	self:SendDefault(s_guid,className, "maxSumError", "float", s_Instance.maxSumError)
	self:SendDefault(s_guid,className, "maxThrottleVelocityAccelerating", "float", s_Instance.maxThrottleVelocityAccelerating)
	self:SendDefault(s_guid,className, "maxThrottleVelocityDecelerating", "float", s_Instance.maxThrottleVelocityDecelerating)
	self:SendDefault(s_guid,className, "maxYawToApplySprint", "float", s_Instance.maxYawToApplySprint)
	self:SendDefault(s_guid,className, "minAcc", "float", s_Instance.minAcc)
	self:SendDefault(s_guid,className, "minDec", "float", s_Instance.minDec)
	self:SendDefault(s_guid,className, "minRadius", "float", s_Instance.minRadius)
	self:SendDefault(s_guid,className, "minThrottleVelocityAccelerating", "float", s_Instance.minThrottleVelocityAccelerating)
	self:SendDefault(s_guid,className, "minThrottleVelocityDecelerating", "float", s_Instance.minThrottleVelocityDecelerating)
	self:SendDefault(s_guid,className, "p", "float", s_Instance.p)
	self:SendDefault(s_guid,className, "radiusGrowthSpeed", "float", s_Instance.radiusGrowthSpeed)
	self:SendDefault(s_guid,className, "squareBrakeOutput", "bool", s_Instance.squareBrakeOutput)
	self:SendDefault(s_guid,className, "steeringSensitivity", "float", s_Instance.steeringSensitivity)
	self:SendDefault(s_guid,className, "stoppingDeceleration", "float", s_Instance.stoppingDeceleration)
	self:SendDefault(s_guid,className, "usePIDRegulator", "bool", s_Instance.usePIDRegulator)
	self:SendDefault(s_guid,className, "useSquareAccDiffCurveAcc", "bool", s_Instance.useSquareAccDiffCurveAcc)
	self:SendDefault(s_guid,className, "useSquareAccDiffCurveDec", "bool", s_Instance.useSquareAccDiffCurveDec)
	self:SendDefault(s_guid,className, "useSquareVelDiffCurveAcc", "bool", s_Instance.useSquareVelDiffCurveAcc)
	self:SendDefault(s_guid,className, "useSquareVelDiffCurveDec", "bool", s_Instance.useSquareVelDiffCurveDec)
	self:SendDefault(s_guid,className, "velDiffAtMaxAcc", "float", s_Instance.velDiffAtMaxAcc)
	self:SendDefault(s_guid,className, "velDiffAtMaxDec", "float", s_Instance.velDiffAtMaxDec)
	self:SendDefault(s_guid,className, "velDiffAtMinAcc", "float", s_Instance.velDiffAtMinAcc)
	self:SendDefault(s_guid,className, "velDiffAtMinDec", "float", s_Instance.velDiffAtMinDec)
	self:SendDefault(s_guid,className, "velocityAtFullSlowdown", "float", s_Instance.velocityAtFullSlowdown)
end

function Type:DriverStaticObjectComponentData (p_class, p_guid)
	local s_Instance = DriverStaticObjectComponentData(p_class) 
 	local className = "DriverStaticObjectComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "acceleration", "float", s_Instance.acceleration)
	self:SendDefault(s_guid,className, "alignWithGroundNormal", "bool", s_Instance.alignWithGroundNormal)
	self:SendDefault(s_guid,className, "deceleration", "float", s_Instance.deceleration)
	self:SendDefault(s_guid,className, "turningRadius", "float", s_Instance.turningRadius)
	self:SendDefault(s_guid,className, "turnWhileStill", "bool", s_Instance.turnWhileStill)
end

function Type:DropWeaponComponentData (p_class, p_guid)
	local s_Instance = DropWeaponComponentData(p_class) 
 	local className = "DropWeaponComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionIdentifier", "EntryInputActionEnum", s_Instance.actionIdentifier)
	self:SendDefault(s_guid,className, "allowDropWeaponOnAction", "bool", s_Instance.allowDropWeaponOnAction)
	self:SendDefault(s_guid,className, "deathPickup", "CtrRef", s_Instance.deathPickup)
	self:SendDefault(s_guid,className, "dropWeaponAfterTime", "float", s_Instance.dropWeaponAfterTime)
	self:SendDefault(s_guid,className, "excludedWeaponSlots", "List<WeaponSlot)>", s_Instance.excludedWeaponSlots)
	self:SendDefault(s_guid,className, "listenToAnimationWeaponDropSignal", "bool", s_Instance.listenToAnimationWeaponDropSignal)
	self:SendDefault(s_guid,className, "pickup", "CtrRef", s_Instance.pickup)
	self:SendDefault(s_guid,className, "requireWeaponSlotEmpty", "bool", s_Instance.requireWeaponSlotEmpty)
	self:SendDefault(s_guid,className, "weaponDropTime", "float", s_Instance.weaponDropTime)
	self:SendDefault(s_guid,className, "dropWeaponComponentData",  "readonly", s_Instance.dropWeaponComponentData)
	self:SendDefault(s_guid,className, "weaponSlot",  "uint", s_Instance.weaponSlot)
end

function Type:DuplicateSpawnScopeStrategyData (p_class, p_guid)
	local s_Instance = DuplicateSpawnScopeStrategyData(p_class) 
 	local className = "DuplicateSpawnScopeStrategyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "closestCount", "uint", s_Instance.closestCount)
	self:SendDefault(s_guid,className, "distance", "float", s_Instance.distance)
	self:SendDefault(s_guid,className, "groupTypes", "bool", s_Instance.groupTypes)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:DxDisplaySettings (p_class, p_guid)
	local s_Instance = DxDisplaySettings(p_class) 
 	local className = "DxDisplaySettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amdMinDriverVersion", "string", s_Instance.amdMinDriverVersion)
	self:SendDefault(s_guid,className, "createMinimalWindow", "bool", s_Instance.createMinimalWindow)
	self:SendDefault(s_guid,className, "debugBreakIgnoredIDs", "List<int)>", s_Instance.debugBreakIgnoredIDs)
	self:SendDefault(s_guid,className, "debugBreakOnErrorEnable", "bool", s_Instance.debugBreakOnErrorEnable)
	self:SendDefault(s_guid,className, "debugBreakOnInfoEnable", "bool", s_Instance.debugBreakOnInfoEnable)
	self:SendDefault(s_guid,className, "debugBreakOnWarningEnable", "bool", s_Instance.debugBreakOnWarningEnable)
	self:SendDefault(s_guid,className, "debugInfoEnable", "bool", s_Instance.debugInfoEnable)
	self:SendDefault(s_guid,className, "driverInternalThreadingEnable", "bool", s_Instance.driverInternalThreadingEnable)
	self:SendDefault(s_guid,className, "dx10Dot0Enable", "bool", s_Instance.dx10Dot0Enable)
	self:SendDefault(s_guid,className, "dx10Dot1Enable", "bool", s_Instance.dx10Dot1Enable)
	self:SendDefault(s_guid,className, "dx10PlusEnable", "bool", s_Instance.dx10PlusEnable)
	self:SendDefault(s_guid,className, "dx11Enable", "bool", s_Instance.dx11Enable)
	self:SendDefault(s_guid,className, "forceRenderAheadLimit", "int", s_Instance.forceRenderAheadLimit)
	self:SendDefault(s_guid,className, "fullscreen", "bool", s_Instance.fullscreen)
	self:SendDefault(s_guid,className, "fullscreenHeight", "uint", s_Instance.fullscreenHeight)
	self:SendDefault(s_guid,className, "fullscreenModeEnable", "bool", s_Instance.fullscreenModeEnable)
	self:SendDefault(s_guid,className, "fullscreenOutputIndex", "int", s_Instance.fullscreenOutputIndex)
	self:SendDefault(s_guid,className, "fullscreenRefreshRate", "float", s_Instance.fullscreenRefreshRate)
	self:SendDefault(s_guid,className, "fullscreenWidth", "uint", s_Instance.fullscreenWidth)
	self:SendDefault(s_guid,className, "minDriverRequired", "bool", s_Instance.minDriverRequired)
	self:SendDefault(s_guid,className, "multiGpuValidationEnable", "bool", s_Instance.multiGpuValidationEnable)
	self:SendDefault(s_guid,className, "nullDriverEnable", "bool", s_Instance.nullDriverEnable)
	self:SendDefault(s_guid,className, "nvApiEnable", "bool", s_Instance.nvApiEnable)
	self:SendDefault(s_guid,className, "nvidiaMinDriverVersion", "uint", s_Instance.nvidiaMinDriverVersion)
	self:SendDefault(s_guid,className, "nvPerfHudEnable", "bool", s_Instance.nvPerfHudEnable)
	self:SendDefault(s_guid,className, "presentInterval", "int", s_Instance.presentInterval)
	self:SendDefault(s_guid,className, "refDriverEnable", "bool", s_Instance.refDriverEnable)
	self:SendDefault(s_guid,className, "stereoConvergenceScale", "float", s_Instance.stereoConvergenceScale)
	self:SendDefault(s_guid,className, "stereoDepth", "float", s_Instance.stereoDepth)
	self:SendDefault(s_guid,className, "stereoEnable", "bool", s_Instance.stereoEnable)
	self:SendDefault(s_guid,className, "stereoSeparationScale", "float", s_Instance.stereoSeparationScale)
	self:SendDefault(s_guid,className, "stereoSoldierZoomConvergenceScale", "float", s_Instance.stereoSoldierZoomConvergenceScale)
	self:SendDefault(s_guid,className, "tripleBufferingEnable", "bool", s_Instance.tripleBufferingEnable)
	self:SendDefault(s_guid,className, "vSyncEnable", "bool", s_Instance.vSyncEnable)
	self:SendDefault(s_guid,className, "warpDriverEnable", "bool", s_Instance.warpDriverEnable)
end

function Type:DynamicAOComponentData (p_class, p_guid)
	local s_Instance = DynamicAOComponentData(p_class) 
 	local className = "DynamicAOComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "hbaoAngleBias", "float", s_Instance.hbaoAngleBias)
	self:SendDefault(s_guid,className, "hbaoAttenuation", "float", s_Instance.hbaoAttenuation)
	self:SendDefault(s_guid,className, "hbaoContrast", "float", s_Instance.hbaoContrast)
	self:SendDefault(s_guid,className, "hbaoMaxFootprintRadius", "float", s_Instance.hbaoMaxFootprintRadius)
	self:SendDefault(s_guid,className, "hbaoPowerExponent", "float", s_Instance.hbaoPowerExponent)
	self:SendDefault(s_guid,className, "hbaoRadius", "float", s_Instance.hbaoRadius)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "ssaoFade", "float", s_Instance.ssaoFade)
	self:SendDefault(s_guid,className, "ssaoMaxDistanceInner", "float", s_Instance.ssaoMaxDistanceInner)
	self:SendDefault(s_guid,className, "ssaoMaxDistanceOuter", "float", s_Instance.ssaoMaxDistanceOuter)
	self:SendDefault(s_guid,className, "ssaoRadius", "float", s_Instance.ssaoRadius)
end

function Type:DynamicAvoidanceEntityData (p_class, p_guid)
	local s_Instance = DynamicAvoidanceEntityData(p_class) 
 	local className = "DynamicAvoidanceEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "affectedByRepellingForce", "bool", s_Instance.affectedByRepellingForce)
	self:SendDefault(s_guid,className, "antBinding", "AntDynamicAvoidanceBinding", s_Instance.antBinding)
	self:SendDefault(s_guid,className, "collisionRadius", "float", s_Instance.collisionRadius)
	self:SendDefault(s_guid,className, "predictedByOthers", "bool", s_Instance.predictedByOthers)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "repelOthers", "DynamicAvoidanceMode", s_Instance.repelOthers)
	self:SendDefault(s_guid,className, "reportPredictedCollision", "DynamicAvoidanceMode", s_Instance.reportPredictedCollision)
end

function Type:DynamicDataContainer (p_class, p_guid)
	local s_Instance = DynamicDataContainer(p_class) 
 	local className = "DynamicDataContainer"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fields", "List<DataField)>", s_Instance.fields)
end

function Type:DynamicEnlightenEntityData (p_class, p_guid)
	local s_Instance = DynamicEnlightenEntityData(p_class) 
 	local className = "DynamicEnlightenEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enlightenData", "CtrRef", s_Instance.enlightenData)
end

function Type:DynamicEnvmapComponentData (p_class, p_guid)
	local s_Instance = DynamicEnvmapComponentData(p_class) 
 	local className = "DynamicEnvmapComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "groundColorEnvmap", "Vec3", s_Instance.groundColorEnvmap)
	self:SendDefault(s_guid,className, "keyColorEnvmap", "Vec3", s_Instance.keyColorEnvmap)
	self:SendDefault(s_guid,className, "skyColorEnvmap", "Vec3", s_Instance.skyColorEnvmap)
end

function Type:DynamicEvent (p_class, p_guid)
	local s_Instance = DynamicEvent(p_class) 
 	local className = "DynamicEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
end

function Type:DynamicLink (p_class, p_guid)
	local s_Instance = DynamicLink(p_class) 
 	local className = "DynamicLink"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
end

function Type:DynamicModelEntityData (p_class, p_guid)
	local s_Instance = DynamicModelEntityData(p_class) 
 	local className = "DynamicModelEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "noCollision", "bool", s_Instance.noCollision)
	self:SendDefault(s_guid,className, "part", "CtrRef", s_Instance.part)
end

function Type:DynamicWeaponPickupEntityData (p_class, p_guid)
	local s_Instance = DynamicWeaponPickupEntityData(p_class) 
 	local className = "DynamicWeaponPickupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "keepAmmoState", "bool", s_Instance.keepAmmoState)
	self:SendDefault(s_guid,className, "weaponSlots", "List<DynamicWeaponPickupSlotData)>", s_Instance.weaponSlots)
end

function Type:DynamicWeaponPickupSlotData (p_class, p_guid)
	local s_Instance = DynamicWeaponPickupSlotData(p_class) 
 	local className = "DynamicWeaponPickupSlotData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altWeaponSlot", "int", s_Instance.altWeaponSlot)
	self:SendDefault(s_guid,className, "linkedToWeaponSlot", "int", s_Instance.linkedToWeaponSlot)
	self:SendDefault(s_guid,className, "weaponSlot", "uint", s_Instance.weaponSlot)
end

function Type:EdgeModelComponentData (p_class, p_guid)
	local s_Instance = EdgeModelComponentData(p_class) 
 	local className = "EdgeModelComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxInstanceCount", "uint", s_Instance.maxInstanceCount)
	self:SendDefault(s_guid,className, "rigidMeshes", "List<CtrRef)>", s_Instance.rigidMeshes)
end

function Type:EdgeModelInstance (p_class, p_guid)
	local s_Instance = EdgeModelInstance(p_class) 
 	local className = "EdgeModelInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:EdgeModelLightMapData (p_class, p_guid)
	local s_Instance = EdgeModelLightMapData(p_class) 
 	local className = "EdgeModelLightMapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lightMapUvs", "List<Vec4)>", s_Instance.lightMapUvs)
end

function Type:EdgeModelLightMapInstance (p_class, p_guid)
	local s_Instance = EdgeModelLightMapInstance(p_class) 
 	local className = "EdgeModelLightMapInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lightMapUv", "Vec4", s_Instance.lightMapUv)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
end

function Type:EdgePointerData (p_class, p_guid)
	local s_Instance = EdgePointerData(p_class) 
 	local className = "EdgePointerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "negativeXLimit", "float", s_Instance.negativeXLimit)
	self:SendDefault(s_guid,className, "negativeYLimit", "float", s_Instance.negativeYLimit)
	self:SendDefault(s_guid,className, "positiveXLimit", "float", s_Instance.positiveXLimit)
	self:SendDefault(s_guid,className, "positiveYLimit", "float", s_Instance.positiveYLimit)
end

function Type:EditableAction (p_class, p_guid)
	local s_Instance = EditableAction(p_class) 
 	local className = "EditableAction"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "concept", "InputConceptIdentifiers", s_Instance.concept)
end

function Type:EditableActionMap (p_class, p_guid)
	local s_Instance = EditableActionMap(p_class) 
 	local className = "EditableActionMap"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionMap", "CtrRef", s_Instance.actionMap)
	self:SendDefault(s_guid,className, "configurationLayout", "EditableActions", s_Instance.configurationLayout)
	self:SendDefault(s_guid,className, "id", "string", s_Instance.id)
	self:SendDefault(s_guid,className, "nameId", "string", s_Instance.nameId)
end

function Type:EditableActions (p_class, p_guid)
	local s_Instance = EditableActions(p_class) 
 	local className = "EditableActions"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actions", "List<CtrRef)>", s_Instance.actions)
end

function Type:EffectComponentData (p_class, p_guid)
	local s_Instance = EffectComponentData(p_class) 
 	local className = "EffectComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "effect", "CtrRef", s_Instance.effect)
	self:SendDefault(s_guid,className, "emitterParameter1", "float", s_Instance.emitterParameter1)
	self:SendDefault(s_guid,className, "emitterParameter2", "float", s_Instance.emitterParameter2)
	self:SendDefault(s_guid,className, "emitterParameter3", "float", s_Instance.emitterParameter3)
	self:SendDefault(s_guid,className, "snapToWaterSurface", "bool", s_Instance.snapToWaterSurface)
end

function Type:EffectEntityData (p_class, p_guid)
	local s_Instance = EffectEntityData(p_class) 
 	local className = "EffectEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "components", "List<CtrRef)>", s_Instance.components)
	self:SendDefault(s_guid,className, "cullDistance", "float", s_Instance.cullDistance)
	self:SendDefault(s_guid,className, "highEndPc", "bool", s_Instance.highEndPc)
	self:SendDefault(s_guid,className, "lowEndPc", "bool", s_Instance.lowEndPc)
	self:SendDefault(s_guid,className, "maxInstanceCount", "uint", s_Instance.maxInstanceCount)
	self:SendDefault(s_guid,className, "mediumPc", "bool", s_Instance.mediumPc)
	self:SendDefault(s_guid,className, "resetInstanceWhenStarted", "bool", s_Instance.resetInstanceWhenStarted)
	self:SendDefault(s_guid,className, "startDelay", "float", s_Instance.startDelay)
end

function Type:EffectManagerSettings (p_class, p_guid)
	local s_Instance = EffectManagerSettings(p_class) 
 	local className = "EffectManagerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "effectQuality", "uint", s_Instance.effectQuality)
	self:SendDefault(s_guid,className, "maxNewEffectsPerFrameCount", "uint", s_Instance.maxNewEffectsPerFrameCount)
	self:SendDefault(s_guid,className, "sizeToGrowNewEffectsContainer", "uint", s_Instance.sizeToGrowNewEffectsContainer)
end

function Type:EffectReferenceObjectData (p_class, p_guid)
	local s_Instance = EffectReferenceObjectData(p_class) 
 	local className = "EffectReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
end

function Type:EloExpectedFunctionPoint (p_class, p_guid)
	local s_Instance = EloExpectedFunctionPoint(p_class) 
 	local className = "EloExpectedFunctionPoint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "xValue", "float", s_Instance.xValue)
	self:SendDefault(s_guid,className, "yValue", "float", s_Instance.yValue)
end

function Type:EloFunctionPoint (p_class, p_guid)
	local s_Instance = EloFunctionPoint(p_class) 
 	local className = "EloFunctionPoint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "xValue", "float", s_Instance.xValue)
	self:SendDefault(s_guid,className, "yValue", "float", s_Instance.yValue)
end

function Type:EloParameters (p_class, p_guid)
	local s_Instance = EloParameters(p_class) 
 	local className = "EloParameters"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "expected", "List<EloExpectedFunctionPoint)>", s_Instance.expected)
	self:SendDefault(s_guid,className, "kCompetitor", "List<EloFunctionPoint)>", s_Instance.kCompetitor)
	self:SendDefault(s_guid,className, "kLoser", "List<EloFunctionPoint)>", s_Instance.kLoser)
	self:SendDefault(s_guid,className, "kNewbie", "List<EloFunctionPoint)>", s_Instance.kNewbie)
	self:SendDefault(s_guid,className, "kWinner", "List<EloFunctionPoint)>", s_Instance.kWinner)
end

function Type:EmitterData (p_class, p_guid)
	local s_Instance = EmitterData(p_class) 
 	local className = "EmitterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emitterAssets", "List<CtrRef)>", s_Instance.emitterAssets)
end

function Type:EmitterDocument (p_class, p_guid)
	local s_Instance = EmitterDocument(p_class) 
 	local className = "EmitterDocument"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rootProcessor", "CtrRef", s_Instance.rootProcessor)
	self:SendDefault(s_guid,className, "templateData", "CtrRef", s_Instance.templateData)
end

function Type:EmitterEntityData (p_class, p_guid)
	local s_Instance = EmitterEntityData(p_class) 
 	local className = "EmitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emitter", "CtrRef", s_Instance.emitter)
	self:SendDefault(s_guid,className, "spawnProbability", "float", s_Instance.spawnProbability)
end

function Type:EmitterSystemAsset (p_class, p_guid)
	local s_Instance = EmitterSystemAsset(p_class) 
 	local className = "EmitterSystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseAtlasTexture", "CtrRef", s_Instance.baseAtlasTexture)
	self:SendDefault(s_guid,className, "normalAtlasTexture", "CtrRef", s_Instance.normalAtlasTexture)
	self:SendDefault(s_guid,className, "textureInfos", "List<EmitterTextureAtlasInfo)>", s_Instance.textureInfos)
end

function Type:EmitterSystemSettings (p_class, p_guid)
	local s_Instance = EmitterSystemSettings(p_class) 
 	local className = "EmitterSystemSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugOverdrawCount", "int", s_Instance.debugOverdrawCount)
	self:SendDefault(s_guid,className, "drawBoundingBoxes", "uint", s_Instance.drawBoundingBoxes)
	self:SendDefault(s_guid,className, "drawProjectedBoxes", "bool", s_Instance.drawProjectedBoxes)
	self:SendDefault(s_guid,className, "drawStats", "uint", s_Instance.drawStats)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "enableFixedDelta", "bool", s_Instance.enableFixedDelta)
	self:SendDefault(s_guid,className, "enableFixedTimeStep", "bool", s_Instance.enableFixedTimeStep)
	self:SendDefault(s_guid,className, "enableJobs", "bool", s_Instance.enableJobs)
	self:SendDefault(s_guid,className, "enableRendering", "bool", s_Instance.enableRendering)
	self:SendDefault(s_guid,className, "globalResetStartTimeInterval", "float", s_Instance.globalResetStartTimeInterval)
	self:SendDefault(s_guid,className, "meshCullingDistance", "float", s_Instance.meshCullingDistance)
	self:SendDefault(s_guid,className, "meshDrawBoundingBoxes", "bool", s_Instance.meshDrawBoundingBoxes)
	self:SendDefault(s_guid,className, "meshDrawCountLimit", "uint", s_Instance.meshDrawCountLimit)
	self:SendDefault(s_guid,className, "meshDrawCullStats", "bool", s_Instance.meshDrawCullStats)
	self:SendDefault(s_guid,className, "meshDrawTransforms", "bool", s_Instance.meshDrawTransforms)
	self:SendDefault(s_guid,className, "meshRenderingEnable", "bool", s_Instance.meshRenderingEnable)
	self:SendDefault(s_guid,className, "meshShadowEnable", "bool", s_Instance.meshShadowEnable)
	self:SendDefault(s_guid,className, "meshStreamingPriorityMultiplier", "float", s_Instance.meshStreamingPriorityMultiplier)
	self:SendDefault(s_guid,className, "minScreenArea", "float", s_Instance.minScreenArea)
	self:SendDefault(s_guid,className, "quadClipScaleEnable", "bool", s_Instance.quadClipScaleEnable)
	self:SendDefault(s_guid,className, "quadColorShaderCostsEnable", "bool", s_Instance.quadColorShaderCostsEnable)
	self:SendDefault(s_guid,className, "quadEnableOpaque", "bool", s_Instance.quadEnableOpaque)
	self:SendDefault(s_guid,className, "quadEnableOverdrawRendering", "bool", s_Instance.quadEnableOverdrawRendering)
	self:SendDefault(s_guid,className, "quadEnableRendering", "bool", s_Instance.quadEnableRendering)
	self:SendDefault(s_guid,className, "quadEnableSorting", "bool", s_Instance.quadEnableSorting)
	self:SendDefault(s_guid,className, "quadEnableWireframe", "bool", s_Instance.quadEnableWireframe)
	self:SendDefault(s_guid,className, "quadEnableZOcclusion", "bool", s_Instance.quadEnableZOcclusion)
	self:SendDefault(s_guid,className, "quadGroupsJoinAll", "bool", s_Instance.quadGroupsJoinAll)
	self:SendDefault(s_guid,className, "quadGroupsJoinNiceAndSimple", "bool", s_Instance.quadGroupsJoinNiceAndSimple)
	self:SendDefault(s_guid,className, "quadGroupsJoinNone", "bool", s_Instance.quadGroupsJoinNone)
	self:SendDefault(s_guid,className, "quadHalfResEnable", "bool", s_Instance.quadHalfResEnable)
	self:SendDefault(s_guid,className, "quadHalfResSlice1ThresholdHigh", "float", s_Instance.quadHalfResSlice1ThresholdHigh)
	self:SendDefault(s_guid,className, "quadHalfResSlice1ThresholdLow", "float", s_Instance.quadHalfResSlice1ThresholdLow)
	self:SendDefault(s_guid,className, "quadHalfResSlice2ThresholdHigh", "float", s_Instance.quadHalfResSlice2ThresholdHigh)
	self:SendDefault(s_guid,className, "quadHalfResSlice2ThresholdLow", "float", s_Instance.quadHalfResSlice2ThresholdLow)
	self:SendDefault(s_guid,className, "quadNearFadeDistance", "float", s_Instance.quadNearFadeDistance)
	self:SendDefault(s_guid,className, "quadNiceRenderingEnable", "bool", s_Instance.quadNiceRenderingEnable)
	self:SendDefault(s_guid,className, "quadPointLightsEnable", "bool", s_Instance.quadPointLightsEnable)
	self:SendDefault(s_guid,className, "quadSimpleRenderingEnable", "bool", s_Instance.quadSimpleRenderingEnable)
	self:SendDefault(s_guid,className, "quadSpotLightsEnable", "bool", s_Instance.quadSpotLightsEnable)
	self:SendDefault(s_guid,className, "quadTechnique", "int", s_Instance.quadTechnique)
	self:SendDefault(s_guid,className, "quadVertexShadowsEnable", "bool", s_Instance.quadVertexShadowsEnable)
	self:SendDefault(s_guid,className, "quadZOcclusionBias", "float", s_Instance.quadZOcclusionBias)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
	self:SendDefault(s_guid,className, "zBufferCullEnable", "bool", s_Instance.zBufferCullEnable)
end

function Type:EmitterTemplateData (p_class, p_guid)
	local s_Instance = EmitterTemplateData(p_class) 
 	local className = "EmitterTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actAsPointLight", "bool", s_Instance.actAsPointLight)
	self:SendDefault(s_guid,className, "distanceScaleFarValue", "float", s_Instance.distanceScaleFarValue)
	self:SendDefault(s_guid,className, "distanceScaleLength", "float", s_Instance.distanceScaleLength)
	self:SendDefault(s_guid,className, "distanceScaleNearValue", "float", s_Instance.distanceScaleNearValue)
	self:SendDefault(s_guid,className, "emissive", "bool", s_Instance.emissive)
	self:SendDefault(s_guid,className, "emittableType", "fb.EmittableType)", s_Instance.emittableType)
	self:SendDefault(s_guid,className, "exclusionVolumeCullEnable", "bool", s_Instance.exclusionVolumeCullEnable)
	self:SendDefault(s_guid,className, "followSpawnSource", "bool", s_Instance.followSpawnSource)
	self:SendDefault(s_guid,className, "forceFullRes", "bool", s_Instance.forceFullRes)
	self:SendDefault(s_guid,className, "forceNiceSorting", "bool", s_Instance.forceNiceSorting)
	self:SendDefault(s_guid,className, "globalLocalNormalBlendFactor", "float", s_Instance.globalLocalNormalBlendFactor)
	self:SendDefault(s_guid,className, "killParticlesWithEmitter", "bool", s_Instance.killParticlesWithEmitter)
	self:SendDefault(s_guid,className, "lifetime", "float", s_Instance.lifetime)
	self:SendDefault(s_guid,className, "lifetimeFrameCount", "uint", s_Instance.lifetimeFrameCount)
	self:SendDefault(s_guid,className, "lightMultiplier", "float", s_Instance.lightMultiplier)
	self:SendDefault(s_guid,className, "lightWrapAroundFactor", "float", s_Instance.lightWrapAroundFactor)
	self:SendDefault(s_guid,className, "localSpace", "bool", s_Instance.localSpace)
	self:SendDefault(s_guid,className, "maxCount", "uint", s_Instance.maxCount)
	self:SendDefault(s_guid,className, "maxSpawnDistance", "float", s_Instance.maxSpawnDistance)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "meshCullingDistance", "float", s_Instance.meshCullingDistance)
	self:SendDefault(s_guid,className, "minScreenArea", "float", s_Instance.minScreenArea)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "opaque", "bool", s_Instance.opaque)
	self:SendDefault(s_guid,className, "particleCullingFactor", "float", s_Instance.particleCullingFactor)
	self:SendDefault(s_guid,className, "pointLightColor", "Vec3", s_Instance.pointLightColor)
	self:SendDefault(s_guid,className, "pointLightIntensity", "Vec4", s_Instance.pointLightIntensity)
	self:SendDefault(s_guid,className, "pointLightMaxClamp", "float", s_Instance.pointLightMaxClamp)
	self:SendDefault(s_guid,className, "pointLightMinClamp", "float", s_Instance.pointLightMinClamp)
	self:SendDefault(s_guid,className, "pointLightPivot", "Vec3", s_Instance.pointLightPivot)
	self:SendDefault(s_guid,className, "pointLightRadius", "float", s_Instance.pointLightRadius)
	self:SendDefault(s_guid,className, "pointLightRandomIntensityMax", "float", s_Instance.pointLightRandomIntensityMax)
	self:SendDefault(s_guid,className, "pointLightRandomIntensityMin", "float", s_Instance.pointLightRandomIntensityMin)
	self:SendDefault(s_guid,className, "repeatParticleSpawning", "bool", s_Instance.repeatParticleSpawning)
	self:SendDefault(s_guid,className, "rootProcessor", "CtrRef", s_Instance.rootProcessor)
	self:SendDefault(s_guid,className, "softParticlesFadeDistanceMultiplier", "float", s_Instance.softParticlesFadeDistanceMultiplier)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
	self:SendDefault(s_guid,className, "transparencySunShadowEnable", "bool", s_Instance.transparencySunShadowEnable)
	self:SendDefault(s_guid,className, "vertexPixelLightingBlendFactor", "float", s_Instance.vertexPixelLightingBlendFactor)
	self:SendDefault(s_guid,className, "visibleAfterDistance", "float", s_Instance.visibleAfterDistance)
	self:SendDefault(s_guid,className, "zOcclusionLookup", "List<float)>", s_Instance.zOcclusionLookup)
end

function Type:EmitterTextureAtlasInfo (p_class, p_guid)
	local s_Instance = EmitterTextureAtlasInfo(p_class) 
 	local className = "EmitterTextureAtlasInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxUv", "Vec2", s_Instance.maxUv)
	self:SendDefault(s_guid,className, "minUv", "Vec2", s_Instance.minUv)
	self:SendDefault(s_guid,className, "textureName", "string", s_Instance.textureName)
end

function Type:EmitterTextureInfo (p_class, p_guid)
	local s_Instance = EmitterTextureInfo(p_class) 
 	local className = "EmitterTextureInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationFrameColumnCount", "float", s_Instance.animationFrameColumnCount)
	self:SendDefault(s_guid,className, "animationFrameCount", "float", s_Instance.animationFrameCount)
	self:SendDefault(s_guid,className, "enableAnimation", "bool", s_Instance.enableAnimation)
	self:SendDefault(s_guid,className, "normalmapName", "string", s_Instance.normalmapName)
	self:SendDefault(s_guid,className, "textureName", "string", s_Instance.textureName)
end

function Type:EndPointData (p_class, p_guid)
	local s_Instance = EndPointData(p_class) 
 	local className = "EndPointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "endDamping", "float", s_Instance.endDamping)
	self:SendDefault(s_guid,className, "pos", "float", s_Instance.pos)
	self:SendDefault(s_guid,className, "springAcceleration", "float", s_Instance.springAcceleration)
	self:SendDefault(s_guid,className, "springDamping", "float", s_Instance.springDamping)
	self:SendDefault(s_guid,className, "springLength", "float", s_Instance.springLength)
end

function Type:EngineComponentData (p_class, p_guid)
	local s_Instance = EngineComponentData(p_class) 
 	local className = "EngineComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "config", "CtrRef", s_Instance.config)
	self:SendDefault(s_guid,className, "outputIsEngineInWater", "bool", s_Instance.outputIsEngineInWater)
	self:SendDefault(s_guid,className, "soundEffect", "CtrRef", s_Instance.soundEffect)
	self:SendDefault(s_guid,className, "surfaceSoundEffect", "CtrRef", s_Instance.surfaceSoundEffect)
	self:SendDefault(s_guid,className, "useFirstPersonSounds", "bool", s_Instance.useFirstPersonSounds)
end

function Type:EngineConfigData (p_class, p_guid)
	local s_Instance = EngineConfigData(p_class) 
 	local className = "EngineConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boost", "fb.Boost)", s_Instance.boost)
	self:SendDefault(s_guid,className, "enginePowerMultiplier", "float", s_Instance.enginePowerMultiplier)
	self:SendDefault(s_guid,className, "internalAccelerationFactor", "float", s_Instance.internalAccelerationFactor)
	self:SendDefault(s_guid,className, "internalDeaccelerationFactor", "float", s_Instance.internalDeaccelerationFactor)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "rpmCurvePoints", "List<float)>", s_Instance.rpmCurvePoints)
	self:SendDefault(s_guid,className, "rpmCut", "float", s_Instance.rpmCut)
	self:SendDefault(s_guid,className, "rpmMax", "float", s_Instance.rpmMax)
	self:SendDefault(s_guid,className, "rpmMin", "float", s_Instance.rpmMin)
	self:SendDefault(s_guid,className, "torqueCurvePoints", "List<float)>", s_Instance.torqueCurvePoints)
end

function Type:EnlightenBuildRadiositySceneDesc (p_class, p_guid)
	local s_Instance = EnlightenBuildRadiositySceneDesc(p_class) 
 	local className = "EnlightenBuildRadiositySceneDesc"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cacheEnable", "bool", s_Instance.cacheEnable)
	self:SendDefault(s_guid,className, "clusterSize", "float", s_Instance.clusterSize)
	self:SendDefault(s_guid,className, "distributedBuild", "bool", s_Instance.distributedBuild)
	self:SendDefault(s_guid,className, "instances", "List<EnlightenInputInstance)>", s_Instance.instances)
	self:SendDefault(s_guid,className, "irBudget", "uint", s_Instance.irBudget)
	self:SendDefault(s_guid,className, "lightProbeSets", "List<EnlightenLightProbeSet)>", s_Instance.lightProbeSets)
	self:SendDefault(s_guid,className, "samplesPerCluster", "uint", s_Instance.samplesPerCluster)
	self:SendDefault(s_guid,className, "saveDebugData", "bool", s_Instance.saveDebugData)
	self:SendDefault(s_guid,className, "staticLightProbes", "List<Vec3)>", s_Instance.staticLightProbes)
	self:SendDefault(s_guid,className, "systemInfluenceRadius", "float", s_Instance.systemInfluenceRadius)
	self:SendDefault(s_guid,className, "systemSize", "uint", s_Instance.systemSize)
	self:SendDefault(s_guid,className, "terrain", "string", s_Instance.terrain)
end

function Type:EnlightenComponentData (p_class, p_guid)
	local s_Instance = EnlightenComponentData(p_class) 
 	local className = "EnlightenComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bounceScale", "float", s_Instance.bounceScale)
	self:SendDefault(s_guid,className, "cullDistance", "float", s_Instance.cullDistance)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "skyBoxBackLightColor", "Vec3", s_Instance.skyBoxBackLightColor)
	self:SendDefault(s_guid,className, "skyBoxBackLightColorSize", "float", s_Instance.skyBoxBackLightColorSize)
	self:SendDefault(s_guid,className, "skyBoxBackLightRotationX", "float", s_Instance.skyBoxBackLightRotationX)
	self:SendDefault(s_guid,className, "skyBoxBackLightRotationY", "float", s_Instance.skyBoxBackLightRotationY)
	self:SendDefault(s_guid,className, "skyBoxEnable", "bool", s_Instance.skyBoxEnable)
	self:SendDefault(s_guid,className, "skyBoxGroundColor", "Vec3", s_Instance.skyBoxGroundColor)
	self:SendDefault(s_guid,className, "skyBoxSkyColor", "Vec3", s_Instance.skyBoxSkyColor)
	self:SendDefault(s_guid,className, "skyBoxSunLightColor", "Vec3", s_Instance.skyBoxSunLightColor)
	self:SendDefault(s_guid,className, "skyBoxSunLightColorSize", "float", s_Instance.skyBoxSunLightColorSize)
	self:SendDefault(s_guid,className, "sunScale", "float", s_Instance.sunScale)
	self:SendDefault(s_guid,className, "terrainColor", "Vec3", s_Instance.terrainColor)
end

function Type:EnlightenDataAsset (p_class, p_guid)
	local s_Instance = EnlightenDataAsset(p_class) 
 	local className = "EnlightenDataAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugBackFaceTexture", "CtrRef", s_Instance.debugBackFaceTexture)
	self:SendDefault(s_guid,className, "debugChartTexture", "CtrRef", s_Instance.debugChartTexture)
	self:SendDefault(s_guid,className, "dynamicEnable", "bool", s_Instance.dynamicEnable)
	self:SendDefault(s_guid,className, "loadDebugData", "bool", s_Instance.loadDebugData)
	self:SendDefault(s_guid,className, "maxResolutionX", "int", s_Instance.maxResolutionX)
	self:SendDefault(s_guid,className, "maxResolutionY", "int", s_Instance.maxResolutionY)
	self:SendDefault(s_guid,className, "skyVisibilityTexture", "CtrRef", s_Instance.skyVisibilityTexture)
	self:SendDefault(s_guid,className, "visibilityThreshold", "float", s_Instance.visibilityThreshold)
end

function Type:EnlightenDatabaseAsset (p_class, p_guid)
	local s_Instance = EnlightenDatabaseAsset(p_class) 
 	local className = "EnlightenDatabaseAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataVersion", "uint", s_Instance.dataVersion)
	self:SendDefault(s_guid,className, "debugMeshDataVersion", "uint", s_Instance.debugMeshDataVersion)
	self:SendDefault(s_guid,className, "lightProbeSets", "List<EnlightenLightProbeSet)>", s_Instance.lightProbeSets)
	self:SendDefault(s_guid,className, "outputSizeX", "uint", s_Instance.outputSizeX)
	self:SendDefault(s_guid,className, "outputSizeY", "uint", s_Instance.outputSizeY)
	self:SendDefault(s_guid,className, "systems", "List<EnlightenDbSystem)>", s_Instance.systems)
end

function Type:EnlightenDataCreatorParams (p_class, p_guid)
	local s_Instance = EnlightenDataCreatorParams(p_class) 
 	local className = "EnlightenDataCreatorParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assetName", "string", s_Instance.assetName)
end

function Type:EnlightenDbInstance (p_class, p_guid)
	local s_Instance = EnlightenDbInstance(p_class) 
 	local className = "EnlightenDbInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cacheKey", "GUID", s_Instance.cacheKey)
	self:SendDefault(s_guid,className, "enlightenMeshName", "string", s_Instance.enlightenMeshName)
	self:SendDefault(s_guid,className, "geometryId", "uint", s_Instance.geometryId)
	self:SendDefault(s_guid,className, "guidString", "string", s_Instance.guidString)
	self:SendDefault(s_guid,className, "instanceAlbedos", "List<ulong)>", s_Instance.instanceAlbedos)
	self:SendDefault(s_guid,className, "meshAsset", "string", s_Instance.meshAsset)
	self:SendDefault(s_guid,className, "objectVariation", "string", s_Instance.objectVariation)
	self:SendDefault(s_guid,className, "pixelSize", "float", s_Instance.pixelSize)
	self:SendDefault(s_guid,className, "uvSizeX", "uint", s_Instance.uvSizeX)
	self:SendDefault(s_guid,className, "uvSizeY", "uint", s_Instance.uvSizeY)
	self:SendDefault(s_guid,className, "uvTransform", "Vec4", s_Instance.uvTransform)
	self:SendDefault(s_guid,className, "uvTranslation", "Vec2", s_Instance.uvTranslation)
	self:SendDefault(s_guid,className, "worldBoundingbox", "AxisAlignedBox", s_Instance.worldBoundingbox)
	self:SendDefault(s_guid,className, "worldTransform", "LinearTransform", s_Instance.worldTransform)
end

function Type:EnlightenDbSystem (p_class, p_guid)
	local s_Instance = EnlightenDbSystem(p_class) 
 	local className = "EnlightenDbSystem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasStartX", "uint", s_Instance.atlasStartX)
	self:SendDefault(s_guid,className, "atlasStartY", "uint", s_Instance.atlasStartY)
	self:SendDefault(s_guid,className, "boundingBox", "AxisAlignedBox", s_Instance.boundingBox)
	self:SendDefault(s_guid,className, "clusteringCache", "PrecomputeCache", s_Instance.clusteringCache)
	self:SendDefault(s_guid,className, "inputSystems", "List<int)>", s_Instance.inputSystems)
	self:SendDefault(s_guid,className, "instances", "List<EnlightenDbInstance)>", s_Instance.instances)
	self:SendDefault(s_guid,className, "lightTransportCache", "PrecomputeCache", s_Instance.lightTransportCache)
	self:SendDefault(s_guid,className, "outputHeight", "uint", s_Instance.outputHeight)
	self:SendDefault(s_guid,className, "outputWidth", "uint", s_Instance.outputWidth)
	self:SendDefault(s_guid,className, "pixelCount", "uint", s_Instance.pixelCount)
	self:SendDefault(s_guid,className, "pixelSize", "float", s_Instance.pixelSize)
	self:SendDefault(s_guid,className, "preClusteringCache", "PrecomputeCache", s_Instance.preClusteringCache)
	self:SendDefault(s_guid,className, "systemCache", "PrecomputeCache", s_Instance.systemCache)
	self:SendDefault(s_guid,className, "systemId", "int", s_Instance.systemId)
	self:SendDefault(s_guid,className, "terrainSystem", "bool", s_Instance.terrainSystem)
	self:SendDefault(s_guid,className, "visibilityCache", "PrecomputeCache", s_Instance.visibilityCache)
end

function Type:EnlightenEntityData (p_class, p_guid)
	local s_Instance = EnlightenEntityData(p_class) 
 	local className = "EnlightenEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EnlightenInputInstance (p_class, p_guid)
	local s_Instance = EnlightenInputInstance(p_class) 
 	local className = "EnlightenInputInstance"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "string", s_Instance.asset)
	self:SendDefault(s_guid,className, "objectVariation", "string", s_Instance.objectVariation)
	self:SendDefault(s_guid,className, "systemId", "int", s_Instance.systemId)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:EnlightenLightProbeSet (p_class, p_guid)
	local s_Instance = EnlightenLightProbeSet(p_class) 
 	local className = "EnlightenLightProbeSet"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blendDistance", "float", s_Instance.blendDistance)
	self:SendDefault(s_guid,className, "boundingBox", "AxisAlignedBox", s_Instance.boundingBox)
	self:SendDefault(s_guid,className, "cache", "PrecomputeCache", s_Instance.cache)
	self:SendDefault(s_guid,className, "inputSystems", "List<int)>", s_Instance.inputSystems)
	self:SendDefault(s_guid,className, "positions", "List<Vec3)>", s_Instance.positions)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
	self:SendDefault(s_guid,className, "sizeX", "uint", s_Instance.sizeX)
	self:SendDefault(s_guid,className, "sizeY", "uint", s_Instance.sizeY)
	self:SendDefault(s_guid,className, "sizeZ", "uint", s_Instance.sizeZ)
	self:SendDefault(s_guid,className, "staticProbeSet", "bool", s_Instance.staticProbeSet)
	self:SendDefault(s_guid,className, "systemId", "int", s_Instance.systemId)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
	self:SendDefault(s_guid,className, "validIndices", "List<uint)>", s_Instance.validIndices)
end

function Type:EnlightenPipelineParams (p_class, p_guid)
	local s_Instance = EnlightenPipelineParams(p_class) 
 	local className = "EnlightenPipelineParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dynamicEnable", "bool", s_Instance.dynamicEnable)
end

function Type:EnlightenPipelineTerrain (p_class, p_guid)
	local s_Instance = EnlightenPipelineTerrain(p_class) 
 	local className = "EnlightenPipelineTerrain"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshes", "List<EnlightenPipelineTerrainMesh)>", s_Instance.meshes)
end

function Type:EnlightenPipelineTerrainMesh (p_class, p_guid)
	local s_Instance = EnlightenPipelineTerrainMesh(p_class) 
 	local className = "EnlightenPipelineTerrainMesh"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boundingBox", "AxisAlignedBox", s_Instance.boundingBox)
	self:SendDefault(s_guid,className, "lightMapResolution", "uint", s_Instance.lightMapResolution)
	self:SendDefault(s_guid,className, "terrainMeshName", "string", s_Instance.terrainMeshName)
	self:SendDefault(s_guid,className, "uvTransform", "Vec4", s_Instance.uvTransform)
	self:SendDefault(s_guid,className, "uvTranslation", "Vec2", s_Instance.uvTranslation)
end

function Type:EnlightenRuntimeConfig (p_class, p_guid)
	local s_Instance = EnlightenRuntimeConfig(p_class) 
 	local className = "EnlightenRuntimeConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "jobCount", "uint", s_Instance.jobCount)
end

function Type:EnlightenRuntimeSettings (p_class, p_guid)
	local s_Instance = EnlightenRuntimeSettings(p_class) 
 	local className = "EnlightenRuntimeSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "albedoDefaultColor", "Vec3", s_Instance.albedoDefaultColor)
	self:SendDefault(s_guid,className, "albedoForceColorEnable", "bool", s_Instance.albedoForceColorEnable)
	self:SendDefault(s_guid,className, "albedoForceUpdateEnable", "bool", s_Instance.albedoForceUpdateEnable)
	self:SendDefault(s_guid,className, "compensateSunShadowHeightScale", "bool", s_Instance.compensateSunShadowHeightScale)
	self:SendDefault(s_guid,className, "drawDebugBackFaces", "bool", s_Instance.drawDebugBackFaces)
	self:SendDefault(s_guid,className, "drawDebugColoringEnable", "bool", s_Instance.drawDebugColoringEnable)
	self:SendDefault(s_guid,className, "drawDebugEntities", "bool", s_Instance.drawDebugEntities)
	self:SendDefault(s_guid,className, "drawDebugLightProbeBoundingBoxes", "bool", s_Instance.drawDebugLightProbeBoundingBoxes)
	self:SendDefault(s_guid,className, "drawDebugLightProbeOcclusion", "bool", s_Instance.drawDebugLightProbeOcclusion)
	self:SendDefault(s_guid,className, "drawDebugLightProbes", "bool", s_Instance.drawDebugLightProbes)
	self:SendDefault(s_guid,className, "drawDebugLightProbeSize", "float", s_Instance.drawDebugLightProbeSize)
	self:SendDefault(s_guid,className, "drawDebugLightProbeStats", "bool", s_Instance.drawDebugLightProbeStats)
	self:SendDefault(s_guid,className, "drawDebugSystemBoundingBoxEnable", "int", s_Instance.drawDebugSystemBoundingBoxEnable)
	self:SendDefault(s_guid,className, "drawDebugSystemDependenciesEnable", "int", s_Instance.drawDebugSystemDependenciesEnable)
	self:SendDefault(s_guid,className, "drawDebugSystemsEnable", "bool", s_Instance.drawDebugSystemsEnable)
	self:SendDefault(s_guid,className, "drawDebugTargetMeshes", "bool", s_Instance.drawDebugTargetMeshes)
	self:SendDefault(s_guid,className, "drawDebugTextures", "bool", s_Instance.drawDebugTextures)
	self:SendDefault(s_guid,className, "drawSolveTaskPerformance", "bool", s_Instance.drawSolveTaskPerformance)
	self:SendDefault(s_guid,className, "drawWarningsEnable", "bool", s_Instance.drawWarningsEnable)
	self:SendDefault(s_guid,className, "emissiveEnable", "bool", s_Instance.emissiveEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "forceDynamic", "bool", s_Instance.forceDynamic)
	self:SendDefault(s_guid,className, "jobCount", "uint", s_Instance.jobCount)
	self:SendDefault(s_guid,className, "lightMapsEnable", "bool", s_Instance.lightMapsEnable)
	self:SendDefault(s_guid,className, "lightProbeEnable", "bool", s_Instance.lightProbeEnable)
	self:SendDefault(s_guid,className, "lightProbeForceUpdate", "bool", s_Instance.lightProbeForceUpdate)
	self:SendDefault(s_guid,className, "lightProbeJobsEnable", "bool", s_Instance.lightProbeJobsEnable)
	self:SendDefault(s_guid,className, "lightProbeMaxUpdateSolveCount", "uint", s_Instance.lightProbeMaxUpdateSolveCount)
	self:SendDefault(s_guid,className, "localLightCullingEnable", "bool", s_Instance.localLightCullingEnable)
	self:SendDefault(s_guid,className, "localLightCustumFalloff", "bool", s_Instance.localLightCustumFalloff)
	self:SendDefault(s_guid,className, "localLightForceRadius", "float", s_Instance.localLightForceRadius)
	self:SendDefault(s_guid,className, "localLightsEnable", "bool", s_Instance.localLightsEnable)
	self:SendDefault(s_guid,className, "minSystemUpdateCount", "uint", s_Instance.minSystemUpdateCount)
	self:SendDefault(s_guid,className, "saveRadiosityTexturesEnable", "bool", s_Instance.saveRadiosityTexturesEnable)
	self:SendDefault(s_guid,className, "shadowsEnable", "bool", s_Instance.shadowsEnable)
	self:SendDefault(s_guid,className, "skyBoxScale", "float", s_Instance.skyBoxScale)
	self:SendDefault(s_guid,className, "temporalCoherenceThreshold", "float", s_Instance.temporalCoherenceThreshold)
	self:SendDefault(s_guid,className, "terrainMapEnable", "bool", s_Instance.terrainMapEnable)
end

function Type:EnlightenState (p_class, p_guid)
	local s_Instance = EnlightenState(p_class) 
 	local className = "EnlightenState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bounceScale", "float", s_Instance.bounceScale)
	self:SendDefault(s_guid,className, "outputScale", "float", s_Instance.outputScale)
	self:SendDefault(s_guid,className, "skyBoxBackLightColor", "Vec3", s_Instance.skyBoxBackLightColor)
	self:SendDefault(s_guid,className, "skyBoxBackLightColorSize", "float", s_Instance.skyBoxBackLightColorSize)
	self:SendDefault(s_guid,className, "skyBoxBackLightRotationX", "float", s_Instance.skyBoxBackLightRotationX)
	self:SendDefault(s_guid,className, "skyBoxBackLightRotationY", "float", s_Instance.skyBoxBackLightRotationY)
	self:SendDefault(s_guid,className, "skyBoxEnable", "bool", s_Instance.skyBoxEnable)
	self:SendDefault(s_guid,className, "skyBoxGroundColor", "Vec3", s_Instance.skyBoxGroundColor)
	self:SendDefault(s_guid,className, "skyBoxSkyColor", "Vec3", s_Instance.skyBoxSkyColor)
	self:SendDefault(s_guid,className, "skyBoxSunLightColor", "Vec3", s_Instance.skyBoxSunLightColor)
	self:SendDefault(s_guid,className, "skyBoxSunLightColorSize", "float", s_Instance.skyBoxSunLightColorSize)
	self:SendDefault(s_guid,className, "sunScale", "float", s_Instance.sunScale)
end

function Type:EnterVehicleSurveyEvent (p_class, p_guid)
	local s_Instance = EnterVehicleSurveyEvent(p_class) 
 	local className = "EnterVehicleSurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
	self:SendDefault(s_guid,className, "vehicleName", "string", s_Instance.vehicleName)
end

function Type:EntitlementData (p_class, p_guid)
	local s_Instance = EntitlementData(p_class) 
 	local className = "EntitlementData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entitlementTag", "string", s_Instance.entitlementTag)
	self:SendDefault(s_guid,className, "groupName", "string", s_Instance.groupName)
	self:SendDefault(s_guid,className, "license", "string", s_Instance.license)
	self:SendDefault(s_guid,className, "productId", "string", s_Instance.productId)
	self:SendDefault(s_guid,className, "projectId", "string", s_Instance.projectId)
	self:SendDefault(s_guid,className, "usageType", "EntitlementType", s_Instance.usageType)
	self:SendDefault(s_guid,className, "verifyOwnership", "bool", s_Instance.verifyOwnership)
end

function Type:EntitlementQuery (p_class, p_guid)
	local s_Instance = EntitlementQuery(p_class) 
 	local className = "EntitlementQuery"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entitlementsData", "List<EntitlementData)>", s_Instance.entitlementsData)
	self:SendDefault(s_guid,className, "entitlementTag", "string", s_Instance.entitlementTag)
	self:SendDefault(s_guid,className, "groupNames", "List<string)>", s_Instance.groupNames)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "productId", "string", s_Instance.productId)
	self:SendDefault(s_guid,className, "projectId", "string", s_Instance.projectId)
end

function Type:EntityBusData (p_class, p_guid)
	local s_Instance = EntityBusData(p_class) 
 	local className = "EntityBusData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alwaysCreateEntityBusClient", "bool", s_Instance.alwaysCreateEntityBusClient)
	self:SendDefault(s_guid,className, "alwaysCreateEntityBusServer", "bool", s_Instance.alwaysCreateEntityBusServer)
	self:SendDefault(s_guid,className, "descriptor", "CtrRef", s_Instance.descriptor)
	self:SendDefault(s_guid,className, "eventConnections", "List<EventConnection)>", s_Instance.eventConnections)
	self:SendDefault(s_guid,className, "interfaceHasConnections", "bool", s_Instance.interfaceHasConnections)
	self:SendDefault(s_guid,className, "needNetworkId", "bool", s_Instance.needNetworkId)
end

function Type:EntityInteractionComponentData (p_class, p_guid)
	local s_Instance = EntityInteractionComponentData(p_class) 
 	local className = "EntityInteractionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowInteractionWithSoldiers", "bool", s_Instance.allowInteractionWithSoldiers)
	self:SendDefault(s_guid,className, "interactWithTypes", "InteractionTypesData", s_Instance.interactWithTypes)
	self:SendDefault(s_guid,className, "maxAmmoCrateTimer", "float", s_Instance.maxAmmoCrateTimer)
	self:SendDefault(s_guid,className, "maxAmmoPickupTimer", "float", s_Instance.maxAmmoPickupTimer)
	self:SendDefault(s_guid,className, "maxLookAtAngle", "float", s_Instance.maxLookAtAngle)
	self:SendDefault(s_guid,className, "onlyAllowInteractionWithManDownSoldiers", "bool", s_Instance.onlyAllowInteractionWithManDownSoldiers)
	self:SendDefault(s_guid,className, "pickupRadius", "float", s_Instance.pickupRadius)
	self:SendDefault(s_guid,className, "soldierInteractInputAction", "EntryInputActionEnum", s_Instance.soldierInteractInputAction)
	self:SendDefault(s_guid,className, "soldierInteractRadius", "float", s_Instance.soldierInteractRadius)
end

function Type:EntityRecordingData (p_class, p_guid)
	local s_Instance = EntityRecordingData(p_class) 
 	local className = "EntityRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "List<CtrRef)>", s_Instance.data)
	self:SendDefault(s_guid,className, "entityGuid", "GUID", s_Instance.entityGuid)
end

function Type:EntitySettings (p_class, p_guid)
	local s_Instance = EntitySettings(p_class) 
 	local className = "EntitySettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "editorGameViewEnable", "bool", s_Instance.editorGameViewEnable)
	self:SendDefault(s_guid,className, "executionMode", "ExecutionModeType", s_Instance.executionMode)
	self:SendDefault(s_guid,className, "outOfEntityBusNetworkIdThreshold", "uint", s_Instance.outOfEntityBusNetworkIdThreshold)
	self:SendDefault(s_guid,className, "spawnSubLevelsFromLogic", "bool", s_Instance.spawnSubLevelsFromLogic)
end

function Type:EntityTransformData (p_class, p_guid)
	local s_Instance = EntityTransformData(p_class) 
 	local className = "EntityTransformData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entityTransforms", "List<LinearTransform)>", s_Instance.entityTransforms)
end

function Type:EntityUid (p_class, p_guid)
	local s_Instance = EntityUid(p_class) 
 	local className = "EntityUid"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "uint", s_Instance.id)
end

function Type:EntityVoiceOverInfo (p_class, p_guid)
	local s_Instance = EntityVoiceOverInfo(p_class) 
 	local className = "EntityVoiceOverInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "labels", "List<CtrRef)>", s_Instance.labels)
	self:SendDefault(s_guid,className, "voiceOverType", "CtrRef", s_Instance.voiceOverType)
end

function Type:EntryComponentData (p_class, p_guid)
	local s_Instance = EntryComponentData(p_class) 
 	local className = "EntryComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aIData", "CtrRef", s_Instance.aIData)
	self:SendDefault(s_guid,className, "enterImpulse", "float", s_Instance.enterImpulse)
	self:SendDefault(s_guid,className, "entryClass", "fb.EntryClass)", s_Instance.entryClass)
	self:SendDefault(s_guid,className, "entryComponentSound", "CtrRef", s_Instance.entryComponentSound)
	self:SendDefault(s_guid,className, "entryOrderNumber", "int", s_Instance.entryOrderNumber)
	self:SendDefault(s_guid,className, "entryRadius", "float", s_Instance.entryRadius)
	self:SendDefault(s_guid,className, "entrySpottingSettings", "fb.EntrySpottingSettings)", s_Instance.entrySpottingSettings)
	self:SendDefault(s_guid,className, "forbiddenForHuman", "bool", s_Instance.forbiddenForHuman)
	self:SendDefault(s_guid,className, "hideSoldierForPassengers", "bool", s_Instance.hideSoldierForPassengers)
	self:SendDefault(s_guid,className, "hudData", "EntryComponentHudData", s_Instance.hudData)
	self:SendDefault(s_guid,className, "inputConceptDefinition", "CtrRef", s_Instance.inputConceptDefinition)
	self:SendDefault(s_guid,className, "inputCurves", "List<CtrRef)>", s_Instance.inputCurves)
	self:SendDefault(s_guid,className, "inputMapping", "CtrRef", s_Instance.inputMapping)
	self:SendDefault(s_guid,className, "isAllowedToExitInAir", "bool", s_Instance.isAllowedToExitInAir)
	self:SendDefault(s_guid,className, "isShielded", "bool", s_Instance.isShielded)
	self:SendDefault(s_guid,className, "lockSoldierAimingToEntry", "bool", s_Instance.lockSoldierAimingToEntry)
	self:SendDefault(s_guid,className, "numberOfStances", "int", s_Instance.numberOfStances)
	self:SendDefault(s_guid,className, "poseConstraints", "PoseConstraintsData", s_Instance.poseConstraints)
	self:SendDefault(s_guid,className, "show1pSoldierInEntry", "bool", s_Instance.show1pSoldierInEntry)
	self:SendDefault(s_guid,className, "show1pSoldierInEntryForPlayerOnly", "bool", s_Instance.show1pSoldierInEntryForPlayerOnly)
	self:SendDefault(s_guid,className, "show3pSoldierWeaponInEntry", "bool", s_Instance.show3pSoldierWeaponInEntry)
	self:SendDefault(s_guid,className, "showSoldierGearInEntry", "bool", s_Instance.showSoldierGearInEntry)
	self:SendDefault(s_guid,className, "showSoldierInEntry", "bool", s_Instance.showSoldierInEntry)
	self:SendDefault(s_guid,className, "showSoldierWeaponInEntry", "bool", s_Instance.showSoldierWeaponInEntry)
	self:SendDefault(s_guid,className, "soldierOffset", "Vec3", s_Instance.soldierOffset)
	self:SendDefault(s_guid,className, "soldierTransitionInvisbleTime", "float", s_Instance.soldierTransitionInvisbleTime)
	self:SendDefault(s_guid,className, "stancesEnabled", "bool", s_Instance.stancesEnabled)
	self:SendDefault(s_guid,className, "triggerEventOnKey", "EntryInputActionEnum", s_Instance.triggerEventOnKey)
end

function Type:EntryComponentHudData (p_class, p_guid)
	local s_Instance = EntryComponentHudData(p_class) 
 	local className = "EntryComponentHudData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frustum", "bool", s_Instance.frustum)
	self:SendDefault(s_guid,className, "index", "int", s_Instance.index)
	self:SendDefault(s_guid,className, "maximizeMiniMapOnEntry", "bool", s_Instance.maximizeMiniMapOnEntry)
	self:SendDefault(s_guid,className, "seatType", "EntrySeatType", s_Instance.seatType)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:EntryComponentSoundData (p_class, p_guid)
	local s_Instance = EntryComponentSoundData(p_class) 
 	local className = "EntryComponentSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "stanceSounds", "List<StanceSwitchSoundData)>", s_Instance.stanceSounds)
	self:SendDefault(s_guid,className, "stanceSwitchSound", "CtrRef", s_Instance.stanceSwitchSound)
end

function Type:EntryInputActionMappingData (p_class, p_guid)
	local s_Instance = EntryInputActionMappingData(p_class) 
 	local className = "EntryInputActionMappingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionIdentifier", "EntryInputActionEnum", s_Instance.actionIdentifier)
	self:SendDefault(s_guid,className, "conceptIdentifier", "InputConceptIdentifiers", s_Instance.conceptIdentifier)
end

function Type:EntryInputActionMapsData (p_class, p_guid)
	local s_Instance = EntryInputActionMapsData(p_class) 
 	local className = "EntryInputActionMapsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionMapSettingsScheme", "int", s_Instance.actionMapSettingsScheme)
	self:SendDefault(s_guid,className, "defaultInputActionMap", "InputActionMapSlot", s_Instance.defaultInputActionMap)
	self:SendDefault(s_guid,className, "inputActionMaps", "List<CtrRef)>", s_Instance.inputActionMaps)
end

function Type:EqualizerSettings (p_class, p_guid)
	local s_Instance = EqualizerSettings(p_class) 
 	local className = "EqualizerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "highShelfFrequency", "float", s_Instance.highShelfFrequency)
	self:SendDefault(s_guid,className, "highShelfGain", "float", s_Instance.highShelfGain)
	self:SendDefault(s_guid,className, "hpCutoffFrequency", "float", s_Instance.hpCutoffFrequency)
	self:SendDefault(s_guid,className, "lowShelfFrequency", "float", s_Instance.lowShelfFrequency)
	self:SendDefault(s_guid,className, "lowShelfGain", "float", s_Instance.lowShelfGain)
end

function Type:EulerTransformEntityData (p_class, p_guid)
	local s_Instance = EulerTransformEntityData(p_class) 
 	local className = "EulerTransformEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "euler", "ModifierEuler", s_Instance.euler)
	self:SendDefault(s_guid,className, "in", "float", s_Instance.inValue)
	self:SendDefault(s_guid,className, "in1", "Vec3", s_Instance.in1)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EulerTransformSplitterEntityData (p_class, p_guid)
	local s_Instance = EulerTransformSplitterEntityData(p_class) 
 	local className = "EulerTransformSplitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:EvaluatorData (p_class, p_guid)
	local s_Instance = EvaluatorData(p_class) 
 	local className = "EvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emitterParameter", "fb.EmitterParameter)", s_Instance.emitterParameter)
end

function Type:EventAndGateEntityData (p_class, p_guid)
	local s_Instance = EventAndGateEntityData(p_class) 
 	local className = "EventAndGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventCount", "uint", s_Instance.eventCount)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EventCompareGateEntityData (p_class, p_guid)
	local s_Instance = EventCompareGateEntityData(p_class) 
 	local className = "EventCompareGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "compareType", "EventCompareGateType", s_Instance.compareType)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:EventConnection (p_class, p_guid)
	local s_Instance = EventConnection(p_class) 
 	local className = "EventConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "sourceEvent", "EventSpec", s_Instance.sourceEvent)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
	self:SendDefault(s_guid,className, "targetEvent", "EventSpec", s_Instance.targetEvent)
	self:SendDefault(s_guid,className, "targetType", "EventConnectionTargetType", s_Instance.targetType)
end

function Type:EventDebugNodeData (p_class, p_guid)
	local s_Instance = EventDebugNodeData(p_class) 
 	local className = "EventDebugNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "List<CtrRef)>", s_Instance.events)
end

function Type:EventGateEntityData (p_class, p_guid)
	local s_Instance = EventGateEntityData(p_class) 
 	local className = "EventGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "default", "bool", s_Instance.default)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EventGateNodeData (p_class, p_guid)
	local s_Instance = EventGateNodeData(p_class) 
 	local className = "EventGateNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coolDownTime", "AudioGraphNodePort", s_Instance.coolDownTime)
	self:SendDefault(s_guid,className, "enable", "AudioGraphNodePort", s_Instance.enable)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
end

function Type:EventIfSwitchEntityData (p_class, p_guid)
	local s_Instance = EventIfSwitchEntityData(p_class) 
 	local className = "EventIfSwitchEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
	self:SendDefault(s_guid,className, "startState", "bool", s_Instance.startState)
end

function Type:EventMemoryEntityData (p_class, p_guid)
	local s_Instance = EventMemoryEntityData(p_class) 
 	local className = "EventMemoryEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EventQueueEntityData (p_class, p_guid)
	local s_Instance = EventQueueEntityData(p_class) 
 	local className = "EventQueueEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EventScaleData (p_class, p_guid)
	local s_Instance = EventScaleData(p_class) 
 	local className = "EventScaleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "event", "StatEvent", s_Instance.event)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:EventSpec (p_class, p_guid)
	local s_Instance = EventSpec(p_class) 
 	local className = "EventSpec"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
end

function Type:EventSplitterEntityData (p_class, p_guid)
	local s_Instance = EventSplitterEntityData(p_class) 
 	local className = "EventSplitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
end

function Type:EventSwitchEntityData (p_class, p_guid)
	local s_Instance = EventSwitchEntityData(p_class) 
 	local className = "EventSwitchEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoIncrement", "bool", s_Instance.autoIncrement)
	self:SendDefault(s_guid,className, "outEvents", "uint", s_Instance.outEvents)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:EventSwitcherEntry (p_class, p_guid)
	local s_Instance = EventSwitcherEntry(p_class) 
 	local className = "EventSwitcherEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "caseTrigger", "AudioGraphNodePort", s_Instance.caseTrigger)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:EventSwitcherNodeData (p_class, p_guid)
	local s_Instance = EventSwitcherNodeData(p_class) 
 	local className = "EventSwitcherNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
end

function Type:ExampleVehicleBlueprintBundleMetadata (p_class, p_guid)
	local s_Instance = ExampleVehicleBlueprintBundleMetadata(p_class) 
 	local className = "ExampleVehicleBlueprintBundleMetadata"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "exampleVehicleType", "fb.ExampleVehicleType)", s_Instance.exampleVehicleType)
end

function Type:ExpanderNodeData (p_class, p_guid)
	local s_Instance = ExpanderNodeData(p_class) 
 	local className = "ExpanderNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackTime", "AudioGraphNodePort", s_Instance.attackTime)
	self:SendDefault(s_guid,className, "channelMode", "ExpanderChannelMode", s_Instance.channelMode)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "ratio", "AudioGraphNodePort", s_Instance.ratio)
	self:SendDefault(s_guid,className, "releaseTime", "AudioGraphNodePort", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "threshold", "AudioGraphNodePort", s_Instance.threshold)
end

function Type:ExplosionEntityData (p_class, p_guid)
	local s_Instance = ExplosionEntityData(p_class) 
 	local className = "ExplosionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blastDamage", "float", s_Instance.blastDamage)
	self:SendDefault(s_guid,className, "blastImpulse", "float", s_Instance.blastImpulse)
	self:SendDefault(s_guid,className, "blastRadius", "float", s_Instance.blastRadius)
	self:SendDefault(s_guid,className, "cameraShockwaveRadius", "float", s_Instance.cameraShockwaveRadius)
	self:SendDefault(s_guid,className, "damageIndicationType", "fb.DamageIndicationType)", s_Instance.damageIndicationType)
	self:SendDefault(s_guid,className, "destructionMaskVolume", "CtrRef", s_Instance.destructionMaskVolume)
	self:SendDefault(s_guid,className, "detonateOnce", "bool", s_Instance.detonateOnce)
	self:SendDefault(s_guid,className, "detonationEffect", "CtrRef", s_Instance.detonationEffect)
	self:SendDefault(s_guid,className, "disableOcclusion", "bool", s_Instance.disableOcclusion)
	self:SendDefault(s_guid,className, "disableStaticEntityOcclusion", "bool", s_Instance.disableStaticEntityOcclusion)
	self:SendDefault(s_guid,className, "empTime", "float", s_Instance.empTime)
	self:SendDefault(s_guid,className, "hasStunEffect", "bool", s_Instance.hasStunEffect)
	self:SendDefault(s_guid,className, "innerBlastRadius", "float", s_Instance.innerBlastRadius)
	self:SendDefault(s_guid,className, "maskVolume", "CtrRef", s_Instance.maskVolume)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "maxOcclusionRaycastRadius", "float", s_Instance.maxOcclusionRaycastRadius)
	self:SendDefault(s_guid,className, "shockwaveDamage", "float", s_Instance.shockwaveDamage)
	self:SendDefault(s_guid,className, "shockwaveImpulse", "float", s_Instance.shockwaveImpulse)
	self:SendDefault(s_guid,className, "shockwaveRadius", "float", s_Instance.shockwaveRadius)
	self:SendDefault(s_guid,className, "shockwaveTime", "float", s_Instance.shockwaveTime)
	self:SendDefault(s_guid,className, "showOnMinimap", "bool", s_Instance.showOnMinimap)
	self:SendDefault(s_guid,className, "spawnDelay", "float", s_Instance.spawnDelay)
	self:SendDefault(s_guid,className, "triggerImpairedHearing", "bool", s_Instance.triggerImpairedHearing)
	self:SendDefault(s_guid,className, "useEntityTransformForDetonationEffect", "bool", s_Instance.useEntityTransformForDetonationEffect)
end

function Type:ExplosionPackEntityData (p_class, p_guid)
	local s_Instance = ExplosionPackEntityData(p_class) 
 	local className = "ExplosionPackEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defuseRadius", "float", s_Instance.defuseRadius)
	self:SendDefault(s_guid,className, "hasRemoteDetonator", "bool", s_Instance.hasRemoteDetonator)
	self:SendDefault(s_guid,className, "hasVehicleDetonation", "bool", s_Instance.hasVehicleDetonation)
	self:SendDefault(s_guid,className, "health", "float", s_Instance.health)
	self:SendDefault(s_guid,className, "icon", "UIHudIcon", s_Instance.icon)
	self:SendDefault(s_guid,className, "isDestructible", "bool", s_Instance.isDestructible)
	self:SendDefault(s_guid,className, "receivesExplosionDamage", "bool", s_Instance.receivesExplosionDamage)
	self:SendDefault(s_guid,className, "soldierDetonationData", "fb.SoldierDetonationData)", s_Instance.soldierDetonationData)
	self:SendDefault(s_guid,className, "spottedTime", "float", s_Instance.spottedTime)
	self:SendDefault(s_guid,className, "timeToLiveOnPlayerDeath", "float", s_Instance.timeToLiveOnPlayerDeath)
	self:SendDefault(s_guid,className, "vehicleDetonationActivationDelay", "float", s_Instance.vehicleDetonationActivationDelay)
	self:SendDefault(s_guid,className, "vehicleDetonationRadius", "float", s_Instance.vehicleDetonationRadius)
end

function Type:ExtendedConstraintsData (p_class, p_guid)
	local s_Instance = ExtendedConstraintsData(p_class) 
 	local className = "ExtendedConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularConstraintMax", "float", s_Instance.angularConstraintMax)
	self:SendDefault(s_guid,className, "angularConstraintMin", "float", s_Instance.angularConstraintMin)
	self:SendDefault(s_guid,className, "falloff", "float", s_Instance.falloff)
	self:SendDefault(s_guid,className, "heading", "float", s_Instance.heading)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:FaceAnimationWaveMapping (p_class, p_guid)
	local s_Instance = FaceAnimationWaveMapping(p_class) 
 	local className = "FaceAnimationWaveMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antEnumValue", "int", s_Instance.antEnumValue)
	self:SendDefault(s_guid,className, "waveNameHash", "int", s_Instance.waveNameHash)
end

function Type:FaceAnimationWaveMappings (p_class, p_guid)
	local s_Instance = FaceAnimationWaveMappings(p_class) 
 	local className = "FaceAnimationWaveMappings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antAsset", "AntRef", s_Instance.antAsset)
	self:SendDefault(s_guid,className, "mappings", "List<FaceAnimationWaveMapping)>", s_Instance.mappings)
	self:SendDefault(s_guid,className, "onStartedTalking", "AntRef", s_Instance.onStartedTalking)
end

function Type:FaceposerComponentData (p_class, p_guid)
	local s_Instance = FaceposerComponentData(p_class) 
 	local className = "FaceposerComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "facePoseLibrary", "List<AntRef)>", s_Instance.facePoseLibrary)
	self:SendDefault(s_guid,className, "facePoseLibraryIndex", "int", s_Instance.facePoseLibraryIndex)
	self:SendDefault(s_guid,className, "facePoseLibraryReference", "AntRef", s_Instance.facePoseLibraryReference)
	self:SendDefault(s_guid,className, "facePoserDofSetName", "string", s_Instance.facePoserDofSetName)
	self:SendDefault(s_guid,className, "facePoserEnabled", "AntRef", s_Instance.facePoserEnabled)
	self:SendDefault(s_guid,className, "lodDistance", "float", s_Instance.lodDistance)
	self:SendDefault(s_guid,className, "shaderExposedValues", "List<string)>", s_Instance.shaderExposedValues)
end

function Type:FadeEntityData (p_class, p_guid)
	local s_Instance = FadeEntityData(p_class) 
 	local className = "FadeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fadeAudio", "bool", s_Instance.fadeAudio)
	self:SendDefault(s_guid,className, "fadeMovie", "bool", s_Instance.fadeMovie)
	self:SendDefault(s_guid,className, "fadeRumble", "bool", s_Instance.fadeRumble)
	self:SendDefault(s_guid,className, "fadeScreen", "bool", s_Instance.fadeScreen)
	self:SendDefault(s_guid,className, "fadeTime", "float", s_Instance.fadeTime)
	self:SendDefault(s_guid,className, "fadeUI", "bool", s_Instance.fadeUI)
	self:SendDefault(s_guid,className, "maxWaitFadedWhileStreamingTime", "float", s_Instance.maxWaitFadedWhileStreamingTime)
	self:SendDefault(s_guid,className, "startFaded", "bool", s_Instance.startFaded)
end

function Type:FakeHingeData (p_class, p_guid)
	local s_Instance = FakeHingeData(p_class) 
 	local className = "FakeHingeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularDampening", "float", s_Instance.angularDampening)
	self:SendDefault(s_guid,className, "extensionAxis", "Vec3", s_Instance.extensionAxis)
	self:SendDefault(s_guid,className, "inertiaModifier", "float", s_Instance.inertiaModifier)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
	self:SendDefault(s_guid,className, "pivot", "Vec3", s_Instance.pivot)
	self:SendDefault(s_guid,className, "progressiveExponent", "float", s_Instance.progressiveExponent)
	self:SendDefault(s_guid,className, "pullbackAcceleration", "float", s_Instance.pullbackAcceleration)
	self:SendDefault(s_guid,className, "rotationAxis", "Vec3", s_Instance.rotationAxis)
end

function Type:FakePhysicsData (p_class, p_guid)
	local s_Instance = FakePhysicsData(p_class) 
 	local className = "FakePhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "childFakePhysics", "CtrRef", s_Instance.childFakePhysics)
	self:SendDefault(s_guid,className, "endDampening", "float", s_Instance.endDampening)
	self:SendDefault(s_guid,className, "gravityModifier", "float", s_Instance.gravityModifier)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "minSpeed", "float", s_Instance.minSpeed)
	self:SendDefault(s_guid,className, "startDampening", "float", s_Instance.startDampening)
	self:SendDefault(s_guid,className, "startSpeed", "float", s_Instance.startSpeed)
end

function Type:FakeSpringData (p_class, p_guid)
	local s_Instance = FakeSpringData(p_class) 
 	local className = "FakeSpringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "acceleration", "float", s_Instance.acceleration)
	self:SendDefault(s_guid,className, "damping", "float", s_Instance.damping)
	self:SendDefault(s_guid,className, "direction", "Vec3", s_Instance.direction)
	self:SendDefault(s_guid,className, "length", "float", s_Instance.length)
	self:SendDefault(s_guid,className, "progressiveExponent", "float", s_Instance.progressiveExponent)
end

function Type:FenceModelEntityData (p_class, p_guid)
	local s_Instance = FenceModelEntityData(p_class) 
 	local className = "FenceModelEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:FilmGrainComponentData (p_class, p_guid)
	local s_Instance = FilmGrainComponentData(p_class) 
 	local className = "FilmGrainComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "colorScale", "Vec3", s_Instance.colorScale)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "linearFilteringEnable", "bool", s_Instance.linearFilteringEnable)
	self:SendDefault(s_guid,className, "randomEnable", "bool", s_Instance.randomEnable)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
	self:SendDefault(s_guid,className, "textureScale", "Vec2", s_Instance.textureScale)
end

function Type:FireEffectData (p_class, p_guid)
	local s_Instance = FireEffectData(p_class) 
 	local className = "FireEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "disableDuringZoom", "bool", s_Instance.disableDuringZoom)
	self:SendDefault(s_guid,className, "effect", "CtrRef", s_Instance.effect)
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "rotation", "Vec3", s_Instance.rotation)
	self:SendDefault(s_guid,className, "stopLoopingEffects", "bool", s_Instance.stopLoopingEffects)
	self:SendDefault(s_guid,className, "updateTransform", "bool", s_Instance.updateTransform)
	self:SendDefault(s_guid,className, "useZoomOffset", "bool", s_Instance.useZoomOffset)
	self:SendDefault(s_guid,className, "useZoomRotation", "bool", s_Instance.useZoomRotation)
	self:SendDefault(s_guid,className, "zoomOffset", "Vec3", s_Instance.zoomOffset)
	self:SendDefault(s_guid,className, "zoomRotation", "Vec3", s_Instance.zoomRotation)
end

function Type:FireLogicData (p_class, p_guid)
	local s_Instance = FireLogicData(p_class) 
 	local className = "FireLogicData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alwaysAutoReload", "bool", s_Instance.alwaysAutoReload)
	self:SendDefault(s_guid,className, "automaticDelay", "float", s_Instance.automaticDelay)
	self:SendDefault(s_guid,className, "boltAction", "BoltActionData", s_Instance.boltAction)
	self:SendDefault(s_guid,className, "clientFireRateMultiplier", "float", s_Instance.clientFireRateMultiplier)
	self:SendDefault(s_guid,className, "cycleFireModeInputAction", "EntryInputActionEnum", s_Instance.cycleFireModeInputAction)
	self:SendDefault(s_guid,className, "fireInputAction", "EntryInputActionEnum", s_Instance.fireInputAction)
	self:SendDefault(s_guid,className, "fireLogicType", "fb.FireLogicType)", s_Instance.fireLogicType)
	self:SendDefault(s_guid,className, "fireLogicTypeArray", "List<fb).FireLogicType>", s_Instance.fireLogicTypeArray)
	self:SendDefault(s_guid,className, "forceReloadActionOnFireTrigger", "bool", s_Instance.forceReloadActionOnFireTrigger)
	self:SendDefault(s_guid,className, "holdAndRelease", "HoldAndReleaseData", s_Instance.holdAndRelease)
	self:SendDefault(s_guid,className, "holdOffReloadUntilFireRelease", "bool", s_Instance.holdOffReloadUntilFireRelease)
	self:SendDefault(s_guid,className, "holdOffReloadUntilZoomRelease", "bool", s_Instance.holdOffReloadUntilZoomRelease)
	self:SendDefault(s_guid,className, "preFireDelay", "float", s_Instance.preFireDelay)
	self:SendDefault(s_guid,className, "rateOfFire", "float", s_Instance.rateOfFire)
	self:SendDefault(s_guid,className, "rateOfFireForBurst", "float", s_Instance.rateOfFireForBurst)
	self:SendDefault(s_guid,className, "recoil", "RecoilData", s_Instance.recoil)
	self:SendDefault(s_guid,className, "reloadDelay", "float", s_Instance.reloadDelay)
	self:SendDefault(s_guid,className, "reloadInputAction", "EntryInputActionEnum", s_Instance.reloadInputAction)
	self:SendDefault(s_guid,className, "reloadLogic", "fb.ReloadLogic)", s_Instance.reloadLogic)
	self:SendDefault(s_guid,className, "reloadThreshold", "float", s_Instance.reloadThreshold)
	self:SendDefault(s_guid,className, "reloadTime", "float", s_Instance.reloadTime)
	self:SendDefault(s_guid,className, "reloadTimeBulletsLeft", "float", s_Instance.reloadTimeBulletsLeft)
	self:SendDefault(s_guid,className, "reloadType", "fb.ReloadType)", s_Instance.reloadType)
	self:SendDefault(s_guid,className, "triggerPullWeight", "float", s_Instance.triggerPullWeight)
	self:SendDefault(s_guid,className, "fireLogicData",  "readonly", s_Instance.fireLogicData)
	self:SendDefault(s_guid,className, "fireLogicType",  "uint", s_Instance.fireLogicType)
end

function Type:FiringDispersionData (p_class, p_guid)
	local s_Instance = FiringDispersionData(p_class) 
 	local className = "FiringDispersionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decreasePerSecond", "float", s_Instance.decreasePerSecond)
	self:SendDefault(s_guid,className, "increasePerShot", "float", s_Instance.increasePerShot)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:FiringFunctionData (p_class, p_guid)
	local s_Instance = FiringFunctionData(p_class) 
 	local className = "FiringFunctionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammo", "AmmoConfigData", s_Instance.ammo)
	self:SendDefault(s_guid,className, "ammoCrateReloadDelay", "float", s_Instance.ammoCrateReloadDelay)
	self:SendDefault(s_guid,className, "dispersion", "List<FiringDispersionData)>", s_Instance.dispersion)
	self:SendDefault(s_guid,className, "fireEffects1p", "List<FireEffectData)>", s_Instance.fireEffects1p)
	self:SendDefault(s_guid,className, "fireEffects3p", "List<FireEffectData)>", s_Instance.fireEffects3p)
	self:SendDefault(s_guid,className, "fireLogic", "FireLogicData", s_Instance.fireLogic)
	self:SendDefault(s_guid,className, "overHeat", "OverHeatData", s_Instance.overHeat)
	self:SendDefault(s_guid,className, "selfHealTimeWhenDeployed", "float", s_Instance.selfHealTimeWhenDeployed)
	self:SendDefault(s_guid,className, "shot", "ShotConfigData", s_Instance.shot)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
	self:SendDefault(s_guid,className, "unlimitedAmmoForAI", "bool", s_Instance.unlimitedAmmoForAI)
	self:SendDefault(s_guid,className, "usePrimaryAmmo", "bool", s_Instance.usePrimaryAmmo)
	self:SendDefault(s_guid,className, "weaponDispersion", "SoldierWeaponDispersion", s_Instance.weaponDispersion)
end

function Type:FirstPersonCameraData (p_class, p_guid)
	local s_Instance = FirstPersonCameraData(p_class) 
 	local className = "FirstPersonCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraSpringEffect", "CtrRef", s_Instance.cameraSpringEffect)
	self:SendDefault(s_guid,className, "moveForwardModifier", "float", s_Instance.moveForwardModifier)
	self:SendDefault(s_guid,className, "moveStrafeModifier", "float", s_Instance.moveStrafeModifier)
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "offsetReleaseModifier", "float", s_Instance.offsetReleaseModifier)
	self:SendDefault(s_guid,className, "releaseModifier", "float", s_Instance.releaseModifier)
	self:SendDefault(s_guid,className, "releaseModifierPitch", "float", s_Instance.releaseModifierPitch)
	self:SendDefault(s_guid,className, "releaseModifierRoll", "float", s_Instance.releaseModifierRoll)
	self:SendDefault(s_guid,className, "releaseModifierYaw", "float", s_Instance.releaseModifierYaw)
	self:SendDefault(s_guid,className, "rotatePitchModifier", "float", s_Instance.rotatePitchModifier)
	self:SendDefault(s_guid,className, "rotateRollModifier", "float", s_Instance.rotateRollModifier)
	self:SendDefault(s_guid,className, "rotateYawModifier", "float", s_Instance.rotateYawModifier)
	self:SendDefault(s_guid,className, "rotation", "Vec3", s_Instance.rotation)
	self:SendDefault(s_guid,className, "rotationAdditionToOffset", "float", s_Instance.rotationAdditionToOffset)
	self:SendDefault(s_guid,className, "weaponBaseOffset", "Vec3", s_Instance.weaponBaseOffset)
	self:SendDefault(s_guid,className, "weaponLagRotationOffset", "Vec3", s_Instance.weaponLagRotationOffset)
	self:SendDefault(s_guid,className, "weaponSpringEffect", "CtrRef", s_Instance.weaponSpringEffect)
	self:SendDefault(s_guid,className, "zoomMoveForwardModifier", "float", s_Instance.zoomMoveForwardModifier)
	self:SendDefault(s_guid,className, "zoomMoveStrafeModifier", "float", s_Instance.zoomMoveStrafeModifier)
	self:SendDefault(s_guid,className, "zoomOffsetReleaseModifier", "float", s_Instance.zoomOffsetReleaseModifier)
	self:SendDefault(s_guid,className, "zoomReleaseModifierPitch", "float", s_Instance.zoomReleaseModifierPitch)
	self:SendDefault(s_guid,className, "zoomReleaseModifierRoll", "float", s_Instance.zoomReleaseModifierRoll)
	self:SendDefault(s_guid,className, "zoomReleaseModifierYaw", "float", s_Instance.zoomReleaseModifierYaw)
	self:SendDefault(s_guid,className, "zoomRotatePitchModifier", "float", s_Instance.zoomRotatePitchModifier)
	self:SendDefault(s_guid,className, "zoomRotateRollModifier", "float", s_Instance.zoomRotateRollModifier)
	self:SendDefault(s_guid,className, "zoomRotateYawModifier", "float", s_Instance.zoomRotateYawModifier)
end

function Type:FlagComponentData (p_class, p_guid)
	local s_Instance = FlagComponentData(p_class) 
 	local className = "FlagComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flag_Team1", "CtrRef", s_Instance.flag_Team1)
	self:SendDefault(s_guid,className, "flag_Team2", "CtrRef", s_Instance.flag_Team2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:FlagCounterEntityData (p_class, p_guid)
	local s_Instance = FlagCounterEntityData(p_class) 
 	local className = "FlagCounterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enemyFlagProgress", "float", s_Instance.enemyFlagProgress)
	self:SendDefault(s_guid,className, "objectiveFlagCount", "int", s_Instance.objectiveFlagCount)
	self:SendDefault(s_guid,className, "roundTime", "float", s_Instance.roundTime)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "visibleInMinimap", "bool", s_Instance.visibleInMinimap)
end

function Type:FlapComponentData (p_class, p_guid)
	local s_Instance = FlapComponentData(p_class) 
 	local className = "FlapComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rotationAxis", "RotationAxisEnum", s_Instance.rotationAxis)
	self:SendDefault(s_guid,className, "rotationScale", "float", s_Instance.rotationScale)
end

function Type:FlareEntityData (p_class, p_guid)
	local s_Instance = FlareEntityData(p_class) 
 	local className = "FlareEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flareRange", "float", s_Instance.flareRange)
end

function Type:FlashlightWeaponData (p_class, p_guid)
	local s_Instance = FlashlightWeaponData(p_class) 
 	local className = "FlashlightWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "range", "float", s_Instance.range)
	self:SendDefault(s_guid,className, "updateFrequency", "float", s_Instance.updateFrequency)
end

function Type:FlatOutputNodeData (p_class, p_guid)
	local s_Instance = FlatOutputNodeData(p_class) 
 	local className = "FlatOutputNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "centerLevel", "AudioGraphNodePort", s_Instance.centerLevel)
	self:SendDefault(s_guid,className, "lfeLevel", "AudioGraphNodePort", s_Instance.lfeLevel)
	self:SendDefault(s_guid,className, "panPlugin", "SoundGraphPluginRef", s_Instance.panPlugin)
	self:SendDefault(s_guid,className, "reverbGain", "float", s_Instance.reverbGain)
	self:SendDefault(s_guid,className, "reverbSend", "CtrRef", s_Instance.reverbSend)
	self:SendDefault(s_guid,className, "reverbSendPlugin", "SoundGraphPluginRef", s_Instance.reverbSendPlugin)
end

function Type:FloatEntityData (p_class, p_guid)
	local s_Instance = FloatEntityData(p_class) 
 	local className = "FloatEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "float", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "incDecValue", "float", s_Instance.incDecValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:FloatHubEntityData (p_class, p_guid)
	local s_Instance = FloatHubEntityData(p_class) 
 	local className = "FloatHubEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputCount", "int", s_Instance.inputCount)
	self:SendDefault(s_guid,className, "inputSelect", "int", s_Instance.inputSelect)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:FloatOption (p_class, p_guid)
	local s_Instance = FloatOption(p_class) 
 	local className = "FloatOption"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "step", "float", s_Instance.step)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:FloatPhysicsData (p_class, p_guid)
	local s_Instance = FloatPhysicsData(p_class) 
 	local className = "FloatPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "density", "float", s_Instance.density)
	self:SendDefault(s_guid,className, "filledDensity", "float", s_Instance.filledDensity)
end

function Type:FloatPropertyTrackData (p_class, p_guid)
	local s_Instance = FloatPropertyTrackData(p_class) 
 	local className = "FloatPropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<float)>", s_Instance.values)
end

function Type:FloatRange (p_class, p_guid)
	local s_Instance = FloatRange(p_class) 
 	local className = "FloatRange"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
end

function Type:FloatRangeDefaultZero (p_class, p_guid)
	local s_Instance = FloatRangeDefaultZero(p_class) 
 	local className = "FloatRangeDefaultZero"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
end

function Type:FloatRecordingData (p_class, p_guid)
	local s_Instance = FloatRecordingData(p_class) 
 	local className = "FloatRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<float)>", s_Instance.values)
end

function Type:FloatUnlockValuePair (p_class, p_guid)
	local s_Instance = FloatUnlockValuePair(p_class) 
 	local className = "FloatUnlockValuePair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "float", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "unlockedValue", "float", s_Instance.unlockedValue)
end

function Type:FogComponentData (p_class, p_guid)
	local s_Instance = FogComponentData(p_class) 
 	local className = "FogComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "curve", "Vec4", s_Instance.curve)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "end", "float", s_Instance.endValue)
	self:SendDefault(s_guid,className, "fogColor", "Vec3", s_Instance.fogColor)
	self:SendDefault(s_guid,className, "fogColorCurve", "Vec4", s_Instance.fogColorCurve)
	self:SendDefault(s_guid,className, "fogColorEnable", "bool", s_Instance.fogColorEnable)
	self:SendDefault(s_guid,className, "fogColorEnd", "float", s_Instance.fogColorEnd)
	self:SendDefault(s_guid,className, "fogColorStart", "float", s_Instance.fogColorStart)
	self:SendDefault(s_guid,className, "fogDistanceMultiplier", "float", s_Instance.fogDistanceMultiplier)
	self:SendDefault(s_guid,className, "fogGradientEnable", "bool", s_Instance.fogGradientEnable)
	self:SendDefault(s_guid,className, "heightFogAltitude", "float", s_Instance.heightFogAltitude)
	self:SendDefault(s_guid,className, "heightFogDepth", "float", s_Instance.heightFogDepth)
	self:SendDefault(s_guid,className, "heightFogEnable", "bool", s_Instance.heightFogEnable)
	self:SendDefault(s_guid,className, "heightFogFollowCamera", "float", s_Instance.heightFogFollowCamera)
	self:SendDefault(s_guid,className, "heightFogVisibilityRange", "float", s_Instance.heightFogVisibilityRange)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "start", "float", s_Instance.start)
	self:SendDefault(s_guid,className, "transparencyFadeClamp", "float", s_Instance.transparencyFadeClamp)
	self:SendDefault(s_guid,className, "transparencyFadeEnd", "float", s_Instance.transparencyFadeEnd)
	self:SendDefault(s_guid,className, "transparencyFadeStart", "float", s_Instance.transparencyFadeStart)
end

function Type:FogEffectState (p_class, p_guid)
	local s_Instance = FogEffectState(p_class) 
 	local className = "FogEffectState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "curve", "Vec4", s_Instance.curve)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "end", "float", s_Instance.endValue)
	self:SendDefault(s_guid,className, "fogColor", "Vec3", s_Instance.fogColor)
	self:SendDefault(s_guid,className, "fogColorCurve", "Vec4", s_Instance.fogColorCurve)
	self:SendDefault(s_guid,className, "fogColorEnd", "float", s_Instance.fogColorEnd)
	self:SendDefault(s_guid,className, "fogColorStart", "float", s_Instance.fogColorStart)
	self:SendDefault(s_guid,className, "heightFogAltitude", "float", s_Instance.heightFogAltitude)
	self:SendDefault(s_guid,className, "heightFogDepth", "float", s_Instance.heightFogDepth)
	self:SendDefault(s_guid,className, "heightFogEnable", "bool", s_Instance.heightFogEnable)
	self:SendDefault(s_guid,className, "heightFogFollowCamera", "float", s_Instance.heightFogFollowCamera)
	self:SendDefault(s_guid,className, "heightFogVisibilityRange", "float", s_Instance.heightFogVisibilityRange)
	self:SendDefault(s_guid,className, "start", "float", s_Instance.start)
	self:SendDefault(s_guid,className, "transparencyFadeClamp", "float", s_Instance.transparencyFadeClamp)
	self:SendDefault(s_guid,className, "transparencyFadeEnd", "float", s_Instance.transparencyFadeEnd)
	self:SendDefault(s_guid,className, "transparencyFadeStart", "float", s_Instance.transparencyFadeStart)
end

function Type:FollowConstantData (p_class, p_guid)
	local s_Instance = FollowConstantData(p_class) 
 	local className = "FollowConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceFromPlayerBeforeTeleport", "float", s_Instance.distanceFromPlayerBeforeTeleport)
	self:SendDefault(s_guid,className, "followAiInCombatMaxDistance", "float", s_Instance.followAiInCombatMaxDistance)
	self:SendDefault(s_guid,className, "followAiMaxDistance", "float", s_Instance.followAiMaxDistance)
	self:SendDefault(s_guid,className, "followHumanInCombatMaxDistance", "float", s_Instance.followHumanInCombatMaxDistance)
	self:SendDefault(s_guid,className, "followHumanMaxDistance", "float", s_Instance.followHumanMaxDistance)
	self:SendDefault(s_guid,className, "followInertia", "float", s_Instance.followInertia)
	self:SendDefault(s_guid,className, "followMimicPoseDistance", "float", s_Instance.followMimicPoseDistance)
	self:SendDefault(s_guid,className, "lookAwayAngle", "float", s_Instance.lookAwayAngle)
end

function Type:FollowEnvelopeNodeData (p_class, p_guid)
	local s_Instance = FollowEnvelopeNodeData(p_class) 
 	local className = "FollowEnvelopeNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "base", "float", s_Instance.base)
	self:SendDefault(s_guid,className, "pivot", "float", s_Instance.pivot)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
	self:SendDefault(s_guid,className, "x", "AudioGraphNodePort", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
end

function Type:FollowPlayerOrderEntityData (p_class, p_guid)
	local s_Instance = FollowPlayerOrderEntityData(p_class) 
 	local className = "FollowPlayerOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "combatForbidden", "bool", s_Instance.combatForbidden)
	self:SendDefault(s_guid,className, "formation", "CtrRef", s_Instance.formation)
end

function Type:FollowWaypointsEntityData (p_class, p_guid)
	local s_Instance = FollowWaypointsEntityData(p_class) 
 	local className = "FollowWaypointsEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "startAtGeometricallyClosestWaypoint", "bool", s_Instance.startAtGeometricallyClosestWaypoint)
	self:SendDefault(s_guid,className, "typeOfRoute", "RouteType", s_Instance.typeOfRoute)
	self:SendDefault(s_guid,className, "usePathFinding", "bool", s_Instance.usePathFinding)
end

function Type:FootStepTrigger (p_class, p_guid)
	local s_Instance = FootStepTrigger(p_class) 
 	local className = "FootStepTrigger"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:FormationData (p_class, p_guid)
	local s_Instance = FormationData(p_class) 
 	local className = "FormationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "positions", "List<Vec3)>", s_Instance.positions)
end

function Type:FormationHolder (p_class, p_guid)
	local s_Instance = FormationHolder(p_class) 
 	local className = "FormationHolder"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "formations", "List<CtrRef)>", s_Instance.formations)
end

function Type:FPSCameraData (p_class, p_guid)
	local s_Instance = FPSCameraData(p_class) 
 	local className = "FPSCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurEffectSettings", "BlurEffectData", s_Instance.blurEffectSettings)
	self:SendDefault(s_guid,className, "fOV", "float", s_Instance.fOV)
	self:SendDefault(s_guid,className, "turnEffectSettings", "TurnEffectData", s_Instance.turnEffectSettings)
end

function Type:FramerateHistogramPerformanceEvent (p_class, p_guid)
	local s_Instance = FramerateHistogramPerformanceEvent(p_class) 
 	local className = "FramerateHistogramPerformanceEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "above60", "float", s_Instance.above60)
	self:SendDefault(s_guid,className, "below10", "float", s_Instance.below10)
	self:SendDefault(s_guid,className, "below15", "float", s_Instance.below15)
	self:SendDefault(s_guid,className, "below20", "float", s_Instance.below20)
	self:SendDefault(s_guid,className, "below25", "float", s_Instance.below25)
	self:SendDefault(s_guid,className, "below30", "float", s_Instance.below30)
	self:SendDefault(s_guid,className, "below5", "float", s_Instance.below5)
	self:SendDefault(s_guid,className, "below60", "float", s_Instance.below60)
	self:SendDefault(s_guid,className, "performanceLink", "GUID", s_Instance.performanceLink)
	self:SendDefault(s_guid,className, "spikeAverage", "float", s_Instance.spikeAverage)
end

function Type:FrequencyShiftSsbNodeData (p_class, p_guid)
	local s_Instance = FrequencyShiftSsbNodeData(p_class) 
 	local className = "FrequencyShiftSsbNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "filter", "FrequencyShiftSsbFilter", s_Instance.filter)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:FrictionScaleAtVelocity (p_class, p_guid)
	local s_Instance = FrictionScaleAtVelocity(p_class) 
 	local className = "FrictionScaleAtVelocity"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frictionScale", "float", s_Instance.frictionScale)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:FriendlyFireEntityData (p_class, p_guid)
	local s_Instance = FriendlyFireEntityData(p_class) 
 	local className = "FriendlyFireEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decayRate", "float", s_Instance.decayRate)
	self:SendDefault(s_guid,className, "enemyCommitmentAllocation", "float", s_Instance.enemyCommitmentAllocation)
	self:SendDefault(s_guid,className, "failureThreshold", "float", s_Instance.failureThreshold)
	self:SendDefault(s_guid,className, "friendlyCommitmentAllocation", "float", s_Instance.friendlyCommitmentAllocation)
	self:SendDefault(s_guid,className, "maxCommitment", "float", s_Instance.maxCommitment)
	self:SendDefault(s_guid,className, "teams", "List<TeamId)>", s_Instance.teams)
	self:SendDefault(s_guid,className, "friendlyFireEntityData",  "readonly", s_Instance.friendlyFireEntityData)
	self:SendDefault(s_guid,className, "teamId",  "uint", s_Instance.teamId)
end

function Type:FriendZoneDebugRenderEntityData (p_class, p_guid)
	local s_Instance = FriendZoneDebugRenderEntityData(p_class) 
 	local className = "FriendZoneDebugRenderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:FriendZoneEntityData (p_class, p_guid)
	local s_Instance = FriendZoneEntityData(p_class) 
 	local className = "FriendZoneEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "corpsTimeout", "int", s_Instance.corpsTimeout)
	self:SendDefault(s_guid,className, "corpsWeight", "int", s_Instance.corpsWeight)
	self:SendDefault(s_guid,className, "countCorpsesForAllTeams", "bool", s_Instance.countCorpsesForAllTeams)
	self:SendDefault(s_guid,className, "enemyWeight", "int", s_Instance.enemyWeight)
	self:SendDefault(s_guid,className, "friendlyWeight", "int", s_Instance.friendlyWeight)
	self:SendDefault(s_guid,className, "initialZoneRandomized", "bool", s_Instance.initialZoneRandomized)
end

function Type:GainFaderNodeData (p_class, p_guid)
	local s_Instance = GainFaderNodeData(p_class) 
 	local className = "GainFaderNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "fadeTime", "AudioGraphNodePort", s_Instance.fadeTime)
	self:SendDefault(s_guid,className, "fadeType", "GainFaderFadeType", s_Instance.fadeType)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "startTime", "AudioGraphNodePort", s_Instance.startTime)
end

function Type:GainNodeData (p_class, p_guid)
	local s_Instance = GainNodeData(p_class) 
 	local className = "GainNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:GameAnimationConfig (p_class, p_guid)
	local s_Instance = GameAnimationConfig(p_class) 
 	local className = "GameAnimationConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientEnable", "bool", s_Instance.clientEnable)
	self:SendDefault(s_guid,className, "serverEnable", "bool", s_Instance.serverEnable)
	self:SendDefault(s_guid,className, "useRawGamepadInput", "bool", s_Instance.useRawGamepadInput)
end

function Type:GameAnimationSettings (p_class, p_guid)
	local s_Instance = GameAnimationSettings(p_class) 
 	local className = "GameAnimationSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antOnClientOnlyGamemodes", "List<string)>", s_Instance.antOnClientOnlyGamemodes)
	self:SendDefault(s_guid,className, "clientEnable", "bool", s_Instance.clientEnable)
	self:SendDefault(s_guid,className, "serverEnable", "bool", s_Instance.serverEnable)
	self:SendDefault(s_guid,className, "temporalLoddingFarDistance", "float", s_Instance.temporalLoddingFarDistance)
	self:SendDefault(s_guid,className, "temporalLoddingFifthDeltaTime", "float", s_Instance.temporalLoddingFifthDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingFifthDistance", "float", s_Instance.temporalLoddingFifthDistance)
	self:SendDefault(s_guid,className, "temporalLoddingFirstDeltaTime", "float", s_Instance.temporalLoddingFirstDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingFirstDistance", "float", s_Instance.temporalLoddingFirstDistance)
	self:SendDefault(s_guid,className, "temporalLoddingFourthDeltaTime", "float", s_Instance.temporalLoddingFourthDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingFourthDistance", "float", s_Instance.temporalLoddingFourthDistance)
	self:SendDefault(s_guid,className, "temporalLoddingSecondDeltaTime", "float", s_Instance.temporalLoddingSecondDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingSecondDistance", "float", s_Instance.temporalLoddingSecondDistance)
	self:SendDefault(s_guid,className, "temporalLoddingSixthDeltaTime", "float", s_Instance.temporalLoddingSixthDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingSixthDistance", "float", s_Instance.temporalLoddingSixthDistance)
	self:SendDefault(s_guid,className, "temporalLoddingThirdDeltaTime", "float", s_Instance.temporalLoddingThirdDeltaTime)
	self:SendDefault(s_guid,className, "temporalLoddingThirdDistance", "float", s_Instance.temporalLoddingThirdDistance)
	self:SendDefault(s_guid,className, "useAnimationDrivenCharacter", "bool", s_Instance.useAnimationDrivenCharacter)
	self:SendDefault(s_guid,className, "useRawGamepadInput", "bool", s_Instance.useRawGamepadInput)
end

function Type:GameDataContainerAsset (p_class, p_guid)
	local s_Instance = GameDataContainerAsset(p_class) 
 	local className = "GameDataContainerAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "CtrRef", s_Instance.data)
end

function Type:GameEntityData (p_class, p_guid)
	local s_Instance = GameEntityData(p_class) 
 	local className = "GameEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "components", "List<CtrRef)>", s_Instance.components)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "runtimeComponentCount", "sbyte", s_Instance.runtimeComponentCount)
end

function Type:GameInteractionEntityData (p_class, p_guid)
	local s_Instance = GameInteractionEntityData(p_class) 
 	local className = "GameInteractionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blink", "BlinkType", s_Instance.blink)
	self:SendDefault(s_guid,className, "capturepointVerticalOffset", "float", s_Instance.capturepointVerticalOffset)
	self:SendDefault(s_guid,className, "delayBetweenUses", "float", s_Instance.delayBetweenUses)
	self:SendDefault(s_guid,className, "enemyTextSid", "string", s_Instance.enemyTextSid)
	self:SendDefault(s_guid,className, "friendlyTextSid", "string", s_Instance.friendlyTextSid)
	self:SendDefault(s_guid,className, "holdToInteractTime", "float", s_Instance.holdToInteractTime)
	self:SendDefault(s_guid,className, "inputAction", "EntryInputActionEnum", s_Instance.inputAction)
	self:SendDefault(s_guid,className, "interactingSid", "string", s_Instance.interactingSid)
	self:SendDefault(s_guid,className, "interactionEntityType", "fb.InteractionEntityType)", s_Instance.interactionEntityType)
	self:SendDefault(s_guid,className, "interactionSid", "string", s_Instance.interactionSid)
	self:SendDefault(s_guid,className, "interactionVerticalOffset", "float", s_Instance.interactionVerticalOffset)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "showAsCapturePoint", "bool", s_Instance.showAsCapturePoint)
	self:SendDefault(s_guid,className, "shrinkSnap", "bool", s_Instance.shrinkSnap)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
end

function Type:GameModeConfiguration (p_class, p_guid)
	local s_Instance = GameModeConfiguration(p_class) 
 	local className = "GameModeConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "information", "List<GameModeInformation)>", s_Instance.information)
end

function Type:GameModeInformation (p_class, p_guid)
	local s_Instance = GameModeInformation(p_class) 
 	local className = "GameModeInformation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowFallbackToDefault", "bool", s_Instance.allowFallbackToDefault)
	self:SendDefault(s_guid,className, "defaultSize", "GameModeSize", s_Instance.defaultSize)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "sizes", "List<GameModeSize)>", s_Instance.sizes)
end

function Type:GameModeSettings (p_class, p_guid)
	local s_Instance = GameModeSettings(p_class) 
 	local className = "GameModeSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "information", "List<GameModeInformation)>", s_Instance.information)
end

function Type:GameModeSize (p_class, p_guid)
	local s_Instance = GameModeSize(p_class) 
 	local className = "GameModeSize"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forceSquad", "bool", s_Instance.forceSquad)
	self:SendDefault(s_guid,className, "metaIdentifier", "string", s_Instance.metaIdentifier)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "playerCount", "uint", s_Instance.playerCount)
	self:SendDefault(s_guid,className, "roundsPerMap", "uint", s_Instance.roundsPerMap)
	self:SendDefault(s_guid,className, "shortName", "string", s_Instance.shortName)
	self:SendDefault(s_guid,className, "teams", "List<GameModeTeamSize)>", s_Instance.teams)
end

function Type:GameModeTeamSize (p_class, p_guid)
	local s_Instance = GameModeTeamSize(p_class) 
 	local className = "GameModeTeamSize"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "playerCount", "uint", s_Instance.playerCount)
	self:SendDefault(s_guid,className, "squadSize", "uint", s_Instance.squadSize)
end

function Type:GameModeVariation (p_class, p_guid)
	local s_Instance = GameModeVariation(p_class) 
 	local className = "GameModeVariation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:GameObjectData (p_class, p_guid)
	local s_Instance = GameObjectData(p_class) 
 	local className = "GameObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "indexInBlueprint", "ushort", s_Instance.indexInBlueprint)
	self:SendDefault(s_guid,className, "isEventConnectionTarget", "sbyte", s_Instance.isEventConnectionTarget)
	self:SendDefault(s_guid,className, "isPropertyConnectionTarget", "sbyte", s_Instance.isPropertyConnectionTarget)
end

function Type:GamePhysicsEntityData (p_class, p_guid)
	local s_Instance = GamePhysicsEntityData(p_class) 
 	local className = "GamePhysicsEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "physicsData", "CtrRef", s_Instance.physicsData)
end

function Type:GameplayBone (p_class, p_guid)
	local s_Instance = GameplayBone(p_class) 
 	local className = "GameplayBone"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bone", "GameplayBones", s_Instance.bone)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:GameRenderSettings (p_class, p_guid)
	local s_Instance = GameRenderSettings(p_class) 
 	local className = "GameRenderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurEnable", "bool", s_Instance.blurEnable)
	self:SendDefault(s_guid,className, "buildJobSyncEnable", "bool", s_Instance.buildJobSyncEnable)
	self:SendDefault(s_guid,className, "cameraCutMaxFrameTranslation", "float", s_Instance.cameraCutMaxFrameTranslation)
	self:SendDefault(s_guid,className, "debugRendererEnable", "bool", s_Instance.debugRendererEnable)
	self:SendDefault(s_guid,className, "debugRenderServiceEnable", "bool", s_Instance.debugRenderServiceEnable)
	self:SendDefault(s_guid,className, "destructionVolumeDrawEnable", "bool", s_Instance.destructionVolumeDrawEnable)
	self:SendDefault(s_guid,className, "drawFps", "bool", s_Instance.drawFps)
	self:SendDefault(s_guid,className, "drawFpsHistogram", "bool", s_Instance.drawFpsHistogram)
	self:SendDefault(s_guid,className, "drawFpsMethod", "uint", s_Instance.drawFpsMethod)
	self:SendDefault(s_guid,className, "drawInfo", "bool", s_Instance.drawInfo)
	self:SendDefault(s_guid,className, "drawScreenInfo", "bool", s_Instance.drawScreenInfo)
	self:SendDefault(s_guid,className, "edgeModelAdditionalCullEnable", "bool", s_Instance.edgeModelAdditionalCullEnable)
	self:SendDefault(s_guid,className, "edgeModelCastShadowsEnable", "bool", s_Instance.edgeModelCastShadowsEnable)
	self:SendDefault(s_guid,className, "edgeModelCullEnable", "bool", s_Instance.edgeModelCullEnable)
	self:SendDefault(s_guid,className, "edgeModelDepthBiasEnable", "bool", s_Instance.edgeModelDepthBiasEnable)
	self:SendDefault(s_guid,className, "edgeModelDrawBoxes", "bool", s_Instance.edgeModelDrawBoxes)
	self:SendDefault(s_guid,className, "edgeModelDrawStats", "bool", s_Instance.edgeModelDrawStats)
	self:SendDefault(s_guid,className, "edgeModelForceLod", "int", s_Instance.edgeModelForceLod)
	self:SendDefault(s_guid,className, "edgeModelFrustumCullEnable", "bool", s_Instance.edgeModelFrustumCullEnable)
	self:SendDefault(s_guid,className, "edgeModelLodScale", "float", s_Instance.edgeModelLodScale)
	self:SendDefault(s_guid,className, "edgeModelMaxVisibleInstanceCount", "uint", s_Instance.edgeModelMaxVisibleInstanceCount)
	self:SendDefault(s_guid,className, "edgeModelOcclusionCullEnable", "bool", s_Instance.edgeModelOcclusionCullEnable)
	self:SendDefault(s_guid,className, "edgeModelScreenAreaScale", "float", s_Instance.edgeModelScreenAreaScale)
	self:SendDefault(s_guid,className, "edgeModelsEnable", "bool", s_Instance.edgeModelsEnable)
	self:SendDefault(s_guid,className, "edgeModelShadowDepthBiasEnable", "bool", s_Instance.edgeModelShadowDepthBiasEnable)
	self:SendDefault(s_guid,className, "edgeModelSpuInstancingEnable", "bool", s_Instance.edgeModelSpuInstancingEnable)
	self:SendDefault(s_guid,className, "edgeModelUseLodBox", "bool", s_Instance.edgeModelUseLodBox)
	self:SendDefault(s_guid,className, "edgeModelUseMainLodEnable", "bool", s_Instance.edgeModelUseMainLodEnable)
	self:SendDefault(s_guid,className, "edgeModelViewDistance", "float", s_Instance.edgeModelViewDistance)
	self:SendDefault(s_guid,className, "emittersEnable", "bool", s_Instance.emittersEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "entityRenderEnable", "bool", s_Instance.entityRenderEnable)
	self:SendDefault(s_guid,className, "fadeEnable", "bool", s_Instance.fadeEnable)
	self:SendDefault(s_guid,className, "fadeWaitingEnable", "bool", s_Instance.fadeWaitingEnable)
	self:SendDefault(s_guid,className, "forceBlurAmount", "float", s_Instance.forceBlurAmount)
	self:SendDefault(s_guid,className, "forceFov", "float", s_Instance.forceFov)
	self:SendDefault(s_guid,className, "forceOrthoViewEnable", "bool", s_Instance.forceOrthoViewEnable)
	self:SendDefault(s_guid,className, "forceOrthoViewSize", "float", s_Instance.forceOrthoViewSize)
	self:SendDefault(s_guid,className, "forceSquareOrthoView", "bool", s_Instance.forceSquareOrthoView)
	self:SendDefault(s_guid,className, "forceVSyncEnable", "bool", s_Instance.forceVSyncEnable)
	self:SendDefault(s_guid,className, "forceWorldFadeAmount", "float", s_Instance.forceWorldFadeAmount)
	self:SendDefault(s_guid,className, "fovMultiplier", "float", s_Instance.fovMultiplier)
	self:SendDefault(s_guid,className, "fullscreen", "bool", s_Instance.fullscreen)
	self:SendDefault(s_guid,className, "gcmHudEnable", "bool", s_Instance.gcmHudEnable)
	self:SendDefault(s_guid,className, "gpuProfilerEnable", "bool", s_Instance.gpuProfilerEnable)
	self:SendDefault(s_guid,className, "inactiveSkipFrameCount", "uint", s_Instance.inactiveSkipFrameCount)
	self:SendDefault(s_guid,className, "initialClearEnable", "bool", s_Instance.initialClearEnable)
	self:SendDefault(s_guid,className, "jobEnable", "bool", s_Instance.jobEnable)
	self:SendDefault(s_guid,className, "lockView", "bool", s_Instance.lockView)
	self:SendDefault(s_guid,className, "movieVSyncEnable", "bool", s_Instance.movieVSyncEnable)
	self:SendDefault(s_guid,className, "nearPlane", "float", s_Instance.nearPlane)
	self:SendDefault(s_guid,className, "perfOverlayEnable", "bool", s_Instance.perfOverlayEnable)
	self:SendDefault(s_guid,className, "perfOverlayLatestFrameTimeEnable", "bool", s_Instance.perfOverlayLatestFrameTimeEnable)
	self:SendDefault(s_guid,className, "perfOverlayVisible", "bool", s_Instance.perfOverlayVisible)
	self:SendDefault(s_guid,className, "ps3CellMemoryTexturesEnable", "bool", s_Instance.ps3CellMemoryTexturesEnable)
	self:SendDefault(s_guid,className, "ps3FrameLocalBufferSize", "uint", s_Instance.ps3FrameLocalBufferSize)
	self:SendDefault(s_guid,className, "ps3FrameMainBufferSize", "uint", s_Instance.ps3FrameMainBufferSize)
	self:SendDefault(s_guid,className, "ps3LinearFrameCmdBufEnable", "bool", s_Instance.ps3LinearFrameCmdBufEnable)
	self:SendDefault(s_guid,className, "ps3Res1280x704Enable", "bool", s_Instance.ps3Res1280x704Enable)
	self:SendDefault(s_guid,className, "ps3VideoGamma", "float", s_Instance.ps3VideoGamma)
	self:SendDefault(s_guid,className, "ps3VSyncMethod", "uint", s_Instance.ps3VSyncMethod)
	self:SendDefault(s_guid,className, "resetLockedView", "bool", s_Instance.resetLockedView)
	self:SendDefault(s_guid,className, "splitScreenTestViewCount", "uint", s_Instance.splitScreenTestViewCount)
	self:SendDefault(s_guid,className, "staticModelCullJobCount", "uint", s_Instance.staticModelCullJobCount)
	self:SendDefault(s_guid,className, "staticModelCullSpuJobEnable", "bool", s_Instance.staticModelCullSpuJobEnable)
	self:SendDefault(s_guid,className, "staticModelDrawBoxes", "bool", s_Instance.staticModelDrawBoxes)
	self:SendDefault(s_guid,className, "staticModelDrawStats", "bool", s_Instance.staticModelDrawStats)
	self:SendDefault(s_guid,className, "staticModelEnable", "bool", s_Instance.staticModelEnable)
	self:SendDefault(s_guid,className, "staticModelMeshesEnable", "bool", s_Instance.staticModelMeshesEnable)
	self:SendDefault(s_guid,className, "staticModelPartCullEnable", "bool", s_Instance.staticModelPartCullEnable)
	self:SendDefault(s_guid,className, "staticModelPartFrustumCullEnable", "bool", s_Instance.staticModelPartFrustumCullEnable)
	self:SendDefault(s_guid,className, "staticModelPartOcclusionCullEnable", "bool", s_Instance.staticModelPartOcclusionCullEnable)
	self:SendDefault(s_guid,className, "staticModelPartOcclusionMaxScreenArea", "float", s_Instance.staticModelPartOcclusionMaxScreenArea)
	self:SendDefault(s_guid,className, "staticModelPartShadowCullEnable", "bool", s_Instance.staticModelPartShadowCullEnable)
	self:SendDefault(s_guid,className, "staticModelZPassEnable", "bool", s_Instance.staticModelZPassEnable)
	self:SendDefault(s_guid,className, "stereoCrosshairDampingFactor", "float", s_Instance.stereoCrosshairDampingFactor)
	self:SendDefault(s_guid,className, "stereoCrosshairMaxHitDepth", "float", s_Instance.stereoCrosshairMaxHitDepth)
	self:SendDefault(s_guid,className, "stereoCrosshairRadius", "float", s_Instance.stereoCrosshairRadius)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
	self:SendDefault(s_guid,className, "vSyncFlashTestEnable", "bool", s_Instance.vSyncFlashTestEnable)
	self:SendDefault(s_guid,className, "xenonBufferTwoFramesEnable", "bool", s_Instance.xenonBufferTwoFramesEnable)
	self:SendDefault(s_guid,className, "xenonGammaRampType", "uint", s_Instance.xenonGammaRampType)
	self:SendDefault(s_guid,className, "xenonPresentImmediateThreshold", "uint", s_Instance.xenonPresentImmediateThreshold)
	self:SendDefault(s_guid,className, "xenonRes1280x704Enable", "bool", s_Instance.xenonRes1280x704Enable)
	self:SendDefault(s_guid,className, "xenonRingBufferSize", "uint", s_Instance.xenonRingBufferSize)
end

function Type:GameSettings (p_class, p_guid)
	local s_Instance = GameSettings(p_class) 
 	local className = "GameSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "adjustVehicleCenterOfMass", "bool", s_Instance.adjustVehicleCenterOfMass)
	self:SendDefault(s_guid,className, "aimAssistEnabled", "bool", s_Instance.aimAssistEnabled)
	self:SendDefault(s_guid,className, "aimAssistUsePolynomials", "bool", s_Instance.aimAssistUsePolynomials)
	self:SendDefault(s_guid,className, "allowDestructionOutsideCombatArea", "bool", s_Instance.allowDestructionOutsideCombatArea)
	self:SendDefault(s_guid,className, "autoAimEnabled", "bool", s_Instance.autoAimEnabled)
	self:SendDefault(s_guid,className, "currentSKU", "SKU", s_Instance.currentSKU)
	self:SendDefault(s_guid,className, "defaultLayerInclusion", "string", s_Instance.defaultLayerInclusion)
	self:SendDefault(s_guid,className, "defaultTeamId", "TeamId", s_Instance.defaultTeamId)
	self:SendDefault(s_guid,className, "difficultyIndex", "int", s_Instance.difficultyIndex)
	self:SendDefault(s_guid,className, "difficultySettings", "CtrRef", s_Instance.difficultySettings)
	self:SendDefault(s_guid,className, "enableLoadingProfile", "bool", s_Instance.enableLoadingProfile)
	self:SendDefault(s_guid,className, "forceDisableFreeStreaming", "bool", s_Instance.forceDisableFreeStreaming)
	self:SendDefault(s_guid,className, "forceFreeStreaming", "bool", s_Instance.forceFreeStreaming)
	self:SendDefault(s_guid,className, "gameAdministrationEnabled", "bool", s_Instance.gameAdministrationEnabled)
	self:SendDefault(s_guid,className, "hasUnlimitedAmmo", "bool", s_Instance.hasUnlimitedAmmo)
	self:SendDefault(s_guid,className, "hasUnlimitedMags", "bool", s_Instance.hasUnlimitedMags)
	self:SendDefault(s_guid,className, "inputConfiguration", "List<CtrRef)>", s_Instance.inputConfiguration)
	self:SendDefault(s_guid,className, "isGodMode", "bool", s_Instance.isGodMode)
	self:SendDefault(s_guid,className, "isJesusMode", "bool", s_Instance.isJesusMode)
	self:SendDefault(s_guid,className, "isJesusModeAi", "bool", s_Instance.isJesusModeAi)
	self:SendDefault(s_guid,className, "layerInclusionTable", "CtrRef", s_Instance.layerInclusionTable)
	self:SendDefault(s_guid,className, "level", "string", s_Instance.level)
	self:SendDefault(s_guid,className, "levelWarmUpTime", "float", s_Instance.levelWarmUpTime)
	self:SendDefault(s_guid,className, "logFileCollisionMode", "fb.LogFileCollisionMode)", s_Instance.logFileCollisionMode)
	self:SendDefault(s_guid,className, "logFileEnable", "bool", s_Instance.logFileEnable)
	self:SendDefault(s_guid,className, "logFileRotationHistoryLength", "uint", s_Instance.logFileRotationHistoryLength)
	self:SendDefault(s_guid,className, "logHistory", "uint", s_Instance.logHistory)
	self:SendDefault(s_guid,className, "maxPlayerCount", "uint", s_Instance.maxPlayerCount)
	self:SendDefault(s_guid,className, "maxSpectatorCount", "uint", s_Instance.maxSpectatorCount)
	self:SendDefault(s_guid,className, "metadataContainers", "List<CtrRef)>", s_Instance.metadataContainers)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "player", "CtrRef", s_Instance.player)
	self:SendDefault(s_guid,className, "pS3ContentRatingAge", "uint", s_Instance.pS3ContentRatingAge)
	self:SendDefault(s_guid,className, "resourceRefreshAlwaysAllowed", "bool", s_Instance.resourceRefreshAlwaysAllowed)
	self:SendDefault(s_guid,className, "rotateLogs", "bool", s_Instance.rotateLogs)
	self:SendDefault(s_guid,className, "soldierWeaponSwitching", "CtrRef", s_Instance.soldierWeaponSwitching)
	self:SendDefault(s_guid,className, "timeBeforeSpawnIsAllowed", "float", s_Instance.timeBeforeSpawnIsAllowed)
	self:SendDefault(s_guid,className, "timeToWaitForQuitTaskCompletion", "float", s_Instance.timeToWaitForQuitTaskCompletion)
	self:SendDefault(s_guid,className, "useSingleWeaponSelector", "bool", s_Instance.useSingleWeaponSelector)
	self:SendDefault(s_guid,className, "useSpeedBasedDetailedCollision", "bool", s_Instance.useSpeedBasedDetailedCollision)
	self:SendDefault(s_guid,className, "version", "CtrRef", s_Instance.version)
end

function Type:GameSoundEntityData (p_class, p_guid)
	local s_Instance = GameSoundEntityData(p_class) 
 	local className = "GameSoundEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "playOnCreation", "bool", s_Instance.playOnCreation)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:GameSplineData (p_class, p_guid)
	local s_Instance = GameSplineData(p_class) 
 	local className = "GameSplineData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "splineType", "GameSplineType", s_Instance.splineType)
end

function Type:GameSplineEntityData (p_class, p_guid)
	local s_Instance = GameSplineEntityData(p_class) 
 	local className = "GameSplineEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "localPoints", "List<Vec3)>", s_Instance.localPoints)
	self:SendDefault(s_guid,className, "normals", "List<Vec3)>", s_Instance.normals)
	self:SendDefault(s_guid,className, "splineType", "GameSplineType", s_Instance.splineType)
end

function Type:GameTimeSettings (p_class, p_guid)
	local s_Instance = GameTimeSettings(p_class) 
 	local className = "GameTimeSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clampTicks", "int", s_Instance.clampTicks)
	self:SendDefault(s_guid,className, "forceDeltaTickCount", "int", s_Instance.forceDeltaTickCount)
	self:SendDefault(s_guid,className, "forceDeltaTime", "float", s_Instance.forceDeltaTime)
	self:SendDefault(s_guid,className, "forceMultiplayerOneTickMin", "bool", s_Instance.forceMultiplayerOneTickMin)
	self:SendDefault(s_guid,className, "forceSinglePlayerFixedTick", "bool", s_Instance.forceSinglePlayerFixedTick)
	self:SendDefault(s_guid,className, "forceUseSleepTimer", "bool", s_Instance.forceUseSleepTimer)
	self:SendDefault(s_guid,className, "joinJobsTimeLimit", "float", s_Instance.joinJobsTimeLimit)
	self:SendDefault(s_guid,className, "maxInactiveVariableFps", "float", s_Instance.maxInactiveVariableFps)
	self:SendDefault(s_guid,className, "maxSimFps", "float", s_Instance.maxSimFps)
	self:SendDefault(s_guid,className, "maxVariableFps", "float", s_Instance.maxVariableFps)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
	self:SendDefault(s_guid,className, "useWaitableTimers", "bool", s_Instance.useWaitableTimers)
	self:SendDefault(s_guid,className, "variableSimTickTimeEnable", "bool", s_Instance.variableSimTickTimeEnable)
	self:SendDefault(s_guid,className, "vSyncSubtractTime", "float", s_Instance.vSyncSubtractTime)
	self:SendDefault(s_guid,className, "yieldTime", "int", s_Instance.yieldTime)
	self:SendDefault(s_guid,className, "yieldTimeLimit", "float", s_Instance.yieldTimeLimit)
end

function Type:GameTipAsset (p_class, p_guid)
	local s_Instance = GameTipAsset(p_class) 
 	local className = "GameTipAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "tips", "List<GameTipData)>", s_Instance.tips)
end

function Type:GameTipData (p_class, p_guid)
	local s_Instance = GameTipData(p_class) 
 	local className = "GameTipData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "text", "string", s_Instance.text)
end

function Type:GearBagSpec (p_class, p_guid)
	local s_Instance = GearBagSpec(p_class) 
 	local className = "GearBagSpec"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "childSpecs", "List<CtrRef)>", s_Instance.childSpecs)
	self:SendDefault(s_guid,className, "gadgetSlots", "uint", s_Instance.gadgetSlots)
	self:SendDefault(s_guid,className, "maxGadgetsPerSlot", "uint", s_Instance.maxGadgetsPerSlot)
	self:SendDefault(s_guid,className, "maxPrimaryWeapons", "uint", s_Instance.maxPrimaryWeapons)
	self:SendDefault(s_guid,className, "maxSecondaryWeapons", "uint", s_Instance.maxSecondaryWeapons)
	self:SendDefault(s_guid,className, "maxSidearms", "uint", s_Instance.maxSidearms)
end

function Type:GearboxConfigData (p_class, p_guid)
	local s_Instance = GearboxConfigData(p_class) 
 	local className = "GearboxConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "backwardThrottleLimit", "float", s_Instance.backwardThrottleLimit)
	self:SendDefault(s_guid,className, "clutchSpeedFactor", "float", s_Instance.clutchSpeedFactor)
	self:SendDefault(s_guid,className, "forwardGearRatios", "List<float)>", s_Instance.forwardGearRatios)
	self:SendDefault(s_guid,className, "forwardGearSpeeds", "List<float)>", s_Instance.forwardGearSpeeds)
	self:SendDefault(s_guid,className, "gearboxMode", "int", s_Instance.gearboxMode)
	self:SendDefault(s_guid,className, "gearboxType", "int", s_Instance.gearboxType)
	self:SendDefault(s_guid,className, "gearChangeTime", "float", s_Instance.gearChangeTime)
	self:SendDefault(s_guid,className, "gearDownSpeedFactor", "float", s_Instance.gearDownSpeedFactor)
	self:SendDefault(s_guid,className, "limitBackwardThrottle", "bool", s_Instance.limitBackwardThrottle)
	self:SendDefault(s_guid,className, "oppositeDirGearChangeMaxSpeed", "float", s_Instance.oppositeDirGearChangeMaxSpeed)
	self:SendDefault(s_guid,className, "oppositeDirGearChangeTime", "float", s_Instance.oppositeDirGearChangeTime)
	self:SendDefault(s_guid,className, "reverseGearRatios", "List<float)>", s_Instance.reverseGearRatios)
	self:SendDefault(s_guid,className, "reverseGearSpeeds", "List<float)>", s_Instance.reverseGearSpeeds)
	self:SendDefault(s_guid,className, "transmissionEfficiency", "float", s_Instance.transmissionEfficiency)
	self:SendDefault(s_guid,className, "useAutoClutch", "bool", s_Instance.useAutoClutch)
	self:SendDefault(s_guid,className, "useClassicGearBoxAutoClutch", "bool", s_Instance.useClassicGearBoxAutoClutch)
	self:SendDefault(s_guid,className, "useNeutralGear", "bool", s_Instance.useNeutralGear)
end

function Type:GeographicalData (p_class, p_guid)
	local s_Instance = GeographicalData(p_class) 
 	local className = "GeographicalData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "latitude", "UIGeoLatitude", s_Instance.latitude)
	self:SendDefault(s_guid,className, "longitude", "UIGeoLongitude", s_Instance.longitude)
	self:SendDefault(s_guid,className, "seaLevelOffset", "float", s_Instance.seaLevelOffset)
end

function Type:GeographicalLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = GeographicalLevelDescriptionComponent(p_class) 
 	local className = "GeographicalLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "geographicalData", "CtrRef", s_Instance.geographicalData)
end

function Type:GlobalNode (p_class, p_guid)
	local s_Instance = GlobalNode(p_class) 
 	local className = "GlobalNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
end

function Type:GlobalPostProcessSettings (p_class, p_guid)
	local s_Instance = GlobalPostProcessSettings(p_class) 
 	local className = "GlobalPostProcessSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bloomBlurEnable", "bool", s_Instance.bloomBlurEnable)
	self:SendDefault(s_guid,className, "bloomBlurFilter", "BlurFilter", s_Instance.bloomBlurFilter)
	self:SendDefault(s_guid,className, "bloomBlurIterationCount", "uint", s_Instance.bloomBlurIterationCount)
	self:SendDefault(s_guid,className, "bloomEnable", "bool", s_Instance.bloomEnable)
	self:SendDefault(s_guid,className, "bloomPyramidAttenuateEnable", "bool", s_Instance.bloomPyramidAttenuateEnable)
	self:SendDefault(s_guid,className, "bloomPyramidEnable", "bool", s_Instance.bloomPyramidEnable)
	self:SendDefault(s_guid,className, "bloomPyramidFinalLevel", "uint", s_Instance.bloomPyramidFinalLevel)
	self:SendDefault(s_guid,className, "bloomPyramidLevelCount", "uint", s_Instance.bloomPyramidLevelCount)
	self:SendDefault(s_guid,className, "bloomQuarterResEnable", "bool", s_Instance.bloomQuarterResEnable)
	self:SendDefault(s_guid,className, "blurBlendEnable", "bool", s_Instance.blurBlendEnable)
	self:SendDefault(s_guid,className, "brightness", "Vec3", s_Instance.brightness)
	self:SendDefault(s_guid,className, "colorGradingEnable", "bool", s_Instance.colorGradingEnable)
	self:SendDefault(s_guid,className, "colorGradingForceUpdateAlways", "bool", s_Instance.colorGradingForceUpdateAlways)
	self:SendDefault(s_guid,className, "colorTransformEnable", "bool", s_Instance.colorTransformEnable)
	self:SendDefault(s_guid,className, "contrast", "Vec3", s_Instance.contrast)
	self:SendDefault(s_guid,className, "debugMode", "PostProcessDebugMode", s_Instance.debugMode)
	self:SendDefault(s_guid,className, "debugModeStep", "uint", s_Instance.debugModeStep)
	self:SendDefault(s_guid,className, "diffusionDofEnable", "bool", s_Instance.diffusionDofEnable)
	self:SendDefault(s_guid,className, "diffusionDofLuminance", "float", s_Instance.diffusionDofLuminance)
	self:SendDefault(s_guid,className, "directExposureEnable", "bool", s_Instance.directExposureEnable)
	self:SendDefault(s_guid,className, "downsampleAverageFromBloomEnable", "bool", s_Instance.downsampleAverageFromBloomEnable)
	self:SendDefault(s_guid,className, "downsampleAverageStartMipmap", "uint", s_Instance.downsampleAverageStartMipmap)
	self:SendDefault(s_guid,className, "downsampleBeforeBlurEnable", "bool", s_Instance.downsampleBeforeBlurEnable)
	self:SendDefault(s_guid,className, "downsampleLogAverageEnable", "bool", s_Instance.downsampleLogAverageEnable)
	self:SendDefault(s_guid,className, "drawDebugInfo", "bool", s_Instance.drawDebugInfo)
	self:SendDefault(s_guid,className, "drawDebugUserBrightnessLUT", "bool", s_Instance.drawDebugUserBrightnessLUT)
	self:SendDefault(s_guid,className, "dynamicAOEnable", "bool", s_Instance.dynamicAOEnable)
	self:SendDefault(s_guid,className, "dynamicAOMethod", "fb.DynamicAOMethod)", s_Instance.dynamicAOMethod)
	self:SendDefault(s_guid,className, "exposureClampEnable", "bool", s_Instance.exposureClampEnable)
	self:SendDefault(s_guid,className, "filmGrainColorScale", "Vec3", s_Instance.filmGrainColorScale)
	self:SendDefault(s_guid,className, "filmGrainEnable", "bool", s_Instance.filmGrainEnable)
	self:SendDefault(s_guid,className, "filmGrainLinearFilteringEnable", "bool", s_Instance.filmGrainLinearFilteringEnable)
	self:SendDefault(s_guid,className, "filmGrainRandomEnable", "bool", s_Instance.filmGrainRandomEnable)
	self:SendDefault(s_guid,className, "filmGrainTextureScale", "Vec2", s_Instance.filmGrainTextureScale)
	self:SendDefault(s_guid,className, "forceBloomScale", "Vec3", s_Instance.forceBloomScale)
	self:SendDefault(s_guid,className, "forceBlurAdd", "float", s_Instance.forceBlurAdd)
	self:SendDefault(s_guid,className, "forceChromostereopsisEnable", "int", s_Instance.forceChromostereopsisEnable)
	self:SendDefault(s_guid,className, "forceChromostereopsisOffset", "int", s_Instance.forceChromostereopsisOffset)
	self:SendDefault(s_guid,className, "forceChromostereopsisScale", "float", s_Instance.forceChromostereopsisScale)
	self:SendDefault(s_guid,className, "forceDiffusionDofAperture", "float", s_Instance.forceDiffusionDofAperture)
	self:SendDefault(s_guid,className, "forceDiffusionDofFocalLength", "float", s_Instance.forceDiffusionDofFocalLength)
	self:SendDefault(s_guid,className, "forceDiffusionDofPlaneInFocus", "float", s_Instance.forceDiffusionDofPlaneInFocus)
	self:SendDefault(s_guid,className, "forceDofBlurFilterDeviation", "float", s_Instance.forceDofBlurFilterDeviation)
	self:SendDefault(s_guid,className, "forceDofEnable", "int", s_Instance.forceDofEnable)
	self:SendDefault(s_guid,className, "forceDofFarDistanceScale", "float", s_Instance.forceDofFarDistanceScale)
	self:SendDefault(s_guid,className, "forceDofFocusDistance", "float", s_Instance.forceDofFocusDistance)
	self:SendDefault(s_guid,className, "forceDofNearDistanceScale", "float", s_Instance.forceDofNearDistanceScale)
	self:SendDefault(s_guid,className, "forceDofScale", "float", s_Instance.forceDofScale)
	self:SendDefault(s_guid,className, "forceExposure", "float", s_Instance.forceExposure)
	self:SendDefault(s_guid,className, "forceMiddleGray", "float", s_Instance.forceMiddleGray)
	self:SendDefault(s_guid,className, "forceTonemapMethod", "int", s_Instance.forceTonemapMethod)
	self:SendDefault(s_guid,className, "forceVignetteColor", "Vec4", s_Instance.forceVignetteColor)
	self:SendDefault(s_guid,className, "forceVignetteExponent", "float", s_Instance.forceVignetteExponent)
	self:SendDefault(s_guid,className, "forceVignetteScale", "Vec2", s_Instance.forceVignetteScale)
	self:SendDefault(s_guid,className, "hbaoBilateralBlurCsEnable", "bool", s_Instance.hbaoBilateralBlurCsEnable)
	self:SendDefault(s_guid,className, "hbaoBilateralBlurEnable", "bool", s_Instance.hbaoBilateralBlurEnable)
	self:SendDefault(s_guid,className, "hbaoBilateralBlurRadius", "uint", s_Instance.hbaoBilateralBlurRadius)
	self:SendDefault(s_guid,className, "hbaoBilateralBlurSharpness", "float", s_Instance.hbaoBilateralBlurSharpness)
	self:SendDefault(s_guid,className, "hbaoDirCount", "float", s_Instance.hbaoDirCount)
	self:SendDefault(s_guid,className, "hbaoForceVendor", "int", s_Instance.hbaoForceVendor)
	self:SendDefault(s_guid,className, "hbaoGaussianBlurEnable", "bool", s_Instance.hbaoGaussianBlurEnable)
	self:SendDefault(s_guid,className, "hbaoGaussianBlurHalfResEnable", "bool", s_Instance.hbaoGaussianBlurHalfResEnable)
	self:SendDefault(s_guid,className, "hbaoGaussianBlurSize", "BlurFilter", s_Instance.hbaoGaussianBlurSize)
	self:SendDefault(s_guid,className, "hbaoHalfResDepthEnable", "bool", s_Instance.hbaoHalfResDepthEnable)
	self:SendDefault(s_guid,className, "hbaoHalfResEnable", "bool", s_Instance.hbaoHalfResEnable)
	self:SendDefault(s_guid,className, "hbaoMaxFootprintRadius", "float", s_Instance.hbaoMaxFootprintRadius)
	self:SendDefault(s_guid,className, "hbaoQuality", "uint", s_Instance.hbaoQuality)
	self:SendDefault(s_guid,className, "hbaoRandomDirVariationCount", "uint", s_Instance.hbaoRandomDirVariationCount)
	self:SendDefault(s_guid,className, "hbaoRandomTextureWidth", "uint", s_Instance.hbaoRandomTextureWidth)
	self:SendDefault(s_guid,className, "hbaoStepCount", "float", s_Instance.hbaoStepCount)
	self:SendDefault(s_guid,className, "hbaoTemporalFilterDebugMode", "uint", s_Instance.hbaoTemporalFilterDebugMode)
	self:SendDefault(s_guid,className, "hbaoTemporalFilterEnable", "bool", s_Instance.hbaoTemporalFilterEnable)
	self:SendDefault(s_guid,className, "hbaoTemporalFilterMaxNumFrames", "uint", s_Instance.hbaoTemporalFilterMaxNumFrames)
	self:SendDefault(s_guid,className, "hbaoTemporalFilterThreshold", "float", s_Instance.hbaoTemporalFilterThreshold)
	self:SendDefault(s_guid,className, "hbaoTemporalFilterThreshold2", "float", s_Instance.hbaoTemporalFilterThreshold2)
	self:SendDefault(s_guid,className, "hbaoVectorizedEnable", "bool", s_Instance.hbaoVectorizedEnable)
	self:SendDefault(s_guid,className, "hdrBloomEnable", "bool", s_Instance.hdrBloomEnable)
	self:SendDefault(s_guid,className, "hdrBlurEnable", "bool", s_Instance.hdrBlurEnable)
	self:SendDefault(s_guid,className, "hue", "float", s_Instance.hue)
	self:SendDefault(s_guid,className, "ldr16BitBloomEnable", "bool", s_Instance.ldr16BitBloomEnable)
	self:SendDefault(s_guid,className, "ldrBloomRange", "float", s_Instance.ldrBloomRange)
	self:SendDefault(s_guid,className, "lensScopeFilterColorScale", "float", s_Instance.lensScopeFilterColorScale)
	self:SendDefault(s_guid,className, "lensScopeFilterEnable", "bool", s_Instance.lensScopeFilterEnable)
	self:SendDefault(s_guid,className, "lUTGammaB", "float", s_Instance.lUTGammaB)
	self:SendDefault(s_guid,className, "lUTGammaCurbOffset", "float", s_Instance.lUTGammaCurbOffset)
	self:SendDefault(s_guid,className, "lUTGammaG", "float", s_Instance.lUTGammaG)
	self:SendDefault(s_guid,className, "lUTGammaR", "float", s_Instance.lUTGammaR)
	self:SendDefault(s_guid,className, "ps3BackBufferAsLdrTargetEnable", "bool", s_Instance.ps3BackBufferAsLdrTargetEnable)
	self:SendDefault(s_guid,className, "ps3CompressedRenderTargetsEnable", "bool", s_Instance.ps3CompressedRenderTargetsEnable)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaAbsoluteThreshold", "uint", s_Instance.ps3EdgeMlaaAbsoluteThreshold)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaCopyOnly", "bool", s_Instance.ps3EdgeMlaaCopyOnly)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaEnable", "bool", s_Instance.ps3EdgeMlaaEnable)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaGpuBlockEnable", "bool", s_Instance.ps3EdgeMlaaGpuBlockEnable)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaJobCount", "uint", s_Instance.ps3EdgeMlaaJobCount)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaJobPriority", "uint", s_Instance.ps3EdgeMlaaJobPriority)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaRelativeEdgeDetection", "bool", s_Instance.ps3EdgeMlaaRelativeEdgeDetection)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaShowEdges", "bool", s_Instance.ps3EdgeMlaaShowEdges)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaThresholdBase", "uint", s_Instance.ps3EdgeMlaaThresholdBase)
	self:SendDefault(s_guid,className, "ps3EdgeMlaaThresholdFactor", "uint", s_Instance.ps3EdgeMlaaThresholdFactor)
	self:SendDefault(s_guid,className, "ps3TiledBloomMipmapCount", "uint", s_Instance.ps3TiledBloomMipmapCount)
	self:SendDefault(s_guid,className, "ps3TiledFloatMipmapCount", "uint", s_Instance.ps3TiledFloatMipmapCount)
	self:SendDefault(s_guid,className, "ps3TiledLdrMipmapCount", "uint", s_Instance.ps3TiledLdrMipmapCount)
	self:SendDefault(s_guid,className, "quarterDownsamplingEnable", "bool", s_Instance.quarterDownsamplingEnable)
	self:SendDefault(s_guid,className, "saturation", "Vec3", s_Instance.saturation)
	self:SendDefault(s_guid,className, "uIBrightnessNorm", "float", s_Instance.uIBrightnessNorm)
	self:SendDefault(s_guid,className, "userBrightnessAddScale", "float", s_Instance.userBrightnessAddScale)
	self:SendDefault(s_guid,className, "userBrightnessLUTEnable", "bool", s_Instance.userBrightnessLUTEnable)
	self:SendDefault(s_guid,className, "userBrightnessMax", "float", s_Instance.userBrightnessMax)
	self:SendDefault(s_guid,className, "userBrightnessMin", "float", s_Instance.userBrightnessMin)
	self:SendDefault(s_guid,className, "userBrightnessMulScale", "float", s_Instance.userBrightnessMulScale)
end

function Type:GravityData (p_class, p_guid)
	local s_Instance = GravityData(p_class) 
 	local className = "GravityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gravity", "float", s_Instance.gravity)
end

function Type:GrenadeEntityData (p_class, p_guid)
	local s_Instance = GrenadeEntityData(p_class) 
 	local className = "GrenadeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collisionSpeedMultiplier", "float", s_Instance.collisionSpeedMultiplier)
	self:SendDefault(s_guid,className, "gravity", "float", s_Instance.gravity)
	self:SendDefault(s_guid,className, "grenadeType", "fb.GrenadeType)", s_Instance.grenadeType)
	self:SendDefault(s_guid,className, "minBounceSpeed", "float", s_Instance.minBounceSpeed)
end

function Type:GroundHeightData (p_class, p_guid)
	local s_Instance = GroundHeightData(p_class) 
 	local className = "GroundHeightData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "List<ushort)>", s_Instance.data)
	self:SendDefault(s_guid,className, "heightSpan", "Vec2", s_Instance.heightSpan)
	self:SendDefault(s_guid,className, "worldSize", "float", s_Instance.worldSize)
end

function Type:GroundHeightEntityData (p_class, p_guid)
	local s_Instance = GroundHeightEntityData(p_class) 
 	local className = "GroundHeightEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "GroundHeightData", s_Instance.data)
end

function Type:GroupHavokAsset (p_class, p_guid)
	local s_Instance = GroupHavokAsset(p_class) 
 	local className = "GroupHavokAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aabb", "List<AssetAabbs)>", s_Instance.aabb)
	self:SendDefault(s_guid,className, "externalAssetScaleIndex", "List<ushort)>", s_Instance.externalAssetScaleIndex)
end

function Type:GunMasterKillCounterEntityData (p_class, p_guid)
	local s_Instance = GunMasterKillCounterEntityData(p_class) 
 	local className = "GunMasterKillCounterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponsPreset", "List<GunMasterWeaponsPreset)>", s_Instance.weaponsPreset)
end

function Type:GunMasterLevelInfo (p_class, p_guid)
	local s_Instance = GunMasterLevelInfo(p_class) 
 	local className = "GunMasterLevelInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customizeData", "CtrRef", s_Instance.customizeData)
	self:SendDefault(s_guid,className, "killsNeeded", "int", s_Instance.killsNeeded)
end

function Type:GunMasterWeaponsPreset (p_class, p_guid)
	local s_Instance = GunMasterWeaponsPreset(p_class) 
 	local className = "GunMasterWeaponsPreset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gunMasterLevelInfos", "List<GunMasterLevelInfo)>", s_Instance.gunMasterLevelInfos)
	self:SendDefault(s_guid,className, "levelOverrides", "List<CtrRef)>", s_Instance.levelOverrides)
end

function Type:GunnerSpottingTrackerData (p_class, p_guid)
	local s_Instance = GunnerSpottingTrackerData(p_class) 
 	local className = "GunnerSpottingTrackerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "spottedInfantryIcon", "UIHudIcon", s_Instance.spottedInfantryIcon)
	self:SendDefault(s_guid,className, "spottedVehicleIcon", "UIHudIcon", s_Instance.spottedVehicleIcon)
end

function Type:GunSwayBaseData (p_class, p_guid)
	local s_Instance = GunSwayBaseData(p_class) 
 	local className = "GunSwayBaseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseValue", "GunSwayDispersionData", s_Instance.baseValue)
	self:SendDefault(s_guid,className, "gunSwayLag", "GunSwayLagData", s_Instance.gunSwayLag)
	self:SendDefault(s_guid,className, "recoil", "GunSwayRecoilData", s_Instance.recoil)
end

function Type:GunSwayBaseMoveData (p_class, p_guid)
	local s_Instance = GunSwayBaseMoveData(p_class) 
 	local className = "GunSwayBaseMoveData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseValue", "GunSwayDispersionData", s_Instance.baseValue)
	self:SendDefault(s_guid,className, "gunSwayLag", "GunSwayLagData", s_Instance.gunSwayLag)
	self:SendDefault(s_guid,className, "moving", "GunSwayDispersionData", s_Instance.moving)
	self:SendDefault(s_guid,className, "recoil", "GunSwayRecoilData", s_Instance.recoil)
end

function Type:GunSwayBaseMoveJumpData (p_class, p_guid)
	local s_Instance = GunSwayBaseMoveJumpData(p_class) 
 	local className = "GunSwayBaseMoveJumpData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseValue", "GunSwayDispersionData", s_Instance.baseValue)
	self:SendDefault(s_guid,className, "gunSwayLag", "GunSwayLagData", s_Instance.gunSwayLag)
	self:SendDefault(s_guid,className, "jumping", "GunSwayDispersionData", s_Instance.jumping)
	self:SendDefault(s_guid,className, "moving", "GunSwayDispersionData", s_Instance.moving)
	self:SendDefault(s_guid,className, "recoil", "GunSwayRecoilData", s_Instance.recoil)
	self:SendDefault(s_guid,className, "sprinting", "GunSwayDispersionData", s_Instance.sprinting)
	self:SendDefault(s_guid,className, "vaultingMediumObject", "GunSwayDispersionData", s_Instance.vaultingMediumObject)
	self:SendDefault(s_guid,className, "vaultingSmallObject", "GunSwayDispersionData", s_Instance.vaultingSmallObject)
end

function Type:GunSwayCrouchProneData (p_class, p_guid)
	local s_Instance = GunSwayCrouchProneData(p_class) 
 	local className = "GunSwayCrouchProneData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "noZoom", "GunSwayBaseMoveData", s_Instance.noZoom)
	self:SendDefault(s_guid,className, "zoom", "GunSwayBaseMoveData", s_Instance.zoom)
end

function Type:GunSwayData (p_class, p_guid)
	local s_Instance = GunSwayData(p_class) 
 	local className = "GunSwayData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraRecoil", "CtrRef", s_Instance.cameraRecoil)
	self:SendDefault(s_guid,className, "crouch", "GunSwayCrouchProneData", s_Instance.crouch)
	self:SendDefault(s_guid,className, "crouchToProne", "GunSwayStanceTransition", s_Instance.crouchToProne)
	self:SendDefault(s_guid,className, "crouchToStand", "GunSwayStanceTransition", s_Instance.crouchToStand)
	self:SendDefault(s_guid,className, "deviationScaleFactorNoZoom", "float", s_Instance.deviationScaleFactorNoZoom)
	self:SendDefault(s_guid,className, "deviationScaleFactorZoom", "float", s_Instance.deviationScaleFactorZoom)
	self:SendDefault(s_guid,className, "firstShotRecoilMultiplier", "float", s_Instance.firstShotRecoilMultiplier)
	self:SendDefault(s_guid,className, "gameplayDeviationScaleFactorNoZoom", "float", s_Instance.gameplayDeviationScaleFactorNoZoom)
	self:SendDefault(s_guid,className, "gameplayDeviationScaleFactorZoom", "float", s_Instance.gameplayDeviationScaleFactorZoom)
	self:SendDefault(s_guid,className, "modifiers", "List<CtrRef)>", s_Instance.modifiers)
	self:SendDefault(s_guid,className, "prone", "GunSwayCrouchProneData", s_Instance.prone)
	self:SendDefault(s_guid,className, "proneToCrouch", "GunSwayStanceTransition", s_Instance.proneToCrouch)
	self:SendDefault(s_guid,className, "proneToStand", "GunSwayStanceTransition", s_Instance.proneToStand)
	self:SendDefault(s_guid,className, "shootingRecoilDecreaseScale", "float", s_Instance.shootingRecoilDecreaseScale)
	self:SendDefault(s_guid,className, "stand", "GunSwayStandData", s_Instance.stand)
	self:SendDefault(s_guid,className, "standToCrouch", "GunSwayStanceTransition", s_Instance.standToCrouch)
	self:SendDefault(s_guid,className, "standToProne", "GunSwayStanceTransition", s_Instance.standToProne)
	self:SendDefault(s_guid,className, "suppressionModifierUnzoomed", "GunSwayStanceZoomModifierData", s_Instance.suppressionModifierUnzoomed)
	self:SendDefault(s_guid,className, "suppressionModifierZoomed", "GunSwayStanceZoomModifierData", s_Instance.suppressionModifierZoomed)
end

function Type:GunSwayDispersionData (p_class, p_guid)
	local s_Instance = GunSwayDispersionData(p_class) 
 	local className = "GunSwayDispersionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decreasePerSecond", "float", s_Instance.decreasePerSecond)
	self:SendDefault(s_guid,className, "increasePerShot", "float", s_Instance.increasePerShot)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:GunSwayDispersionModData (p_class, p_guid)
	local s_Instance = GunSwayDispersionModData(p_class) 
 	local className = "GunSwayDispersionModData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decreasePerSecondModifier", "float", s_Instance.decreasePerSecondModifier)
	self:SendDefault(s_guid,className, "increasePerShotModifier", "float", s_Instance.increasePerShotModifier)
	self:SendDefault(s_guid,className, "maxAngleModifier", "float", s_Instance.maxAngleModifier)
	self:SendDefault(s_guid,className, "minAngleModifier", "float", s_Instance.minAngleModifier)
end

function Type:GunSwayLagData (p_class, p_guid)
	local s_Instance = GunSwayLagData(p_class) 
 	local className = "GunSwayLagData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "moveForwardModifier", "float", s_Instance.moveForwardModifier)
	self:SendDefault(s_guid,className, "moveStrafeModifier", "float", s_Instance.moveStrafeModifier)
	self:SendDefault(s_guid,className, "releaseModifier", "float", s_Instance.releaseModifier)
	self:SendDefault(s_guid,className, "rotatePitchModifier", "float", s_Instance.rotatePitchModifier)
	self:SendDefault(s_guid,className, "rotateYawModifier", "float", s_Instance.rotateYawModifier)
end

function Type:GunSwayModifierData (p_class, p_guid)
	local s_Instance = GunSwayModifierData(p_class) 
 	local className = "GunSwayModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchNoZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.crouchNoZoomModifier)
	self:SendDefault(s_guid,className, "crouchZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.crouchZoomModifier)
	self:SendDefault(s_guid,className, "onlyInSupportedShooting", "bool", s_Instance.onlyInSupportedShooting)
	self:SendDefault(s_guid,className, "onlyOnWeaponLightEnabled", "bool", s_Instance.onlyOnWeaponLightEnabled)
	self:SendDefault(s_guid,className, "proneNoZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.proneNoZoomModifier)
	self:SendDefault(s_guid,className, "proneZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.proneZoomModifier)
	self:SendDefault(s_guid,className, "standNoZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.standNoZoomModifier)
	self:SendDefault(s_guid,className, "standZoomModifier", "GunSwayStanceZoomModifierData", s_Instance.standZoomModifier)
	self:SendDefault(s_guid,className, "unlockAsset", "CtrRef", s_Instance.unlockAsset)
end

function Type:GunSwayRecoilData (p_class, p_guid)
	local s_Instance = GunSwayRecoilData(p_class) 
 	local className = "GunSwayRecoilData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "horizontalRecoilAmplitudeIncPerShotMax", "float", s_Instance.horizontalRecoilAmplitudeIncPerShotMax)
	self:SendDefault(s_guid,className, "horizontalRecoilAmplitudeIncPerShotMin", "float", s_Instance.horizontalRecoilAmplitudeIncPerShotMin)
	self:SendDefault(s_guid,className, "horizontalRecoilAmplitudeMax", "float", s_Instance.horizontalRecoilAmplitudeMax)
	self:SendDefault(s_guid,className, "recoilAmplitudeDecreaseFactor", "float", s_Instance.recoilAmplitudeDecreaseFactor)
	self:SendDefault(s_guid,className, "recoilAmplitudeIncPerShot", "float", s_Instance.recoilAmplitudeIncPerShot)
	self:SendDefault(s_guid,className, "recoilAmplitudeMax", "float", s_Instance.recoilAmplitudeMax)
end

function Type:GunSwayStanceTransition (p_class, p_guid)
	local s_Instance = GunSwayStanceTransition(p_class) 
 	local className = "GunSwayStanceTransition"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coolDown", "float", s_Instance.coolDown)
	self:SendDefault(s_guid,className, "maxPenaltyValue", "GunSwayDispersionData", s_Instance.maxPenaltyValue)
end

function Type:GunSwayStanceZoomModifierData (p_class, p_guid)
	local s_Instance = GunSwayStanceZoomModifierData(p_class) 
 	local className = "GunSwayStanceZoomModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dispersionMod", "GunSwayDispersionModData", s_Instance.dispersionMod)
	self:SendDefault(s_guid,className, "lagPitchMod", "float", s_Instance.lagPitchMod)
	self:SendDefault(s_guid,className, "lagYawMod", "float", s_Instance.lagYawMod)
	self:SendDefault(s_guid,className, "recoilAngleMod", "float", s_Instance.recoilAngleMod)
	self:SendDefault(s_guid,className, "recoilMagnitudeMod", "float", s_Instance.recoilMagnitudeMod)
end

function Type:GunSwayStandData (p_class, p_guid)
	local s_Instance = GunSwayStandData(p_class) 
 	local className = "GunSwayStandData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "noZoom", "GunSwayBaseMoveJumpData", s_Instance.noZoom)
	self:SendDefault(s_guid,className, "zoom", "GunSwayBaseMoveJumpData", s_Instance.zoom)
end

function Type:HavokAsset (p_class, p_guid)
	local s_Instance = HavokAsset(p_class) 
 	local className = "HavokAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalAssets", "List<CtrRef)>", s_Instance.externalAssets)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:HdrSetting (p_class, p_guid)
	local s_Instance = HdrSetting(p_class) 
 	local className = "HdrSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowedOvershoot", "float", s_Instance.allowedOvershoot)
	self:SendDefault(s_guid,className, "compressFactor", "float", s_Instance.compressFactor)
	self:SendDefault(s_guid,className, "dischargeFactor", "float", s_Instance.dischargeFactor)
	self:SendDefault(s_guid,className, "headroom", "float", s_Instance.headroom)
	self:SendDefault(s_guid,className, "maxAllowedEnergy", "float", s_Instance.maxAllowedEnergy)
	self:SendDefault(s_guid,className, "windowBottomAttackTime", "float", s_Instance.windowBottomAttackTime)
	self:SendDefault(s_guid,className, "windowBottomReleaseTime", "float", s_Instance.windowBottomReleaseTime)
	self:SendDefault(s_guid,className, "windowMinBottom", "float", s_Instance.windowMinBottom)
	self:SendDefault(s_guid,className, "windowMinTop", "float", s_Instance.windowMinTop)
	self:SendDefault(s_guid,className, "windowSize", "float", s_Instance.windowSize)
	self:SendDefault(s_guid,className, "windowTopAttackTime", "float", s_Instance.windowTopAttackTime)
	self:SendDefault(s_guid,className, "windowTopMaxReleaseTime", "float", s_Instance.windowTopMaxReleaseTime)
	self:SendDefault(s_guid,className, "windowTopMinReleaseTime", "float", s_Instance.windowTopMinReleaseTime)
	self:SendDefault(s_guid,className, "windowTopReleaseTimeCurve", "AudioCurve", s_Instance.windowTopReleaseTimeCurve)
end

function Type:HealerData (p_class, p_guid)
	local s_Instance = HealerData(p_class) 
 	local className = "HealerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healingTime", "float", s_Instance.healingTime)
	self:SendDefault(s_guid,className, "health", "float", s_Instance.health)
	self:SendDefault(s_guid,className, "pickUpDelay", "float", s_Instance.pickUpDelay)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
end

function Type:HealingSphereData (p_class, p_guid)
	local s_Instance = HealingSphereData(p_class) 
 	local className = "HealingSphereData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healthIncSpeed", "float", s_Instance.healthIncSpeed)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
end

function Type:HealthComponentData (p_class, p_guid)
	local s_Instance = HealthComponentData(p_class) 
 	local className = "HealthComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "health", "float", s_Instance.health)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
end

function Type:HealthStateData (p_class, p_guid)
	local s_Instance = HealthStateData(p_class) 
 	local className = "HealthStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "canSupportOtherParts", "bool", s_Instance.canSupportOtherParts)
	self:SendDefault(s_guid,className, "copyDamageToBanger", "bool", s_Instance.copyDamageToBanger)
	self:SendDefault(s_guid,className, "health", "float", s_Instance.health)
	self:SendDefault(s_guid,className, "loosePartPhysics", "List<CtrRef)>", s_Instance.loosePartPhysics)
	self:SendDefault(s_guid,className, "objects", "List<CtrRef)>", s_Instance.objects)
	self:SendDefault(s_guid,className, "partIndex", "uint", s_Instance.partIndex)
	self:SendDefault(s_guid,className, "physicsEnabled", "bool", s_Instance.physicsEnabled)
	self:SendDefault(s_guid,className, "spawnedBangerBlueprint", "CtrRef", s_Instance.spawnedBangerBlueprint)
	self:SendDefault(s_guid,className, "spawnedBangerImpulseParams", "CtrRef", s_Instance.spawnedBangerImpulseParams)
end

function Type:HeightfieldTreeAsset (p_class, p_guid)
	local s_Instance = HeightfieldTreeAsset(p_class) 
 	local className = "HeightfieldTreeAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minHeightSamplesPerSide", "int", s_Instance.minHeightSamplesPerSide)
	self:SendDefault(s_guid,className, "minHeightWidth", "float", s_Instance.minHeightWidth)
end

function Type:HidableSoldierMeshWeaponPart (p_class, p_guid)
	local s_Instance = HidableSoldierMeshWeaponPart(p_class) 
 	local className = "HidableSoldierMeshWeaponPart"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
	self:SendDefault(s_guid,className, "hideAlways", "bool", s_Instance.hideAlways)
	self:SendDefault(s_guid,className, "hideInVehicleEntries", "bool", s_Instance.hideInVehicleEntries)
	self:SendDefault(s_guid,className, "weaponMesh", "CtrRef", s_Instance.weaponMesh)
	self:SendDefault(s_guid,className, "weaponMeshBlueprint", "CtrRef", s_Instance.weaponMeshBlueprint)
end

function Type:HighPassButterworthNodeData (p_class, p_guid)
	local s_Instance = HighPassButterworthNodeData(p_class) 
 	local className = "HighPassButterworthNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "order", "AudioGraphNodePort", s_Instance.order)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:HighPassFir64NodeData (p_class, p_guid)
	local s_Instance = HighPassFir64NodeData(p_class) 
 	local className = "HighPassFir64NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:HighPassIir2NodeData (p_class, p_guid)
	local s_Instance = HighPassIir2NodeData(p_class) 
 	local className = "HighPassIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:HighShelfIir2NodeData (p_class, p_guid)
	local s_Instance = HighShelfIir2NodeData(p_class) 
 	local className = "HighShelfIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:HIKData (p_class, p_guid)
	local s_Instance = HIKData(p_class) 
 	local className = "HIKData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pull", "float", s_Instance.pull)
	self:SendDefault(s_guid,className, "reachR", "float", s_Instance.reachR)
	self:SendDefault(s_guid,className, "reachT", "float", s_Instance.reachT)
	self:SendDefault(s_guid,className, "resist", "float", s_Instance.resist)
end

function Type:HitReactionComponentBinding (p_class, p_guid)
	local s_Instance = HitReactionComponentBinding(p_class) 
 	local className = "HitReactionComponentBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowKillFromAnimation", "AntRef", s_Instance.allowKillFromAnimation)
	self:SendDefault(s_guid,className, "boneType", "AntRef", s_Instance.boneType)
	self:SendDefault(s_guid,className, "direction", "AntRef", s_Instance.direction)
	self:SendDefault(s_guid,className, "firingDistance", "AntRef", s_Instance.firingDistance)
	self:SendDefault(s_guid,className, "hit", "AntRef", s_Instance.hit)
	self:SendDefault(s_guid,className, "immortal", "AntRef", s_Instance.immortal)
	self:SendDefault(s_guid,className, "impactType", "AntRef", s_Instance.impactType)
	self:SendDefault(s_guid,className, "randomAnimationIndex", "AntRef", s_Instance.randomAnimationIndex)
end

function Type:HitReactionComponentData (p_class, p_guid)
	local s_Instance = HitReactionComponentData(p_class) 
 	local className = "HitReactionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "hitReactionBinding", "HitReactionComponentBinding", s_Instance.hitReactionBinding)
end

function Type:HoldAndReleaseData (p_class, p_guid)
	local s_Instance = HoldAndReleaseData(p_class) 
 	local className = "HoldAndReleaseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delay", "float", s_Instance.delay)
	self:SendDefault(s_guid,className, "forceFireWhenKilledHolding", "bool", s_Instance.forceFireWhenKilledHolding)
	self:SendDefault(s_guid,className, "killedHoldingPowerModifier", "float", s_Instance.killedHoldingPowerModifier)
	self:SendDefault(s_guid,className, "maxHoldTime", "float", s_Instance.maxHoldTime)
	self:SendDefault(s_guid,className, "maxPowerModifier", "float", s_Instance.maxPowerModifier)
	self:SendDefault(s_guid,className, "minPowerModifier", "float", s_Instance.minPowerModifier)
	self:SendDefault(s_guid,className, "powerIncreasePerSecond", "float", s_Instance.powerIncreasePerSecond)
end

function Type:HovercraftFloatPhysicsData (p_class, p_guid)
	local s_Instance = HovercraftFloatPhysicsData(p_class) 
 	local className = "HovercraftFloatPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frontLength", "float", s_Instance.frontLength)
	self:SendDefault(s_guid,className, "landFrictionAxisMod", "Vec3", s_Instance.landFrictionAxisMod)
	self:SendDefault(s_guid,className, "landResistanceAxisMod", "Vec3", s_Instance.landResistanceAxisMod)
	self:SendDefault(s_guid,className, "sideLength", "float", s_Instance.sideLength)
end

function Type:HudCameraShakeData (p_class, p_guid)
	local s_Instance = HudCameraShakeData(p_class) 
 	local className = "HudCameraShakeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraShakeMaxAngle", "float", s_Instance.cameraShakeMaxAngle)
	self:SendDefault(s_guid,className, "cameraShakeMinAngle", "float", s_Instance.cameraShakeMinAngle)
	self:SendDefault(s_guid,className, "cameraShakeScale", "float", s_Instance.cameraShakeScale)
	self:SendDefault(s_guid,className, "filterSize", "uint", s_Instance.filterSize)
	self:SendDefault(s_guid,className, "jumpEffectDurationMax", "float", s_Instance.jumpEffectDurationMax)
	self:SendDefault(s_guid,className, "jumpEffectDurationMin", "float", s_Instance.jumpEffectDurationMin)
	self:SendDefault(s_guid,className, "jumpEffectMax", "float", s_Instance.jumpEffectMax)
	self:SendDefault(s_guid,className, "jumpEffectMin", "float", s_Instance.jumpEffectMin)
	self:SendDefault(s_guid,className, "landEffectDurationMax", "float", s_Instance.landEffectDurationMax)
	self:SendDefault(s_guid,className, "landEffectDurationMin", "float", s_Instance.landEffectDurationMin)
	self:SendDefault(s_guid,className, "landEffectMax", "float", s_Instance.landEffectMax)
	self:SendDefault(s_guid,className, "landEffectMin", "float", s_Instance.landEffectMin)
	self:SendDefault(s_guid,className, "maxDisplacement", "float", s_Instance.maxDisplacement)
	self:SendDefault(s_guid,className, "weaponDispersionMax", "float", s_Instance.weaponDispersionMax)
	self:SendDefault(s_guid,className, "weaponDispersionMin", "float", s_Instance.weaponDispersionMin)
	self:SendDefault(s_guid,className, "weaponDispersionOffsetScale", "float", s_Instance.weaponDispersionOffsetScale)
	self:SendDefault(s_guid,className, "weaponLagXScale", "float", s_Instance.weaponLagXScale)
	self:SendDefault(s_guid,className, "weaponLagYScale", "float", s_Instance.weaponLagYScale)
end

function Type:HudData (p_class, p_guid)
	local s_Instance = HudData(p_class) 
 	local className = "HudData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraShakeModifier", "float", s_Instance.cameraShakeModifier)
	self:SendDefault(s_guid,className, "crosshairOpacityMax", "float", s_Instance.crosshairOpacityMax)
	self:SendDefault(s_guid,className, "crosshairOpacityMin", "float", s_Instance.crosshairOpacityMin)
	self:SendDefault(s_guid,className, "crosshairOpacityModifier", "float", s_Instance.crosshairOpacityModifier)
	self:SendDefault(s_guid,className, "crosshairScaleMax", "float", s_Instance.crosshairScaleMax)
	self:SendDefault(s_guid,className, "crosshairScaleMin", "float", s_Instance.crosshairScaleMin)
	self:SendDefault(s_guid,className, "crosshairTypeId", "string", s_Instance.crosshairTypeId)
	self:SendDefault(s_guid,className, "hideAmmo", "bool", s_Instance.hideAmmo)
	self:SendDefault(s_guid,className, "hideCrosshairWhenAimOnFriend", "bool", s_Instance.hideCrosshairWhenAimOnFriend)
	self:SendDefault(s_guid,className, "hudPropertyList", "CtrRef", s_Instance.hudPropertyList)
	self:SendDefault(s_guid,className, "infiniteAmmo", "bool", s_Instance.infiniteAmmo)
	self:SendDefault(s_guid,className, "lowAmmoWarning", "float", s_Instance.lowAmmoWarning)
	self:SendDefault(s_guid,className, "reloadPrompt", "float", s_Instance.reloadPrompt)
	self:SendDefault(s_guid,className, "renderTargetIndex", "int", s_Instance.renderTargetIndex)
	self:SendDefault(s_guid,className, "seaLevelAltFreq", "float", s_Instance.seaLevelAltFreq)
	self:SendDefault(s_guid,className, "showMinimap", "bool", s_Instance.showMinimap)
	self:SendDefault(s_guid,className, "useAimWarning", "bool", s_Instance.useAimWarning)
	self:SendDefault(s_guid,className, "useClimbRate", "bool", s_Instance.useClimbRate)
	self:SendDefault(s_guid,className, "useGForce", "bool", s_Instance.useGForce)
	self:SendDefault(s_guid,className, "useLockingController", "bool", s_Instance.useLockingController)
	self:SendDefault(s_guid,className, "usePredictedSight", "bool", s_Instance.usePredictedSight)
	self:SendDefault(s_guid,className, "useRangeMeter", "bool", s_Instance.useRangeMeter)
	self:SendDefault(s_guid,className, "useRenderTarget", "bool", s_Instance.useRenderTarget)
	self:SendDefault(s_guid,className, "useSkidSlip", "bool", s_Instance.useSkidSlip)
	self:SendDefault(s_guid,className, "useThrust", "bool", s_Instance.useThrust)
	self:SendDefault(s_guid,className, "useVelocityVectorMarker", "bool", s_Instance.useVelocityVectorMarker)
	self:SendDefault(s_guid,className, "useWeaponOrientations", "bool", s_Instance.useWeaponOrientations)
	self:SendDefault(s_guid,className, "weaponClass", "string", s_Instance.weaponClass)
end

function Type:HudImpactData (p_class, p_guid)
	local s_Instance = HudImpactData(p_class) 
 	local className = "HudImpactData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "maxHealth", "float", s_Instance.maxHealth)
	self:SendDefault(s_guid,className, "maxTimeVisible", "float", s_Instance.maxTimeVisible)
	self:SendDefault(s_guid,className, "minHealth", "float", s_Instance.minHealth)
	self:SendDefault(s_guid,className, "minTimeVisible", "float", s_Instance.minTimeVisible)
end

function Type:HudProgressbarData (p_class, p_guid)
	local s_Instance = HudProgressbarData(p_class) 
 	local className = "HudProgressbarData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "progressType", "fb.ProgressType)", s_Instance.progressType)
end

function Type:HudTrackerData (p_class, p_guid)
	local s_Instance = HudTrackerData(p_class) 
 	local className = "HudTrackerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "displayExtraInfo", "bool", s_Instance.displayExtraInfo)
	self:SendDefault(s_guid,className, "distanceTextOffsetY", "float", s_Instance.distanceTextOffsetY)
	self:SendDefault(s_guid,className, "fadeMinAlpha", "float", s_Instance.fadeMinAlpha)
	self:SendDefault(s_guid,className, "iconSize", "float", s_Instance.iconSize)
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "secondFadeDistance", "float", s_Instance.secondFadeDistance)
	self:SendDefault(s_guid,className, "showDistance", "bool", s_Instance.showDistance)
	self:SendDefault(s_guid,className, "startFadeDistance", "float", s_Instance.startFadeDistance)
	self:SendDefault(s_guid,className, "trackerHudRadiusX", "float", s_Instance.trackerHudRadiusX)
	self:SendDefault(s_guid,className, "trackerHudRadiusY", "float", s_Instance.trackerHudRadiusY)
end

function Type:HudVehicleTrackerData (p_class, p_guid)
	local s_Instance = HudVehicleTrackerData(p_class) 
 	local className = "HudVehicleTrackerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceIconShrinkFactor", "float", s_Instance.distanceIconShrinkFactor)
	self:SendDefault(s_guid,className, "edgePointer", "EdgePointerData", s_Instance.edgePointer)
	self:SendDefault(s_guid,className, "enableEdgePointers", "bool", s_Instance.enableEdgePointers)
	self:SendDefault(s_guid,className, "enemyTrackerIcon", "UIHudIcon", s_Instance.enemyTrackerIcon)
	self:SendDefault(s_guid,className, "friendlyTrackerIcon", "UIHudIcon", s_Instance.friendlyTrackerIcon)
	self:SendDefault(s_guid,className, "heatSensitivity", "float", s_Instance.heatSensitivity)
	self:SendDefault(s_guid,className, "iconSize", "float", s_Instance.iconSize)
	self:SendDefault(s_guid,className, "laserPaintedVehicleTrackerIcon", "UIHudIcon", s_Instance.laserPaintedVehicleTrackerIcon)
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "missileLockTrackerIcon", "UIHudIcon", s_Instance.missileLockTrackerIcon)
	self:SendDefault(s_guid,className, "missileTrackerIcon", "UIHudIcon", s_Instance.missileTrackerIcon)
	self:SendDefault(s_guid,className, "outsideScreenTrackerIcon", "UIHudIcon", s_Instance.outsideScreenTrackerIcon)
	self:SendDefault(s_guid,className, "radarSensitivity", "float", s_Instance.radarSensitivity)
	self:SendDefault(s_guid,className, "renderTargetData", "VehicleTrackerRenderTargetData", s_Instance.renderTargetData)
	self:SendDefault(s_guid,className, "showTracker", "bool", s_Instance.showTracker)
	self:SendDefault(s_guid,className, "trackLaserPaintedObjects", "bool", s_Instance.trackLaserPaintedObjects)
	self:SendDefault(s_guid,className, "trackOnlyUsedVehicles", "bool", s_Instance.trackOnlyUsedVehicles)
	self:SendDefault(s_guid,className, "useCameraComponentTransform", "bool", s_Instance.useCameraComponentTransform)
	self:SendDefault(s_guid,className, "useTrackerSignatures", "bool", s_Instance.useTrackerSignatures)
end

function Type:HullFloatPhysicsData (p_class, p_guid)
	local s_Instance = HullFloatPhysicsData(p_class) 
 	local className = "HullFloatPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularDampening", "float", s_Instance.angularDampening)
	self:SendDefault(s_guid,className, "depth", "float", s_Instance.depth)
	self:SendDefault(s_guid,className, "frictionThrottleModifier", "float", s_Instance.frictionThrottleModifier)
	self:SendDefault(s_guid,className, "frontCurveDegree", "float", s_Instance.frontCurveDegree)
	self:SendDefault(s_guid,className, "length", "float", s_Instance.length)
	self:SendDefault(s_guid,className, "liftModifier", "float", s_Instance.liftModifier)
	self:SendDefault(s_guid,className, "nonEngineSteer", "float", s_Instance.nonEngineSteer)
	self:SendDefault(s_guid,className, "nonEngineSteerMaxSpeed", "float", s_Instance.nonEngineSteerMaxSpeed)
	self:SendDefault(s_guid,className, "nonEngineSteerMinSpeed", "float", s_Instance.nonEngineSteerMinSpeed)
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "sideCurveDegree", "float", s_Instance.sideCurveDegree)
	self:SendDefault(s_guid,className, "subSurfaceSplits", "int", s_Instance.subSurfaceSplits)
	self:SendDefault(s_guid,className, "supportSizeMod", "float", s_Instance.supportSizeMod)
	self:SendDefault(s_guid,className, "waterDampeningMod", "float", s_Instance.waterDampeningMod)
	self:SendDefault(s_guid,className, "waterFrictionAxisMod", "Vec3", s_Instance.waterFrictionAxisMod)
	self:SendDefault(s_guid,className, "waterResistanceAxisMod", "Vec3", s_Instance.waterResistanceAxisMod)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:HumanPlayerEntityData (p_class, p_guid)
	local s_Instance = HumanPlayerEntityData(p_class) 
 	local className = "HumanPlayerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "lastManStandingSid", "string", s_Instance.lastManStandingSid)
	self:SendDefault(s_guid,className, "playerKilledDelay", "float", s_Instance.playerKilledDelay)
end

function Type:IKComponentData (p_class, p_guid)
	local s_Instance = IKComponentData(p_class) 
 	local className = "IKComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "iKData", "HIKData", s_Instance.iKData)
	self:SendDefault(s_guid,className, "iKEffector", "IKEffectorEnum", s_Instance.iKEffector)
end

function Type:InAirStateData (p_class, p_guid)
	local s_Instance = InAirStateData(p_class) 
 	local className = "InAirStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "freeFallVelocity", "float", s_Instance.freeFallVelocity)
end

function Type:IndexRange (p_class, p_guid)
	local s_Instance = IndexRange(p_class) 
 	local className = "IndexRange"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "first", "uint", s_Instance.first)
	self:SendDefault(s_guid,className, "last", "uint", s_Instance.last)
end

function Type:InputActionData (p_class, p_guid)
	local s_Instance = InputActionData(p_class) 
 	local className = "InputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isAnalog", "bool", s_Instance.isAnalog)
	self:SendDefault(s_guid,className, "negateValue", "bool", s_Instance.negateValue)
end

function Type:InputActionMapData (p_class, p_guid)
	local s_Instance = InputActionMapData(p_class) 
 	local className = "InputActionMapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actions", "List<CtrRef)>", s_Instance.actions)
	self:SendDefault(s_guid,className, "copyKeyBindingsFrom", "string", s_Instance.copyKeyBindingsFrom)
	self:SendDefault(s_guid,className, "platformSpecific", "InputActionMapPlatform", s_Instance.platformSpecific)
	self:SendDefault(s_guid,className, "slot", "InputActionMapSlot", s_Instance.slot)
end

function Type:InputActionMappingsData (p_class, p_guid)
	local s_Instance = InputActionMappingsData(p_class) 
 	local className = "InputActionMappingsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mappings", "List<CtrRef)>", s_Instance.mappings)
end

function Type:InputActionsData (p_class, p_guid)
	local s_Instance = InputActionsData(p_class) 
 	local className = "InputActionsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "conceptIdentifier", "InputConceptIdentifiers", s_Instance.conceptIdentifier)
	self:SendDefault(s_guid,className, "copyKeyBindingFrom", "InputConceptIdentifiers", s_Instance.copyKeyBindingFrom)
	self:SendDefault(s_guid,className, "hideInKeyBindings", "bool", s_Instance.hideInKeyBindings)
	self:SendDefault(s_guid,className, "inputActions", "List<CtrRef)>", s_Instance.inputActions)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
end

function Type:InputConfigurationAsset (p_class, p_guid)
	local s_Instance = InputConfigurationAsset(p_class) 
 	local className = "InputConfigurationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchAction", "EntryInputActionEnum", s_Instance.crouchAction)
	self:SendDefault(s_guid,className, "crouchAndHoldAction", "EntryInputActionEnum", s_Instance.crouchAndHoldAction)
	self:SendDefault(s_guid,className, "defaultExclusiveInputConcepts", "List<InputConceptIdentifiers)>", s_Instance.defaultExclusiveInputConcepts)
	self:SendDefault(s_guid,className, "defaultInputConceptDefinition", "CtrRef", s_Instance.defaultInputConceptDefinition)
	self:SendDefault(s_guid,className, "disableCrawlingWhileFiring", "bool", s_Instance.disableCrawlingWhileFiring)
	self:SendDefault(s_guid,className, "disableCrawlingWhileReloading", "bool", s_Instance.disableCrawlingWhileReloading)
	self:SendDefault(s_guid,className, "disableFiringWhileDeployingBipod", "bool", s_Instance.disableFiringWhileDeployingBipod)
	self:SendDefault(s_guid,className, "disableFiringWhileJumping", "bool", s_Instance.disableFiringWhileJumping)
	self:SendDefault(s_guid,className, "disableSprintingWhileReloading", "bool", s_Instance.disableSprintingWhileReloading)
	self:SendDefault(s_guid,className, "enableSprintToCrouchTransition", "bool", s_Instance.enableSprintToCrouchTransition)
	self:SendDefault(s_guid,className, "firingDisablingTransitions", "List<PoseTransition)>", s_Instance.firingDisablingTransitions)
	self:SendDefault(s_guid,className, "inputCurvesEnabled", "bool", s_Instance.inputCurvesEnabled)
	self:SendDefault(s_guid,className, "pickupInteractionAction", "EntryInputActionEnum", s_Instance.pickupInteractionAction)
	self:SendDefault(s_guid,className, "proneToStandOnJump", "bool", s_Instance.proneToStandOnJump)
	self:SendDefault(s_guid,className, "sprintReleaseTime", "float", s_Instance.sprintReleaseTime)
	self:SendDefault(s_guid,className, "standAutomaticallyIfSprinting", "bool", s_Instance.standAutomaticallyIfSprinting)
	self:SendDefault(s_guid,className, "stopSprintingWhenReleasingSprint", "bool", s_Instance.stopSprintingWhenReleasingSprint)
	self:SendDefault(s_guid,className, "stopSprintingWhenReleasingThrottle", "bool", s_Instance.stopSprintingWhenReleasingThrottle)
	self:SendDefault(s_guid,className, "throttleInputRequiredForSprint", "float", s_Instance.throttleInputRequiredForSprint)
	self:SendDefault(s_guid,className, "togglePoseAction", "EntryInputActionEnum", s_Instance.togglePoseAction)
	self:SendDefault(s_guid,className, "userConfigurableActionMaps", "List<EditableActionMap)>", s_Instance.userConfigurableActionMaps)
	self:SendDefault(s_guid,className, "vehicleBoostIsToggle", "bool", s_Instance.vehicleBoostIsToggle)
	self:SendDefault(s_guid,className, "waitForSprintReleaseBeforeSprintAgain", "bool", s_Instance.waitForSprintReleaseBeforeSprintAgain)
	self:SendDefault(s_guid,className, "inputConfigurationAsset",  "readonly", s_Instance.inputConfigurationAsset)
	self:SendDefault(s_guid,className, "inputConceptIdentifiers",  "uint", s_Instance.inputConceptIdentifiers)
	self:SendDefault(s_guid,className, "poseTransition",  "uint", s_Instance.poseTransition)
end

function Type:InputCurveData (p_class, p_guid)
	local s_Instance = InputCurveData(p_class) 
 	local className = "InputCurveData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "affectedInputs", "List<EntryInputActionEnum)>", s_Instance.affectedInputs)
	self:SendDefault(s_guid,className, "handleMultipleInputsAsSquare", "bool", s_Instance.handleMultipleInputsAsSquare)
	self:SendDefault(s_guid,className, "inputModifierCurve", "List<Vec2)>", s_Instance.inputModifierCurve)
	self:SendDefault(s_guid,className, "inputCurveData",  "readonly", s_Instance.inputCurveData)
	self:SendDefault(s_guid,className, "entryInputActionEnum",  "uint", s_Instance.entryInputActionEnum)
end

function Type:InputModifierEntityData (p_class, p_guid)
	local s_Instance = InputModifierEntityData(p_class) 
 	local className = "InputModifierEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "action", "EntryInputActionEnum", s_Instance.action)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "offset", "float", s_Instance.offset)
	self:SendDefault(s_guid,className, "scale", "float", s_Instance.scale)
end

function Type:InputRecorderData (p_class, p_guid)
	local s_Instance = InputRecorderData(p_class) 
 	local className = "InputRecorderData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoIncrementFileName", "bool", s_Instance.autoIncrementFileName)
	self:SendDefault(s_guid,className, "fileName", "string", s_Instance.fileName)
	self:SendDefault(s_guid,className, "fileNamePrefix", "string", s_Instance.fileNamePrefix)
	self:SendDefault(s_guid,className, "toggleRecordAction", "EntryInputActionEnum", s_Instance.toggleRecordAction)
end

function Type:InputRecorderTrackData (p_class, p_guid)
	local s_Instance = InputRecorderTrackData(p_class) 
 	local className = "InputRecorderTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "propertyTrack", "CtrRef", s_Instance.propertyTrack)
end

function Type:InputRestrictionEntityData (p_class, p_guid)
	local s_Instance = InputRestrictionEntityData(p_class) 
 	local className = "InputRestrictionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altFire", "bool", s_Instance.altFire)
	self:SendDefault(s_guid,className, "applyRestrictionsToSpecificPlayer", "bool", s_Instance.applyRestrictionsToSpecificPlayer)
	self:SendDefault(s_guid,className, "brake", "bool", s_Instance.brake)
	self:SendDefault(s_guid,className, "changeEntry", "bool", s_Instance.changeEntry)
	self:SendDefault(s_guid,className, "changePose", "bool", s_Instance.changePose)
	self:SendDefault(s_guid,className, "changeVehicle", "bool", s_Instance.changeVehicle)
	self:SendDefault(s_guid,className, "changeWeapon", "bool", s_Instance.changeWeapon)
	self:SendDefault(s_guid,className, "clutch", "bool", s_Instance.clutch)
	self:SendDefault(s_guid,className, "cycleRadioChannel", "bool", s_Instance.cycleRadioChannel)
	self:SendDefault(s_guid,className, "dynamicGadget1", "bool", s_Instance.dynamicGadget1)
	self:SendDefault(s_guid,className, "dynamicGadget2", "bool", s_Instance.dynamicGadget2)
	self:SendDefault(s_guid,className, "fire", "bool", s_Instance.fire)
	self:SendDefault(s_guid,className, "fireCountermeasure", "bool", s_Instance.fireCountermeasure)
	self:SendDefault(s_guid,className, "gearDown", "bool", s_Instance.gearDown)
	self:SendDefault(s_guid,className, "gearUp", "bool", s_Instance.gearUp)
	self:SendDefault(s_guid,className, "giveOrder", "bool", s_Instance.giveOrder)
	self:SendDefault(s_guid,className, "grenadeLauncher", "bool", s_Instance.grenadeLauncher)
	self:SendDefault(s_guid,className, "handBrake", "bool", s_Instance.handBrake)
	self:SendDefault(s_guid,className, "jump", "bool", s_Instance.jump)
	self:SendDefault(s_guid,className, "mapZoom", "bool", s_Instance.mapZoom)
	self:SendDefault(s_guid,className, "meleeAttack", "bool", s_Instance.meleeAttack)
	self:SendDefault(s_guid,className, "overridePreviousInputRestriction", "bool", s_Instance.overridePreviousInputRestriction)
	self:SendDefault(s_guid,className, "pitch", "bool", s_Instance.pitch)
	self:SendDefault(s_guid,className, "prone", "bool", s_Instance.prone)
	self:SendDefault(s_guid,className, "reload", "bool", s_Instance.reload)
	self:SendDefault(s_guid,className, "roll", "bool", s_Instance.roll)
	self:SendDefault(s_guid,className, "scoreboardMenu", "bool", s_Instance.scoreboardMenu)
	self:SendDefault(s_guid,className, "selectMeleeWeapon", "bool", s_Instance.selectMeleeWeapon)
	self:SendDefault(s_guid,className, "selectWeapon1", "bool", s_Instance.selectWeapon1)
	self:SendDefault(s_guid,className, "selectWeapon2", "bool", s_Instance.selectWeapon2)
	self:SendDefault(s_guid,className, "selectWeapon3", "bool", s_Instance.selectWeapon3)
	self:SendDefault(s_guid,className, "selectWeapon4", "bool", s_Instance.selectWeapon4)
	self:SendDefault(s_guid,className, "selectWeapon5", "bool", s_Instance.selectWeapon5)
	self:SendDefault(s_guid,className, "selectWeapon6", "bool", s_Instance.selectWeapon6)
	self:SendDefault(s_guid,className, "selectWeapon7", "bool", s_Instance.selectWeapon7)
	self:SendDefault(s_guid,className, "selectWeapon8", "bool", s_Instance.selectWeapon8)
	self:SendDefault(s_guid,className, "selectWeapon9", "bool", s_Instance.selectWeapon9)
	self:SendDefault(s_guid,className, "sprint", "bool", s_Instance.sprint)
	self:SendDefault(s_guid,className, "staticGadget", "bool", s_Instance.staticGadget)
	self:SendDefault(s_guid,className, "strafe", "bool", s_Instance.strafe)
	self:SendDefault(s_guid,className, "switchPrimaryInventory", "bool", s_Instance.switchPrimaryInventory)
	self:SendDefault(s_guid,className, "switchPrimaryWeapon", "bool", s_Instance.switchPrimaryWeapon)
	self:SendDefault(s_guid,className, "threeDimensionalMap", "bool", s_Instance.threeDimensionalMap)
	self:SendDefault(s_guid,className, "throttle", "bool", s_Instance.throttle)
	self:SendDefault(s_guid,className, "throwGrenade", "bool", s_Instance.throwGrenade)
	self:SendDefault(s_guid,className, "toggleCamera", "bool", s_Instance.toggleCamera)
	self:SendDefault(s_guid,className, "toggleParachute", "bool", s_Instance.toggleParachute)
	self:SendDefault(s_guid,className, "yaw", "bool", s_Instance.yaw)
	self:SendDefault(s_guid,className, "zoom", "bool", s_Instance.zoom)
end

function Type:InputSuppressionData (p_class, p_guid)
	local s_Instance = InputSuppressionData(p_class) 
 	local className = "InputSuppressionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suppressVehicleInput", "List<ActionSuppressor)>", s_Instance.suppressVehicleInput)
end

function Type:InspectAnimationTriggerData (p_class, p_guid)
	local s_Instance = InspectAnimationTriggerData(p_class) 
 	local className = "InspectAnimationTriggerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animation", "AntRef", s_Instance.animation)
	self:SendDefault(s_guid,className, "probability", "float", s_Instance.probability)
end

function Type:InspectEntityData (p_class, p_guid)
	local s_Instance = InspectEntityData(p_class) 
 	local className = "InspectEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationSignal", "AntRef", s_Instance.animationSignal)
	self:SendDefault(s_guid,className, "cameras", "List<CtrRef)>", s_Instance.cameras)
	self:SendDefault(s_guid,className, "centerOffset", "Vec3", s_Instance.centerOffset)
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "maxLookAtHeight", "float", s_Instance.maxLookAtHeight)
	self:SendDefault(s_guid,className, "minDistance", "float", s_Instance.minDistance)
	self:SendDefault(s_guid,className, "minLookAtHeight", "float", s_Instance.minLookAtHeight)
	self:SendDefault(s_guid,className, "uIName", "string", s_Instance.uIName)
	self:SendDefault(s_guid,className, "viewPoints", "List<InspectViewPointData)>", s_Instance.viewPoints)
	self:SendDefault(s_guid,className, "zoomScrollAcceleration", "float", s_Instance.zoomScrollAcceleration)
	self:SendDefault(s_guid,className, "zoomScrollSpeed", "float", s_Instance.zoomScrollSpeed)
end

function Type:InspectViewPointData (p_class, p_guid)
	local s_Instance = InspectViewPointData(p_class) 
 	local className = "InspectViewPointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "adjustmentYaw", "float", s_Instance.adjustmentYaw)
	self:SendDefault(s_guid,className, "animationTriggers", "List<InspectAnimationTriggerData)>", s_Instance.animationTriggers)
	self:SendDefault(s_guid,className, "continuousAnimationSignal", "List<AntRef)>", s_Instance.continuousAnimationSignal)
	self:SendDefault(s_guid,className, "distance", "float", s_Instance.distance)
	self:SendDefault(s_guid,className, "fixed", "bool", s_Instance.fixed)
	self:SendDefault(s_guid,className, "fovOffset", "float", s_Instance.fovOffset)
	self:SendDefault(s_guid,className, "lookAtHeight", "float", s_Instance.lookAtHeight)
	self:SendDefault(s_guid,className, "pitch", "float", s_Instance.pitch)
	self:SendDefault(s_guid,className, "viewPointID", "string", s_Instance.viewPointID)
	self:SendDefault(s_guid,className, "yaw", "float", s_Instance.yaw)
end

function Type:InstanceInputNode (p_class, p_guid)
	local s_Instance = InstanceInputNode(p_class) 
 	local className = "InstanceInputNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:InstanceNode (p_class, p_guid)
	local s_Instance = InstanceNode(p_class) 
 	local className = "InstanceNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "uIGraph", "CtrRef", s_Instance.uIGraph)
end

function Type:InstanceOutputNode (p_class, p_guid)
	local s_Instance = InstanceOutputNode(p_class) 
 	local className = "InstanceOutputNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "destroyGraph", "bool", s_Instance.destroyGraph)
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
end

function Type:IntegratorOrDifferentiatorEntityData (p_class, p_guid)
	local s_Instance = IntegratorOrDifferentiatorEntityData(p_class) 
 	local className = "IntegratorOrDifferentiatorEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bounded", "bool", s_Instance.bounded)
	self:SendDefault(s_guid,className, "input", "float", s_Instance.input)
	self:SendDefault(s_guid,className, "maxValue", "float", s_Instance.maxValue)
	self:SendDefault(s_guid,className, "minValue", "float", s_Instance.minValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "startValue", "float", s_Instance.startValue)
	self:SendDefault(s_guid,className, "updatePass", "EntityUpdateOrder", s_Instance.updatePass)
end

function Type:IntentData (p_class, p_guid)
	local s_Instance = IntentData(p_class) 
 	local className = "IntentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultModifier", "float", s_Instance.defaultModifier)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:IntEntityData (p_class, p_guid)
	local s_Instance = IntEntityData(p_class) 
 	local className = "IntEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "int", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "incDecValue", "int", s_Instance.incDecValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:InteractionEntityData (p_class, p_guid)
	local s_Instance = InteractionEntityData(p_class) 
 	local className = "InteractionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowInteractionViaRemoteEntry", "bool", s_Instance.allowInteractionViaRemoteEntry)
	self:SendDefault(s_guid,className, "maxUses", "uint", s_Instance.maxUses)
	self:SendDefault(s_guid,className, "preInteractionSoundEffect", "CtrRef", s_Instance.preInteractionSoundEffect)
	self:SendDefault(s_guid,className, "testIfOccluded", "bool", s_Instance.testIfOccluded)
	self:SendDefault(s_guid,className, "useWithinAngle", "float", s_Instance.useWithinAngle)
	self:SendDefault(s_guid,className, "useWithinRadius", "float", s_Instance.useWithinRadius)
end

function Type:InteractionTypesData (p_class, p_guid)
	local s_Instance = InteractionTypesData(p_class) 
 	local className = "InteractionTypesData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammoCrateEntity", "bool", s_Instance.ammoCrateEntity)
	self:SendDefault(s_guid,className, "explosionPackEntity", "bool", s_Instance.explosionPackEntity)
	self:SendDefault(s_guid,className, "interactionEntity", "bool", s_Instance.interactionEntity)
	self:SendDefault(s_guid,className, "pickupEntity", "bool", s_Instance.pickupEntity)
	self:SendDefault(s_guid,className, "soldierEntity", "bool", s_Instance.soldierEntity)
	self:SendDefault(s_guid,className, "vehicleEntity", "bool", s_Instance.vehicleEntity)
end

function Type:InterfaceDescriptorData (p_class, p_guid)
	local s_Instance = InterfaceDescriptorData(p_class) 
 	local className = "InterfaceDescriptorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputEvents", "List<DynamicEvent)>", s_Instance.inputEvents)
	self:SendDefault(s_guid,className, "inputLinks", "List<DynamicLink)>", s_Instance.inputLinks)
	self:SendDefault(s_guid,className, "outputEvents", "List<DynamicEvent)>", s_Instance.outputEvents)
	self:SendDefault(s_guid,className, "outputLinks", "List<DynamicLink)>", s_Instance.outputLinks)
end

function Type:InterludeOrderEntityData (p_class, p_guid)
	local s_Instance = InterludeOrderEntityData(p_class) 
 	local className = "InterludeOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouch", "bool", s_Instance.crouch)
	self:SendDefault(s_guid,className, "isCutscene", "bool", s_Instance.isCutscene)
end

function Type:InterruptFlow (p_class, p_guid)
	local s_Instance = InterruptFlow(p_class) 
 	local className = "InterruptFlow"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "interruptEnum", "UIInterruptID", s_Instance.interruptEnum)
	self:SendDefault(s_guid,className, "interruptFlow", "CtrRef", s_Instance.interruptFlow)
end

function Type:IntHubEntityData (p_class, p_guid)
	local s_Instance = IntHubEntityData(p_class) 
 	local className = "IntHubEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputCount", "int", s_Instance.inputCount)
	self:SendDefault(s_guid,className, "inputSelect", "int", s_Instance.inputSelect)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:IntOption (p_class, p_guid)
	local s_Instance = IntOption(p_class) 
 	local className = "IntOption"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:IntPropertyTrackData (p_class, p_guid)
	local s_Instance = IntPropertyTrackData(p_class) 
 	local className = "IntPropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<int)>", s_Instance.values)
end

function Type:IntRecordingData (p_class, p_guid)
	local s_Instance = IntRecordingData(p_class) 
 	local className = "IntRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<int)>", s_Instance.values)
end

function Type:IntUnlockValuePair (p_class, p_guid)
	local s_Instance = IntUnlockValuePair(p_class) 
 	local className = "IntUnlockValuePair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "int", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "unlockedValue", "int", s_Instance.unlockedValue)
end

function Type:IrReverbControllerNodeData (p_class, p_guid)
	local s_Instance = IrReverbControllerNodeData(p_class) 
 	local className = "IrReverbControllerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude0", "AudioGraphNodePort", s_Instance.amplitude0)
	self:SendDefault(s_guid,className, "amplitude1", "AudioGraphNodePort", s_Instance.amplitude1)
	self:SendDefault(s_guid,className, "reverb0", "AudioGraphNodePort", s_Instance.reverb0)
	self:SendDefault(s_guid,className, "reverb1", "AudioGraphNodePort", s_Instance.reverb1)
end

function Type:IrReverbEntityData (p_class, p_guid)
	local s_Instance = IrReverbEntityData(p_class) 
 	local className = "IrReverbEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fadeCurve", "FadeCurveType", s_Instance.fadeCurve)
	self:SendDefault(s_guid,className, "gain", "float", s_Instance.gain)
	self:SendDefault(s_guid,className, "impulseResponse", "CtrRef", s_Instance.impulseResponse)
	self:SendDefault(s_guid,className, "volume", "float", s_Instance.volume)
end

function Type:IrReverbNodeData (p_class, p_guid)
	local s_Instance = IrReverbNodeData(p_class) 
 	local className = "IrReverbNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude0", "AudioGraphNodePort", s_Instance.amplitude0)
	self:SendDefault(s_guid,className, "amplitude1", "AudioGraphNodePort", s_Instance.amplitude1)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "maxReverbLength", "float", s_Instance.maxReverbLength)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "reverb0", "AudioGraphNodePort", s_Instance.reverb0)
	self:SendDefault(s_guid,className, "reverb1", "AudioGraphNodePort", s_Instance.reverb1)
	self:SendDefault(s_guid,className, "reverbPlugin", "SoundGraphPluginRef", s_Instance.reverbPlugin)
end

function Type:JammingComponentData (p_class, p_guid)
	local s_Instance = JammingComponentData(p_class) 
 	local className = "JammingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "airMissileJamming", "AirMissileJammingData", s_Instance.airMissileJamming)
	self:SendDefault(s_guid,className, "smokeJamming", "SmokeJammingData", s_Instance.smokeJamming)
end

function Type:JetEngineConfigData (p_class, p_guid)
	local s_Instance = JetEngineConfigData(p_class) 
 	local className = "JetEngineConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angleInputPitchMultiplier", "float", s_Instance.angleInputPitchMultiplier)
	self:SendDefault(s_guid,className, "angleInputYMultiplier", "float", s_Instance.angleInputYMultiplier)
	self:SendDefault(s_guid,className, "directionVectorIndex", "uint", s_Instance.directionVectorIndex)
	self:SendDefault(s_guid,className, "forceMagnitudeMultiplier", "float", s_Instance.forceMagnitudeMultiplier)
	self:SendDefault(s_guid,className, "isTurnable", "bool", s_Instance.isTurnable)
	self:SendDefault(s_guid,className, "isWaterJetEngine", "bool", s_Instance.isWaterJetEngine)
	self:SendDefault(s_guid,className, "maxVelocity", "float", s_Instance.maxVelocity)
	self:SendDefault(s_guid,className, "powerFadeOutRange", "Vec2", s_Instance.powerFadeOutRange)
end

function Type:JoypadNodeData (p_class, p_guid)
	local s_Instance = JoypadNodeData(p_class) 
 	local className = "JoypadNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aButton", "AudioGraphNodePort", s_Instance.aButton)
	self:SendDefault(s_guid,className, "bButton", "AudioGraphNodePort", s_Instance.bButton)
	self:SendDefault(s_guid,className, "leftAnalogX", "AudioGraphNodePort", s_Instance.leftAnalogX)
	self:SendDefault(s_guid,className, "leftAnalogY", "AudioGraphNodePort", s_Instance.leftAnalogY)
	self:SendDefault(s_guid,className, "rightAnalogX", "AudioGraphNodePort", s_Instance.rightAnalogX)
	self:SendDefault(s_guid,className, "rightAnalogY", "AudioGraphNodePort", s_Instance.rightAnalogY)
end

function Type:JumpNode (p_class, p_guid)
	local s_Instance = JumpNode(p_class) 
 	local className = "JumpNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "targetNode", "CtrRef", s_Instance.targetNode)
	self:SendDefault(s_guid,className, "targetPort", "CtrRef", s_Instance.targetPort)
end

function Type:JumpStateData (p_class, p_guid)
	local s_Instance = JumpStateData(p_class) 
 	local className = "JumpStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "jumpEffectSize", "float", s_Instance.jumpEffectSize)
	self:SendDefault(s_guid,className, "jumpHeight", "float", s_Instance.jumpHeight)
end

function Type:KeyboardInputActionData (p_class, p_guid)
	local s_Instance = KeyboardInputActionData(p_class) 
 	local className = "KeyboardInputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "key", "InputDeviceKeys", s_Instance.key)
end

function Type:KillAllEntityData (p_class, p_guid)
	local s_Instance = KillAllEntityData(p_class) 
 	local className = "KillAllEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "killAllHumanSoldiers", "bool", s_Instance.killAllHumanSoldiers)
end

function Type:KillCounterEntityData (p_class, p_guid)
	local s_Instance = KillCounterEntityData(p_class) 
 	local className = "KillCounterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enemyWeight", "float", s_Instance.enemyWeight)
	self:SendDefault(s_guid,className, "ignoreAI", "bool", s_Instance.ignoreAI)
	self:SendDefault(s_guid,className, "maxKillCount", "uint", s_Instance.maxKillCount)
	self:SendDefault(s_guid,className, "neutralTeamWeight", "KillWeight", s_Instance.neutralTeamWeight)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "teamKillWeight", "KillWeight", s_Instance.teamKillWeight)
end

function Type:KillEvent (p_class, p_guid)
	local s_Instance = KillEvent(p_class) 
 	local className = "KillEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
	self:SendDefault(s_guid,className, "victimId", "ulong", s_Instance.victimId)
	self:SendDefault(s_guid,className, "victimPosition", "Vec3", s_Instance.victimPosition)
	self:SendDefault(s_guid,className, "weapon", "string", s_Instance.weapon)
end

function Type:KillWeight (p_class, p_guid)
	local s_Instance = KillWeight(p_class) 
 	local className = "KillWeight"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coolDownTime", "float", s_Instance.coolDownTime)
	self:SendDefault(s_guid,className, "highIntenseWeight", "float", s_Instance.highIntenseWeight)
	self:SendDefault(s_guid,className, "lowIntenseWeight", "float", s_Instance.lowIntenseWeight)
end

function Type:KitPickupEntityData (p_class, p_guid)
	local s_Instance = KitPickupEntityData(p_class) 
 	local className = "KitPickupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "keepAdditionalWeapons", "bool", s_Instance.keepAdditionalWeapons)
	self:SendDefault(s_guid,className, "keepAmmoState", "bool", s_Instance.keepAmmoState)
end

function Type:KitState (p_class, p_guid)
	local s_Instance = KitState(p_class) 
 	local className = "KitState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "kit", "string", s_Instance.kit)
end

function Type:KitStateEvent (p_class, p_guid)
	local s_Instance = KitStateEvent(p_class) 
 	local className = "KitStateEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "kit", "string", s_Instance.kit)
	self:SendDefault(s_guid,className, "secondsAsKit", "float", s_Instance.secondsAsKit)
end

function Type:LandingFlapData (p_class, p_guid)
	local s_Instance = LandingFlapData(p_class) 
 	local className = "LandingFlapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activationHeight", "float", s_Instance.activationHeight)
	self:SendDefault(s_guid,className, "activationVelocity", "float", s_Instance.activationVelocity)
	self:SendDefault(s_guid,className, "heightTolerance", "float", s_Instance.heightTolerance)
	self:SendDefault(s_guid,className, "velocityTolerance", "float", s_Instance.velocityTolerance)
end

function Type:LandingGearConditionData (p_class, p_guid)
	local s_Instance = LandingGearConditionData(p_class) 
 	local className = "LandingGearConditionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "height", "float", s_Instance.height)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:LandingGearLogicData (p_class, p_guid)
	local s_Instance = LandingGearLogicData(p_class) 
 	local className = "LandingGearLogicData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deployCondition", "LandingGearConditionData", s_Instance.deployCondition)
	self:SendDefault(s_guid,className, "retractCondition", "LandingGearConditionData", s_Instance.retractCondition)
end

function Type:LaserDesignatorData (p_class, p_guid)
	local s_Instance = LaserDesignatorData(p_class) 
 	local className = "LaserDesignatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bomberSound", "CtrRef", s_Instance.bomberSound)
	self:SendDefault(s_guid,className, "bomberTime", "float", s_Instance.bomberTime)
	self:SendDefault(s_guid,className, "bombWarnTime", "float", s_Instance.bombWarnTime)
	self:SendDefault(s_guid,className, "postLockTime", "float", s_Instance.postLockTime)
end

function Type:LaserPainterData (p_class, p_guid)
	local s_Instance = LaserPainterData(p_class) 
 	local className = "LaserPainterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "timeObjectIsPainted", "float", s_Instance.timeObjectIsPainted)
end

function Type:LensFlareComponentData (p_class, p_guid)
	local s_Instance = LensFlareComponentData(p_class) 
 	local className = "LensFlareComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lensFlare", "CtrRef", s_Instance.lensFlare)
end

function Type:LensFlareElement (p_class, p_guid)
	local s_Instance = LensFlareElement(p_class) 
 	local className = "LensFlareElement"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alphaAngleCurve", "Vec4", s_Instance.alphaAngleCurve)
	self:SendDefault(s_guid,className, "alphaCamDistCurve", "Vec4", s_Instance.alphaCamDistCurve)
	self:SendDefault(s_guid,className, "alphaCamDistMax", "float", s_Instance.alphaCamDistMax)
	self:SendDefault(s_guid,className, "alphaOccluderCurve", "Vec4", s_Instance.alphaOccluderCurve)
	self:SendDefault(s_guid,className, "alphaScreenPosCurve", "Vec4", s_Instance.alphaScreenPosCurve)
	self:SendDefault(s_guid,className, "rayDistance", "float", s_Instance.rayDistance)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
	self:SendDefault(s_guid,className, "size", "Vec2", s_Instance.size)
	self:SendDefault(s_guid,className, "sizeAngleCurve", "Vec4", s_Instance.sizeAngleCurve)
	self:SendDefault(s_guid,className, "sizeCamDistCurve", "Vec4", s_Instance.sizeCamDistCurve)
	self:SendDefault(s_guid,className, "sizeCamDistMax", "float", s_Instance.sizeCamDistMax)
	self:SendDefault(s_guid,className, "sizeOccluderCurve", "Vec4", s_Instance.sizeOccluderCurve)
	self:SendDefault(s_guid,className, "sizeScreenPosCurve", "Vec4", s_Instance.sizeScreenPosCurve)
end

function Type:LensFlareEntityData (p_class, p_guid)
	local s_Instance = LensFlareEntityData(p_class) 
 	local className = "LensFlareEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugDrawOccluder", "bool", s_Instance.debugDrawOccluder)
	self:SendDefault(s_guid,className, "elements", "List<LensFlareElement)>", s_Instance.elements)
	self:SendDefault(s_guid,className, "halfRes", "bool", s_Instance.halfRes)
	self:SendDefault(s_guid,className, "occluderSize", "float", s_Instance.occluderSize)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:LensScopeComponentData (p_class, p_guid)
	local s_Instance = LensScopeComponentData(p_class) 
 	local className = "LensScopeComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurCenter", "Vec2", s_Instance.blurCenter)
	self:SendDefault(s_guid,className, "blurScale", "float", s_Instance.blurScale)
	self:SendDefault(s_guid,className, "chromaticAberrationColor1", "Vec3", s_Instance.chromaticAberrationColor1)
	self:SendDefault(s_guid,className, "chromaticAberrationColor2", "Vec3", s_Instance.chromaticAberrationColor2)
	self:SendDefault(s_guid,className, "chromaticAberrationDisplacement1", "Vec2", s_Instance.chromaticAberrationDisplacement1)
	self:SendDefault(s_guid,className, "chromaticAberrationDisplacement2", "Vec2", s_Instance.chromaticAberrationDisplacement2)
	self:SendDefault(s_guid,className, "chromaticAberrationStrengths", "Vec2", s_Instance.chromaticAberrationStrengths)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "radialBlendDistanceCoefficients", "Vec2", s_Instance.radialBlendDistanceCoefficients)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:LevelAudioObstructionAsset (p_class, p_guid)
	local s_Instance = LevelAudioObstructionAsset(p_class) 
 	local className = "LevelAudioObstructionAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequencySlewRate", "float", s_Instance.frequencySlewRate)
	self:SendDefault(s_guid,className, "gainSlewRate", "float", s_Instance.gainSlewRate)
	self:SendDefault(s_guid,className, "materialMap", "List<AudioObstructionMaterialInfo)>", s_Instance.materialMap)
	self:SendDefault(s_guid,className, "maxRaycastDistanceSquared", "float", s_Instance.maxRaycastDistanceSquared)
end

function Type:LevelControlEntityData (p_class, p_guid)
	local s_Instance = LevelControlEntityData(p_class) 
 	local className = "LevelControlEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "levelToLoad", "string", s_Instance.levelToLoad)
	self:SendDefault(s_guid,className, "rollCredits", "bool", s_Instance.rollCredits)
end

function Type:LevelData (p_class, p_guid)
	local s_Instance = LevelData(p_class) 
 	local className = "LevelData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aerialHeightmapData", "string", s_Instance.aerialHeightmapData)
	self:SendDefault(s_guid,className, "aISystem", "CtrRef", s_Instance.aISystem)
	self:SendDefault(s_guid,className, "animatedSkeletonDatabase", "CtrRef", s_Instance.animatedSkeletonDatabase)
	self:SendDefault(s_guid,className, "antProjectAssets", "List<CtrRef)>", s_Instance.antProjectAssets)
	self:SendDefault(s_guid,className, "audioObstructionInfo", "CtrRef", s_Instance.audioObstructionInfo)
	self:SendDefault(s_guid,className, "cameraModes", "List<CtrRef)>", s_Instance.cameraModes)
	self:SendDefault(s_guid,className, "cameraTransitions", "List<CtrRef)>", s_Instance.cameraTransitions)
	self:SendDefault(s_guid,className, "defaultFOV", "float", s_Instance.defaultFOV)
	self:SendDefault(s_guid,className, "emitterExclusionVolumes", "List<CtrRef)>", s_Instance.emitterExclusionVolumes)
	self:SendDefault(s_guid,className, "emitterSystemAsset", "CtrRef", s_Instance.emitterSystemAsset)
	self:SendDefault(s_guid,className, "enlightenShaderDatabase", "CtrRef", s_Instance.enlightenShaderDatabase)
	self:SendDefault(s_guid,className, "faceAnimationsWaveMappings", "CtrRef", s_Instance.faceAnimationsWaveMappings)
	self:SendDefault(s_guid,className, "freeStreamingEnable", "bool", s_Instance.freeStreamingEnable)
	self:SendDefault(s_guid,className, "gameConfigurationName", "string", s_Instance.gameConfigurationName)
	self:SendDefault(s_guid,className, "hackForceBuild", "CtrRef", s_Instance.hackForceBuild)
	self:SendDefault(s_guid,className, "hugeBroadPhase", "bool", s_Instance.hugeBroadPhase)
	self:SendDefault(s_guid,className, "infantryFOVMultiplier", "float", s_Instance.infantryFOVMultiplier)
	self:SendDefault(s_guid,className, "levelDescription", "fb.LevelDescription)", s_Instance.levelDescription)
	self:SendDefault(s_guid,className, "levelReference", "CtrRef", s_Instance.levelReference)
	self:SendDefault(s_guid,className, "maxEntityBusNetworkCount", "uint", s_Instance.maxEntityBusNetworkCount)
	self:SendDefault(s_guid,className, "maxVehicleHeight", "float", s_Instance.maxVehicleHeight)
	self:SendDefault(s_guid,className, "pathfindingBlobInfo", "PathfindingBlob", s_Instance.pathfindingBlobInfo)
	self:SendDefault(s_guid,className, "soundStates", "CtrRef", s_Instance.soundStates)
	self:SendDefault(s_guid,className, "voiceOverLogic", "List<CtrRef)>", s_Instance.voiceOverLogic)
	self:SendDefault(s_guid,className, "voiceOverSystem", "CtrRef", s_Instance.voiceOverSystem)
	self:SendDefault(s_guid,className, "worldSizeXZ", "float", s_Instance.worldSizeXZ)
end

function Type:LevelDescription (p_class, p_guid)
	local s_Instance = LevelDescription(p_class) 
 	local className = "LevelDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "components", "List<CtrRef)>", s_Instance.components)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "isCoop", "bool", s_Instance.isCoop)
	self:SendDefault(s_guid,className, "isMenu", "bool", s_Instance.isMenu)
	self:SendDefault(s_guid,className, "isMultiplayer", "bool", s_Instance.isMultiplayer)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:LevelDescriptionAsset (p_class, p_guid)
	local s_Instance = LevelDescriptionAsset(p_class) 
 	local className = "LevelDescriptionAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "categories", "List<LevelDescriptionInclusionCategory)>", s_Instance.categories)
	self:SendDefault(s_guid,className, "description", "LevelDescription", s_Instance.description)
	self:SendDefault(s_guid,className, "levelName", "string", s_Instance.levelName)
	self:SendDefault(s_guid,className, "startPoints", "List<string)>", s_Instance.startPoints)
end

function Type:LevelDescriptionInclusionCategory (p_class, p_guid)
	local s_Instance = LevelDescriptionInclusionCategory(p_class) 
 	local className = "LevelDescriptionInclusionCategory"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "mode", "List<string)>", s_Instance.mode)
end

function Type:LevelReportingAsset (p_class, p_guid)
	local s_Instance = LevelReportingAsset(p_class) 
 	local className = "LevelReportingAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "builtLevels", "List<CtrRef)>", s_Instance.builtLevels)
end

function Type:LevelSaveData (p_class, p_guid)
	local s_Instance = LevelSaveData(p_class) 
 	local className = "LevelSaveData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "saveNames", "List<string)>", s_Instance.saveNames)
	self:SendDefault(s_guid,className, "saveSize", "uint", s_Instance.saveSize)
end

function Type:LevelSetup (p_class, p_guid)
	local s_Instance = LevelSetup(p_class) 
 	local className = "LevelSetup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "difficultyIndex", "uint", s_Instance.difficultyIndex)
	self:SendDefault(s_guid,className, "forceReloadResources", "bool", s_Instance.forceReloadResources)
	self:SendDefault(s_guid,className, "inclusionOptions", "List<LevelSetupOption)>", s_Instance.inclusionOptions)
	self:SendDefault(s_guid,className, "isSaveGame", "bool", s_Instance.isSaveGame)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "subLevelNames", "List<string)>", s_Instance.subLevelNames)
	self:SendDefault(s_guid,className, "subLevelStates", "List<int)>", s_Instance.subLevelStates)
end

function Type:LevelSetupOption (p_class, p_guid)
	local s_Instance = LevelSetupOption(p_class) 
 	local className = "LevelSetupOption"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criterion", "string", s_Instance.criterion)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:LfoNodeData (p_class, p_guid)
	local s_Instance = LfoNodeData(p_class) 
 	local className = "LfoNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "hz", "AudioGraphNodePort", s_Instance.hz)
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "startAtRandomValue", "bool", s_Instance.startAtRandomValue)
end

function Type:LicenseConfiguration (p_class, p_guid)
	local s_Instance = LicenseConfiguration(p_class) 
 	local className = "LicenseConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "licenses", "List<LicenseInfo)>", s_Instance.licenses)
end

function Type:LicenseInfo (p_class, p_guid)
	local s_Instance = LicenseInfo(p_class) 
 	local className = "LicenseInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowStaging", "bool", s_Instance.allowStaging)
	self:SendDefault(s_guid,className, "clientOnly", "bool", s_Instance.clientOnly)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "stagingPlatform", "GamePlatform", s_Instance.stagingPlatform)
end

function Type:LifeCounterEntityData (p_class, p_guid)
	local s_Instance = LifeCounterEntityData(p_class) 
 	local className = "LifeCounterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attacker", "bool", s_Instance.attacker)
	self:SendDefault(s_guid,className, "baseCount", "int", s_Instance.baseCount)
	self:SendDefault(s_guid,className, "defensiveKillRadius", "float", s_Instance.defensiveKillRadius)
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "fallbackTime", "float", s_Instance.fallbackTime)
	self:SendDefault(s_guid,className, "fightHarderMessageSid", "string", s_Instance.fightHarderMessageSid)
	self:SendDefault(s_guid,className, "fightHarderTreshold", "float", s_Instance.fightHarderTreshold)
	self:SendDefault(s_guid,className, "lifeTresholdValues", "List<int)>", s_Instance.lifeTresholdValues)
	self:SendDefault(s_guid,className, "reinforceMessageSid", "string", s_Instance.reinforceMessageSid)
	self:SendDefault(s_guid,className, "reinforceTable", "List<float)>", s_Instance.reinforceTable)
	self:SendDefault(s_guid,className, "reinforceThreshold", "int", s_Instance.reinforceThreshold)
	self:SendDefault(s_guid,className, "setBestSquadSpawner", "bool", s_Instance.setBestSquadSpawner)
	self:SendDefault(s_guid,className, "simpleReinforce", "bool", s_Instance.simpleReinforce)
	self:SendDefault(s_guid,className, "startingLifeCount", "int", s_Instance.startingLifeCount)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "uiShowCountLowerThreshold", "int", s_Instance.uiShowCountLowerThreshold)
	self:SendDefault(s_guid,className, "uiShowCountUpperThreshold", "int", s_Instance.uiShowCountUpperThreshold)
end

function Type:LightComponentData (p_class, p_guid)
	local s_Instance = LightComponentData(p_class) 
 	local className = "LightComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "light", "CtrRef", s_Instance.light)
end

function Type:LightProbeVolumeData (p_class, p_guid)
	local s_Instance = LightProbeVolumeData(p_class) 
 	local className = "LightProbeVolumeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blendDistance", "float", s_Instance.blendDistance)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
	self:SendDefault(s_guid,className, "xres", "uint", s_Instance.xres)
	self:SendDefault(s_guid,className, "yres", "uint", s_Instance.yres)
	self:SendDefault(s_guid,className, "zres", "uint", s_Instance.zres)
end

function Type:LimiterNodeData (p_class, p_guid)
	local s_Instance = LimiterNodeData(p_class) 
 	local className = "LimiterNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "channelMode", "LimiterChannelMode", s_Instance.channelMode)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "releaseTime", "AudioGraphNodePort", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "threshold", "AudioGraphNodePort", s_Instance.threshold)
end

function Type:LinearMovingBodyData (p_class, p_guid)
	local s_Instance = LinearMovingBodyData(p_class) 
 	local className = "LinearMovingBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "axis", "Vec3", s_Instance.axis)
	self:SendDefault(s_guid,className, "end", "EndPointData", s_Instance.endValue)
	self:SendDefault(s_guid,className, "start", "EndPointData", s_Instance.start)
end

function Type:LinearTransformNodeData (p_class, p_guid)
	local s_Instance = LinearTransformNodeData(p_class) 
 	local className = "LinearTransformNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "k", "AudioGraphNodePort", s_Instance.k)
	self:SendDefault(s_guid,className, "m", "AudioGraphNodePort", s_Instance.m)
	self:SendDefault(s_guid,className, "x", "AudioGraphNodePort", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
end

function Type:LinearTransformRecordingData (p_class, p_guid)
	local s_Instance = LinearTransformRecordingData(p_class) 
 	local className = "LinearTransformRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<LinearTransform)>", s_Instance.values)
end

function Type:LinkConnection (p_class, p_guid)
	local s_Instance = LinkConnection(p_class) 
 	local className = "LinkConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "sourceFieldId", "int", s_Instance.sourceFieldId)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
	self:SendDefault(s_guid,className, "targetFieldId", "int", s_Instance.targetFieldId)
end

function Type:LocalForceData (p_class, p_guid)
	local s_Instance = LocalForceData(p_class) 
 	local className = "LocalForceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "localForce", "Vec3", s_Instance.localForce)
end

function Type:LocalizationAsset (p_class, p_guid)
	local s_Instance = LocalizationAsset(p_class) 
 	local className = "LocalizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "localizedTexts", "List<CtrRef)>", s_Instance.localizedTexts)
end

function Type:LocalLightEntityData (p_class, p_guid)
	local s_Instance = LocalLightEntityData(p_class) 
 	local className = "LocalLightEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attenuationOffset", "float", s_Instance.attenuationOffset)
	self:SendDefault(s_guid,className, "color", "Vec3", s_Instance.color)
	self:SendDefault(s_guid,className, "enlightenColorMode", "fb.EnlightenColorMode)", s_Instance.enlightenColorMode)
	self:SendDefault(s_guid,className, "enlightenColorScale", "Vec3", s_Instance.enlightenColorScale)
	self:SendDefault(s_guid,className, "enlightenEnable", "bool", s_Instance.enlightenEnable)
	self:SendDefault(s_guid,className, "intensity", "float", s_Instance.intensity)
	self:SendDefault(s_guid,className, "particleColorScale", "Vec3", s_Instance.particleColorScale)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "specularEnable", "bool", s_Instance.specularEnable)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:LocatorComponentData (p_class, p_guid)
	local s_Instance = LocatorComponentData(p_class) 
 	local className = "LocatorComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:LocatorEntityData (p_class, p_guid)
	local s_Instance = LocatorEntityData(p_class) 
 	local className = "LocatorEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:LockedSettingConfig (p_class, p_guid)
	local s_Instance = LockedSettingConfig(p_class) 
 	local className = "LockedSettingConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
	self:SendDefault(s_guid,className, "value", "uint", s_Instance.value)
end

function Type:LockingControllerData (p_class, p_guid)
	local s_Instance = LockingControllerData(p_class) 
 	local className = "LockingControllerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "acceptanceAngle", "float", s_Instance.acceptanceAngle)
	self:SendDefault(s_guid,className, "angleConstant", "float", s_Instance.angleConstant)
	self:SendDefault(s_guid,className, "distanceConstant", "float", s_Instance.distanceConstant)
	self:SendDefault(s_guid,className, "holdStillThreshold", "float", s_Instance.holdStillThreshold)
	self:SendDefault(s_guid,className, "ignoreHeigthLockDistance", "bool", s_Instance.ignoreHeigthLockDistance)
	self:SendDefault(s_guid,className, "lockOnEmptyVehicles", "bool", s_Instance.lockOnEmptyVehicles)
	self:SendDefault(s_guid,className, "lockOnVisibleTargetsOnly", "bool", s_Instance.lockOnVisibleTargetsOnly)
	self:SendDefault(s_guid,className, "lockOnWorldSpacePos", "bool", s_Instance.lockOnWorldSpacePos)
	self:SendDefault(s_guid,className, "lockTime", "float", s_Instance.lockTime)
	self:SendDefault(s_guid,className, "minimumLockTime", "float", s_Instance.minimumLockTime)
	self:SendDefault(s_guid,className, "positionOnly", "bool", s_Instance.positionOnly)
	self:SendDefault(s_guid,className, "rayLength", "float", s_Instance.rayLength)
	self:SendDefault(s_guid,className, "releaseOnNewTargetTime", "float", s_Instance.releaseOnNewTargetTime)
	self:SendDefault(s_guid,className, "releaseTime", "float", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "sampleRate", "float", s_Instance.sampleRate)
	self:SendDefault(s_guid,className, "sensitivity", "float", s_Instance.sensitivity)
	self:SendDefault(s_guid,className, "zoomLevelLock", "List<ZoomLevelLockData)>", s_Instance.zoomLevelLock)
end

function Type:LockingScoringHandlerData (p_class, p_guid)
	local s_Instance = LockingScoringHandlerData(p_class) 
 	local className = "LockingScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hotVehicleTimeout", "float", s_Instance.hotVehicleTimeout)
end

function Type:LockingWeaponData (p_class, p_guid)
	local s_Instance = LockingWeaponData(p_class) 
 	local className = "LockingWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fireOnlyWhenLockedOn", "bool", s_Instance.fireOnlyWhenLockedOn)
	self:SendDefault(s_guid,className, "isGuided", "bool", s_Instance.isGuided)
	self:SendDefault(s_guid,className, "isGuidedWhenZoomed", "bool", s_Instance.isGuidedWhenZoomed)
	self:SendDefault(s_guid,className, "isHoming", "bool", s_Instance.isHoming)
	self:SendDefault(s_guid,className, "lockingController", "CtrRef", s_Instance.lockingController)
	self:SendDefault(s_guid,className, "secondaryLockingController", "CtrRef", s_Instance.secondaryLockingController)
	self:SendDefault(s_guid,className, "warnLock", "WarnTarget", s_Instance.warnLock)
end

function Type:LodBinding (p_class, p_guid)
	local s_Instance = LodBinding(p_class) 
 	local className = "LodBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "disableControllerUpdate", "AntRef", s_Instance.disableControllerUpdate)
	self:SendDefault(s_guid,className, "disablePoseUpdate", "AntRef", s_Instance.disablePoseUpdate)
	self:SendDefault(s_guid,className, "distanceFromCamera", "AntRef", s_Instance.distanceFromCamera)
end

function Type:LoggingEntityData (p_class, p_guid)
	local s_Instance = LoggingEntityData(p_class) 
 	local className = "LoggingEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolValue", "bool", s_Instance.boolValue)
	self:SendDefault(s_guid,className, "floatValue", "float", s_Instance.floatValue)
	self:SendDefault(s_guid,className, "intValue", "int", s_Instance.intValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "strings", "List<string)>", s_Instance.strings)
	self:SendDefault(s_guid,className, "transformValue", "LinearTransform", s_Instance.transformValue)
	self:SendDefault(s_guid,className, "vec2Value", "Vec2", s_Instance.vec2Value)
	self:SendDefault(s_guid,className, "vec3Value", "Vec3", s_Instance.vec3Value)
end

function Type:LogicalExpressionEntry (p_class, p_guid)
	local s_Instance = LogicalExpressionEntry(p_class) 
 	local className = "LogicalExpressionEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
end

function Type:LogicalExpressionNodeData (p_class, p_guid)
	local s_Instance = LogicalExpressionNodeData(p_class) 
 	local className = "LogicalExpressionNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "operator", "LogicalExpressionOperator", s_Instance.operator)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
end

function Type:LogicReferenceObjectData (p_class, p_guid)
	local s_Instance = LogicReferenceObjectData(p_class) 
 	local className = "LogicReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "subRealm", "fb.SubRealm)", s_Instance.subRealm)
end

function Type:LogicVisualEnvironmentEntityData (p_class, p_guid)
	local s_Instance = LogicVisualEnvironmentEntityData(p_class) 
 	local className = "LogicVisualEnvironmentEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "visibility", "float", s_Instance.visibility)
	self:SendDefault(s_guid,className, "visualEnvironment", "CtrRef", s_Instance.visualEnvironment)
end

function Type:LookAtEntityData (p_class, p_guid)
	local s_Instance = LookAtEntityData(p_class) 
 	local className = "LookAtEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
	self:SendDefault(s_guid,className, "useStaticDirection", "bool", s_Instance.useStaticDirection)
end

function Type:LookAtTriggerEntityData (p_class, p_guid)
	local s_Instance = LookAtTriggerEntityData(p_class) 
 	local className = "LookAtTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkOcclusion", "bool", s_Instance.checkOcclusion)
	self:SendDefault(s_guid,className, "fOV", "float", s_Instance.fOV)
	self:SendDefault(s_guid,className, "maxDistanceToObject", "float", s_Instance.maxDistanceToObject)
	self:SendDefault(s_guid,className, "minDistanceToObject", "float", s_Instance.minDistanceToObject)
	self:SendDefault(s_guid,className, "startTriggerLookingAt", "bool", s_Instance.startTriggerLookingAt)
	self:SendDefault(s_guid,className, "weapon", "CtrRef", s_Instance.weapon)
	self:SendDefault(s_guid,className, "zoomLevel", "uint", s_Instance.zoomLevel)
end

function Type:LookConstraintsData (p_class, p_guid)
	local s_Instance = LookConstraintsData(p_class) 
 	local className = "LookConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxLookPitch", "float", s_Instance.maxLookPitch)
	self:SendDefault(s_guid,className, "maxLookYaw", "float", s_Instance.maxLookYaw)
	self:SendDefault(s_guid,className, "minLookPitch", "float", s_Instance.minLookPitch)
	self:SendDefault(s_guid,className, "minLookYaw", "float", s_Instance.minLookYaw)
end

function Type:LoosePartPhysicsData (p_class, p_guid)
	local s_Instance = LoosePartPhysicsData(p_class) 
 	local className = "LoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fakePhysics", "CtrRef", s_Instance.fakePhysics)
end

function Type:LowPassButterworthNodeData (p_class, p_guid)
	local s_Instance = LowPassButterworthNodeData(p_class) 
 	local className = "LowPassButterworthNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "order", "AudioGraphNodePort", s_Instance.order)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:LowPassFir64NodeData (p_class, p_guid)
	local s_Instance = LowPassFir64NodeData(p_class) 
 	local className = "LowPassFir64NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:LowPassIir2NodeData (p_class, p_guid)
	local s_Instance = LowPassIir2NodeData(p_class) 
 	local className = "LowPassIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:LowShelfIir2NodeData (p_class, p_guid)
	local s_Instance = LowShelfIir2NodeData(p_class) 
 	local className = "LowShelfIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:ManualDataAsset (p_class, p_guid)
	local s_Instance = ManualDataAsset(p_class) 
 	local className = "ManualDataAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<ManualDataEntry)>", s_Instance.entries)
end

function Type:ManualDataEntry (p_class, p_guid)
	local s_Instance = ManualDataEntry(p_class) 
 	local className = "ManualDataEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "language", "LanguageFormat", s_Instance.language)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "textures", "List<CtrRef)>", s_Instance.textures)
end

function Type:MapMarkerEntityData (p_class, p_guid)
	local s_Instance = MapMarkerEntityData(p_class) 
 	local className = "MapMarkerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseTransform", "Vec3", s_Instance.baseTransform)
	self:SendDefault(s_guid,className, "blinkTime", "float", s_Instance.blinkTime)
	self:SendDefault(s_guid,className, "flagControlMarker", "bool", s_Instance.flagControlMarker)
	self:SendDefault(s_guid,className, "focusPointRadius", "float", s_Instance.focusPointRadius)
	self:SendDefault(s_guid,className, "hideRadius", "float", s_Instance.hideRadius)
	self:SendDefault(s_guid,className, "hudIcon", "UIHudIcon", s_Instance.hudIcon)
	self:SendDefault(s_guid,className, "instantFlagReturnRadius", "float", s_Instance.instantFlagReturnRadius)
	self:SendDefault(s_guid,className, "isFocusPoint", "bool", s_Instance.isFocusPoint)
	self:SendDefault(s_guid,className, "isVisible", "bool", s_Instance.isVisible)
	self:SendDefault(s_guid,className, "markerType", "MapMarkerType", s_Instance.markerType)
	self:SendDefault(s_guid,className, "nrOfEntries", "int", s_Instance.nrOfEntries)
	self:SendDefault(s_guid,className, "nrOfPassengers", "int", s_Instance.nrOfPassengers)
	self:SendDefault(s_guid,className, "onlyShowSnapped", "bool", s_Instance.onlyShowSnapped)
	self:SendDefault(s_guid,className, "ownerTeam", "TeamId", s_Instance.ownerTeam)
	self:SendDefault(s_guid,className, "progress", "float", s_Instance.progress)
	self:SendDefault(s_guid,className, "progressMinTime", "float", s_Instance.progressMinTime)
	self:SendDefault(s_guid,className, "progressPlayerSpeedUpPercentage", "float", s_Instance.progressPlayerSpeedUpPercentage)
	self:SendDefault(s_guid,className, "progressTime", "float", s_Instance.progressTime)
	self:SendDefault(s_guid,className, "progressTime1Player", "float", s_Instance.progressTime1Player)
	self:SendDefault(s_guid,className, "showAirTargetBox", "bool", s_Instance.showAirTargetBox)
	self:SendDefault(s_guid,className, "showProgress", "bool", s_Instance.showProgress)
	self:SendDefault(s_guid,className, "showRadius", "float", s_Instance.showRadius)
	self:SendDefault(s_guid,className, "sid", "string", s_Instance.sid)
	self:SendDefault(s_guid,className, "snap", "bool", s_Instance.snap)
	self:SendDefault(s_guid,className, "trackedPlayersInRange", "uint", s_Instance.trackedPlayersInRange)
	self:SendDefault(s_guid,className, "trackingPlayerRange", "float", s_Instance.trackingPlayerRange)
	self:SendDefault(s_guid,className, "useMarkerTransform", "bool", s_Instance.useMarkerTransform)
	self:SendDefault(s_guid,className, "verticalOffset", "float", s_Instance.verticalOffset)
	self:SendDefault(s_guid,className, "visibleForTeam", "TeamId", s_Instance.visibleForTeam)
end

function Type:MapRotataionLookup (p_class, p_guid)
	local s_Instance = MapRotataionLookup(p_class) 
 	local className = "MapRotataionLookup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gameMode", "string", s_Instance.gameMode)
end

function Type:MapRotationConfig (p_class, p_guid)
	local s_Instance = MapRotationConfig(p_class) 
 	local className = "MapRotationConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "descSid", "string", s_Instance.descSid)
	self:SendDefault(s_guid,className, "gameMode", "string", s_Instance.gameMode)
	self:SendDefault(s_guid,className, "mapRotationId", "int", s_Instance.mapRotationId)
	self:SendDefault(s_guid,className, "mod", "string", s_Instance.mod)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "randomizeStartingMap", "bool", s_Instance.randomizeStartingMap)
end

function Type:MasterSkeletonAsset (p_class, p_guid)
	local s_Instance = MasterSkeletonAsset(p_class) 
 	local className = "MasterSkeletonAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "masterSkeleton", "CtrRef", s_Instance.masterSkeleton)
	self:SendDefault(s_guid,className, "subSkeletons", "List<SubSkeleton)>", s_Instance.subSkeletons)
end

function Type:MasterUnitNodeData (p_class, p_guid)
	local s_Instance = MasterUnitNodeData(p_class) 
 	local className = "MasterUnitNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "compAttack", "AudioGraphNodePort", s_Instance.compAttack)
	self:SendDefault(s_guid,className, "compRatio", "AudioGraphNodePort", s_Instance.compRatio)
	self:SendDefault(s_guid,className, "compRelease", "AudioGraphNodePort", s_Instance.compRelease)
	self:SendDefault(s_guid,className, "compThreshold", "AudioGraphNodePort", s_Instance.compThreshold)
	self:SendDefault(s_guid,className, "distClipLevel", "AudioGraphNodePort", s_Instance.distClipLevel)
	self:SendDefault(s_guid,className, "fadeTime", "AudioGraphNodePort", s_Instance.fadeTime)
	self:SendDefault(s_guid,className, "highPassFreq", "AudioGraphNodePort", s_Instance.highPassFreq)
	self:SendDefault(s_guid,className, "highShelfFreq", "AudioGraphNodePort", s_Instance.highShelfFreq)
	self:SendDefault(s_guid,className, "highShelfGain", "AudioGraphNodePort", s_Instance.highShelfGain)
	self:SendDefault(s_guid,className, "lowShelfFreq", "AudioGraphNodePort", s_Instance.lowShelfFreq)
	self:SendDefault(s_guid,className, "lowShelfGain", "AudioGraphNodePort", s_Instance.lowShelfGain)
	self:SendDefault(s_guid,className, "mainMixGain", "AudioGraphNodePort", s_Instance.mainMixGain)
	self:SendDefault(s_guid,className, "masterDialogGain", "AudioGraphNodePort", s_Instance.masterDialogGain)
	self:SendDefault(s_guid,className, "masterGain", "AudioGraphNodePort", s_Instance.masterGain)
	self:SendDefault(s_guid,className, "masterLfeGain", "AudioGraphNodePort", s_Instance.masterLfeGain)
	self:SendDefault(s_guid,className, "parallelDistortionGain", "AudioGraphNodePort", s_Instance.parallelDistortionGain)
	self:SendDefault(s_guid,className, "postEffectsGain", "AudioGraphNodePort", s_Instance.postEffectsGain)
	self:SendDefault(s_guid,className, "reverbGain", "AudioGraphNodePort", s_Instance.reverbGain)
	self:SendDefault(s_guid,className, "settings", "List<CtrRef)>", s_Instance.settings)
	self:SendDefault(s_guid,className, "settingsIndex", "AudioGraphNodePort", s_Instance.settingsIndex)
end

function Type:MasterUnitSettings (p_class, p_guid)
	local s_Instance = MasterUnitSettings(p_class) 
 	local className = "MasterUnitSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "compressor", "CtrRef", s_Instance.compressor)
	self:SendDefault(s_guid,className, "distortionClipLevel", "float", s_Instance.distortionClipLevel)
	self:SendDefault(s_guid,className, "equalizer", "CtrRef", s_Instance.equalizer)
	self:SendDefault(s_guid,className, "fadeTime", "float", s_Instance.fadeTime)
	self:SendDefault(s_guid,className, "mainMixVolume", "float", s_Instance.mainMixVolume)
	self:SendDefault(s_guid,className, "masterDialogGain", "float", s_Instance.masterDialogGain)
	self:SendDefault(s_guid,className, "masterLfeGain", "float", s_Instance.masterLfeGain)
	self:SendDefault(s_guid,className, "masterVolume", "float", s_Instance.masterVolume)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "parallelDistortionGain", "float", s_Instance.parallelDistortionGain)
	self:SendDefault(s_guid,className, "postEffectsGain", "float", s_Instance.postEffectsGain)
	self:SendDefault(s_guid,className, "reverbVolume", "float", s_Instance.reverbVolume)
end

function Type:MatchmakingCreateGameParameters (p_class, p_guid)
	local s_Instance = MatchmakingCreateGameParameters(p_class) 
 	local className = "MatchmakingCreateGameParameters"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attributes", "List<MatchmakingGameAttribute)>", s_Instance.attributes)
	self:SendDefault(s_guid,className, "gameTopology", "MatchmakingNetworkTopology", s_Instance.gameTopology)
	self:SendDefault(s_guid,className, "peerMode", "MatchmakingPeer2PeerMode", s_Instance.peerMode)
	self:SendDefault(s_guid,className, "queueCapacity", "uint", s_Instance.queueCapacity)
	self:SendDefault(s_guid,className, "settings", "MatchmakingGameSettings", s_Instance.settings)
	self:SendDefault(s_guid,className, "voipTopology", "MatchmakingNetworkTopology", s_Instance.voipTopology)
end

function Type:MatchmakingCriteria (p_class, p_guid)
	local s_Instance = MatchmakingCriteria(p_class) 
 	local className = "MatchmakingCriteria"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "genericRules", "List<MatchmakingGenericRule)>", s_Instance.genericRules)
	self:SendDefault(s_guid,className, "pingSiteRule", "MatchmakingPingSiteRule", s_Instance.pingSiteRule)
	self:SendDefault(s_guid,className, "rankedRule", "MatchmakingRankedRule", s_Instance.rankedRule)
	self:SendDefault(s_guid,className, "sizeRule", "MatchmakingSizeRule", s_Instance.sizeRule)
	self:SendDefault(s_guid,className, "uEDRules", "List<MatchmakingUserExtendedDataRule)>", s_Instance.uEDRules)
	self:SendDefault(s_guid,className, "virtualizedRule", "MatchmakingVirtualizedRule", s_Instance.virtualizedRule)
end

function Type:MatchmakingGameAttribute (p_class, p_guid)
	local s_Instance = MatchmakingGameAttribute(p_class) 
 	local className = "MatchmakingGameAttribute"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attribute", "string", s_Instance.attribute)
	self:SendDefault(s_guid,className, "override", "bool", s_Instance.override)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:MatchmakingGameSettings (p_class, p_guid)
	local s_Instance = MatchmakingGameSettings(p_class) 
 	local className = "MatchmakingGameSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "adminInvitesOnlyIgnoreEntryChecks", "bool", s_Instance.adminInvitesOnlyIgnoreEntryChecks)
	self:SendDefault(s_guid,className, "adminOnlyInvites", "bool", s_Instance.adminOnlyInvites)
	self:SendDefault(s_guid,className, "allowSameTeamId", "bool", s_Instance.allowSameTeamId)
	self:SendDefault(s_guid,className, "enablePersistedGameId", "bool", s_Instance.enablePersistedGameId)
	self:SendDefault(s_guid,className, "enforceSingleGroupJoin", "bool", s_Instance.enforceSingleGroupJoin)
	self:SendDefault(s_guid,className, "hostMigratable", "bool", s_Instance.hostMigratable)
	self:SendDefault(s_guid,className, "joinInProgressSupported", "bool", s_Instance.joinInProgressSupported)
	self:SendDefault(s_guid,className, "openToBrowsing", "bool", s_Instance.openToBrowsing)
	self:SendDefault(s_guid,className, "openToInvites", "bool", s_Instance.openToInvites)
	self:SendDefault(s_guid,className, "openToJoinByPlayer", "bool", s_Instance.openToJoinByPlayer)
	self:SendDefault(s_guid,className, "openToMatchmaking", "bool", s_Instance.openToMatchmaking)
	self:SendDefault(s_guid,className, "ranked", "bool", s_Instance.ranked)
end

function Type:MatchmakingGenericRule (p_class, p_guid)
	local s_Instance = MatchmakingGenericRule(p_class) 
 	local className = "MatchmakingGenericRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "desiredValues", "List<MatchmakingRuleString)>", s_Instance.desiredValues)
	self:SendDefault(s_guid,className, "ignoreIfDefault", "bool", s_Instance.ignoreIfDefault)
	self:SendDefault(s_guid,className, "mergeValues", "bool", s_Instance.mergeValues)
	self:SendDefault(s_guid,className, "minFitThresHold", "string", s_Instance.minFitThresHold)
	self:SendDefault(s_guid,className, "rule", "string", s_Instance.rule)
	self:SendDefault(s_guid,className, "setting", "string", s_Instance.setting)
	self:SendDefault(s_guid,className, "sortValues", "bool", s_Instance.sortValues)
end

function Type:MatchmakingPingSiteRule (p_class, p_guid)
	local s_Instance = MatchmakingPingSiteRule(p_class) 
 	local className = "MatchmakingPingSiteRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minFitThreshold", "string", s_Instance.minFitThreshold)
end

function Type:MatchmakingPlayerCapacityModifier (p_class, p_guid)
	local s_Instance = MatchmakingPlayerCapacityModifier(p_class) 
 	local className = "MatchmakingPlayerCapacityModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attribute", "string", s_Instance.attribute)
end

function Type:MatchmakingRankedRule (p_class, p_guid)
	local s_Instance = MatchmakingRankedRule(p_class) 
 	local className = "MatchmakingRankedRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minFitThreshold", "string", s_Instance.minFitThreshold)
end

function Type:MatchmakingRuleString (p_class, p_guid)
	local s_Instance = MatchmakingRuleString(p_class) 
 	local className = "MatchmakingRuleString"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "licenses", "List<string)>", s_Instance.licenses)
	self:SendDefault(s_guid,className, "platform", "MatchmakingPlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "useOnlyIfEmpty", "bool", s_Instance.useOnlyIfEmpty)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:MatchmakingSession (p_class, p_guid)
	local s_Instance = MatchmakingSession(p_class) 
 	local className = "MatchmakingSession"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "createGameParams", "MatchmakingCreateGameParameters", s_Instance.createGameParams)
	self:SendDefault(s_guid,className, "criteria", "MatchmakingCriteria", s_Instance.criteria)
	self:SendDefault(s_guid,className, "durationMs", "uint", s_Instance.durationMs)
	self:SendDefault(s_guid,className, "mode", "MatchmakingSessionMode", s_Instance.mode)
	self:SendDefault(s_guid,className, "modifiers", "List<CtrRef)>", s_Instance.modifiers)
	self:SendDefault(s_guid,className, "onNotFound", "CtrRef", s_Instance.onNotFound)
end

function Type:MatchmakingSizeConfiguration (p_class, p_guid)
	local s_Instance = MatchmakingSizeConfiguration(p_class) 
 	local className = "MatchmakingSizeConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "desiredPlayerCount", "uint", s_Instance.desiredPlayerCount)
	self:SendDefault(s_guid,className, "maxPlayerCapacity", "uint", s_Instance.maxPlayerCapacity)
	self:SendDefault(s_guid,className, "minFitThreshold", "string", s_Instance.minFitThreshold)
	self:SendDefault(s_guid,className, "minPlayerCount", "uint", s_Instance.minPlayerCount)
	self:SendDefault(s_guid,className, "platform", "MatchmakingPlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "settings", "List<string)>", s_Instance.settings)
end

function Type:MatchmakingSizeRule (p_class, p_guid)
	local s_Instance = MatchmakingSizeRule(p_class) 
 	local className = "MatchmakingSizeRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "configurations", "List<MatchmakingSizeConfiguration)>", s_Instance.configurations)
	self:SendDefault(s_guid,className, "setting", "string", s_Instance.setting)
end

function Type:MatchmakingUserExtendedDataRule (p_class, p_guid)
	local s_Instance = MatchmakingUserExtendedDataRule(p_class) 
 	local className = "MatchmakingUserExtendedDataRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minFitThresHold", "string", s_Instance.minFitThresHold)
	self:SendDefault(s_guid,className, "rule", "string", s_Instance.rule)
end

function Type:MatchmakingVirtualizedRule (p_class, p_guid)
	local s_Instance = MatchmakingVirtualizedRule(p_class) 
 	local className = "MatchmakingVirtualizedRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minFitThreshold", "string", s_Instance.minFitThreshold)
	self:SendDefault(s_guid,className, "virtualizationMode", "MatchmakingVirtualizationMode", s_Instance.virtualizationMode)
end

function Type:MaterialContainerAsset (p_class, p_guid)
	local s_Instance = MaterialContainerAsset(p_class) 
 	local className = "MaterialContainerAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "materialNames", "List<string)>", s_Instance.materialNames)
	self:SendDefault(s_guid,className, "materialPairs", "List<CtrRef)>", s_Instance.materialPairs)
end

function Type:MaterialContainerPair (p_class, p_guid)
	local s_Instance = MaterialContainerPair(p_class) 
 	local className = "MaterialContainerPair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flagsAndIndex", "uint", s_Instance.flagsAndIndex)
	self:SendDefault(s_guid,className, "physicsMaterialIndex", "sbyte", s_Instance.physicsMaterialIndex)
	self:SendDefault(s_guid,className, "physicsPropertyIndex", "sbyte", s_Instance.physicsPropertyIndex)
end

function Type:MaterialGridData (p_class, p_guid)
	local s_Instance = MaterialGridData(p_class) 
 	local className = "MaterialGridData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultMaterial", "CtrRef", s_Instance.defaultMaterial)
	self:SendDefault(s_guid,className, "defaultMaterialIndex", "uint", s_Instance.defaultMaterialIndex)
	self:SendDefault(s_guid,className, "interactionGrid", "List<MaterialInteractionGridRow)>", s_Instance.interactionGrid)
	self:SendDefault(s_guid,className, "materialIndexMap", "List<uint)>", s_Instance.materialIndexMap)
	self:SendDefault(s_guid,className, "materialPairs", "List<CtrRef)>", s_Instance.materialPairs)
	self:SendDefault(s_guid,className, "materialProperties", "List<MaterialRelationPropertyPair)>", s_Instance.materialProperties)
end

function Type:MaterialInteractionGridRow (p_class, p_guid)
	local s_Instance = MaterialInteractionGridRow(p_class) 
 	local className = "MaterialInteractionGridRow"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "items", "List<MaterialRelationPropertyPair)>", s_Instance.items)
end

function Type:MaterialPropertyEffectData (p_class, p_guid)
	local s_Instance = MaterialPropertyEffectData(p_class) 
 	local className = "MaterialPropertyEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impactEffects", "List<CtrRef)>", s_Instance.impactEffects)
end

function Type:MaterialPropertyHealthData (p_class, p_guid)
	local s_Instance = MaterialPropertyHealthData(p_class) 
 	local className = "MaterialPropertyHealthData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "health", "float", s_Instance.health)
end

function Type:MaterialPropertyImpulseData (p_class, p_guid)
	local s_Instance = MaterialPropertyImpulseData(p_class) 
 	local className = "MaterialPropertyImpulseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impulseAbsorptionMultiplier", "float", s_Instance.impulseAbsorptionMultiplier)
end

function Type:MaterialPropertyPhysicsData (p_class, p_guid)
	local s_Instance = MaterialPropertyPhysicsData(p_class) 
 	local className = "MaterialPropertyPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dynamicFrictionModifier", "float", s_Instance.dynamicFrictionModifier)
	self:SendDefault(s_guid,className, "resistance", "float", s_Instance.resistance)
	self:SendDefault(s_guid,className, "restitutionModifier", "float", s_Instance.restitutionModifier)
	self:SendDefault(s_guid,className, "staticFrictionModifier", "float", s_Instance.staticFrictionModifier)
end

function Type:MaterialPropertySoundData (p_class, p_guid)
	local s_Instance = MaterialPropertySoundData(p_class) 
 	local className = "MaterialPropertySoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impactSound", "CtrRef", s_Instance.impactSound)
	self:SendDefault(s_guid,className, "materialSoundId", "float", s_Instance.materialSoundId)
	self:SendDefault(s_guid,className, "scrapeLength", "float", s_Instance.scrapeLength)
	self:SendDefault(s_guid,className, "scrapeSound", "CtrRef", s_Instance.scrapeSound)
	self:SendDefault(s_guid,className, "softness", "float", s_Instance.softness)
	self:SendDefault(s_guid,className, "soldierSettings", "CtrRef", s_Instance.soldierSettings)
end

function Type:MaterialPropertyTerrainData (p_class, p_guid)
	local s_Instance = MaterialPropertyTerrainData(p_class) 
 	local className = "MaterialPropertyTerrainData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "destructionEffect", "CtrRef", s_Instance.destructionEffect)
	self:SendDefault(s_guid,className, "dirtTriggerColor", "Vec3", s_Instance.dirtTriggerColor)
	self:SendDefault(s_guid,className, "dirtTriggerFactor", "float", s_Instance.dirtTriggerFactor)
end

function Type:MaterialRelationDamageData (p_class, p_guid)
	local s_Instance = MaterialRelationDamageData(p_class) 
 	local className = "MaterialRelationDamageData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collisionDamageMultiplier", "float", s_Instance.collisionDamageMultiplier)
	self:SendDefault(s_guid,className, "collisionDamageThreshold", "float", s_Instance.collisionDamageThreshold)
	self:SendDefault(s_guid,className, "damagePenetrationMultiplier", "float", s_Instance.damagePenetrationMultiplier)
	self:SendDefault(s_guid,className, "damageProtectionMultiplier", "float", s_Instance.damageProtectionMultiplier)
	self:SendDefault(s_guid,className, "damageProtectionThreshold", "float", s_Instance.damageProtectionThreshold)
	self:SendDefault(s_guid,className, "explosionCoverDamageModifier", "float", s_Instance.explosionCoverDamageModifier)
	self:SendDefault(s_guid,className, "inflictsDemolitionDamage", "bool", s_Instance.inflictsDemolitionDamage)
end

function Type:MaterialRelationDecalData (p_class, p_guid)
	local s_Instance = MaterialRelationDecalData(p_class) 
 	local className = "MaterialRelationDecalData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decal", "CtrRef", s_Instance.decal)
end

function Type:MaterialRelationEffectData (p_class, p_guid)
	local s_Instance = MaterialRelationEffectData(p_class) 
 	local className = "MaterialRelationEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impactDebris", "List<CtrRef)>", s_Instance.impactDebris)
	self:SendDefault(s_guid,className, "impactEffectMaxSpreadAngle", "float", s_Instance.impactEffectMaxSpreadAngle)
	self:SendDefault(s_guid,className, "impactEffects", "List<CtrRef)>", s_Instance.impactEffects)
	self:SendDefault(s_guid,className, "mirrorImpactDirection", "bool", s_Instance.mirrorImpactDirection)
end

function Type:MaterialRelationPenetrationData (p_class, p_guid)
	local s_Instance = MaterialRelationPenetrationData(p_class) 
 	local className = "MaterialRelationPenetrationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "neverPenetrate", "bool", s_Instance.neverPenetrate)
end

function Type:MaterialRelationPropertyPair (p_class, p_guid)
	local s_Instance = MaterialRelationPropertyPair(p_class) 
 	local className = "MaterialRelationPropertyPair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "physicsMaterialProperties", "List<CtrRef)>", s_Instance.physicsMaterialProperties)
	self:SendDefault(s_guid,className, "physicsPropertyProperties", "List<CtrRef)>", s_Instance.physicsPropertyProperties)
end

function Type:MaterialRelationSoundData (p_class, p_guid)
	local s_Instance = MaterialRelationSoundData(p_class) 
 	local className = "MaterialRelationSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impactSound", "CtrRef", s_Instance.impactSound)
	self:SendDefault(s_guid,className, "scrapeLength", "float", s_Instance.scrapeLength)
	self:SendDefault(s_guid,className, "scrapeSound", "CtrRef", s_Instance.scrapeSound)
end

function Type:MaterialRelationTerrainDestructionData (p_class, p_guid)
	local s_Instance = MaterialRelationTerrainDestructionData(p_class) 
 	local className = "MaterialRelationTerrainDestructionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "depth", "float", s_Instance.depth)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:MaterialRelationVehicleData (p_class, p_guid)
	local s_Instance = MaterialRelationVehicleData(p_class) 
 	local className = "MaterialRelationVehicleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chassiEffect", "CtrRef", s_Instance.chassiEffect)
	self:SendDefault(s_guid,className, "groundEffect", "CtrRef", s_Instance.groundEffect)
	self:SendDefault(s_guid,className, "trackEffect", "CtrRef", s_Instance.trackEffect)
	self:SendDefault(s_guid,className, "wheelEffect", "CtrRef", s_Instance.wheelEffect)
end

function Type:MaterialSoldierSoundSettings (p_class, p_guid)
	local s_Instance = MaterialSoldierSoundSettings(p_class) 
 	local className = "MaterialSoldierSoundSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "footStepSound", "CtrRef", s_Instance.footStepSound)
	self:SendDefault(s_guid,className, "landSound", "CtrRef", s_Instance.landSound)
	self:SendDefault(s_guid,className, "proneSound", "CtrRef", s_Instance.proneSound)
end

function Type:MathOpEntityData (p_class, p_guid)
	local s_Instance = MathOpEntityData(p_class) 
 	local className = "MathOpEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "operators", "List<MathOp)>", s_Instance.operators)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "mathOpEntityData",  "readonly", s_Instance.mathOpEntityData)
	self:SendDefault(s_guid,className, "mathOp",  "uint", s_Instance.mathOp)
end

function Type:MatrixPannerNodeData (p_class, p_guid)
	local s_Instance = MatrixPannerNodeData(p_class) 
 	local className = "MatrixPannerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "center", "AudioGraphNodePort", s_Instance.center)
	self:SendDefault(s_guid,className, "farRearLeft", "AudioGraphNodePort", s_Instance.farRearLeft)
	self:SendDefault(s_guid,className, "farRearRight", "AudioGraphNodePort", s_Instance.farRearRight)
	self:SendDefault(s_guid,className, "frontLeft", "AudioGraphNodePort", s_Instance.frontLeft)
	self:SendDefault(s_guid,className, "frontRight", "AudioGraphNodePort", s_Instance.frontRight)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "lfe", "AudioGraphNodePort", s_Instance.lfe)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "rearLeft", "AudioGraphNodePort", s_Instance.rearLeft)
	self:SendDefault(s_guid,className, "rearRight", "AudioGraphNodePort", s_Instance.rearRight)
end

function Type:MaxInstancesScopeStrategyData (p_class, p_guid)
	local s_Instance = MaxInstancesScopeStrategyData(p_class) 
 	local className = "MaxInstancesScopeStrategyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "count", "uint", s_Instance.count)
	self:SendDefault(s_guid,className, "keepOldest", "bool", s_Instance.keepOldest)
end

function Type:MedicBagEntityData (p_class, p_guid)
	local s_Instance = MedicBagEntityData(p_class) 
 	local className = "MedicBagEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healer", "HealerData", s_Instance.healer)
end

function Type:MedicBagHealingSphereEntityData (p_class, p_guid)
	local s_Instance = MedicBagHealingSphereEntityData(p_class) 
 	local className = "MedicBagHealingSphereEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healer", "HealingSphereData", s_Instance.healer)
end

function Type:MedicBagHealingSphereWeaponData (p_class, p_guid)
	local s_Instance = MedicBagHealingSphereWeaponData(p_class) 
 	local className = "MedicBagHealingSphereWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healer", "HealingSphereData", s_Instance.healer)
	self:SendDefault(s_guid,className, "healthPointsPerBag", "float", s_Instance.healthPointsPerBag)
	self:SendDefault(s_guid,className, "healthPointsRefillSpeed", "float", s_Instance.healthPointsRefillSpeed)
end

function Type:MedicBagWeaponData (p_class, p_guid)
	local s_Instance = MedicBagWeaponData(p_class) 
 	local className = "MedicBagWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healer", "HealerData", s_Instance.healer)
	self:SendDefault(s_guid,className, "healthPointsPerBag", "float", s_Instance.healthPointsPerBag)
	self:SendDefault(s_guid,className, "healthPointsRefillSpeed", "float", s_Instance.healthPointsRefillSpeed)
end

function Type:MeleeEntityCommonData (p_class, p_guid)
	local s_Instance = MeleeEntityCommonData(p_class) 
 	local className = "MeleeEntityCommonData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchAttackType", "CtrRef", s_Instance.crouchAttackType)
	self:SendDefault(s_guid,className, "defendWindow", "float", s_Instance.defendWindow)
	self:SendDefault(s_guid,className, "enableAbortPossibility", "bool", s_Instance.enableAbortPossibility)
	self:SendDefault(s_guid,className, "invalidMeleeAttackZone", "float", s_Instance.invalidMeleeAttackZone)
	self:SendDefault(s_guid,className, "killDamage", "float", s_Instance.killDamage)
	self:SendDefault(s_guid,className, "killDelay", "float", s_Instance.killDelay)
	self:SendDefault(s_guid,className, "maxAttackHeightDifference", "float", s_Instance.maxAttackHeightDifference)
	self:SendDefault(s_guid,className, "meleeAttackDistance", "float", s_Instance.meleeAttackDistance)
	self:SendDefault(s_guid,className, "meleeBinding", "CharacterMeleeBinding", s_Instance.meleeBinding)
	self:SendDefault(s_guid,className, "meleeCommonBinding", "CharacterMeleeCommonBinding", s_Instance.meleeCommonBinding)
	self:SendDefault(s_guid,className, "meleeEndDelay", "float", s_Instance.meleeEndDelay)
	self:SendDefault(s_guid,className, "proneAttackType", "CtrRef", s_Instance.proneAttackType)
	self:SendDefault(s_guid,className, "triggerDelay", "float", s_Instance.triggerDelay)
end

function Type:MeleeEntityData (p_class, p_guid)
	local s_Instance = MeleeEntityData(p_class) 
 	local className = "MeleeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "commonData", "CtrRef", s_Instance.commonData)
end

function Type:MeleeTriggerEntityData (p_class, p_guid)
	local s_Instance = MeleeTriggerEntityData(p_class) 
 	local className = "MeleeTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "connectTransform", "LinearTransform", s_Instance.connectTransform)
	self:SendDefault(s_guid,className, "meleeEnabled", "bool", s_Instance.meleeEnabled)
	self:SendDefault(s_guid,className, "meleeType", "CtrRef", s_Instance.meleeType)
end

function Type:MeleeWeaponData (p_class, p_guid)
	local s_Instance = MeleeWeaponData(p_class) 
 	local className = "MeleeWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "useCannedAnimation", "bool", s_Instance.useCannedAnimation)
	self:SendDefault(s_guid,className, "useSphereDamage", "bool", s_Instance.useSphereDamage)
end

function Type:MemoryLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = MemoryLevelDescriptionComponent(p_class) 
 	local className = "MemoryLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshPoolSizePs3", "int", s_Instance.meshPoolSizePs3)
	self:SendDefault(s_guid,className, "meshPoolSizePs3Cell", "int", s_Instance.meshPoolSizePs3Cell)
	self:SendDefault(s_guid,className, "meshPoolSizeXenon", "int", s_Instance.meshPoolSizeXenon)
	self:SendDefault(s_guid,className, "texturePoolSize", "int", s_Instance.texturePoolSize)
	self:SendDefault(s_guid,className, "texturePoolSizePs3", "int", s_Instance.texturePoolSizePs3)
	self:SendDefault(s_guid,className, "texturePoolSizeXenon", "int", s_Instance.texturePoolSizeXenon)
end

function Type:MenuIdAsset (p_class, p_guid)
	local s_Instance = MenuIdAsset(p_class) 
 	local className = "MenuIdAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shortName", "string", s_Instance.shortName)
end

function Type:MeshAsset (p_class, p_guid)
	local s_Instance = MeshAsset(p_class) 
 	local className = "MeshAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cullScale", "float", s_Instance.cullScale)
	self:SendDefault(s_guid,className, "destructionMaterialEnable", "bool", s_Instance.destructionMaterialEnable)
	self:SendDefault(s_guid,className, "enlightenType", "fb.EnlightenType)", s_Instance.enlightenType)
	self:SendDefault(s_guid,className, "lodGroup", "CtrRef", s_Instance.lodGroup)
	self:SendDefault(s_guid,className, "lodScale", "float", s_Instance.lodScale)
	self:SendDefault(s_guid,className, "materials", "List<CtrRef)>", s_Instance.materials)
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
	self:SendDefault(s_guid,className, "occluderHighPriority", "bool", s_Instance.occluderHighPriority)
	self:SendDefault(s_guid,className, "occluderMeshEnable", "bool", s_Instance.occluderMeshEnable)
	self:SendDefault(s_guid,className, "streamingEnable", "bool", s_Instance.streamingEnable)
end

function Type:MeshComponentData (p_class, p_guid)
	local s_Instance = MeshComponentData(p_class) 
 	local className = "MeshComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneFakePhysics", "List<CtrRef)>", s_Instance.boneFakePhysics)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "skeleton", "CtrRef", s_Instance.skeleton)
end

function Type:MeshLodGroup (p_class, p_guid)
	local s_Instance = MeshLodGroup(p_class) 
 	local className = "MeshLodGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cullScreenArea", "float", s_Instance.cullScreenArea)
	self:SendDefault(s_guid,className, "lod1Distance", "float", s_Instance.lod1Distance)
	self:SendDefault(s_guid,className, "lod2Distance", "float", s_Instance.lod2Distance)
	self:SendDefault(s_guid,className, "lod3Distance", "float", s_Instance.lod3Distance)
	self:SendDefault(s_guid,className, "lod4Distance", "float", s_Instance.lod4Distance)
	self:SendDefault(s_guid,className, "lod5Distance", "float", s_Instance.lod5Distance)
	self:SendDefault(s_guid,className, "shadowDistance", "float", s_Instance.shadowDistance)
end

function Type:MeshMaterial (p_class, p_guid)
	local s_Instance = MeshMaterial(p_class) 
 	local className = "MeshMaterial"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shader", "SurfaceShaderInstanceDataStruct", s_Instance.shader)
	self:SendDefault(s_guid,className, "shaderInstance", "CtrRef", s_Instance.shaderInstance)
end

function Type:MeshMaterialVariation (p_class, p_guid)
	local s_Instance = MeshMaterialVariation(p_class) 
 	local className = "MeshMaterialVariation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shader", "SurfaceShaderInstanceDataStruct", s_Instance.shader)
end

function Type:MeshMergingSettings (p_class, p_guid)
	local s_Instance = MeshMergingSettings(p_class) 
 	local className = "MeshMergingSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clearMergeReport", "bool", s_Instance.clearMergeReport)
	self:SendDefault(s_guid,className, "drawDebugTexturesEnable", "bool", s_Instance.drawDebugTexturesEnable)
	self:SendDefault(s_guid,className, "drawStatsEnable", "bool", s_Instance.drawStatsEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "statsLodIndex", "int", s_Instance.statsLodIndex)
	self:SendDefault(s_guid,className, "statsSeedIndex", "int", s_Instance.statsSeedIndex)
	self:SendDefault(s_guid,className, "textureAtlasMergeEnable", "bool", s_Instance.textureAtlasMergeEnable)
	self:SendDefault(s_guid,className, "textureAtlasWidth", "uint", s_Instance.textureAtlasWidth)
	self:SendDefault(s_guid,className, "virtualTextureArrayStreamingEnable", "bool", s_Instance.virtualTextureArrayStreamingEnable)
end

function Type:MeshProjectileEntityData (p_class, p_guid)
	local s_Instance = MeshProjectileEntityData(p_class) 
 	local className = "MeshProjectileEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "extraDamping", "bool", s_Instance.extraDamping)
	self:SendDefault(s_guid,className, "initialAngularVelocity", "Vec3", s_Instance.initialAngularVelocity)
	self:SendDefault(s_guid,className, "isAttachable", "bool", s_Instance.isAttachable)
	self:SendDefault(s_guid,className, "maxAttachableInclination", "float", s_Instance.maxAttachableInclination)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "trailEffect", "CtrRef", s_Instance.trailEffect)
end

function Type:MeshProxyEntityData (p_class, p_guid)
	local s_Instance = MeshProxyEntityData(p_class) 
 	local className = "MeshProxyEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "basePoseTransforms", "List<LinearTransform)>", s_Instance.basePoseTransforms)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
end

function Type:MeshSettings (p_class, p_guid)
	local s_Instance = MeshSettings(p_class) 
 	local className = "MeshSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forceLod", "int", s_Instance.forceLod)
	self:SendDefault(s_guid,className, "globalLodScale", "float", s_Instance.globalLodScale)
	self:SendDefault(s_guid,className, "loadingEnabled", "bool", s_Instance.loadingEnabled)
	self:SendDefault(s_guid,className, "overrideShadersMeshName", "string", s_Instance.overrideShadersMeshName)
	self:SendDefault(s_guid,className, "overrideShadersShaderName", "string", s_Instance.overrideShadersShaderName)
	self:SendDefault(s_guid,className, "shadowDistanceScale", "float", s_Instance.shadowDistanceScale)
end

function Type:MeshStreamingSettings (p_class, p_guid)
	local s_Instance = MeshStreamingSettings(p_class) 
 	local className = "MeshStreamingSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asyncCreatesEnable", "bool", s_Instance.asyncCreatesEnable)
	self:SendDefault(s_guid,className, "defragEnable", "bool", s_Instance.defragEnable)
	self:SendDefault(s_guid,className, "defragTransferLimit", "uint", s_Instance.defragTransferLimit)
	self:SendDefault(s_guid,className, "defragTransfersEnable", "bool", s_Instance.defragTransfersEnable)
	self:SendDefault(s_guid,className, "drawInstanceBoxesEnable", "bool", s_Instance.drawInstanceBoxesEnable)
	self:SendDefault(s_guid,className, "drawLoadingListEnable", "bool", s_Instance.drawLoadingListEnable)
	self:SendDefault(s_guid,className, "drawMeshListEnable", "bool", s_Instance.drawMeshListEnable)
	self:SendDefault(s_guid,className, "drawMissingListEnable", "bool", s_Instance.drawMissingListEnable)
	self:SendDefault(s_guid,className, "drawNonStreamedListEnable", "bool", s_Instance.drawNonStreamedListEnable)
	self:SendDefault(s_guid,className, "drawPriorityListEnable", "bool", s_Instance.drawPriorityListEnable)
	self:SendDefault(s_guid,className, "drawStatsEnable", "bool", s_Instance.drawStatsEnable)
	self:SendDefault(s_guid,className, "dumpLoadedList", "bool", s_Instance.dumpLoadedList)
	self:SendDefault(s_guid,className, "dxImmutableUsageEnable", "bool", s_Instance.dxImmutableUsageEnable)
	self:SendDefault(s_guid,className, "dynamicLoadingEnable", "bool", s_Instance.dynamicLoadingEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "forceLod", "int", s_Instance.forceLod)
	self:SendDefault(s_guid,className, "highestPriorityEnable", "bool", s_Instance.highestPriorityEnable)
	self:SendDefault(s_guid,className, "instantUnloadingEnable", "bool", s_Instance.instantUnloadingEnable)
	self:SendDefault(s_guid,className, "listViewPageIndex", "uint", s_Instance.listViewPageIndex)
	self:SendDefault(s_guid,className, "listViewSortOrder", "uint", s_Instance.listViewSortOrder)
	self:SendDefault(s_guid,className, "maxPendingLoadCount", "uint", s_Instance.maxPendingLoadCount)
	self:SendDefault(s_guid,className, "maxUnloadCountPerFrame", "uint", s_Instance.maxUnloadCountPerFrame)
	self:SendDefault(s_guid,className, "overridePoolSizes", "bool", s_Instance.overridePoolSizes)
	self:SendDefault(s_guid,className, "poolHeadroomSize", "uint", s_Instance.poolHeadroomSize)
	self:SendDefault(s_guid,className, "poolSize", "uint", s_Instance.poolSize)
	self:SendDefault(s_guid,className, "prioritizeNearestPointEnable", "bool", s_Instance.prioritizeNearestPointEnable)
	self:SendDefault(s_guid,className, "prioritizeTexturesEnable", "bool", s_Instance.prioritizeTexturesEnable)
	self:SendDefault(s_guid,className, "prioritizeVisibleLoadsEnable", "bool", s_Instance.prioritizeVisibleLoadsEnable)
	self:SendDefault(s_guid,className, "prioritizeVisibleLodsFirstEnable", "bool", s_Instance.prioritizeVisibleLodsFirstEnable)
	self:SendDefault(s_guid,className, "prioritizeVisibleMeshesFirstEnable", "bool", s_Instance.prioritizeVisibleMeshesFirstEnable)
	self:SendDefault(s_guid,className, "priorityJobEnable", "bool", s_Instance.priorityJobEnable)
	self:SendDefault(s_guid,className, "prioritySpuJobEnable", "bool", s_Instance.prioritySpuJobEnable)
	self:SendDefault(s_guid,className, "ps3CellDefragTransferLimit", "uint", s_Instance.ps3CellDefragTransferLimit)
	self:SendDefault(s_guid,className, "ps3CellPoolHeadroomSize", "uint", s_Instance.ps3CellPoolHeadroomSize)
	self:SendDefault(s_guid,className, "ps3CellPoolSize", "uint", s_Instance.ps3CellPoolSize)
	self:SendDefault(s_guid,className, "updateEnable", "bool", s_Instance.updateEnable)
	self:SendDefault(s_guid,className, "updateJobEnable", "bool", s_Instance.updateJobEnable)
	self:SendDefault(s_guid,className, "useConditionalStreaming", "bool", s_Instance.useConditionalStreaming)
	self:SendDefault(s_guid,className, "useSlowTexturePrio", "bool", s_Instance.useSlowTexturePrio)
	self:SendDefault(s_guid,className, "xenonFinalPoolSizeAdjustment", "uint", s_Instance.xenonFinalPoolSizeAdjustment)
	self:SendDefault(s_guid,className, "xenonRetailPoolSizeAdjustment", "uint", s_Instance.xenonRetailPoolSizeAdjustment)
end

function Type:MeshVariationDatabase (p_class, p_guid)
	local s_Instance = MeshVariationDatabase(p_class) 
 	local className = "MeshVariationDatabase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
	self:SendDefault(s_guid,className, "redirectEntries", "List<CtrRef)>", s_Instance.redirectEntries)
end

function Type:MeshVariationDatabaseEntry (p_class, p_guid)
	local s_Instance = MeshVariationDatabaseEntry(p_class) 
 	local className = "MeshVariationDatabaseEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "materials", "List<MeshVariationDatabaseMaterial)>", s_Instance.materials)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "variationAssetNameHash", "uint", s_Instance.variationAssetNameHash)
end

function Type:MeshVariationDatabaseMaterial (p_class, p_guid)
	local s_Instance = MeshVariationDatabaseMaterial(p_class) 
 	local className = "MeshVariationDatabaseMaterial"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "material", "CtrRef", s_Instance.material)
	self:SendDefault(s_guid,className, "materialVariation", "CtrRef", s_Instance.materialVariation)
	self:SendDefault(s_guid,className, "textureParameters", "List<TextureShaderParameter)>", s_Instance.textureParameters)
end

function Type:MeshVariationInfo (p_class, p_guid)
	local s_Instance = MeshVariationInfo(p_class) 
 	local className = "MeshVariationInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshAsset", "CtrRef", s_Instance.meshAsset)
	self:SendDefault(s_guid,className, "origMeshAsset", "CtrRef", s_Instance.origMeshAsset)
	self:SendDefault(s_guid,className, "variationAsset", "CtrRef", s_Instance.variationAsset)
end

function Type:MessageEntityData (p_class, p_guid)
	local s_Instance = MessageEntityData(p_class) 
 	local className = "MessageEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalMessages", "List<MessageLineData)>", s_Instance.additionalMessages)
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "entryInputAction", "EntryInputActionEnum", s_Instance.entryInputAction)
	self:SendDefault(s_guid,className, "messageSid", "string", s_Instance.messageSid)
	self:SendDefault(s_guid,className, "messageType", "UIMessageEntityType", s_Instance.messageType)
end

function Type:MessageInfo (p_class, p_guid)
	local s_Instance = MessageInfo(p_class) 
 	local className = "MessageInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "messageQueueSize", "uint", s_Instance.messageQueueSize)
	self:SendDefault(s_guid,className, "normalMessageTime", "float", s_Instance.normalMessageTime)
	self:SendDefault(s_guid,className, "rowTypeName", "string", s_Instance.rowTypeName)
	self:SendDefault(s_guid,className, "shortMessageTime", "float", s_Instance.shortMessageTime)
end

function Type:MessageLineData (p_class, p_guid)
	local s_Instance = MessageLineData(p_class) 
 	local className = "MessageLineData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entryInputAction", "EntryInputActionEnum", s_Instance.entryInputAction)
	self:SendDefault(s_guid,className, "messageSid", "string", s_Instance.messageSid)
end

function Type:MetricEvent (p_class, p_guid)
	local s_Instance = MetricEvent(p_class) 
 	local className = "MetricEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "owner", "ulong", s_Instance.owner)
end

function Type:MetricReport (p_class, p_guid)
	local s_Instance = MetricReport(p_class) 
 	local className = "MetricReport"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "List<CtrRef)>", s_Instance.events)
end

function Type:MetricState (p_class, p_guid)
	local s_Instance = MetricState(p_class) 
 	local className = "MetricState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isSet", "bool", s_Instance.isSet)
end

function Type:Minimap2DEntityData (p_class, p_guid)
	local s_Instance = Minimap2DEntityData(p_class) 
 	local className = "Minimap2DEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "antialiasMultiplier", "uint", s_Instance.antialiasMultiplier)
	self:SendDefault(s_guid,className, "cameraTransform", "Vec3", s_Instance.cameraTransform)
	self:SendDefault(s_guid,className, "fov", "uint", s_Instance.fov)
	self:SendDefault(s_guid,className, "imageHeight", "uint", s_Instance.imageHeight)
	self:SendDefault(s_guid,className, "imageWidth", "uint", s_Instance.imageWidth)
	self:SendDefault(s_guid,className, "terrainHeight", "uint", s_Instance.terrainHeight)
end

function Type:MinimapCameraOffsetData (p_class, p_guid)
	local s_Instance = MinimapCameraOffsetData(p_class) 
 	local className = "MinimapCameraOffsetData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraFov", "float", s_Instance.cameraFov)
	self:SendDefault(s_guid,className, "position", "Vec2", s_Instance.position)
end

function Type:MinimapData (p_class, p_guid)
	local s_Instance = MinimapData(p_class) 
 	local className = "MinimapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "anchorPosHorizontal", "float", s_Instance.anchorPosHorizontal)
	self:SendDefault(s_guid,className, "anchorPosVertical", "float", s_Instance.anchorPosVertical)
	self:SendDefault(s_guid,className, "cameraDistance", "float", s_Instance.cameraDistance)
	self:SendDefault(s_guid,className, "cameraFov", "float", s_Instance.cameraFov)
	self:SendDefault(s_guid,className, "cameraLookDistance", "float", s_Instance.cameraLookDistance)
	self:SendDefault(s_guid,className, "cameraPosition", "Vec3", s_Instance.cameraPosition)
	self:SendDefault(s_guid,className, "cameraRotation", "float", s_Instance.cameraRotation)
	self:SendDefault(s_guid,className, "centerOnCombatArea", "bool", s_Instance.centerOnCombatArea)
	self:SendDefault(s_guid,className, "innerZoomFactor", "int", s_Instance.innerZoomFactor)
	self:SendDefault(s_guid,className, "maxZoomLevels", "int", s_Instance.maxZoomLevels)
	self:SendDefault(s_guid,className, "overlayAlpha", "float", s_Instance.overlayAlpha)
	self:SendDefault(s_guid,className, "overlayColor", "Vec3", s_Instance.overlayColor)
	self:SendDefault(s_guid,className, "position", "Vec2", s_Instance.position)
	self:SendDefault(s_guid,className, "positionFromPlayer", "bool", s_Instance.positionFromPlayer)
	self:SendDefault(s_guid,className, "rotationFromPlayer", "bool", s_Instance.rotationFromPlayer)
	self:SendDefault(s_guid,className, "size", "Vec2", s_Instance.size)
	self:SendDefault(s_guid,className, "startZoomLevel", "int", s_Instance.startZoomLevel)
end

function Type:MinMaxNodeData (p_class, p_guid)
	local s_Instance = MinMaxNodeData(p_class) 
 	local className = "MinMaxNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "AudioGraphNodePort", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "AudioGraphNodePort", s_Instance.min)
	self:SendDefault(s_guid,className, "x", "AudioGraphNodePort", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
end

function Type:MinMaxValueSelectorEntry (p_class, p_guid)
	local s_Instance = MinMaxValueSelectorEntry(p_class) 
 	local className = "MinMaxValueSelectorEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "input", "AudioGraphNodePort", s_Instance.input)
end

function Type:MinMaxValueSelectorNodeData (p_class, p_guid)
	local s_Instance = MinMaxValueSelectorNodeData(p_class) 
 	local className = "MinMaxValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "maxIndex", "AudioGraphNodePort", s_Instance.maxIndex)
	self:SendDefault(s_guid,className, "maxValue", "AudioGraphNodePort", s_Instance.maxValue)
	self:SendDefault(s_guid,className, "minIndex", "AudioGraphNodePort", s_Instance.minIndex)
	self:SendDefault(s_guid,className, "minValue", "AudioGraphNodePort", s_Instance.minValue)
end

function Type:MissileEntityData (p_class, p_guid)
	local s_Instance = MissileEntityData(p_class) 
 	local className = "MissileEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "applyGravityWhenGuided", "bool", s_Instance.applyGravityWhenGuided)
	self:SendDefault(s_guid,className, "damage", "float", s_Instance.damage)
	self:SendDefault(s_guid,className, "defaultTeam", "TeamId", s_Instance.defaultTeam)
	self:SendDefault(s_guid,className, "drag", "float", s_Instance.drag)
	self:SendDefault(s_guid,className, "dudExplosion", "CtrRef", s_Instance.dudExplosion)
	self:SendDefault(s_guid,className, "engineEffect", "CtrRef", s_Instance.engineEffect)
	self:SendDefault(s_guid,className, "engineStrength", "float", s_Instance.engineStrength)
	self:SendDefault(s_guid,className, "engineTimeToIgnition", "float", s_Instance.engineTimeToIgnition)
	self:SendDefault(s_guid,className, "engineTimeToLive", "float", s_Instance.engineTimeToLive)
	self:SendDefault(s_guid,className, "flyBySound", "CtrRef", s_Instance.flyBySound)
	self:SendDefault(s_guid,className, "flyBySoundRadius", "float", s_Instance.flyBySoundRadius)
	self:SendDefault(s_guid,className, "flyBySoundSpeed", "float", s_Instance.flyBySoundSpeed)
	self:SendDefault(s_guid,className, "gravity", "float", s_Instance.gravity)
	self:SendDefault(s_guid,className, "impactImpulse", "float", s_Instance.impactImpulse)
	self:SendDefault(s_guid,className, "lockableInfo", "MissileLockableInfoData", s_Instance.lockableInfo)
	self:SendDefault(s_guid,className, "lockingController", "CtrRef", s_Instance.lockingController)
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "maxTurnAngle", "float", s_Instance.maxTurnAngle)
	self:SendDefault(s_guid,className, "nearTargetDetonation", "NearTargetDetonationData", s_Instance.nearTargetDetonation)
	self:SendDefault(s_guid,className, "timeToActivateGuidingSystem", "float", s_Instance.timeToActivateGuidingSystem)
	self:SendDefault(s_guid,className, "timeToArm", "float", s_Instance.timeToArm)
	self:SendDefault(s_guid,className, "unguidedData", "MissileUnguidedData", s_Instance.unguidedData)
	self:SendDefault(s_guid,className, "warnOnPointingMissile", "bool", s_Instance.warnOnPointingMissile)
	self:SendDefault(s_guid,className, "warnTarget", "fb.WarnTarget)", s_Instance.warnTarget)
end

function Type:MissileLockableInfoData (p_class, p_guid)
	local s_Instance = MissileLockableInfoData(p_class) 
 	local className = "MissileLockableInfoData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heatSignature", "float", s_Instance.heatSignature)
	self:SendDefault(s_guid,className, "radarSignature", "float", s_Instance.radarSignature)
end

function Type:MissileUnguidedData (p_class, p_guid)
	local s_Instance = MissileUnguidedData(p_class) 
 	local className = "MissileUnguidedData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "staticPosition", "Vec2", s_Instance.staticPosition)
	self:SendDefault(s_guid,className, "targetPositionOffset", "Vec2", s_Instance.targetPositionOffset)
	self:SendDefault(s_guid,className, "useStaticPosition", "bool", s_Instance.useStaticPosition)
	self:SendDefault(s_guid,className, "useTargetPosition", "bool", s_Instance.useTargetPosition)
end

function Type:MissionObjectiveHudData (p_class, p_guid)
	local s_Instance = MissionObjectiveHudData(p_class) 
 	local className = "MissionObjectiveHudData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraDistance", "float", s_Instance.cameraDistance)
	self:SendDefault(s_guid,className, "cameraFov", "float", s_Instance.cameraFov)
	self:SendDefault(s_guid,className, "cameraLookDistance", "float", s_Instance.cameraLookDistance)
	self:SendDefault(s_guid,className, "cameraPosition", "Vec3", s_Instance.cameraPosition)
	self:SendDefault(s_guid,className, "cameraRotation", "float", s_Instance.cameraRotation)
	self:SendDefault(s_guid,className, "horizontalBoundaries", "Vec2", s_Instance.horizontalBoundaries)
	self:SendDefault(s_guid,className, "verticalBoundaries", "Vec2", s_Instance.verticalBoundaries)
end

function Type:MixerAsset (p_class, p_guid)
	local s_Instance = MixerAsset(p_class) 
 	local className = "MixerAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultPreset", "CtrRef", s_Instance.defaultPreset)
	self:SendDefault(s_guid,className, "graph", "CtrRef", s_Instance.graph)
	self:SendDefault(s_guid,className, "presets", "List<CtrRef)>", s_Instance.presets)
end

function Type:MixerEntityData (p_class, p_guid)
	local s_Instance = MixerEntityData(p_class) 
 	local className = "MixerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activateOnCreation", "bool", s_Instance.activateOnCreation)
	self:SendDefault(s_guid,className, "mixer", "CtrRef", s_Instance.mixer)
end

function Type:MixerEntry (p_class, p_guid)
	local s_Instance = MixerEntry(p_class) 
 	local className = "MixerEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:MixerGraphData (p_class, p_guid)
	local s_Instance = MixerGraphData(p_class) 
 	local className = "MixerGraphData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accumulateModes", "List<MixerValueAccumulateMode)>", s_Instance.accumulateModes)
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "mixerGraphData",  "readonly", s_Instance.mixerGraphData)
	self:SendDefault(s_guid,className, "mixerValueAccumulateMode",  "uint", s_Instance.mixerValueAccumulateMode)
end

function Type:MixerInputEntry (p_class, p_guid)
	local s_Instance = MixerInputEntry(p_class) 
 	local className = "MixerInputEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accumulateMode", "MixerValueAccumulateMode", s_Instance.accumulateMode)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:MixerInputNodeData (p_class, p_guid)
	local s_Instance = MixerInputNodeData(p_class) 
 	local className = "MixerInputNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:MixerNodeData (p_class, p_guid)
	local s_Instance = MixerNodeData(p_class) 
 	local className = "MixerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
end

function Type:MixerOutputEntry (p_class, p_guid)
	local s_Instance = MixerOutputEntry(p_class) 
 	local className = "MixerOutputEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
end

function Type:MixerOutputNodeData (p_class, p_guid)
	local s_Instance = MixerOutputNodeData(p_class) 
 	local className = "MixerOutputNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:MixerPreset (p_class, p_guid)
	local s_Instance = MixerPreset(p_class) 
 	local className = "MixerPreset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "groups", "List<MixerPresetGroupData)>", s_Instance.groups)
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
	self:SendDefault(s_guid,className, "nodes", "List<MixerPresetNodeData)>", s_Instance.nodes)
end

function Type:MixerPresetGroupData (p_class, p_guid)
	local s_Instance = MixerPresetGroupData(p_class) 
 	local className = "MixerPresetGroupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackTime", "float", s_Instance.attackTime)
	self:SendDefault(s_guid,className, "group", "CtrRef", s_Instance.group)
	self:SendDefault(s_guid,className, "isDominant", "bool", s_Instance.isDominant)
	self:SendDefault(s_guid,className, "properties", "List<MixGroupPropertyValue)>", s_Instance.properties)
	self:SendDefault(s_guid,className, "releaseTime", "float", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "state", "MixGroupState", s_Instance.state)
end

function Type:MixerPresetNodeData (p_class, p_guid)
	local s_Instance = MixerPresetNodeData(p_class) 
 	local className = "MixerPresetNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "node", "CtrRef", s_Instance.node)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:MixerReceiveEntry (p_class, p_guid)
	local s_Instance = MixerReceiveEntry(p_class) 
 	local className = "MixerReceiveEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mixer", "CtrRef", s_Instance.mixer)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:MixerReceiveNodeData (p_class, p_guid)
	local s_Instance = MixerReceiveNodeData(p_class) 
 	local className = "MixerReceiveNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:MixerSendEntry (p_class, p_guid)
	local s_Instance = MixerSendEntry(p_class) 
 	local className = "MixerSendEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "mixer", "CtrRef", s_Instance.mixer)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
end

function Type:MixerSendNodeData (p_class, p_guid)
	local s_Instance = MixerSendNodeData(p_class) 
 	local className = "MixerSendNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:MixerSetPropertyEntry (p_class, p_guid)
	local s_Instance = MixerSetPropertyEntry(p_class) 
 	local className = "MixerSetPropertyEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackTime", "float", s_Instance.attackTime)
	self:SendDefault(s_guid,className, "group", "CtrRef", s_Instance.group)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "releaseTime", "float", s_Instance.releaseTime)
	self:SendDefault(s_guid,className, "target", "uint", s_Instance.target)
end

function Type:MixerSetPropertyNodeData (p_class, p_guid)
	local s_Instance = MixerSetPropertyNodeData(p_class) 
 	local className = "MixerSetPropertyNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:MixerSimplePresetNodeData (p_class, p_guid)
	local s_Instance = MixerSimplePresetNodeData(p_class) 
 	local className = "MixerSimplePresetNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "AudioGraphNodePort", s_Instance.index)
	self:SendDefault(s_guid,className, "presets", "List<CtrRef)>", s_Instance.presets)
end

function Type:MixerSystemAsset (p_class, p_guid)
	local s_Instance = MixerSystemAsset(p_class) 
 	local className = "MixerSystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "groups", "List<CtrRef)>", s_Instance.groups)
end

function Type:MixerValueNodeData (p_class, p_guid)
	local s_Instance = MixerValueNodeData(p_class) 
 	local className = "MixerValueNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "float", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
end

function Type:MixGroup (p_class, p_guid)
	local s_Instance = MixGroup(p_class) 
 	local className = "MixGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "groupIndex", "ushort", s_Instance.groupIndex)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "parentGroupIndex", "ushort", s_Instance.parentGroupIndex)
end

function Type:MixGroupPropertyValue (p_class, p_guid)
	local s_Instance = MixGroupPropertyValue(p_class) 
 	local className = "MixGroupPropertyValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "property", "uint", s_Instance.property)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:MobileSpawnComponentData (p_class, p_guid)
	local s_Instance = MobileSpawnComponentData(p_class) 
 	local className = "MobileSpawnComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enterMobileSpawnPoint", "bool", s_Instance.enterMobileSpawnPoint)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "parachuteSpawnDistance", "float", s_Instance.parachuteSpawnDistance)
	self:SendDefault(s_guid,className, "parachuteSpawnRadiusMax", "float", s_Instance.parachuteSpawnRadiusMax)
	self:SendDefault(s_guid,className, "parachuteSpawnRadiusMin", "float", s_Instance.parachuteSpawnRadiusMin)
end

function Type:MobilityData (p_class, p_guid)
	local s_Instance = MobilityData(p_class) 
 	local className = "MobilityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "use3DWaypoints", "bool", s_Instance.use3DWaypoints)
end

function Type:ModelAnimationEntityData (p_class, p_guid)
	local s_Instance = ModelAnimationEntityData(p_class) 
 	local className = "ModelAnimationEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpace", "LinearTransform", s_Instance.animationEntitySpace)
	self:SendDefault(s_guid,className, "animationEntitySpaceActive", "bool", s_Instance.animationEntitySpaceActive)
	self:SendDefault(s_guid,className, "animationIndex", "int", s_Instance.animationIndex)
	self:SendDefault(s_guid,className, "animationSet", "CtrRef", s_Instance.animationSet)
	self:SendDefault(s_guid,className, "applyPreTransformation", "bool", s_Instance.applyPreTransformation)
	self:SendDefault(s_guid,className, "applyRotationCompensation", "bool", s_Instance.applyRotationCompensation)
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "boneToPlace", "GameplayBones", s_Instance.boneToPlace)
	self:SendDefault(s_guid,className, "connectBoneName", "string", s_Instance.connectBoneName)
	self:SendDefault(s_guid,className, "defaultAnimation", "string", s_Instance.defaultAnimation)
	self:SendDefault(s_guid,className, "disableCulling", "bool", s_Instance.disableCulling)
	self:SendDefault(s_guid,className, "enableJointWorldTransformOutput", "bool", s_Instance.enableJointWorldTransformOutput)
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "instanceSeed", "int", s_Instance.instanceSeed)
	self:SendDefault(s_guid,className, "jointOutputPropertyIds", "List<int)>", s_Instance.jointOutputPropertyIds)
	self:SendDefault(s_guid,className, "jointWorldTransformUpdateOrder", "ModelAnimationUpdateOrder", s_Instance.jointWorldTransformUpdateOrder)
	self:SendDefault(s_guid,className, "looping", "bool", s_Instance.looping)
	self:SendDefault(s_guid,className, "modelAnimationTransformType", "fb.ModelAnimationTransformType)", s_Instance.modelAnimationTransformType)
	self:SendDefault(s_guid,className, "playFirstFrame", "bool", s_Instance.playFirstFrame)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "resetAfterStop", "bool", s_Instance.resetAfterStop)
	self:SendDefault(s_guid,className, "rootMeshBoneName", "string", s_Instance.rootMeshBoneName)
	self:SendDefault(s_guid,className, "showDebugTransforms", "bool", s_Instance.showDebugTransforms)
	self:SendDefault(s_guid,className, "trajectoryBoneName", "string", s_Instance.trajectoryBoneName)
end

function Type:MortarStrikeWeaponData (p_class, p_guid)
	local s_Instance = MortarStrikeWeaponData(p_class) 
 	local className = "MortarStrikeWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "holdingTolerance", "float", s_Instance.holdingTolerance)
	self:SendDefault(s_guid,className, "maxRandomSpawnHeight", "float", s_Instance.maxRandomSpawnHeight)
	self:SendDefault(s_guid,className, "maxStrikeDistance", "float", s_Instance.maxStrikeDistance)
	self:SendDefault(s_guid,className, "strikeRadius", "float", s_Instance.strikeRadius)
end

function Type:MotionBlurComponentData (p_class, p_guid)
	local s_Instance = MotionBlurComponentData(p_class) 
 	local className = "MotionBlurComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cutoffGradientScale", "float", s_Instance.cutoffGradientScale)
	self:SendDefault(s_guid,className, "motionBlurCutoffRadius", "float", s_Instance.motionBlurCutoffRadius)
	self:SendDefault(s_guid,className, "motionBlurEnable", "bool", s_Instance.motionBlurEnable)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:MotionControllerInputActionData (p_class, p_guid)
	local s_Instance = MotionControllerInputActionData(p_class) 
 	local className = "MotionControllerInputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "button", "InputDeviceMotionControllerButtons", s_Instance.button)
end

function Type:MotionDampingData (p_class, p_guid)
	local s_Instance = MotionDampingData(p_class) 
 	local className = "MotionDampingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "linear", "float", s_Instance.linear)
	self:SendDefault(s_guid,className, "linearModifier", "Vec3", s_Instance.linearModifier)
	self:SendDefault(s_guid,className, "pitch", "float", s_Instance.pitch)
	self:SendDefault(s_guid,className, "roll", "float", s_Instance.roll)
	self:SendDefault(s_guid,className, "yaw", "float", s_Instance.yaw)
end

function Type:MotorbikeData (p_class, p_guid)
	local s_Instance = MotorbikeData(p_class) 
 	local className = "MotorbikeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "counterLeanForce", "float", s_Instance.counterLeanForce)
	self:SendDefault(s_guid,className, "dampBigJumpImpact", "bool", s_Instance.dampBigJumpImpact)
	self:SendDefault(s_guid,className, "dampBigJumpImpactCounterForce", "Vec3", s_Instance.dampBigJumpImpactCounterForce)
	self:SendDefault(s_guid,className, "dampBigJumpImpactVelocity", "float", s_Instance.dampBigJumpImpactVelocity)
	self:SendDefault(s_guid,className, "jumpForwardLeanMinAngle", "float", s_Instance.jumpForwardLeanMinAngle)
	self:SendDefault(s_guid,className, "jumpForwardLeanMomentum", "float", s_Instance.jumpForwardLeanMomentum)
	self:SendDefault(s_guid,className, "kickstandLinearDamping", "float", s_Instance.kickstandLinearDamping)
	self:SendDefault(s_guid,className, "kickstandRoll", "float", s_Instance.kickstandRoll)
	self:SendDefault(s_guid,className, "leanForce", "float", s_Instance.leanForce)
	self:SendDefault(s_guid,className, "leanForceMaxVel", "float", s_Instance.leanForceMaxVel)
	self:SendDefault(s_guid,className, "maxLeaningRoll", "float", s_Instance.maxLeaningRoll)
	self:SendDefault(s_guid,className, "proximityExtScale", "Vec3", s_Instance.proximityExtScale)
	self:SendDefault(s_guid,className, "proximityHeightTranslation", "float", s_Instance.proximityHeightTranslation)
	self:SendDefault(s_guid,className, "shortOffgroundGravityMultiplier", "float", s_Instance.shortOffgroundGravityMultiplier)
	self:SendDefault(s_guid,className, "shortOffgroundPeriod", "float", s_Instance.shortOffgroundPeriod)
	self:SendDefault(s_guid,className, "standStillRoll", "float", s_Instance.standStillRoll)
	self:SendDefault(s_guid,className, "stoppieActivationVelocity", "float", s_Instance.stoppieActivationVelocity)
	self:SendDefault(s_guid,className, "stoppieMomentum", "float", s_Instance.stoppieMomentum)
	self:SendDefault(s_guid,className, "stoppieStartVelocity", "float", s_Instance.stoppieStartVelocity)
	self:SendDefault(s_guid,className, "stoppieStopVelocity", "float", s_Instance.stoppieStopVelocity)
	self:SendDefault(s_guid,className, "wheelieAngularDamping", "float", s_Instance.wheelieAngularDamping)
	self:SendDefault(s_guid,className, "wheelieAngularDampingSpeed", "float", s_Instance.wheelieAngularDampingSpeed)
	self:SendDefault(s_guid,className, "wheelieAngularStartMomentum", "float", s_Instance.wheelieAngularStartMomentum)
	self:SendDefault(s_guid,className, "wheelieForce", "Vec3", s_Instance.wheelieForce)
	self:SendDefault(s_guid,className, "wheelieForceBodyOffset", "Vec3", s_Instance.wheelieForceBodyOffset)
	self:SendDefault(s_guid,className, "wheelieInertia", "float", s_Instance.wheelieInertia)
	self:SendDefault(s_guid,className, "wheelieMaxAngle", "float", s_Instance.wheelieMaxAngle)
	self:SendDefault(s_guid,className, "wheelieMaxNoContactTime", "float", s_Instance.wheelieMaxNoContactTime)
	self:SendDefault(s_guid,className, "wheelieMaxNoDownForceContactTime", "float", s_Instance.wheelieMaxNoDownForceContactTime)
	self:SendDefault(s_guid,className, "wheelieMaxVelocity", "float", s_Instance.wheelieMaxVelocity)
	self:SendDefault(s_guid,className, "wheelieMaxVelocityDampRange", "float", s_Instance.wheelieMaxVelocityDampRange)
	self:SendDefault(s_guid,className, "wheelieMaxVelocityUndamped", "float", s_Instance.wheelieMaxVelocityUndamped)
	self:SendDefault(s_guid,className, "wheelieOutAngularMomentum", "float", s_Instance.wheelieOutAngularMomentum)
	self:SendDefault(s_guid,className, "wheelieSpringDamping", "float", s_Instance.wheelieSpringDamping)
	self:SendDefault(s_guid,className, "wheelieStartVelocity", "float", s_Instance.wheelieStartVelocity)
	self:SendDefault(s_guid,className, "wheelieSteeringFactor", "float", s_Instance.wheelieSteeringFactor)
	self:SendDefault(s_guid,className, "wheelieVelocityForceScale", "float", s_Instance.wheelieVelocityForceScale)
	self:SendDefault(s_guid,className, "yawBrakeDampingLerpEndScale", "float", s_Instance.yawBrakeDampingLerpEndScale)
	self:SendDefault(s_guid,className, "yawBrakeDampingLerpStartScale", "float", s_Instance.yawBrakeDampingLerpStartScale)
end

function Type:MouseInputActionData (p_class, p_guid)
	local s_Instance = MouseInputActionData(p_class) 
 	local className = "MouseInputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "button", "InputDeviceMouseButtons", s_Instance.button)
	self:SendDefault(s_guid,className, "rememberExcessInput", "bool", s_Instance.rememberExcessInput)
	self:SendDefault(s_guid,className, "scaleScrollWheelAxisInput", "bool", s_Instance.scaleScrollWheelAxisInput)
	self:SendDefault(s_guid,className, "simulateJoystickAxis", "bool", s_Instance.simulateJoystickAxis)
end

function Type:MovementActionGroupData (p_class, p_guid)
	local s_Instance = MovementActionGroupData(p_class) 
 	local className = "MovementActionGroupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actions", "List<CtrRef)>", s_Instance.actions)
	self:SendDefault(s_guid,className, "restartChildren", "bool", s_Instance.restartChildren)
	self:SendDefault(s_guid,className, "runSimultaneously", "bool", s_Instance.runSimultaneously)
end

function Type:MovementActionRandomizerData (p_class, p_guid)
	local s_Instance = MovementActionRandomizerData(p_class) 
 	local className = "MovementActionRandomizerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actions", "List<CtrRef)>", s_Instance.actions)
	self:SendDefault(s_guid,className, "reinsertIntoRandomizedListAfterUse", "bool", s_Instance.reinsertIntoRandomizedListAfterUse)
end

function Type:MovementActionRoot (p_class, p_guid)
	local s_Instance = MovementActionRoot(p_class) 
 	local className = "MovementActionRoot"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "startSequence", "CtrRef", s_Instance.startSequence)
end

function Type:MovementComponentBinding (p_class, p_guid)
	local s_Instance = MovementComponentBinding(p_class) 
 	local className = "MovementComponentBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationControlled", "AntRef", s_Instance.animationControlled)
end

function Type:MovementComponentData (p_class, p_guid)
	local s_Instance = MovementComponentData(p_class) 
 	local className = "MovementComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "movementBinding", "MovementComponentBinding", s_Instance.movementBinding)
end

function Type:MovementConstantData (p_class, p_guid)
	local s_Instance = MovementConstantData(p_class) 
 	local className = "MovementConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxCrouchWalkDistance", "float", s_Instance.maxCrouchWalkDistance)
end

function Type:MovieComponentData (p_class, p_guid)
	local s_Instance = MovieComponentData(p_class) 
 	local className = "MovieComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "isNormalMap", "bool", s_Instance.isNormalMap)
	self:SendDefault(s_guid,className, "movie", "CtrRef", s_Instance.movie)
end

function Type:MovieEntityData (p_class, p_guid)
	local s_Instance = MovieEntityData(p_class) 
 	local className = "MovieEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "isNormalMap", "bool", s_Instance.isNormalMap)
	self:SendDefault(s_guid,className, "movie", "CtrRef", s_Instance.movie)
end

function Type:MovieTextureAsset (p_class, p_guid)
	local s_Instance = MovieTextureAsset(p_class) 
 	local className = "MovieTextureAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chunkGuid", "GUID", s_Instance.chunkGuid)
	self:SendDefault(s_guid,className, "chunkSize", "uint", s_Instance.chunkSize)
	self:SendDefault(s_guid,className, "hasLocalizedAudioTracks", "bool", s_Instance.hasLocalizedAudioTracks)
	self:SendDefault(s_guid,className, "overrideBackgroundMusic", "bool", s_Instance.overrideBackgroundMusic)
	self:SendDefault(s_guid,className, "subtitleChunkGuid", "GUID", s_Instance.subtitleChunkGuid)
	self:SendDefault(s_guid,className, "subtitleChunkSize", "uint", s_Instance.subtitleChunkSize)
end

function Type:MovieTextureSettings (p_class, p_guid)
	local s_Instance = MovieTextureSettings(p_class) 
 	local className = "MovieTextureSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
end

function Type:MovingBodyData (p_class, p_guid)
	local s_Instance = MovingBodyData(p_class) 
 	local className = "MovingBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inertia", "float", s_Instance.inertia)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
end

function Type:MPModeData (p_class, p_guid)
	local s_Instance = MPModeData(p_class) 
 	local className = "MPModeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "vehiclePoints", "int", s_Instance.vehiclePoints)
end

function Type:MultiCrossfaderGroup (p_class, p_guid)
	local s_Instance = MultiCrossfaderGroup(p_class) 
 	local className = "MultiCrossfaderGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "fadeAmplitude", "float", s_Instance.fadeAmplitude)
	self:SendDefault(s_guid,className, "fadeBegin", "float", s_Instance.fadeBegin)
	self:SendDefault(s_guid,className, "fadeEnd", "float", s_Instance.fadeEnd)
	self:SendDefault(s_guid,className, "fadeType", "FaderType", s_Instance.fadeType)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "stop", "AudioGraphNodePort", s_Instance.stop)
end

function Type:MultiCrossfaderNodeData (p_class, p_guid)
	local s_Instance = MultiCrossfaderNodeData(p_class) 
 	local className = "MultiCrossfaderNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "control", "AudioGraphNodePort", s_Instance.control)
	self:SendDefault(s_guid,className, "crossfaderGroups", "List<CtrRef)>", s_Instance.crossfaderGroups)
	self:SendDefault(s_guid,className, "lockControlValue", "bool", s_Instance.lockControlValue)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "stop", "AudioGraphNodePort", s_Instance.stop)
end

function Type:MultipleActorScenarioEntityData (p_class, p_guid)
	local s_Instance = MultipleActorScenarioEntityData(p_class) 
 	local className = "MultipleActorScenarioEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actor1", "int", s_Instance.actor1)
	self:SendDefault(s_guid,className, "actor1Part", "int", s_Instance.actor1Part)
	self:SendDefault(s_guid,className, "actor1Prepared", "bool", s_Instance.actor1Prepared)
	self:SendDefault(s_guid,className, "actor1SecondPart", "int", s_Instance.actor1SecondPart)
	self:SendDefault(s_guid,className, "actor2", "int", s_Instance.actor2)
	self:SendDefault(s_guid,className, "actor2Part", "int", s_Instance.actor2Part)
	self:SendDefault(s_guid,className, "actor2Prepared", "bool", s_Instance.actor2Prepared)
	self:SendDefault(s_guid,className, "actor2SecondPart", "int", s_Instance.actor2SecondPart)
	self:SendDefault(s_guid,className, "actor3", "int", s_Instance.actor3)
	self:SendDefault(s_guid,className, "actor3Part", "int", s_Instance.actor3Part)
	self:SendDefault(s_guid,className, "actor3Prepared", "bool", s_Instance.actor3Prepared)
	self:SendDefault(s_guid,className, "actor3SecondPart", "int", s_Instance.actor3SecondPart)
	self:SendDefault(s_guid,className, "actor4", "int", s_Instance.actor4)
	self:SendDefault(s_guid,className, "actor4Part", "int", s_Instance.actor4Part)
	self:SendDefault(s_guid,className, "actor4Prepared", "bool", s_Instance.actor4Prepared)
	self:SendDefault(s_guid,className, "actor4SecondPart", "int", s_Instance.actor4SecondPart)
	self:SendDefault(s_guid,className, "actor5", "int", s_Instance.actor5)
	self:SendDefault(s_guid,className, "actor5Part", "int", s_Instance.actor5Part)
	self:SendDefault(s_guid,className, "actor5Prepared", "bool", s_Instance.actor5Prepared)
	self:SendDefault(s_guid,className, "actor5SecondPart", "int", s_Instance.actor5SecondPart)
	self:SendDefault(s_guid,className, "actor6", "int", s_Instance.actor6)
	self:SendDefault(s_guid,className, "actor6Part", "int", s_Instance.actor6Part)
	self:SendDefault(s_guid,className, "actor6Prepared", "bool", s_Instance.actor6Prepared)
	self:SendDefault(s_guid,className, "actor6SecondPart", "int", s_Instance.actor6SecondPart)
	self:SendDefault(s_guid,className, "aligningEnabled", "bool", s_Instance.aligningEnabled)
	self:SendDefault(s_guid,className, "checkActor1Finished", "bool", s_Instance.checkActor1Finished)
	self:SendDefault(s_guid,className, "checkActor2Finished", "bool", s_Instance.checkActor2Finished)
	self:SendDefault(s_guid,className, "checkActor3Finished", "bool", s_Instance.checkActor3Finished)
	self:SendDefault(s_guid,className, "checkActor4Finished", "bool", s_Instance.checkActor4Finished)
	self:SendDefault(s_guid,className, "checkActor5Finished", "bool", s_Instance.checkActor5Finished)
	self:SendDefault(s_guid,className, "checkActor6Finished", "bool", s_Instance.checkActor6Finished)
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "levelChoice", "int", s_Instance.levelChoice)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scenarioActive", "bool", s_Instance.scenarioActive)
	self:SendDefault(s_guid,className, "scenarioAntRef", "AntRef", s_Instance.scenarioAntRef)
	self:SendDefault(s_guid,className, "scenarioChoice", "int", s_Instance.scenarioChoice)
	self:SendDefault(s_guid,className, "useExternalTime", "bool", s_Instance.useExternalTime)
	self:SendDefault(s_guid,className, "useInputEventPlayerAsPlayer1", "bool", s_Instance.useInputEventPlayerAsPlayer1)
	self:SendDefault(s_guid,className, "worldSpace", "bool", s_Instance.worldSpace)
	self:SendDefault(s_guid,className, "worldSpaceConnectTransform", "LinearTransform", s_Instance.worldSpaceConnectTransform)
end

function Type:MultipleTargetPainterWeaponData (p_class, p_guid)
	local s_Instance = MultipleTargetPainterWeaponData(p_class) 
 	local className = "MultipleTargetPainterWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "range", "float", s_Instance.range)
	self:SendDefault(s_guid,className, "spottingBehavior", "SpottingType", s_Instance.spottingBehavior)
	self:SendDefault(s_guid,className, "timeObjectIsPainted", "float", s_Instance.timeObjectIsPainted)
	self:SendDefault(s_guid,className, "timeObjectIsSpotted", "float", s_Instance.timeObjectIsSpotted)
	self:SendDefault(s_guid,className, "useLaserPainting", "bool", s_Instance.useLaserPainting)
	self:SendDefault(s_guid,className, "useSpotting", "bool", s_Instance.useSpotting)
end

function Type:MultipleTriggerEntityData (p_class, p_guid)
	local s_Instance = MultipleTriggerEntityData(p_class) 
 	local className = "MultipleTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "triggerAmount", "int", s_Instance.triggerAmount)
end

function Type:NearTargetDetonationData (p_class, p_guid)
	local s_Instance = NearTargetDetonationData(p_class) 
 	local className = "NearTargetDetonationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "detonateNearTarget", "bool", s_Instance.detonateNearTarget)
	self:SendDefault(s_guid,className, "detonationRadius", "float", s_Instance.detonationRadius)
	self:SendDefault(s_guid,className, "maxDetonationDelay", "float", s_Instance.maxDetonationDelay)
	self:SendDefault(s_guid,className, "minDetonationDelay", "float", s_Instance.minDetonationDelay)
end

function Type:NestedList (p_class, p_guid)
	local s_Instance = NestedList(p_class) 
 	local className = "NestedList"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultHighlighted", "DefaultSelectionItem", s_Instance.defaultHighlighted)
	self:SendDefault(s_guid,className, "dynamicShowList", "UIDataSourceInfo", s_Instance.dynamicShowList)
	self:SendDefault(s_guid,className, "hiddenOnPC", "bool", s_Instance.hiddenOnPC)
	self:SendDefault(s_guid,className, "hiddenOnXenon", "bool", s_Instance.hiddenOnXenon)
	self:SendDefault(s_guid,className, "highLightOnUpdate", "bool", s_Instance.highLightOnUpdate)
	self:SendDefault(s_guid,className, "index", "string", s_Instance.index)
	self:SendDefault(s_guid,className, "label", "string", s_Instance.label)
	self:SendDefault(s_guid,className, "listDataSource", "UIDataSourceInfo", s_Instance.listDataSource)
	self:SendDefault(s_guid,className, "rowType", "UIListRowType", s_Instance.rowType)
	self:SendDefault(s_guid,className, "staticItems", "List<string)>", s_Instance.staticItems)
	self:SendDefault(s_guid,className, "useAsNormalListRows", "bool", s_Instance.useAsNormalListRows)
end

function Type:NetworkableLoosePartPhysicsData (p_class, p_guid)
	local s_Instance = NetworkableLoosePartPhysicsData(p_class) 
 	local className = "NetworkableLoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "networked", "bool", s_Instance.networked)
end

function Type:NetworkDataId (p_class, p_guid)
	local s_Instance = NetworkDataId(p_class) 
 	local className = "NetworkDataId"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "uint", s_Instance.value)
end

function Type:NetworkPerformanceEvent (p_class, p_guid)
	local s_Instance = NetworkPerformanceEvent(p_class) 
 	local className = "NetworkPerformanceEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "performanceLink", "GUID", s_Instance.performanceLink)
	self:SendDefault(s_guid,className, "received", "uint", s_Instance.received)
	self:SendDefault(s_guid,className, "receivedAverage", "float", s_Instance.receivedAverage)
	self:SendDefault(s_guid,className, "sent", "uint", s_Instance.sent)
	self:SendDefault(s_guid,className, "sentAverage", "float", s_Instance.sentAverage)
end

function Type:NetworkSettings (p_class, p_guid)
	local s_Instance = NetworkSettings(p_class) 
 	local className = "NetworkSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientConnectionDebugFilePrefix", "string", s_Instance.clientConnectionDebugFilePrefix)
	self:SendDefault(s_guid,className, "clientPort", "uint", s_Instance.clientPort)
	self:SendDefault(s_guid,className, "connectTimeout", "float", s_Instance.connectTimeout)
	self:SendDefault(s_guid,className, "incrementServerPortOnFail", "bool", s_Instance.incrementServerPortOnFail)
	self:SendDefault(s_guid,className, "maxClientCount", "uint", s_Instance.maxClientCount)
	self:SendDefault(s_guid,className, "maxClientFrameSize", "uint", s_Instance.maxClientFrameSize)
	self:SendDefault(s_guid,className, "maxGhostCount", "uint", s_Instance.maxGhostCount)
	self:SendDefault(s_guid,className, "maxServerFrameSize", "uint", s_Instance.maxServerFrameSize)
	self:SendDefault(s_guid,className, "protocolVersion", "uint", s_Instance.protocolVersion)
	self:SendDefault(s_guid,className, "serverAddress", "string", s_Instance.serverAddress)
	self:SendDefault(s_guid,className, "serverConnectionDebugFilePrefix", "string", s_Instance.serverConnectionDebugFilePrefix)
	self:SendDefault(s_guid,className, "serverPort", "uint", s_Instance.serverPort)
	self:SendDefault(s_guid,className, "timeNudgeBias", "float", s_Instance.timeNudgeBias)
	self:SendDefault(s_guid,className, "timeNudgeGhostFrequencyFactor", "float", s_Instance.timeNudgeGhostFrequencyFactor)
	self:SendDefault(s_guid,className, "timeSyncEnabled", "bool", s_Instance.timeSyncEnabled)
	self:SendDefault(s_guid,className, "titleId", "string", s_Instance.titleId)
	self:SendDefault(s_guid,className, "useFrameManager", "bool", s_Instance.useFrameManager)
	self:SendDefault(s_guid,className, "xlspAddress", "string", s_Instance.xlspAddress)
end

function Type:NetworkVoteDetails (p_class, p_guid)
	local s_Instance = NetworkVoteDetails(p_class) 
 	local className = "NetworkVoteDetails"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "issuer", "uint", s_Instance.issuer)
	self:SendDefault(s_guid,className, "personal", "bool", s_Instance.personal)
	self:SendDefault(s_guid,className, "voteId", "sbyte", s_Instance.voteId)
end

function Type:NFSUIListDataBinding (p_class, p_guid)
	local s_Instance = NFSUIListDataBinding(p_class) 
 	local className = "NFSUIListDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "items", "List<UIListItem)>", s_Instance.items)
	self:SendDefault(s_guid,className, "refresh", "UIDataSourceInfo", s_Instance.refresh)
end

function Type:NormalizeSettings (p_class, p_guid)
	local s_Instance = NormalizeSettings(p_class) 
 	local className = "NormalizeSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lower", "float", s_Instance.lower)
	self:SendDefault(s_guid,className, "maximum", "float", s_Instance.maximum)
	self:SendDefault(s_guid,className, "minimum", "float", s_Instance.minimum)
	self:SendDefault(s_guid,className, "normalize", "bool", s_Instance.normalize)
	self:SendDefault(s_guid,className, "upper", "float", s_Instance.upper)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:NotEntityData (p_class, p_guid)
	local s_Instance = NotEntityData(p_class) 
 	local className = "NotEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "bool", s_Instance.inValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:NumberGeneratorNodeData (p_class, p_guid)
	local s_Instance = NumberGeneratorNodeData(p_class) 
 	local className = "NumberGeneratorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "mode", "NumberGeneratorMode", s_Instance.mode)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
end

function Type:OBBData (p_class, p_guid)
	local s_Instance = OBBData(p_class) 
 	local className = "OBBData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "halfExtents", "Vec3", s_Instance.halfExtents)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:ObjectBlueprint (p_class, p_guid)
	local s_Instance = ObjectBlueprint(p_class) 
 	local className = "ObjectBlueprint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "object", "CtrRef", s_Instance.object)
end

function Type:ObjectEnterAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = ObjectEnterAreaTriggerEntityData(p_class) 
 	local className = "ObjectEnterAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "updatePass", "fb.UpdatePass)", s_Instance.updatePass)
end

function Type:ObjectiveEntityData (p_class, p_guid)
	local s_Instance = ObjectiveEntityData(p_class) 
 	local className = "ObjectiveEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delayTime", "float", s_Instance.delayTime)
	self:SendDefault(s_guid,className, "displaySuccess", "bool", s_Instance.displaySuccess)
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "hudData", "CtrRef", s_Instance.hudData)
	self:SendDefault(s_guid,className, "objectiveBriefSid", "string", s_Instance.objectiveBriefSid)
	self:SendDefault(s_guid,className, "objectiveSid", "string", s_Instance.objectiveSid)
	self:SendDefault(s_guid,className, "objectiveType", "fb.ObjectiveType)", s_Instance.objectiveType)
	self:SendDefault(s_guid,className, "reciever", "MessageReciever", s_Instance.reciever)
	self:SendDefault(s_guid,className, "retriggerSuccessOnShowObjective", "bool", s_Instance.retriggerSuccessOnShowObjective)
	self:SendDefault(s_guid,className, "squadId", "fb.SquadId)", s_Instance.squadId)
	self:SendDefault(s_guid,className, "successSid", "string", s_Instance.successSid)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "tutorial", "bool", s_Instance.tutorial)
end

function Type:ObjectVariation (p_class, p_guid)
	local s_Instance = ObjectVariation(p_class) 
 	local className = "ObjectVariation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
end

function Type:ObjectVariationSwitchEntityData (p_class, p_guid)
	local s_Instance = ObjectVariationSwitchEntityData(p_class) 
 	local className = "ObjectVariationSwitchEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "variation1", "CtrRef", s_Instance.variation1)
	self:SendDefault(s_guid,className, "variation2", "CtrRef", s_Instance.variation2)
end

function Type:OccluderMeshEntityData (p_class, p_guid)
	local s_Instance = OccluderMeshEntityData(p_class) 
 	local className = "OccluderMeshEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
end

function Type:OccluderVolumeEntityData (p_class, p_guid)
	local s_Instance = OccluderVolumeEntityData(p_class) 
 	local className = "OccluderVolumeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "occluderHighPriority", "bool", s_Instance.occluderHighPriority)
end

function Type:OcclusionSettings (p_class, p_guid)
	local s_Instance = OcclusionSettings(p_class) 
 	local className = "OcclusionSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawBinaryBuffer", "bool", s_Instance.drawBinaryBuffer)
	self:SendDefault(s_guid,className, "drawZbuffer", "bool", s_Instance.drawZbuffer)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
end

function Type:OneOptionAxisEditableAction (p_class, p_guid)
	local s_Instance = OneOptionAxisEditableAction(p_class) 
 	local className = "OneOptionAxisEditableAction"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "header", "string", s_Instance.header)
	self:SendDefault(s_guid,className, "invert", "bool", s_Instance.invert)
end

function Type:OneOptionButtonEditableAction (p_class, p_guid)
	local s_Instance = OneOptionButtonEditableAction(p_class) 
 	local className = "OneOptionButtonEditableAction"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "header", "string", s_Instance.header)
end

function Type:OnGroundStateData (p_class, p_guid)
	local s_Instance = OnGroundStateData(p_class) 
 	local className = "OnGroundStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowedDistanceFromGround", "float", s_Instance.allowedDistanceFromGround)
	self:SendDefault(s_guid,className, "groundHugging", "bool", s_Instance.groundHugging)
	self:SendDefault(s_guid,className, "jumpDelay", "float", s_Instance.jumpDelay)
	self:SendDefault(s_guid,className, "jumpStaminaPenalty", "float", s_Instance.jumpStaminaPenalty)
	self:SendDefault(s_guid,className, "limitDownwardVelocity", "bool", s_Instance.limitDownwardVelocity)
end

function Type:OnlineConfiguration (p_class, p_guid)
	local s_Instance = OnlineConfiguration(p_class) 
 	local className = "OnlineConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "backend", "BackendType", s_Instance.backend)
	self:SendDefault(s_guid,className, "chat", "CtrRef", s_Instance.chat)
	self:SendDefault(s_guid,className, "provider", "CtrRef", s_Instance.provider)
	self:SendDefault(s_guid,className, "richPresence", "CtrRef", s_Instance.richPresence)
end

function Type:OnlineEnvironmentConsoleUrl (p_class, p_guid)
	local s_Instance = OnlineEnvironmentConsoleUrl(p_class) 
 	local className = "OnlineEnvironmentConsoleUrl"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "urls", "List<OnlineEnvironmentConsoleUrlData)>", s_Instance.urls)
end

function Type:OnlineEnvironmentConsoleUrlData (p_class, p_guid)
	local s_Instance = OnlineEnvironmentConsoleUrlData(p_class) 
 	local className = "OnlineEnvironmentConsoleUrlData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "url", "OnlineEnvironmentUrl", s_Instance.url)
end

function Type:OnlineEnvironmentUrl (p_class, p_guid)
	local s_Instance = OnlineEnvironmentUrl(p_class) 
 	local className = "OnlineEnvironmentUrl"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "urls", "List<OnlineEnvironmentUrlData)>", s_Instance.urls)
end

function Type:OnlineEnvironmentUrlData (p_class, p_guid)
	local s_Instance = OnlineEnvironmentUrlData(p_class) 
 	local className = "OnlineEnvironmentUrlData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "environment", "OnlineEnvironment", s_Instance.environment)
	self:SendDefault(s_guid,className, "url", "string", s_Instance.url)
end

function Type:OnlinePlatformConfiguration (p_class, p_guid)
	local s_Instance = OnlinePlatformConfiguration(p_class) 
 	local className = "OnlinePlatformConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientBackends", "List<CtrRef)>", s_Instance.clientBackends)
	self:SendDefault(s_guid,className, "isFallback", "bool", s_Instance.isFallback)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "serverBackends", "List<CtrRef)>", s_Instance.serverBackends)
	self:SendDefault(s_guid,className, "services", "CtrRef", s_Instance.services)
end

function Type:OnlineProviderAsset (p_class, p_guid)
	local s_Instance = OnlineProviderAsset(p_class) 
 	local className = "OnlineProviderAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "configurations", "List<OnlineProviderConfiguration)>", s_Instance.configurations)
end

function Type:OnlineProviderConfiguration (p_class, p_guid)
	local s_Instance = OnlineProviderConfiguration(p_class) 
 	local className = "OnlineProviderConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "client", "string", s_Instance.client)
	self:SendDefault(s_guid,className, "isServer", "bool", s_Instance.isServer)
	self:SendDefault(s_guid,className, "platform", "GamePlatform", s_Instance.platform)
	self:SendDefault(s_guid,className, "serverSocketPacketSize", "uint", s_Instance.serverSocketPacketSize)
	self:SendDefault(s_guid,className, "serviceName", "string", s_Instance.serviceName)
	self:SendDefault(s_guid,className, "sKU", "string", s_Instance.sKU)
	self:SendDefault(s_guid,className, "version", "string", s_Instance.version)
end

function Type:OnlineServicesAsset (p_class, p_guid)
	local s_Instance = OnlineServicesAsset(p_class) 
 	local className = "OnlineServicesAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "onlineServices", "List<CtrRef)>", s_Instance.onlineServices)
end

function Type:OnlineSettings (p_class, p_guid)
	local s_Instance = OnlineSettings(p_class) 
 	local className = "OnlineSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "backend", "BackendType", s_Instance.backend)
	self:SendDefault(s_guid,className, "chatSettings", "CtrRef", s_Instance.chatSettings)
	self:SendDefault(s_guid,className, "country", "string", s_Instance.country)
	self:SendDefault(s_guid,className, "environment", "OnlineEnvironment", s_Instance.environment)
	self:SendDefault(s_guid,className, "isSecure", "bool", s_Instance.isSecure)
	self:SendDefault(s_guid,className, "matchmakeImmediately", "bool", s_Instance.matchmakeImmediately)
	self:SendDefault(s_guid,className, "matchmakingMode", "string", s_Instance.matchmakingMode)
	self:SendDefault(s_guid,className, "matchmakingOptions", "string", s_Instance.matchmakingOptions)
	self:SendDefault(s_guid,className, "matchmakingToken", "string", s_Instance.matchmakingToken)
	self:SendDefault(s_guid,className, "negativeUserCacheRefreshPeriod", "uint", s_Instance.negativeUserCacheRefreshPeriod)
	self:SendDefault(s_guid,className, "peerBackend", "BackendType", s_Instance.peerBackend)
	self:SendDefault(s_guid,className, "provider", "CtrRef", s_Instance.provider)
	self:SendDefault(s_guid,className, "region", "string", s_Instance.region)
	self:SendDefault(s_guid,className, "richPresence", "CtrRef", s_Instance.richPresence)
	self:SendDefault(s_guid,className, "supportHostMigration", "bool", s_Instance.supportHostMigration)
end

function Type:OperandLogicNode (p_class, p_guid)
	local s_Instance = OperandLogicNode(p_class) 
 	local className = "OperandLogicNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "leftDataSourceInfo", "UIDataSourceInfo", s_Instance.leftDataSourceInfo)
	self:SendDefault(s_guid,className, "operator", "UILogicOperator", s_Instance.operator)
	self:SendDefault(s_guid,className, "rightDataSourceInfo", "UIDataSourceInfo", s_Instance.rightDataSourceInfo)
	self:SendDefault(s_guid,className, "rightLiteralOperand", "double", s_Instance.rightLiteralOperand)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:Or4EntityData (p_class, p_guid)
	local s_Instance = Or4EntityData(p_class) 
 	local className = "Or4EntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "bool", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "bool", s_Instance.in2)
	self:SendDefault(s_guid,className, "in3", "bool", s_Instance.in3)
	self:SendDefault(s_guid,className, "in4", "bool", s_Instance.in4)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:OrderEntityData (p_class, p_guid)
	local s_Instance = OrderEntityData(p_class) 
 	local className = "OrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugName", "string", s_Instance.debugName)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "issueOrderDelay", "float", s_Instance.issueOrderDelay)
	self:SendDefault(s_guid,className, "onCompleteTimeOut", "float", s_Instance.onCompleteTimeOut)
	self:SendDefault(s_guid,className, "onFailedTimeOut", "float", s_Instance.onFailedTimeOut)
	self:SendDefault(s_guid,className, "readinessOnStart", "ReadinessLevel", s_Instance.readinessOnStart)
end

function Type:OrderReadiness (p_class, p_guid)
	local s_Instance = OrderReadiness(p_class) 
 	local className = "OrderReadiness"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minimumReadiness", "ReadinessState", s_Instance.minimumReadiness)
	self:SendDefault(s_guid,className, "orderType", "string", s_Instance.orderType)
end

function Type:OrderSettings (p_class, p_guid)
	local s_Instance = OrderSettings(p_class) 
 	local className = "OrderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "orders", "List<CtrRef)>", s_Instance.orders)
end

function Type:OrEntityData (p_class, p_guid)
	local s_Instance = OrEntityData(p_class) 
 	local className = "OrEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "bool", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "bool", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:OrientationNodeData (p_class, p_guid)
	local s_Instance = OrientationNodeData(p_class) 
 	local className = "OrientationNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "listenerRelativePitch", "AudioGraphNodePort", s_Instance.listenerRelativePitch)
	self:SendDefault(s_guid,className, "listenerRelativeRoll", "AudioGraphNodePort", s_Instance.listenerRelativeRoll)
	self:SendDefault(s_guid,className, "listenerRelativeYaw", "AudioGraphNodePort", s_Instance.listenerRelativeYaw)
end

function Type:OutdoorLightComponentData (p_class, p_guid)
	local s_Instance = OutdoorLightComponentData(p_class) 
 	local className = "OutdoorLightComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cloudShadowCoverage", "float", s_Instance.cloudShadowCoverage)
	self:SendDefault(s_guid,className, "cloudShadowEnable", "bool", s_Instance.cloudShadowEnable)
	self:SendDefault(s_guid,className, "cloudShadowExponent", "float", s_Instance.cloudShadowExponent)
	self:SendDefault(s_guid,className, "cloudShadowSize", "float", s_Instance.cloudShadowSize)
	self:SendDefault(s_guid,className, "cloudShadowSpeed", "Vec2", s_Instance.cloudShadowSpeed)
	self:SendDefault(s_guid,className, "cloudShadowTexture", "CtrRef", s_Instance.cloudShadowTexture)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "groundColor", "Vec3", s_Instance.groundColor)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "skyColor", "Vec3", s_Instance.skyColor)
	self:SendDefault(s_guid,className, "skyEnvmapShadowScale", "float", s_Instance.skyEnvmapShadowScale)
	self:SendDefault(s_guid,className, "skyLightAngleFactor", "float", s_Instance.skyLightAngleFactor)
	self:SendDefault(s_guid,className, "sunColor", "Vec3", s_Instance.sunColor)
	self:SendDefault(s_guid,className, "sunRotationX", "float", s_Instance.sunRotationX)
	self:SendDefault(s_guid,className, "sunRotationY", "float", s_Instance.sunRotationY)
	self:SendDefault(s_guid,className, "sunShadowHeightScale", "float", s_Instance.sunShadowHeightScale)
	self:SendDefault(s_guid,className, "sunSpecularScale", "float", s_Instance.sunSpecularScale)
	self:SendDefault(s_guid,className, "translucencyAmbient", "float", s_Instance.translucencyAmbient)
	self:SendDefault(s_guid,className, "translucencyDistortion", "float", s_Instance.translucencyDistortion)
	self:SendDefault(s_guid,className, "translucencyPower", "float", s_Instance.translucencyPower)
	self:SendDefault(s_guid,className, "translucencyScale", "float", s_Instance.translucencyScale)
end

function Type:OutdoorLightEffectState (p_class, p_guid)
	local s_Instance = OutdoorLightEffectState(p_class) 
 	local className = "OutdoorLightEffectState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cloudShadowCoverage", "float", s_Instance.cloudShadowCoverage)
	self:SendDefault(s_guid,className, "cloudShadowEnable", "bool", s_Instance.cloudShadowEnable)
	self:SendDefault(s_guid,className, "cloudShadowExponent", "float", s_Instance.cloudShadowExponent)
	self:SendDefault(s_guid,className, "cloudShadowSize", "float", s_Instance.cloudShadowSize)
	self:SendDefault(s_guid,className, "cloudShadowSpeed", "Vec2", s_Instance.cloudShadowSpeed)
	self:SendDefault(s_guid,className, "cloudShadowTexture", "CtrRef", s_Instance.cloudShadowTexture)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "groundColor", "Vec3", s_Instance.groundColor)
	self:SendDefault(s_guid,className, "skyColor", "Vec3", s_Instance.skyColor)
	self:SendDefault(s_guid,className, "skyLightAngleFactor", "float", s_Instance.skyLightAngleFactor)
	self:SendDefault(s_guid,className, "sunColor", "Vec3", s_Instance.sunColor)
	self:SendDefault(s_guid,className, "sunRotationX", "float", s_Instance.sunRotationX)
	self:SendDefault(s_guid,className, "sunRotationY", "float", s_Instance.sunRotationY)
	self:SendDefault(s_guid,className, "sunShadowHeightScale", "float", s_Instance.sunShadowHeightScale)
end

function Type:OutputNodeData (p_class, p_guid)
	local s_Instance = OutputNodeData(p_class) 
 	local className = "OutputNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attenuationCurve", "AudioCurve", s_Instance.attenuationCurve)
	self:SendDefault(s_guid,className, "bypassHeadroom", "AudioGraphNodePort", s_Instance.bypassHeadroom)
	self:SendDefault(s_guid,className, "enableHdr", "bool", s_Instance.enableHdr)
	self:SendDefault(s_guid,className, "gain", "float", s_Instance.gain)
	self:SendDefault(s_guid,className, "hFDampingDistance", "float", s_Instance.hFDampingDistance)
	self:SendDefault(s_guid,className, "hFDampingObstruction", "float", s_Instance.hFDampingObstruction)
	self:SendDefault(s_guid,className, "hFDampingOcclusion", "float", s_Instance.hFDampingOcclusion)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "lowPassPlugin", "SoundGraphPluginRef", s_Instance.lowPassPlugin)
	self:SendDefault(s_guid,className, "mainSend", "CtrRef", s_Instance.mainSend)
	self:SendDefault(s_guid,className, "mainSendPlugin", "SoundGraphPluginRef", s_Instance.mainSendPlugin)
	self:SendDefault(s_guid,className, "minDistance", "float", s_Instance.minDistance)
	self:SendDefault(s_guid,className, "outputName", "string", s_Instance.outputName)
	self:SendDefault(s_guid,className, "outputNameHash", "uint", s_Instance.outputNameHash)
	self:SendDefault(s_guid,className, "solo", "bool", s_Instance.solo)
	self:SendDefault(s_guid,className, "transformSource", "OutputTransformSource", s_Instance.transformSource)
	self:SendDefault(s_guid,className, "vuPlugin", "SoundGraphPluginRef", s_Instance.vuPlugin)
end

function Type:OverHeatData (p_class, p_guid)
	local s_Instance = OverHeatData(p_class) 
 	local className = "OverHeatData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heatDropPerSecond", "float", s_Instance.heatDropPerSecond)
	self:SendDefault(s_guid,className, "heatPerBullet", "float", s_Instance.heatPerBullet)
	self:SendDefault(s_guid,className, "overHeatEffect", "FireEffectData", s_Instance.overHeatEffect)
	self:SendDefault(s_guid,className, "overHeatPenaltyTime", "float", s_Instance.overHeatPenaltyTime)
	self:SendDefault(s_guid,className, "overHeatThreshold", "float", s_Instance.overHeatThreshold)
end

function Type:PackagingCellData (p_class, p_guid)
	local s_Instance = PackagingCellData(p_class) 
 	local className = "PackagingCellData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rules", "List<CtrRef)>", s_Instance.rules)
	self:SendDefault(s_guid,className, "shape", "List<Vec2)>", s_Instance.shape)
	self:SendDefault(s_guid,className, "targets", "List<CtrRef)>", s_Instance.targets)
end

function Type:PackagingDetailInfo (p_class, p_guid)
	local s_Instance = PackagingDetailInfo(p_class) 
 	local className = "PackagingDetailInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "includeAnimation", "bool", s_Instance.includeAnimation)
	self:SendDefault(s_guid,className, "includeMeshes", "bool", s_Instance.includeMeshes)
	self:SendDefault(s_guid,className, "includeSounds", "bool", s_Instance.includeSounds)
	self:SendDefault(s_guid,className, "includeTextures", "bool", s_Instance.includeTextures)
	self:SendDefault(s_guid,className, "lodsToSkip", "int", s_Instance.lodsToSkip)
	self:SendDefault(s_guid,className, "mipsToSkip", "int", s_Instance.mipsToSkip)
end

function Type:PackagingRule (p_class, p_guid)
	local s_Instance = PackagingRule(p_class) 
 	local className = "PackagingRule"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "canTargetSelf", "bool", s_Instance.canTargetSelf)
	self:SendDefault(s_guid,className, "debugColor", "Vec3", s_Instance.debugColor)
end

function Type:PadInputActionData (p_class, p_guid)
	local s_Instance = PadInputActionData(p_class) 
 	local className = "PadInputActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "button", "InputDevicePadButtons", s_Instance.button)
	self:SendDefault(s_guid,className, "pov", "InputDevicePOVs", s_Instance.pov)
	self:SendDefault(s_guid,className, "pS3AlternativeButton", "InputDevicePadButtons", s_Instance.pS3AlternativeButton)
	self:SendDefault(s_guid,className, "useSquareInput", "bool", s_Instance.useSquareInput)
end

function Type:PadRumbleNodeData (p_class, p_guid)
	local s_Instance = PadRumbleNodeData(p_class) 
 	local className = "PadRumbleNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rumbleHigh", "AudioGraphNodePort", s_Instance.rumbleHigh)
	self:SendDefault(s_guid,className, "rumbleLow", "AudioGraphNodePort", s_Instance.rumbleLow)
end

function Type:ParachuteStateData (p_class, p_guid)
	local s_Instance = ParachuteStateData(p_class) 
 	local className = "ParachuteStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angleOfAttack", "float", s_Instance.angleOfAttack)
	self:SendDefault(s_guid,className, "bankOffset", "float", s_Instance.bankOffset)
	self:SendDefault(s_guid,className, "brakeOffset", "float", s_Instance.brakeOffset)
	self:SendDefault(s_guid,className, "deployTime", "float", s_Instance.deployTime)
	self:SendDefault(s_guid,className, "forwardDragCoefficient", "float", s_Instance.forwardDragCoefficient)
	self:SendDefault(s_guid,className, "maxPitchVelocity", "float", s_Instance.maxPitchVelocity)
	self:SendDefault(s_guid,className, "maxRollVelocity", "float", s_Instance.maxRollVelocity)
	self:SendDefault(s_guid,className, "maxYawVelocity", "float", s_Instance.maxYawVelocity)
	self:SendDefault(s_guid,className, "terminalVelocity", "float", s_Instance.terminalVelocity)
	self:SendDefault(s_guid,className, "throttleOffset", "float", s_Instance.throttleOffset)
end

function Type:ParameterFilterLinearNodeData (p_class, p_guid)
	local s_Instance = ParameterFilterLinearNodeData(p_class) 
 	local className = "ParameterFilterLinearNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackSpeed", "AudioGraphNodePort", s_Instance.attackSpeed)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "releaseSpeed", "AudioGraphNodePort", s_Instance.releaseSpeed)
end

function Type:ParameterFilterLpNodeData (p_class, p_guid)
	local s_Instance = ParameterFilterLpNodeData(p_class) 
 	local className = "ParameterFilterLpNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hz", "AudioGraphNodePort", s_Instance.hz)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
end

function Type:PartComponentData (p_class, p_guid)
	local s_Instance = PartComponentData(p_class) 
 	local className = "PartComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatePhysics", "bool", s_Instance.animatePhysics)
	self:SendDefault(s_guid,className, "healthStates", "List<CtrRef)>", s_Instance.healthStates)
	self:SendDefault(s_guid,className, "isFragile", "bool", s_Instance.isFragile)
	self:SendDefault(s_guid,className, "isNetworkable", "bool", s_Instance.isNetworkable)
	self:SendDefault(s_guid,className, "isSupported", "bool", s_Instance.isSupported)
	self:SendDefault(s_guid,className, "isWindow", "bool", s_Instance.isWindow)
	self:SendDefault(s_guid,className, "partLinks", "List<CtrRef)>", s_Instance.partLinks)
end

function Type:PartInfoData (p_class, p_guid)
	local s_Instance = PartInfoData(p_class) 
 	local className = "PartInfoData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aabb", "AxisAlignedBox", s_Instance.aabb)
	self:SendDefault(s_guid,className, "translation", "Vec3", s_Instance.translation)
end

function Type:PartLinkData (p_class, p_guid)
	local s_Instance = PartLinkData(p_class) 
 	local className = "PartLinkData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "partComponentIndex1", "uint", s_Instance.partComponentIndex1)
	self:SendDefault(s_guid,className, "partComponentIndex2", "uint", s_Instance.partComponentIndex2)
end

function Type:PathfindingBlob (p_class, p_guid)
	local s_Instance = PathfindingBlob(p_class) 
 	local className = "PathfindingBlob"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blobId", "GUID", s_Instance.blobId)
	self:SendDefault(s_guid,className, "blobSize", "uint", s_Instance.blobSize)
	self:SendDefault(s_guid,className, "chunkSizes", "List<uint)>", s_Instance.chunkSizes)
end

function Type:PathfindingBuildSettingsAsset (p_class, p_guid)
	local s_Instance = PathfindingBuildSettingsAsset(p_class) 
 	local className = "PathfindingBuildSettingsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalInwardsSmoothingDist", "float", s_Instance.additionalInwardsSmoothingDist)
	self:SendDefault(s_guid,className, "entityHeight", "float", s_Instance.entityHeight)
	self:SendDefault(s_guid,className, "entityRadius", "float", s_Instance.entityRadius)
	self:SendDefault(s_guid,className, "gridSideLength", "float", s_Instance.gridSideLength)
	self:SendDefault(s_guid,className, "leaveSmallIslandsTouchingPortals", "bool", s_Instance.leaveSmallIslandsTouchingPortals)
	self:SendDefault(s_guid,className, "maxStep", "float", s_Instance.maxStep)
	self:SendDefault(s_guid,className, "maxWalkableSlope", "float", s_Instance.maxWalkableSlope)
	self:SendDefault(s_guid,className, "minIslandSurfaceArea", "float", s_Instance.minIslandSurfaceArea)
	self:SendDefault(s_guid,className, "optimizeForAxisAligned", "bool", s_Instance.optimizeForAxisAligned)
	self:SendDefault(s_guid,className, "terrainSamplingStep", "uint", s_Instance.terrainSamplingStep)
	self:SendDefault(s_guid,className, "tesselateForPathingAccuracy", "bool", s_Instance.tesselateForPathingAccuracy)
	self:SendDefault(s_guid,className, "useEnhancedTerrainTracking", "bool", s_Instance.useEnhancedTerrainTracking)
	self:SendDefault(s_guid,className, "voxSize", "float", s_Instance.voxSize)
end

function Type:PathfindingDebugSettings (p_class, p_guid)
	local s_Instance = PathfindingDebugSettings(p_class) 
 	local className = "PathfindingDebugSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawConnections", "bool", s_Instance.drawConnections)
	self:SendDefault(s_guid,className, "drawFilledPolygons", "bool", s_Instance.drawFilledPolygons)
	self:SendDefault(s_guid,className, "drawMemory", "bool", s_Instance.drawMemory)
	self:SendDefault(s_guid,className, "drawObstacles", "bool", s_Instance.drawObstacles)
	self:SendDefault(s_guid,className, "drawPolygonOutline", "bool", s_Instance.drawPolygonOutline)
	self:SendDefault(s_guid,className, "drawStats", "bool", s_Instance.drawStats)
	self:SendDefault(s_guid,className, "drawTimings", "bool", s_Instance.drawTimings)
	self:SendDefault(s_guid,className, "originalPaths", "bool", s_Instance.originalPaths)
	self:SendDefault(s_guid,className, "potentialObstacles", "bool", s_Instance.potentialObstacles)
	self:SendDefault(s_guid,className, "randomPositions", "bool", s_Instance.randomPositions)
	self:SendDefault(s_guid,className, "replayMode", "PathfindingReplayMode", s_Instance.replayMode)
	self:SendDefault(s_guid,className, "textOffsetY", "int", s_Instance.textOffsetY)
	self:SendDefault(s_guid,className, "textStartX", "int", s_Instance.textStartX)
	self:SendDefault(s_guid,className, "textStartY", "int", s_Instance.textStartY)
	self:SendDefault(s_guid,className, "typesToDrawMask", "int", s_Instance.typesToDrawMask)
end

function Type:PathfindingObjectCategoryRepresentation (p_class, p_guid)
	local s_Instance = PathfindingObjectCategoryRepresentation(p_class) 
 	local className = "PathfindingObjectCategoryRepresentation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "CtrRef", s_Instance.category)
	self:SendDefault(s_guid,className, "representation", "PathfindingRepresentation", s_Instance.representation)
end

function Type:PathfindingSandboxAsset (p_class, p_guid)
	local s_Instance = PathfindingSandboxAsset(p_class) 
 	local className = "PathfindingSandboxAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "system", "CtrRef", s_Instance.system)
end

function Type:PathfindingSystemEntityData (p_class, p_guid)
	local s_Instance = PathfindingSystemEntityData(p_class) 
 	local className = "PathfindingSystemEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pathfindingTypesOnLevel", "List<uint)>", s_Instance.pathfindingTypesOnLevel)
end

function Type:PathfindingTypeAsset (p_class, p_guid)
	local s_Instance = PathfindingTypeAsset(p_class) 
 	local className = "PathfindingTypeAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "uint", s_Instance.index)
end

function Type:PathFollowingComponentData (p_class, p_guid)
	local s_Instance = PathFollowingComponentData(p_class) 
 	local className = "PathFollowingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alternatePathfindingIndices", "List<uint)>", s_Instance.alternatePathfindingIndices)
	self:SendDefault(s_guid,className, "movementCorridorRadius", "float", s_Instance.movementCorridorRadius)
	self:SendDefault(s_guid,className, "preferredPathfindingIndex", "uint", s_Instance.preferredPathfindingIndex)
	self:SendDefault(s_guid,className, "updatePathAtDistancePercent", "float", s_Instance.updatePathAtDistancePercent)
end

function Type:PatrolOrderEntityData (p_class, p_guid)
	local s_Instance = PatrolOrderEntityData(p_class) 
 	local className = "PatrolOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "combatMode", "CombatPatrolMode", s_Instance.combatMode)
	self:SendDefault(s_guid,className, "startAtGeometricallyClosestWaypoint", "bool", s_Instance.startAtGeometricallyClosestWaypoint)
	self:SendDefault(s_guid,className, "startingWaypoint", "CtrRef", s_Instance.startingWaypoint)
	self:SendDefault(s_guid,className, "typeOfRoute", "RouteType", s_Instance.typeOfRoute)
	self:SendDefault(s_guid,className, "usePathFinding", "bool", s_Instance.usePathFinding)
end

function Type:PeakingIir2NodeData (p_class, p_guid)
	local s_Instance = PeakingIir2NodeData(p_class) 
 	local className = "PeakingIir2NodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "frequency", "AudioGraphNodePort", s_Instance.frequency)
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "q", "AudioGraphNodePort", s_Instance.q)
end

function Type:PeerCreateGameParameters (p_class, p_guid)
	local s_Instance = PeerCreateGameParameters(p_class) 
 	local className = "PeerCreateGameParameters"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "base", "MatchmakingCreateGameParameters", s_Instance.base)
	self:SendDefault(s_guid,className, "playerCapacity", "uint", s_Instance.playerCapacity)
end

function Type:PeerServerBackendData (p_class, p_guid)
	local s_Instance = PeerServerBackendData(p_class) 
 	local className = "PeerServerBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "createParameters", "PeerCreateGameParameters", s_Instance.createParameters)
end

function Type:PerformanceEvent (p_class, p_guid)
	local s_Instance = PerformanceEvent(p_class) 
 	local className = "PerformanceEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allocCPUMemory", "float", s_Instance.allocCPUMemory)
	self:SendDefault(s_guid,className, "allocGPUMemory", "float", s_Instance.allocGPUMemory)
	self:SendDefault(s_guid,className, "cPUAverage", "float", s_Instance.cPUAverage)
	self:SendDefault(s_guid,className, "drawCallCount", "int", s_Instance.drawCallCount)
	self:SendDefault(s_guid,className, "freeCPUMemory", "float", s_Instance.freeCPUMemory)
	self:SendDefault(s_guid,className, "freeGPUMemory", "float", s_Instance.freeGPUMemory)
	self:SendDefault(s_guid,className, "gPUAverage", "float", s_Instance.gPUAverage)
	self:SendDefault(s_guid,className, "performanceLink", "GUID", s_Instance.performanceLink)
	self:SendDefault(s_guid,className, "performanceLocation", "string", s_Instance.performanceLocation)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "primitiveCount", "int", s_Instance.primitiveCount)
end

function Type:PerformanceFpsHistogram (p_class, p_guid)
	local s_Instance = PerformanceFpsHistogram(p_class) 
 	local className = "PerformanceFpsHistogram"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "above60", "float", s_Instance.above60)
	self:SendDefault(s_guid,className, "below10", "float", s_Instance.below10)
	self:SendDefault(s_guid,className, "below15", "float", s_Instance.below15)
	self:SendDefault(s_guid,className, "below20", "float", s_Instance.below20)
	self:SendDefault(s_guid,className, "below25", "float", s_Instance.below25)
	self:SendDefault(s_guid,className, "below30", "float", s_Instance.below30)
	self:SendDefault(s_guid,className, "below5", "float", s_Instance.below5)
	self:SendDefault(s_guid,className, "below60", "float", s_Instance.below60)
end

function Type:PerformanceProfileState (p_class, p_guid)
	local s_Instance = PerformanceProfileState(p_class) 
 	local className = "PerformanceProfileState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gpuMemMB", "uint", s_Instance.gpuMemMB)
	self:SendDefault(s_guid,className, "graphicAdapterName", "string", s_Instance.graphicAdapterName)
	self:SendDefault(s_guid,className, "platform", "string", s_Instance.platform)
	self:SendDefault(s_guid,className, "processorClock", "uint", s_Instance.processorClock)
	self:SendDefault(s_guid,className, "processorCoreCount", "uint", s_Instance.processorCoreCount)
	self:SendDefault(s_guid,className, "processorCount", "uint", s_Instance.processorCount)
	self:SendDefault(s_guid,className, "totalMemMB", "uint", s_Instance.totalMemMB)
end

function Type:PerformanceTrackerSettings (p_class, p_guid)
	local s_Instance = PerformanceTrackerSettings(p_class) 
 	local className = "PerformanceTrackerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "interval", "float", s_Instance.interval)
	self:SendDefault(s_guid,className, "juiceLogPerformance", "bool", s_Instance.juiceLogPerformance)
	self:SendDefault(s_guid,className, "supressPerformanceStatsOnIdle", "bool", s_Instance.supressPerformanceStatsOnIdle)
	self:SendDefault(s_guid,className, "supressPerformanceStatsUntilSpawned", "bool", s_Instance.supressPerformanceStatsUntilSpawned)
end

function Type:PersistenceConfiguration (p_class, p_guid)
	local s_Instance = PersistenceConfiguration(p_class) 
 	local className = "PersistenceConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coopProfile", "CtrRef", s_Instance.coopProfile)
	self:SendDefault(s_guid,className, "licenseConfig", "CtrRef", s_Instance.licenseConfig)
	self:SendDefault(s_guid,className, "mPProfile", "CtrRef", s_Instance.mPProfile)
	self:SendDefault(s_guid,className, "pointSystemParams", "CtrRef", s_Instance.pointSystemParams)
	self:SendDefault(s_guid,className, "sPProfile", "CtrRef", s_Instance.sPProfile)
	self:SendDefault(s_guid,className, "statCategoryTreeCollection", "CtrRef", s_Instance.statCategoryTreeCollection)
end

function Type:PersistenceConsumableMapping (p_class, p_guid)
	local s_Instance = PersistenceConsumableMapping(p_class) 
 	local className = "PersistenceConsumableMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "group", "ConsumableGroup", s_Instance.group)
end

function Type:PersistenceData (p_class, p_guid)
	local s_Instance = PersistenceData(p_class) 
 	local className = "PersistenceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientDefaultGroup", "CtrRef", s_Instance.clientDefaultGroup)
	self:SendDefault(s_guid,className, "clubPersistenceName", "string", s_Instance.clubPersistenceName)
	self:SendDefault(s_guid,className, "consumableMappings", "List<PersistenceConsumableMapping)>", s_Instance.consumableMappings)
	self:SendDefault(s_guid,className, "customReportValues", "List<CustomReportValueData)>", s_Instance.customReportValues)
	self:SendDefault(s_guid,className, "deltaGameReports", "bool", s_Instance.deltaGameReports)
	self:SendDefault(s_guid,className, "historyDaily", "bool", s_Instance.historyDaily)
	self:SendDefault(s_guid,className, "historyMonthly", "bool", s_Instance.historyMonthly)
	self:SendDefault(s_guid,className, "historyWeekly", "bool", s_Instance.historyWeekly)
	self:SendDefault(s_guid,className, "outputProperties", "bool", s_Instance.outputProperties)
	self:SendDefault(s_guid,className, "persistenceName", "string", s_Instance.persistenceName)
	self:SendDefault(s_guid,className, "retentionPolicy", "CtrRef", s_Instance.retentionPolicy)
	self:SendDefault(s_guid,className, "serverDefaultGroup", "CtrRef", s_Instance.serverDefaultGroup)
	self:SendDefault(s_guid,className, "values", "List<PersistentValueTemplateData)>", s_Instance.values)
end

function Type:PersistenceGameData (p_class, p_guid)
	local s_Instance = PersistenceGameData(p_class) 
 	local className = "PersistenceGameData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assets", "List<CtrRef)>", s_Instance.assets)
end

function Type:PersistenceRetentionPolicy (p_class, p_guid)
	local s_Instance = PersistenceRetentionPolicy(p_class) 
 	local className = "PersistenceRetentionPolicy"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dailyHistoryCount", "int", s_Instance.dailyHistoryCount)
	self:SendDefault(s_guid,className, "monthlyHistoryCount", "int", s_Instance.monthlyHistoryCount)
	self:SendDefault(s_guid,className, "weeklyHistoryCount", "int", s_Instance.weeklyHistoryCount)
end

function Type:PersistenceSettings (p_class, p_guid)
	local s_Instance = PersistenceSettings(p_class) 
 	local className = "PersistenceSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coopProfile", "CtrRef", s_Instance.coopProfile)
	self:SendDefault(s_guid,className, "licenseConfig", "CtrRef", s_Instance.licenseConfig)
	self:SendDefault(s_guid,className, "mPProfile", "CtrRef", s_Instance.mPProfile)
	self:SendDefault(s_guid,className, "pointSystemParams", "CtrRef", s_Instance.pointSystemParams)
	self:SendDefault(s_guid,className, "sPProfile", "CtrRef", s_Instance.sPProfile)
	self:SendDefault(s_guid,className, "statCategoryTreeCollection", "CtrRef", s_Instance.statCategoryTreeCollection)
end

function Type:PersistenceStatGroup (p_class, p_guid)
	local s_Instance = PersistenceStatGroup(p_class) 
 	local className = "PersistenceStatGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "groupName", "string", s_Instance.groupName)
end

function Type:PersistenceStatTable (p_class, p_guid)
	local s_Instance = PersistenceStatTable(p_class) 
 	local className = "PersistenceStatTable"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ownerPersistenceData", "CtrRef", s_Instance.ownerPersistenceData)
	self:SendDefault(s_guid,className, "tableName", "string", s_Instance.tableName)
end

function Type:PersistentAwardDataStatRef (p_class, p_guid)
	local s_Instance = PersistentAwardDataStatRef(p_class) 
 	local className = "PersistentAwardDataStatRef"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "definition", "CtrRef", s_Instance.definition)
end

function Type:PersistentCriteriaStatRef (p_class, p_guid)
	local s_Instance = PersistentCriteriaStatRef(p_class) 
 	local className = "PersistentCriteriaStatRef"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criteria", "CtrRef", s_Instance.criteria)
	self:SendDefault(s_guid,className, "criteriaOwner", "CtrRef", s_Instance.criteriaOwner)
	self:SendDefault(s_guid,className, "paramX", "CtrRef", s_Instance.paramX)
	self:SendDefault(s_guid,className, "paramY", "CtrRef", s_Instance.paramY)
end

function Type:PersistentValueTemplate (p_class, p_guid)
	local s_Instance = PersistentValueTemplate(p_class) 
 	local className = "PersistentValueTemplate"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "PersistentValueTemplateData", s_Instance.data)
	self:SendDefault(s_guid,className, "derivedFormulaRefs", "List<CtrRef)>", s_Instance.derivedFormulaRefs)
end

function Type:PersistentValueTemplateData (p_class, p_guid)
	local s_Instance = PersistentValueTemplateData(p_class) 
 	local className = "PersistentValueTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clubStat", "bool", s_Instance.clubStat)
	self:SendDefault(s_guid,className, "dataType", "PersistentValueDataType", s_Instance.dataType)
	self:SendDefault(s_guid,className, "defaultFloatValue", "float", s_Instance.defaultFloatValue)
	self:SendDefault(s_guid,className, "defaultIntValue", "int", s_Instance.defaultIntValue)
	self:SendDefault(s_guid,className, "defaultValue", "string", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "forceIntoTemplate", "bool", s_Instance.forceIntoTemplate)
	self:SendDefault(s_guid,className, "group", "AwardGroup", s_Instance.group)
	self:SendDefault(s_guid,className, "historyType", "PersistentValueHistoryType", s_Instance.historyType)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "valueType", "PersistentValueType", s_Instance.valueType)
end

function Type:PersistentValueTemplateStatRef (p_class, p_guid)
	local s_Instance = PersistentValueTemplateStatRef(p_class) 
 	local className = "PersistentValueTemplateStatRef"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "definition", "CtrRef", s_Instance.definition)
end

function Type:PhantomComponentData (p_class, p_guid)
	local s_Instance = PhantomComponentData(p_class) 
 	local className = "PhantomComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asyncQueryPointerAsset", "AntRef", s_Instance.asyncQueryPointerAsset)
	self:SendDefault(s_guid,className, "boxSize", "Vec3", s_Instance.boxSize)
	self:SendDefault(s_guid,className, "enableTrajectoryOverride", "AntRef", s_Instance.enableTrajectoryOverride)
	self:SendDefault(s_guid,className, "trajectoryOverride", "AntRef", s_Instance.trajectoryOverride)
end

function Type:PhysicsConeConstraintData (p_class, p_guid)
	local s_Instance = PhysicsConeConstraintData(p_class) 
 	local className = "PhysicsConeConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularFriction", "float", s_Instance.angularFriction)
	self:SendDefault(s_guid,className, "hasLimits", "bool", s_Instance.hasLimits)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:PhysicsConstraintData (p_class, p_guid)
	local s_Instance = PhysicsConstraintData(p_class) 
 	local className = "PhysicsConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "breakThreshold", "float", s_Instance.breakThreshold)
	self:SendDefault(s_guid,className, "constrainedObject", "CtrRef", s_Instance.constrainedObject)
	self:SendDefault(s_guid,className, "isBreakable", "bool", s_Instance.isBreakable)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:PhysicsDebugSettings (p_class, p_guid)
	local s_Instance = PhysicsDebugSettings(p_class) 
 	local className = "PhysicsDebugSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugHingeConstraints", "bool", s_Instance.debugHingeConstraints)
	self:SendDefault(s_guid,className, "timingRecursionDepth", "uint", s_Instance.timingRecursionDepth)
	self:SendDefault(s_guid,className, "usePhysicsCpuTimers", "bool", s_Instance.usePhysicsCpuTimers)
end

function Type:PhysicsDrivenAnimationEntityBinding (p_class, p_guid)
	local s_Instance = PhysicsDrivenAnimationEntityBinding(p_class) 
 	local className = "PhysicsDrivenAnimationEntityBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimLeftRight", "AntRef", s_Instance.aimLeftRight)
	self:SendDefault(s_guid,className, "aimUpDown", "AntRef", s_Instance.aimUpDown)
	self:SendDefault(s_guid,className, "crouch", "AntRef", s_Instance.crouch)
	self:SendDefault(s_guid,className, "customizationScreen", "AntRef", s_Instance.customizationScreen)
	self:SendDefault(s_guid,className, "falseSignal", "AntRef", s_Instance.falseSignal)
	self:SendDefault(s_guid,className, "forceSetTrajectory", "AntRef", s_Instance.forceSetTrajectory)
	self:SendDefault(s_guid,className, "groundAngleFromNormal", "AntRef", s_Instance.groundAngleFromNormal)
	self:SendDefault(s_guid,className, "groundAngleX", "AntRef", s_Instance.groundAngleX)
	self:SendDefault(s_guid,className, "groundAngleZ", "AntRef", s_Instance.groundAngleZ)
	self:SendDefault(s_guid,className, "groundDistance", "AntRef", s_Instance.groundDistance)
	self:SendDefault(s_guid,className, "groundNormal", "AntRef", s_Instance.groundNormal)
	self:SendDefault(s_guid,className, "groundSupported", "AntRef", s_Instance.groundSupported)
	self:SendDefault(s_guid,className, "inAir", "AntRef", s_Instance.inAir)
	self:SendDefault(s_guid,className, "inputBackward", "AntRef", s_Instance.inputBackward)
	self:SendDefault(s_guid,className, "inputForward", "AntRef", s_Instance.inputForward)
	self:SendDefault(s_guid,className, "inputLeft", "AntRef", s_Instance.inputLeft)
	self:SendDefault(s_guid,className, "inputRight", "AntRef", s_Instance.inputRight)
	self:SendDefault(s_guid,className, "isClientAnimatable", "AntRef", s_Instance.isClientAnimatable)
	self:SendDefault(s_guid,className, "isEnemy", "AntRef", s_Instance.isEnemy)
	self:SendDefault(s_guid,className, "jump", "AntRef", s_Instance.jump)
	self:SendDefault(s_guid,className, "leanLeftRight", "AntRef", s_Instance.leanLeftRight)
	self:SendDefault(s_guid,className, "lockArmsToCameraWeight", "AntRef", s_Instance.lockArmsToCameraWeight)
	self:SendDefault(s_guid,className, "minimal3pServer", "AntRef", s_Instance.minimal3pServer)
	self:SendDefault(s_guid,className, "parachute", "AntRef", s_Instance.parachute)
	self:SendDefault(s_guid,className, "prone", "AntRef", s_Instance.prone)
	self:SendDefault(s_guid,className, "skydive", "AntRef", s_Instance.skydive)
	self:SendDefault(s_guid,className, "sprint", "AntRef", s_Instance.sprint)
	self:SendDefault(s_guid,className, "swim", "AntRef", s_Instance.swim)
	self:SendDefault(s_guid,className, "verticalImpact", "AntRef", s_Instance.verticalImpact)
end

function Type:PhysicsDrivenAnimationEntityData (p_class, p_guid)
	local s_Instance = PhysicsDrivenAnimationEntityData(p_class) 
 	local className = "PhysicsDrivenAnimationEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "binding", "PhysicsDrivenAnimationEntityBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:PhysicsEntityData (p_class, p_guid)
	local s_Instance = PhysicsEntityData(p_class) 
 	local className = "PhysicsEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularVelocityDamping", "float", s_Instance.angularVelocityDamping)
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
	self:SendDefault(s_guid,className, "constraints", "List<CtrRef)>", s_Instance.constraints)
	self:SendDefault(s_guid,className, "encapsulatePartsInLists", "bool", s_Instance.encapsulatePartsInLists)
	self:SendDefault(s_guid,className, "floatPhysics", "CtrRef", s_Instance.floatPhysics)
	self:SendDefault(s_guid,className, "friction", "float", s_Instance.friction)
	self:SendDefault(s_guid,className, "inertiaModifier", "Vec3", s_Instance.inertiaModifier)
	self:SendDefault(s_guid,className, "linearVelocityDamping", "float", s_Instance.linearVelocityDamping)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
	self:SendDefault(s_guid,className, "movableParts", "bool", s_Instance.movableParts)
	self:SendDefault(s_guid,className, "proximity", "CtrRef", s_Instance.proximity)
	self:SendDefault(s_guid,className, "restitution", "float", s_Instance.restitution)
	self:SendDefault(s_guid,className, "rigidBodies", "List<CtrRef)>", s_Instance.rigidBodies)
	self:SendDefault(s_guid,className, "scaledAssets", "List<CtrRef)>", s_Instance.scaledAssets)
end

function Type:PhysicsEntry (p_class, p_guid)
	local s_Instance = PhysicsEntry(p_class) 
 	local className = "PhysicsEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "azimuth", "AudioGraphNodePort", s_Instance.azimuth)
	self:SendDefault(s_guid,className, "distance", "AudioGraphNodePort", s_Instance.distance)
	self:SendDefault(s_guid,className, "elevationAngle", "AudioGraphNodePort", s_Instance.elevationAngle)
	self:SendDefault(s_guid,className, "output", "CtrRef", s_Instance.output)
end

function Type:PhysicsHingeConstraintData (p_class, p_guid)
	local s_Instance = PhysicsHingeConstraintData(p_class) 
 	local className = "PhysicsHingeConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularFriction", "float", s_Instance.angularFriction)
	self:SendDefault(s_guid,className, "hasLimits", "bool", s_Instance.hasLimits)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:PhysicsNodeData (p_class, p_guid)
	local s_Instance = PhysicsNodeData(p_class) 
 	local className = "PhysicsNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "azimuth", "AudioGraphNodePort", s_Instance.azimuth)
	self:SendDefault(s_guid,className, "distance", "AudioGraphNodePort", s_Instance.distance)
	self:SendDefault(s_guid,className, "elevationAngle", "AudioGraphNodePort", s_Instance.elevationAngle)
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
	self:SendDefault(s_guid,className, "relativeVelocity", "AudioGraphNodePort", s_Instance.relativeVelocity)
	self:SendDefault(s_guid,className, "velocity", "AudioGraphNodePort", s_Instance.velocity)
end

function Type:PhysicsPartInfo (p_class, p_guid)
	local s_Instance = PhysicsPartInfo(p_class) 
 	local className = "PhysicsPartInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healthStateIndex", "uint", s_Instance.healthStateIndex)
	self:SendDefault(s_guid,className, "partComponentIndex", "uint", s_Instance.partComponentIndex)
end

function Type:PhysicsRenderSettings (p_class, p_guid)
	local s_Instance = PhysicsRenderSettings(p_class) 
 	local className = "PhysicsRenderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collisionSpawnDebug", "bool", s_Instance.collisionSpawnDebug)
	self:SendDefault(s_guid,className, "renderActiveConstraintCount", "bool", s_Instance.renderActiveConstraintCount)
	self:SendDefault(s_guid,className, "renderBroadphaseHandles", "bool", s_Instance.renderBroadphaseHandles)
	self:SendDefault(s_guid,className, "renderCenterOfMass", "bool", s_Instance.renderCenterOfMass)
	self:SendDefault(s_guid,className, "renderCharacterCollision", "bool", s_Instance.renderCharacterCollision)
	self:SendDefault(s_guid,className, "renderClient", "bool", s_Instance.renderClient)
	self:SendDefault(s_guid,className, "renderCollidesWithTerrain", "bool", s_Instance.renderCollidesWithTerrain)
	self:SendDefault(s_guid,className, "renderCollisionSpheres", "bool", s_Instance.renderCollisionSpheres)
	self:SendDefault(s_guid,className, "renderConstraintCount", "bool", s_Instance.renderConstraintCount)
	self:SendDefault(s_guid,className, "renderConstraints", "bool", s_Instance.renderConstraints)
	self:SendDefault(s_guid,className, "renderDestructionConnections", "bool", s_Instance.renderDestructionConnections)
	self:SendDefault(s_guid,className, "renderDetail", "bool", s_Instance.renderDetail)
	self:SendDefault(s_guid,className, "renderEffectWorld", "bool", s_Instance.renderEffectWorld)
	self:SendDefault(s_guid,className, "renderEntityStats", "bool", s_Instance.renderEntityStats)
	self:SendDefault(s_guid,className, "renderGroup", "bool", s_Instance.renderGroup)
	self:SendDefault(s_guid,className, "renderInertia", "bool", s_Instance.renderInertia)
	self:SendDefault(s_guid,className, "renderLinearVelocity", "bool", s_Instance.renderLinearVelocity)
	self:SendDefault(s_guid,className, "renderMemoryUsed", "bool", s_Instance.renderMemoryUsed)
	self:SendDefault(s_guid,className, "renderOnlyBoundingBoxes", "bool", s_Instance.renderOnlyBoundingBoxes)
	self:SendDefault(s_guid,className, "renderOnlyContactConstraints", "bool", s_Instance.renderOnlyContactConstraints)
	self:SendDefault(s_guid,className, "renderPartBoundingBoxes", "bool", s_Instance.renderPartBoundingBoxes)
	self:SendDefault(s_guid,className, "renderPhantoms", "bool", s_Instance.renderPhantoms)
	self:SendDefault(s_guid,className, "renderRagdoll", "bool", s_Instance.renderRagdoll)
	self:SendDefault(s_guid,className, "renderServer", "bool", s_Instance.renderServer)
	self:SendDefault(s_guid,className, "renderSimulationIslands", "bool", s_Instance.renderSimulationIslands)
	self:SendDefault(s_guid,className, "renderSolidGeometry", "bool", s_Instance.renderSolidGeometry)
	self:SendDefault(s_guid,className, "renderSpecificPart", "int", s_Instance.renderSpecificPart)
	self:SendDefault(s_guid,className, "renderStatic", "bool", s_Instance.renderStatic)
	self:SendDefault(s_guid,className, "renderUngrouped", "bool", s_Instance.renderUngrouped)
	self:SendDefault(s_guid,className, "renderWater", "bool", s_Instance.renderWater)
	self:SendDefault(s_guid,className, "renderWorldStats", "bool", s_Instance.renderWorldStats)
	self:SendDefault(s_guid,className, "showContactsInWorldStats", "bool", s_Instance.showContactsInWorldStats)
	self:SendDefault(s_guid,className, "showFixedObjectsInWorldStats", "bool", s_Instance.showFixedObjectsInWorldStats)
	self:SendDefault(s_guid,className, "showInactiveContactsInWorldStats", "bool", s_Instance.showInactiveContactsInWorldStats)
	self:SendDefault(s_guid,className, "showPhantomsInWorldStats", "bool", s_Instance.showPhantomsInWorldStats)
	self:SendDefault(s_guid,className, "useShapeCache", "bool", s_Instance.useShapeCache)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
end

function Type:PhysicsSettings (p_class, p_guid)
	local s_Instance = PhysicsSettings(p_class) 
 	local className = "PhysicsSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clientEffectWorldThreadCount", "uint", s_Instance.clientEffectWorldThreadCount)
	self:SendDefault(s_guid,className, "clientWorldThreadCount", "uint", s_Instance.clientWorldThreadCount)
	self:SendDefault(s_guid,className, "collideJobCount", "uint", s_Instance.collideJobCount)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "enableAIRigidBody", "bool", s_Instance.enableAIRigidBody)
	self:SendDefault(s_guid,className, "enableASyncWheelRaycasts", "bool", s_Instance.enableASyncWheelRaycasts)
	self:SendDefault(s_guid,className, "enableClientWheelRaycasts", "bool", s_Instance.enableClientWheelRaycasts)
	self:SendDefault(s_guid,className, "enableFollowWheelRaycasts", "bool", s_Instance.enableFollowWheelRaycasts)
	self:SendDefault(s_guid,className, "enableJobs", "bool", s_Instance.enableJobs)
	self:SendDefault(s_guid,className, "forceSingleStepCharacterInSP", "bool", s_Instance.forceSingleStepCharacterInSP)
	self:SendDefault(s_guid,className, "forestEnable", "bool", s_Instance.forestEnable)
	self:SendDefault(s_guid,className, "integrateJobCount", "uint", s_Instance.integrateJobCount)
	self:SendDefault(s_guid,className, "removeFromWorldOnCollisionOverflow", "bool", s_Instance.removeFromWorldOnCollisionOverflow)
	self:SendDefault(s_guid,className, "removeRagdollWhenWoken", "bool", s_Instance.removeRagdollWhenWoken)
	self:SendDefault(s_guid,className, "serverWorldThreadCount", "uint", s_Instance.serverWorldThreadCount)
	self:SendDefault(s_guid,className, "singleStepCharacter", "bool", s_Instance.singleStepCharacter)
	self:SendDefault(s_guid,className, "suppressDebrisSpawnUntilReady", "bool", s_Instance.suppressDebrisSpawnUntilReady)
	self:SendDefault(s_guid,className, "useDelayedWakeUpClient", "bool", s_Instance.useDelayedWakeUpClient)
	self:SendDefault(s_guid,className, "useDelayedWakeUpServer", "bool", s_Instance.useDelayedWakeUpServer)
end

function Type:PickupEntityAsset (p_class, p_guid)
	local s_Instance = PickupEntityAsset(p_class) 
 	local className = "PickupEntityAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "CtrRef", s_Instance.data)
end

function Type:PickupEntityData (p_class, p_guid)
	local s_Instance = PickupEntityData(p_class) 
 	local className = "PickupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowPickup", "bool", s_Instance.allowPickup)
	self:SendDefault(s_guid,className, "contentIsStatic", "bool", s_Instance.contentIsStatic)
	self:SendDefault(s_guid,className, "displayInMiniMap", "bool", s_Instance.displayInMiniMap)
	self:SendDefault(s_guid,className, "forceWeaponSlotSelection", "bool", s_Instance.forceWeaponSlotSelection)
	self:SendDefault(s_guid,className, "hasAutomaticAmmoPickup", "bool", s_Instance.hasAutomaticAmmoPickup)
	self:SendDefault(s_guid,className, "ignoreNullWeaponSlots", "bool", s_Instance.ignoreNullWeaponSlots)
	self:SendDefault(s_guid,className, "interactionRadius", "float", s_Instance.interactionRadius)
	self:SendDefault(s_guid,className, "maxRandomClipAmmoPercent", "int", s_Instance.maxRandomClipAmmoPercent)
	self:SendDefault(s_guid,className, "maxRandomSpareAmmoPercent", "int", s_Instance.maxRandomSpareAmmoPercent)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "minRandomClipAmmoPercent", "int", s_Instance.minRandomClipAmmoPercent)
	self:SendDefault(s_guid,className, "minRandomSpareAmmoPercent", "int", s_Instance.minRandomSpareAmmoPercent)
	self:SendDefault(s_guid,className, "physicsBlueprint", "CtrRef", s_Instance.physicsBlueprint)
	self:SendDefault(s_guid,className, "positionIsStatic", "bool", s_Instance.positionIsStatic)
	self:SendDefault(s_guid,className, "preferredWeaponSlot", "uint", s_Instance.preferredWeaponSlot)
	self:SendDefault(s_guid,className, "randomizeAmmoOnDropForPlayer", "PickupPlayerEnum", s_Instance.randomizeAmmoOnDropForPlayer)
	self:SendDefault(s_guid,className, "removeWeaponOnDrop", "bool", s_Instance.removeWeaponOnDrop)
	self:SendDefault(s_guid,className, "replaceAllContent", "bool", s_Instance.replaceAllContent)
	self:SendDefault(s_guid,className, "sendPlayerInEventOnPickup", "bool", s_Instance.sendPlayerInEventOnPickup)
	self:SendDefault(s_guid,className, "timeToLive", "float", s_Instance.timeToLive)
	self:SendDefault(s_guid,className, "unspawnOnAmmoPickup", "bool", s_Instance.unspawnOnAmmoPickup)
	self:SendDefault(s_guid,className, "unspawnOnPickup", "bool", s_Instance.unspawnOnPickup)
	self:SendDefault(s_guid,className, "useWeaponMesh", "bool", s_Instance.useWeaponMesh)
end

function Type:PickupSettingsData (p_class, p_guid)
	local s_Instance = PickupSettingsData(p_class) 
 	local className = "PickupSettingsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshRenderOffset", "Vec3", s_Instance.meshRenderOffset)
	self:SendDefault(s_guid,className, "meshRenderRotation", "Vec3", s_Instance.meshRenderRotation)
end

function Type:PitchModifier (p_class, p_guid)
	local s_Instance = PitchModifier(p_class) 
 	local className = "PitchModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "pitchAngle", "float", s_Instance.pitchAngle)
	self:SendDefault(s_guid,className, "pitchVal", "float", s_Instance.pitchVal)
end

function Type:PlanarReflectionComponentData (p_class, p_guid)
	local s_Instance = PlanarReflectionComponentData(p_class) 
 	local className = "PlanarReflectionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "groundHeight", "float", s_Instance.groundHeight)
	self:SendDefault(s_guid,className, "horizontalBlurFilter", "BlurFilter", s_Instance.horizontalBlurFilter)
	self:SendDefault(s_guid,className, "horizontalDeviation", "float", s_Instance.horizontalDeviation)
	self:SendDefault(s_guid,className, "skyRenderEnable", "bool", s_Instance.skyRenderEnable)
	self:SendDefault(s_guid,className, "verticalBlurFilter", "BlurFilter", s_Instance.verticalBlurFilter)
	self:SendDefault(s_guid,className, "verticalDeviation", "float", s_Instance.verticalDeviation)
end

function Type:PlatformSplitterEntityData (p_class, p_guid)
	local s_Instance = PlatformSplitterEntityData(p_class) 
 	local className = "PlatformSplitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
end

function Type:PlayerCameraEntityData (p_class, p_guid)
	local s_Instance = PlayerCameraEntityData(p_class) 
 	local className = "PlayerCameraEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "releaseControlIfTargetLost", "bool", s_Instance.releaseControlIfTargetLost)
	self:SendDefault(s_guid,className, "shouldTargetControllable", "bool", s_Instance.shouldTargetControllable)
	self:SendDefault(s_guid,className, "shouldTargetExtraPlayerInDoublePlayerEvent", "bool", s_Instance.shouldTargetExtraPlayerInDoublePlayerEvent)
	self:SendDefault(s_guid,className, "shouldTargetVehicleDriverEntry", "bool", s_Instance.shouldTargetVehicleDriverEntry)
	self:SendDefault(s_guid,className, "soldierCameraIndex", "uint", s_Instance.soldierCameraIndex)
	self:SendDefault(s_guid,className, "soldierTargetMode", "TargetMode", s_Instance.soldierTargetMode)
	self:SendDefault(s_guid,className, "vehicleCameraIndex", "uint", s_Instance.vehicleCameraIndex)
	self:SendDefault(s_guid,className, "vehicleTargetMode", "TargetMode", s_Instance.vehicleTargetMode)
end

function Type:PlayerData (p_class, p_guid)
	local s_Instance = PlayerData(p_class) 
 	local className = "PlayerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputConceptDefinition", "CtrRef", s_Instance.inputConceptDefinition)
	self:SendDefault(s_guid,className, "inputMapping", "CtrRef", s_Instance.inputMapping)
	self:SendDefault(s_guid,className, "playerView", "CtrRef", s_Instance.playerView)
end

function Type:PlayerEntryComponentData (p_class, p_guid)
	local s_Instance = PlayerEntryComponentData(p_class) 
 	local className = "PlayerEntryComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationAccelerationMultiplier", "Vec3", s_Instance.animationAccelerationMultiplier)
	self:SendDefault(s_guid,className, "antEntryEnumeration", "CtrRef", s_Instance.antEntryEnumeration)
	self:SendDefault(s_guid,className, "antEntryId", "AntEntryIdEnum", s_Instance.antEntryId)
	self:SendDefault(s_guid,className, "antEntryID", "string", s_Instance.antEntryID)
	self:SendDefault(s_guid,className, "shieldedTransitionExitTime", "float", s_Instance.shieldedTransitionExitTime)
end

function Type:PlayerFilterEntityData (p_class, p_guid)
	local s_Instance = PlayerFilterEntityData(p_class) 
 	local className = "PlayerFilterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forwardToSpectators", "bool", s_Instance.forwardToSpectators)
	self:SendDefault(s_guid,className, "invertFilter", "bool", s_Instance.invertFilter)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:PlayerInputTriggerEntityData (p_class, p_guid)
	local s_Instance = PlayerInputTriggerEntityData(p_class) 
 	local className = "PlayerInputTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accumulatedValueAtStart", "float", s_Instance.accumulatedValueAtStart)
	self:SendDefault(s_guid,className, "enabledFromStart", "bool", s_Instance.enabledFromStart)
	self:SendDefault(s_guid,className, "entryInputActions", "EntryInputActionEnum", s_Instance.entryInputActions)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "sendTriggerEvents", "bool", s_Instance.sendTriggerEvents)
	self:SendDefault(s_guid,className, "trailingValueAtStart", "float", s_Instance.trailingValueAtStart)
	self:SendDefault(s_guid,className, "valueModifier", "float", s_Instance.valueModifier)
end

function Type:PlayerLookAtEntityData (p_class, p_guid)
	local s_Instance = PlayerLookAtEntityData(p_class) 
 	local className = "PlayerLookAtEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "targetTransform", "LinearTransform", s_Instance.targetTransform)
end

function Type:PlayerOrderTrackerData (p_class, p_guid)
	local s_Instance = PlayerOrderTrackerData(p_class) 
 	local className = "PlayerOrderTrackerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackIcon", "UIHudIcon", s_Instance.attackIcon)
	self:SendDefault(s_guid,className, "defendIcon", "UIHudIcon", s_Instance.defendIcon)
	self:SendDefault(s_guid,className, "moveToIcon", "UIHudIcon", s_Instance.moveToIcon)
end

function Type:PlayerScore (p_class, p_guid)
	local s_Instance = PlayerScore(p_class) 
 	local className = "PlayerScore"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deaths", "uint", s_Instance.deaths)
	self:SendDefault(s_guid,className, "globalScoreOriginal", "int", s_Instance.globalScoreOriginal)
	self:SendDefault(s_guid,className, "globalScoreUpdated", "int", s_Instance.globalScoreUpdated)
	self:SendDefault(s_guid,className, "gunMasterLevel", "uint", s_Instance.gunMasterLevel)
	self:SendDefault(s_guid,className, "kills", "uint", s_Instance.kills)
	self:SendDefault(s_guid,className, "rank", "int", s_Instance.rank)
	self:SendDefault(s_guid,className, "score", "int", s_Instance.score)
	self:SendDefault(s_guid,className, "scoreMultiplier", "uint", s_Instance.scoreMultiplier)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:PlayerState (p_class, p_guid)
	local s_Instance = PlayerState(p_class) 
 	local className = "PlayerState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "onlineId", "ulong", s_Instance.onlineId)
end

function Type:PlayerTakeOverTriggerEntityData (p_class, p_guid)
	local s_Instance = PlayerTakeOverTriggerEntityData(p_class) 
 	local className = "PlayerTakeOverTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "timeToLoseControl", "float", s_Instance.timeToLoseControl)
end

function Type:PlayerTypeProfile (p_class, p_guid)
	local s_Instance = PlayerTypeProfile(p_class) 
 	local className = "PlayerTypeProfile"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "awards", "CtrRef", s_Instance.awards)
	self:SendDefault(s_guid,className, "dogTags", "CtrRef", s_Instance.dogTags)
	self:SendDefault(s_guid,className, "eloParams", "EloParameters", s_Instance.eloParams)
	self:SendDefault(s_guid,className, "orderedUnlockNames", "List<string)>", s_Instance.orderedUnlockNames)
	self:SendDefault(s_guid,className, "rankParams", "CtrRef", s_Instance.rankParams)
	self:SendDefault(s_guid,className, "scoring", "CtrRef", s_Instance.scoring)
	self:SendDefault(s_guid,className, "spamSettings", "CtrRef", s_Instance.spamSettings)
	self:SendDefault(s_guid,className, "staticUnlocks", "CtrRef", s_Instance.staticUnlocks)
	self:SendDefault(s_guid,className, "values", "CtrRef", s_Instance.values)
end

function Type:PlayerViewData (p_class, p_guid)
	local s_Instance = PlayerViewData(p_class) 
 	local className = "PlayerViewData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "subViews", "List<CtrRef)>", s_Instance.subViews)
end

function Type:PlayFromHereAsset (p_class, p_guid)
	local s_Instance = PlayFromHereAsset(p_class) 
 	local className = "PlayFromHereAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatedSkeletonDatabase", "CtrRef", s_Instance.animatedSkeletonDatabase)
	self:SendDefault(s_guid,className, "antProject", "CtrRef", s_Instance.antProject)
	self:SendDefault(s_guid,className, "soldier", "CtrRef", s_Instance.soldier)
end

function Type:PlayVideoEntityData (p_class, p_guid)
	local s_Instance = PlayVideoEntityData(p_class) 
 	local className = "PlayVideoEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowSkip", "bool", s_Instance.allowSkip)
	self:SendDefault(s_guid,className, "keepBlackScreen", "bool", s_Instance.keepBlackScreen)
	self:SendDefault(s_guid,className, "movie", "CtrRef", s_Instance.movie)
end

function Type:PointEnvelope (p_class, p_guid)
	local s_Instance = PointEnvelope(p_class) 
 	local className = "PointEnvelope"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "points", "List<PointEnvelopePoint)>", s_Instance.points)
end

function Type:PointEnvelopePoint (p_class, p_guid)
	local s_Instance = PointEnvelopePoint(p_class) 
 	local className = "PointEnvelopePoint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "x", "float", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "float", s_Instance.y)
end

function Type:PointLightEntityData (p_class, p_guid)
	local s_Instance = PointLightEntityData(p_class) 
 	local className = "PointLightEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "translucencyAmbient", "float", s_Instance.translucencyAmbient)
	self:SendDefault(s_guid,className, "translucencyDistortion", "float", s_Instance.translucencyDistortion)
	self:SendDefault(s_guid,className, "translucencyPower", "uint", s_Instance.translucencyPower)
	self:SendDefault(s_guid,className, "translucencyScale", "float", s_Instance.translucencyScale)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:PointSystemParamsAsset (p_class, p_guid)
	local s_Instance = PointSystemParamsAsset(p_class) 
 	local className = "PointSystemParamsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dnfTimeout", "float", s_Instance.dnfTimeout)
	self:SendDefault(s_guid,className, "freefallHeight", "float", s_Instance.freefallHeight)
	self:SendDefault(s_guid,className, "killStreakX", "uint", s_Instance.killStreakX)
	self:SendDefault(s_guid,className, "multiKillTimeLimit", "float", s_Instance.multiKillTimeLimit)
	self:SendDefault(s_guid,className, "nemesisKillX", "uint", s_Instance.nemesisKillX)
end

function Type:PoissonRadialBlurData (p_class, p_guid)
	local s_Instance = PoissonRadialBlurData(p_class) 
 	local className = "PoissonRadialBlurData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blendFactor", "float", s_Instance.blendFactor)
	self:SendDefault(s_guid,className, "poissonDiscScale", "Vec2", s_Instance.poissonDiscScale)
	self:SendDefault(s_guid,className, "radialExponent", "float", s_Instance.radialExponent)
	self:SendDefault(s_guid,className, "radialScale", "float", s_Instance.radialScale)
end

function Type:PolynomialColorInterpData (p_class, p_guid)
	local s_Instance = PolynomialColorInterpData(p_class) 
 	local className = "PolynomialColorInterpData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coefficients", "Vec4", s_Instance.coefficients)
	self:SendDefault(s_guid,className, "color0", "Vec3", s_Instance.color0)
	self:SendDefault(s_guid,className, "color1", "Vec3", s_Instance.color1)
end

function Type:PolynomialData (p_class, p_guid)
	local s_Instance = PolynomialData(p_class) 
 	local className = "PolynomialData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coefficients", "Vec4", s_Instance.coefficients)
	self:SendDefault(s_guid,className, "maxClamp", "float", s_Instance.maxClamp)
	self:SendDefault(s_guid,className, "minClamp", "float", s_Instance.minClamp)
	self:SendDefault(s_guid,className, "scaleValue", "float", s_Instance.scaleValue)
end

function Type:PolynomialOperatorData (p_class, p_guid)
	local s_Instance = PolynomialOperatorData(p_class) 
 	local className = "PolynomialOperatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "firstOperand", "PolynomialTempData", s_Instance.firstOperand)
	self:SendDefault(s_guid,className, "maxClampResult", "float", s_Instance.maxClampResult)
	self:SendDefault(s_guid,className, "minClampResult", "float", s_Instance.minClampResult)
	self:SendDefault(s_guid,className, "operation", "PolynomialOperation", s_Instance.operation)
	self:SendDefault(s_guid,className, "secondOperand", "PolynomialTempData", s_Instance.secondOperand)
end

function Type:PolynomialTempData (p_class, p_guid)
	local s_Instance = PolynomialTempData(p_class) 
 	local className = "PolynomialTempData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coefficients", "Vec4", s_Instance.coefficients)
	self:SendDefault(s_guid,className, "maxClamp", "float", s_Instance.maxClamp)
	self:SendDefault(s_guid,className, "minClamp", "float", s_Instance.minClamp)
	self:SendDefault(s_guid,className, "scaleValue", "float", s_Instance.scaleValue)
end

function Type:PoseConstraintsData (p_class, p_guid)
	local s_Instance = PoseConstraintsData(p_class) 
 	local className = "PoseConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchPose", "bool", s_Instance.crouchPose)
	self:SendDefault(s_guid,className, "pronePose", "bool", s_Instance.pronePose)
	self:SendDefault(s_guid,className, "standPose", "bool", s_Instance.standPose)
end

function Type:PoseTransitionTime (p_class, p_guid)
	local s_Instance = PoseTransitionTime(p_class) 
 	local className = "PoseTransitionTime"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "toPose", "CharacterPoseType", s_Instance.toPose)
	self:SendDefault(s_guid,className, "transitionTime", "float", s_Instance.transitionTime)
end

function Type:PositionEvaluationConstantData (p_class, p_guid)
	local s_Instance = PositionEvaluationConstantData(p_class) 
 	local className = "PositionEvaluationConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "leaderRandomPositionsRadius", "float", s_Instance.leaderRandomPositionsRadius)
	self:SendDefault(s_guid,className, "ownRandomPositionsRadius", "float", s_Instance.ownRandomPositionsRadius)
end

function Type:PowerToolWeaponData (p_class, p_guid)
	local s_Instance = PowerToolWeaponData(p_class) 
 	local className = "PowerToolWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageSound", "CtrRef", s_Instance.damageSound)
	self:SendDefault(s_guid,className, "playFireEffectOnRepairOnly", "bool", s_Instance.playFireEffectOnRepairOnly)
	self:SendDefault(s_guid,className, "repairCompletedSound", "CtrRef", s_Instance.repairCompletedSound)
	self:SendDefault(s_guid,className, "repairMaterialPair", "CtrRef", s_Instance.repairMaterialPair)
	self:SendDefault(s_guid,className, "repairSound", "CtrRef", s_Instance.repairSound)
end

function Type:PrecomputeCache (p_class, p_guid)
	local s_Instance = PrecomputeCache(p_class) 
 	local className = "PrecomputeCache"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cachedDataEnable", "bool", s_Instance.cachedDataEnable)
	self:SendDefault(s_guid,className, "guid", "GUID", s_Instance.guid)
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
end

function Type:PredestructionEntityData (p_class, p_guid)
	local s_Instance = PredestructionEntityData(p_class) 
 	local className = "PredestructionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
end

function Type:PrefabBlueprint (p_class, p_guid)
	local s_Instance = PrefabBlueprint(p_class) 
 	local className = "PrefabBlueprint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "objects", "List<CtrRef)>", s_Instance.objects)
end

function Type:PreRoundEntityData (p_class, p_guid)
	local s_Instance = PreRoundEntityData(p_class) 
 	local className = "PreRoundEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "roundMaxPlayerCount", "int", s_Instance.roundMaxPlayerCount)
	self:SendDefault(s_guid,className, "roundMinPlayerCount", "int", s_Instance.roundMinPlayerCount)
	self:SendDefault(s_guid,className, "roundRestartCountdown", "uint", s_Instance.roundRestartCountdown)
end

function Type:PresenceBackendData (p_class, p_guid)
	local s_Instance = PresenceBackendData(p_class) 
 	local className = "PresenceBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "requests", "List<PresenceRequest)>", s_Instance.requests)
	self:SendDefault(s_guid,className, "presenceBackendData",  "readonly", s_Instance.presenceBackendData)
	self:SendDefault(s_guid,className, "presenceRequest",  "uint", s_Instance.presenceRequest)
end

function Type:PresenceGameConfigurationServiceData (p_class, p_guid)
	local s_Instance = PresenceGameConfigurationServiceData(p_class) 
 	local className = "PresenceGameConfigurationServiceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "configUrl", "OnlineEnvironmentConsoleUrl", s_Instance.configUrl)
end

function Type:PresenceServerBrowserServiceData (p_class, p_guid)
	local s_Instance = PresenceServerBrowserServiceData(p_class) 
 	local className = "PresenceServerBrowserServiceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "filterCriterias", "MatchmakingCriteria", s_Instance.filterCriterias)
	self:SendDefault(s_guid,className, "listCapacity", "uint", s_Instance.listCapacity)
end

function Type:PresetTypeConfig (p_class, p_guid)
	local s_Instance = PresetTypeConfig(p_class) 
 	local className = "PresetTypeConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "descSid", "string", s_Instance.descSid)
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
	self:SendDefault(s_guid,className, "lockedSettings", "List<LockedSettingConfig)>", s_Instance.lockedSettings)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "predefined", "bool", s_Instance.predefined)
	self:SendDefault(s_guid,className, "presetId", "int", s_Instance.presetId)
end

function Type:PrintDebugTextEntityData (p_class, p_guid)
	local s_Instance = PrintDebugTextEntityData(p_class) 
 	local className = "PrintDebugTextEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "text", "string", s_Instance.text)
	self:SendDefault(s_guid,className, "textColor", "Vec3", s_Instance.textColor)
end

function Type:ProceduralAwarenessAntRefs (p_class, p_guid)
	local s_Instance = ProceduralAwarenessAntRefs(p_class) 
 	local className = "ProceduralAwarenessAntRefs"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "proceduralAwarenessActive", "AntRef", s_Instance.proceduralAwarenessActive)
	self:SendDefault(s_guid,className, "proceduralAwarenessData", "AntRef", s_Instance.proceduralAwarenessData)
	self:SendDefault(s_guid,className, "proceduralAwarenessHumanIKActive", "AntRef", s_Instance.proceduralAwarenessHumanIKActive)
end

function Type:ProcessorData (p_class, p_guid)
	local s_Instance = ProcessorData(p_class) 
 	local className = "ProcessorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValues", "Vec4", s_Instance.defaultValues)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "evaluatorInput", "EmittableField", s_Instance.evaluatorInput)
	self:SendDefault(s_guid,className, "nextProcessor", "CtrRef", s_Instance.nextProcessor)
	self:SendDefault(s_guid,className, "pre", "CtrRef", s_Instance.pre)
end

function Type:ProfileEntityData (p_class, p_guid)
	local s_Instance = ProfileEntityData(p_class) 
 	local className = "ProfileEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "profileName", "string", s_Instance.profileName)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ProfileOptionData (p_class, p_guid)
	local s_Instance = ProfileOptionData(p_class) 
 	local className = "ProfileOptionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "ProfileOptionsType", s_Instance.category)
	self:SendDefault(s_guid,className, "uniqueId", "string", s_Instance.uniqueId)
end

function Type:ProfileOptionDataBinary (p_class, p_guid)
	local s_Instance = ProfileOptionDataBinary(p_class) 
 	local className = "ProfileOptionDataBinary"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxLength", "int", s_Instance.maxLength)
end

function Type:ProfileOptionDataBool (p_class, p_guid)
	local s_Instance = ProfileOptionDataBool(p_class) 
 	local className = "ProfileOptionDataBool"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "bool", s_Instance.value)
end

function Type:ProfileOptionDataEnum (p_class, p_guid)
	local s_Instance = ProfileOptionDataEnum(p_class) 
 	local className = "ProfileOptionDataEnum"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "items", "List<ProfileOptionDataEnumItem)>", s_Instance.items)
end

function Type:ProfileOptionDataEnumItem (p_class, p_guid)
	local s_Instance = ProfileOptionDataEnumItem(p_class) 
 	local className = "ProfileOptionDataEnumItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "default", "bool", s_Instance.default)
	self:SendDefault(s_guid,className, "displayName", "string", s_Instance.displayName)
end

function Type:ProfileOptionDataFloat (p_class, p_guid)
	local s_Instance = ProfileOptionDataFloat(p_class) 
 	local className = "ProfileOptionDataFloat"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "step", "float", s_Instance.step)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:ProfileOptionDataInt (p_class, p_guid)
	local s_Instance = ProfileOptionDataInt(p_class) 
 	local className = "ProfileOptionDataInt"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "int", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "int", s_Instance.min)
	self:SendDefault(s_guid,className, "step", "int", s_Instance.step)
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:ProfileOptionDataString (p_class, p_guid)
	local s_Instance = ProfileOptionDataString(p_class) 
 	local className = "ProfileOptionDataString"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxLength", "int", s_Instance.maxLength)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:ProfileOptionsAsset (p_class, p_guid)
	local s_Instance = ProfileOptionsAsset(p_class) 
 	local className = "ProfileOptionsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoSaveOnQuit", "bool", s_Instance.autoSaveOnQuit)
	self:SendDefault(s_guid,className, "contentName", "string", s_Instance.contentName)
	self:SendDefault(s_guid,className, "fileName", "string", s_Instance.fileName)
	self:SendDefault(s_guid,className, "fileSize", "uint", s_Instance.fileSize)
	self:SendDefault(s_guid,className, "options", "List<CtrRef)>", s_Instance.options)
end

function Type:ProjectileEntityData (p_class, p_guid)
	local s_Instance = ProjectileEntityData(p_class) 
 	local className = "ProjectileEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammunitionType", "string", s_Instance.ammunitionType)
	self:SendDefault(s_guid,className, "detonateOnTimeout", "bool", s_Instance.detonateOnTimeout)
	self:SendDefault(s_guid,className, "explosion", "CtrRef", s_Instance.explosion)
	self:SendDefault(s_guid,className, "hitReactionWeaponType", "AntHitReactionWeaponType", s_Instance.hitReactionWeaponType)
	self:SendDefault(s_guid,className, "initialSpeed", "float", s_Instance.initialSpeed)
	self:SendDefault(s_guid,className, "initMeshHideTime", "float", s_Instance.initMeshHideTime)
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "maxCount", "uint", s_Instance.maxCount)
	self:SendDefault(s_guid,className, "serverProjectileDisabled", "bool", s_Instance.serverProjectileDisabled)
	self:SendDefault(s_guid,className, "suppressionData", "CtrRef", s_Instance.suppressionData)
	self:SendDefault(s_guid,className, "suppressOwnerVehicleDamage", "bool", s_Instance.suppressOwnerVehicleDamage)
	self:SendDefault(s_guid,className, "timeToLive", "float", s_Instance.timeToLive)
	self:SendDefault(s_guid,className, "visualConvergeDistance", "float", s_Instance.visualConvergeDistance)
end

function Type:PropellerEngineConfigData (p_class, p_guid)
	local s_Instance = PropellerEngineConfigData(p_class) 
 	local className = "PropellerEngineConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackAngleMod", "float", s_Instance.attackAngleMod)
	self:SendDefault(s_guid,className, "bankingLimit", "float", s_Instance.bankingLimit)
	self:SendDefault(s_guid,className, "bankingStrength", "float", s_Instance.bankingStrength)
	self:SendDefault(s_guid,className, "collectiveBrakeInputScale", "float", s_Instance.collectiveBrakeInputScale)
	self:SendDefault(s_guid,className, "collectiveInputIdle", "float", s_Instance.collectiveInputIdle)
	self:SendDefault(s_guid,className, "collectiveThrottleInputScale", "float", s_Instance.collectiveThrottleInputScale)
	self:SendDefault(s_guid,className, "cyclicInputScalePitch", "float", s_Instance.cyclicInputScalePitch)
	self:SendDefault(s_guid,className, "cyclicInputScaleRoll", "float", s_Instance.cyclicInputScaleRoll)
	self:SendDefault(s_guid,className, "cyclicPitchLiftMod", "float", s_Instance.cyclicPitchLiftMod)
	self:SendDefault(s_guid,className, "cyclicPitchStrafeBrakeMod", "float", s_Instance.cyclicPitchStrafeBrakeMod)
	self:SendDefault(s_guid,className, "cyclicPitchStrafeMod", "float", s_Instance.cyclicPitchStrafeMod)
	self:SendDefault(s_guid,className, "cyclicRollLiftMod", "float", s_Instance.cyclicRollLiftMod)
	self:SendDefault(s_guid,className, "cyclicRollStrafeMod", "float", s_Instance.cyclicRollStrafeMod)
	self:SendDefault(s_guid,className, "defaultAngleOfAttack", "float", s_Instance.defaultAngleOfAttack)
	self:SendDefault(s_guid,className, "directionVectorIndex", "uint", s_Instance.directionVectorIndex)
	self:SendDefault(s_guid,className, "enableNewHelicopter", "bool", s_Instance.enableNewHelicopter)
	self:SendDefault(s_guid,className, "forceMagnitudeInputType", "fb.ForceMagnitudeInputType)", s_Instance.forceMagnitudeInputType)
	self:SendDefault(s_guid,className, "forceMagnitudeMultiplier", "float", s_Instance.forceMagnitudeMultiplier)
	self:SendDefault(s_guid,className, "gravityMod", "float", s_Instance.gravityMod)
	self:SendDefault(s_guid,className, "horisontalForceOffset", "Vec3", s_Instance.horisontalForceOffset)
	self:SendDefault(s_guid,className, "horisontalMinEffectMod", "float", s_Instance.horisontalMinEffectMod)
	self:SendDefault(s_guid,className, "horisontalMinEffectVelocity", "float", s_Instance.horisontalMinEffectVelocity)
	self:SendDefault(s_guid,className, "liftForceDampingConstant", "float", s_Instance.liftForceDampingConstant)
	self:SendDefault(s_guid,className, "liftForceSpringConstant", "float", s_Instance.liftForceSpringConstant)
	self:SendDefault(s_guid,className, "pitchFromVel", "float", s_Instance.pitchFromVel)
	self:SendDefault(s_guid,className, "pitchLimit", "float", s_Instance.pitchLimit)
	self:SendDefault(s_guid,className, "pitchStrength", "float", s_Instance.pitchStrength)
	self:SendDefault(s_guid,className, "pitchUpWhenBankLimit", "float", s_Instance.pitchUpWhenBankLimit)
	self:SendDefault(s_guid,className, "pitchUpWhenBankStrength", "float", s_Instance.pitchUpWhenBankStrength)
	self:SendDefault(s_guid,className, "propellerType", "fb.PropellerType)", s_Instance.propellerType)
	self:SendDefault(s_guid,className, "rollStrength", "float", s_Instance.rollStrength)
	self:SendDefault(s_guid,className, "rotorConfig", "CtrRef", s_Instance.rotorConfig)
	self:SendDefault(s_guid,className, "sPAllowed", "bool", s_Instance.sPAllowed)
	self:SendDefault(s_guid,className, "sPDefault", "bool", s_Instance.sPDefault)
	self:SendDefault(s_guid,className, "sPForwardStrength", "float", s_Instance.sPForwardStrength)
	self:SendDefault(s_guid,className, "sPSidewaysStrength", "float", s_Instance.sPSidewaysStrength)
	self:SendDefault(s_guid,className, "sPVerticalStrength", "float", s_Instance.sPVerticalStrength)
	self:SendDefault(s_guid,className, "stabilizerMod", "float", s_Instance.stabilizerMod)
	self:SendDefault(s_guid,className, "velocityFromPitch", "float", s_Instance.velocityFromPitch)
end

function Type:PropertyCastEntityData (p_class, p_guid)
	local s_Instance = PropertyCastEntityData(p_class) 
 	local className = "PropertyCastEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolValue", "bool", s_Instance.boolValue)
	self:SendDefault(s_guid,className, "floatValue", "float", s_Instance.floatValue)
	self:SendDefault(s_guid,className, "intValue", "int", s_Instance.intValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:PropertyConnection (p_class, p_guid)
	local s_Instance = PropertyConnection(p_class) 
 	local className = "PropertyConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "sourceFieldId", "int", s_Instance.sourceFieldId)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
	self:SendDefault(s_guid,className, "targetFieldId", "int", s_Instance.targetFieldId)
end

function Type:PropertyDebugEntityData (p_class, p_guid)
	local s_Instance = PropertyDebugEntityData(p_class) 
 	local className = "PropertyDebugEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolValue", "bool", s_Instance.boolValue)
	self:SendDefault(s_guid,className, "defaultVisible", "bool", s_Instance.defaultVisible)
	self:SendDefault(s_guid,className, "floatValue", "float", s_Instance.floatValue)
	self:SendDefault(s_guid,className, "intValue", "int", s_Instance.intValue)
	self:SendDefault(s_guid,className, "multiline", "bool", s_Instance.multiline)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "screenPosition", "Vec2", s_Instance.screenPosition)
	self:SendDefault(s_guid,className, "stringValue", "string", s_Instance.stringValue)
	self:SendDefault(s_guid,className, "textColor", "Vec3", s_Instance.textColor)
	self:SendDefault(s_guid,className, "textScale", "float", s_Instance.textScale)
	self:SendDefault(s_guid,className, "transformValue", "LinearTransform", s_Instance.transformValue)
	self:SendDefault(s_guid,className, "valuePrefix", "string", s_Instance.valuePrefix)
	self:SendDefault(s_guid,className, "vec2Value", "Vec2", s_Instance.vec2Value)
	self:SendDefault(s_guid,className, "vec3Value", "Vec3", s_Instance.vec3Value)
end

function Type:PropertyGateEntityData (p_class, p_guid)
	local s_Instance = PropertyGateEntityData(p_class) 
 	local className = "PropertyGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolIn", "bool", s_Instance.boolIn)
	self:SendDefault(s_guid,className, "default", "bool", s_Instance.default)
	self:SendDefault(s_guid,className, "floatIn", "float", s_Instance.floatIn)
	self:SendDefault(s_guid,className, "intIn", "int", s_Instance.intIn)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "transformIn", "LinearTransform", s_Instance.transformIn)
	self:SendDefault(s_guid,className, "vec3In", "Vec3", s_Instance.vec3In)
	self:SendDefault(s_guid,className, "vec4In", "Vec4", s_Instance.vec4In)
end

function Type:PropertyRecordingData (p_class, p_guid)
	local s_Instance = PropertyRecordingData(p_class) 
 	local className = "PropertyRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
end

function Type:PropertyTrackData (p_class, p_guid)
	local s_Instance = PropertyTrackData(p_class) 
 	local className = "PropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "int", s_Instance.id)
	self:SendDefault(s_guid,className, "times", "List<int)>", s_Instance.times)
end

function Type:ProximityData (p_class, p_guid)
	local s_Instance = ProximityData(p_class) 
 	local className = "ProximityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "proximityType", "ProximityObjectType", s_Instance.proximityType)
end

function Type:Ps3AgeLevels (p_class, p_guid)
	local s_Instance = Ps3AgeLevels(p_class) 
 	local className = "Ps3AgeLevels"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ageLevel10", "int", s_Instance.ageLevel10)
	self:SendDefault(s_guid,className, "ageLevel7", "int", s_Instance.ageLevel7)
	self:SendDefault(s_guid,className, "ageLevel8", "int", s_Instance.ageLevel8)
	self:SendDefault(s_guid,className, "ageLevel9", "int", s_Instance.ageLevel9)
end

function Type:Ps3ParentalLockAgeSettings (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettings(p_class) 
 	local className = "Ps3ParentalLockAgeSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ageLevels", "Ps3AgeLevels", s_Instance.ageLevels)
	self:SendDefault(s_guid,className, "countryOverrides", "CtrRef", s_Instance.countryOverrides)
	self:SendDefault(s_guid,className, "region", "string", s_Instance.region)
end

function Type:Ps3ParentalLockAgeSettingsForCountry (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettingsForCountry(p_class) 
 	local className = "Ps3ParentalLockAgeSettingsForCountry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ageLevels", "Ps3AgeLevels", s_Instance.ageLevels)
	self:SendDefault(s_guid,className, "countryCode", "string", s_Instance.countryCode)
end

function Type:Ps3ParentalLockAgeSettingsOverrides (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettingsOverrides(p_class) 
 	local className = "Ps3ParentalLockAgeSettingsOverrides"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "overrides", "List<Ps3ParentalLockAgeSettingsForCountry)>", s_Instance.overrides)
end

function Type:Ps3PresenceBackendData (p_class, p_guid)
	local s_Instance = Ps3PresenceBackendData(p_class) 
 	local className = "Ps3PresenceBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "communicationId", "string", s_Instance.communicationId)
	self:SendDefault(s_guid,className, "communicationSignature", "string", s_Instance.communicationSignature)
	self:SendDefault(s_guid,className, "parentalLockAgeSettings", "List<Ps3ParentalLockAgeSettings)>", s_Instance.parentalLockAgeSettings)
	self:SendDefault(s_guid,className, "skuSettings", "List<Ps3SkuSettings)>", s_Instance.skuSettings)
end

function Type:Ps3SkuSettings (p_class, p_guid)
	local s_Instance = Ps3SkuSettings(p_class) 
 	local className = "Ps3SkuSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "grantsOnlinePass", "bool", s_Instance.grantsOnlinePass)
	self:SendDefault(s_guid,className, "spId", "string", s_Instance.spId)
	self:SendDefault(s_guid,className, "titleId", "string", s_Instance.titleId)
end

function Type:PS3StoreImageHD1080 (p_class, p_guid)
	local s_Instance = PS3StoreImageHD1080(p_class) 
 	local className = "PS3StoreImageHD1080"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "imagePath", "string", s_Instance.imagePath)
end

function Type:PS3StoreImageSD (p_class, p_guid)
	local s_Instance = PS3StoreImageSD(p_class) 
 	local className = "PS3StoreImageSD"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "imagePath", "string", s_Instance.imagePath)
end

function Type:QueryGetNode (p_class, p_guid)
	local s_Instance = QueryGetNode(p_class) 
 	local className = "QueryGetNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:RadarSweepComponentData (p_class, p_guid)
	local s_Instance = RadarSweepComponentData(p_class) 
 	local className = "RadarSweepComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "controllableSpeedThreshold", "float", s_Instance.controllableSpeedThreshold)
	self:SendDefault(s_guid,className, "controllableSweepInterval", "float", s_Instance.controllableSweepInterval)
	self:SendDefault(s_guid,className, "controllableSweepRadius", "float", s_Instance.controllableSweepRadius)
	self:SendDefault(s_guid,className, "mineSweepInterval", "float", s_Instance.mineSweepInterval)
	self:SendDefault(s_guid,className, "mineSweepRadius", "float", s_Instance.mineSweepRadius)
	self:SendDefault(s_guid,className, "sweepForControllables", "bool", s_Instance.sweepForControllables)
	self:SendDefault(s_guid,className, "sweepForMines", "bool", s_Instance.sweepForMines)
end

function Type:RadioAltitudeData (p_class, p_guid)
	local s_Instance = RadioAltitudeData(p_class) 
 	local className = "RadioAltitudeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "collisionMethod", "CollisionMethodEnum", s_Instance.collisionMethod)
	self:SendDefault(s_guid,className, "range", "float", s_Instance.range)
	self:SendDefault(s_guid,className, "updateFrequency", "float", s_Instance.updateFrequency)
end

function Type:RadioComponentData (p_class, p_guid)
	local s_Instance = RadioComponentData(p_class) 
 	local className = "RadioComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "soundEffect", "CtrRef", s_Instance.soundEffect)
end

function Type:RadiosityMaterial (p_class, p_guid)
	local s_Instance = RadiosityMaterial(p_class) 
 	local className = "RadiosityMaterial"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "Vec3", s_Instance.color)
	self:SendDefault(s_guid,className, "emissive", "bool", s_Instance.emissive)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:RagdollAsset (p_class, p_guid)
	local s_Instance = RagdollAsset(p_class) 
 	local className = "RagdollAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "materialPair", "CtrRef", s_Instance.materialPair)
	self:SendDefault(s_guid,className, "useServerRagdoll", "bool", s_Instance.useServerRagdoll)
end

function Type:RagdollBinding (p_class, p_guid)
	local s_Instance = RagdollBinding(p_class) 
 	local className = "RagdollBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ragdollActiveTime", "AntRef", s_Instance.ragdollActiveTime)
	self:SendDefault(s_guid,className, "ragdollBlend", "AntRef", s_Instance.ragdollBlend)
	self:SendDefault(s_guid,className, "ragdollForceBlendDisabled", "AntRef", s_Instance.ragdollForceBlendDisabled)
	self:SendDefault(s_guid,className, "ragdollFullyBlendedIn", "AntRef", s_Instance.ragdollFullyBlendedIn)
	self:SendDefault(s_guid,className, "ragdollOnBack", "AntRef", s_Instance.ragdollOnBack)
end

function Type:RagdollComponentData (p_class, p_guid)
	local s_Instance = RagdollComponentData(p_class) 
 	local className = "RagdollComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "RagdollBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "leftLegBoneName", "string", s_Instance.leftLegBoneName)
	self:SendDefault(s_guid,className, "ragdollAsset", "CtrRef", s_Instance.ragdollAsset)
	self:SendDefault(s_guid,className, "rightLegBoneName", "string", s_Instance.rightLegBoneName)
	self:SendDefault(s_guid,className, "skeletonAsset", "CtrRef", s_Instance.skeletonAsset)
	self:SendDefault(s_guid,className, "skeletonCollisionData", "CtrRef", s_Instance.skeletonCollisionData)
end

function Type:RandomDelayEntityData (p_class, p_guid)
	local s_Instance = RandomDelayEntityData(p_class) 
 	local className = "RandomDelayEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "maxDelay", "float", s_Instance.maxDelay)
	self:SendDefault(s_guid,className, "minDelay", "float", s_Instance.minDelay)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
end

function Type:RandomEvaluatorData (p_class, p_guid)
	local s_Instance = RandomEvaluatorData(p_class) 
 	local className = "RandomEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
end

function Type:RandomEventEntityData (p_class, p_guid)
	local s_Instance = RandomEventEntityData(p_class) 
 	local className = "RandomEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "probability", "int", s_Instance.probability)
	self:SendDefault(s_guid,className, "randomizeFirstOnly", "bool", s_Instance.randomizeFirstOnly)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:RandomFloatEntityData (p_class, p_guid)
	local s_Instance = RandomFloatEntityData(p_class) 
 	local className = "RandomFloatEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "float", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "float", s_Instance.min)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:RandomMultiEventEntityData (p_class, p_guid)
	local s_Instance = RandomMultiEventEntityData(p_class) 
 	local className = "RandomMultiEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "disableOutputOnTrigger", "bool", s_Instance.disableOutputOnTrigger)
	self:SendDefault(s_guid,className, "randomEventWeight", "List<float)>", s_Instance.randomEventWeight)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "resetOutputsWhenAllHasTriggered", "bool", s_Instance.resetOutputsWhenAllHasTriggered)
	self:SendDefault(s_guid,className, "uniformDistribution", "bool", s_Instance.uniformDistribution)
end

function Type:RandomWalkOrderEntityData (p_class, p_guid)
	local s_Instance = RandomWalkOrderEntityData(p_class) 
 	local className = "RandomWalkOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "combatForbidden", "bool", s_Instance.combatForbidden)
end

function Type:RandomXYZEvaluatorData (p_class, p_guid)
	local s_Instance = RandomXYZEvaluatorData(p_class) 
 	local className = "RandomXYZEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxX", "float", s_Instance.maxX)
	self:SendDefault(s_guid,className, "maxY", "float", s_Instance.maxY)
	self:SendDefault(s_guid,className, "maxZ", "float", s_Instance.maxZ)
	self:SendDefault(s_guid,className, "minX", "float", s_Instance.minX)
	self:SendDefault(s_guid,className, "minY", "float", s_Instance.minY)
	self:SendDefault(s_guid,className, "minZ", "float", s_Instance.minZ)
end

function Type:RankLevelData (p_class, p_guid)
	local s_Instance = RankLevelData(p_class) 
 	local className = "RankLevelData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "iconName", "string", s_Instance.iconName)
	self:SendDefault(s_guid,className, "imageName", "string", s_Instance.imageName)
	self:SendDefault(s_guid,className, "pointsNeeded", "uint", s_Instance.pointsNeeded)
	self:SendDefault(s_guid,className, "rankName", "string", s_Instance.rankName)
	self:SendDefault(s_guid,className, "rankNumber", "int", s_Instance.rankNumber)
	self:SendDefault(s_guid,className, "soundName", "string", s_Instance.soundName)
	self:SendDefault(s_guid,className, "unlockInfos", "List<BasicUnlockInfo)>", s_Instance.unlockInfos)
end

function Type:RankParamsAsset (p_class, p_guid)
	local s_Instance = RankParamsAsset(p_class) 
 	local className = "RankParamsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ranks", "List<CtrRef)>", s_Instance.ranks)
end

function Type:RawFileDataAsset (p_class, p_guid)
	local s_Instance = RawFileDataAsset(p_class) 
 	local className = "RawFileDataAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rawData", "List<byte)>", s_Instance.rawData)
	self:SendDefault(s_guid,className, "size", "uint", s_Instance.size)
end

function Type:RawFileImportActionParams (p_class, p_guid)
	local s_Instance = RawFileImportActionParams(p_class) 
 	local className = "RawFileImportActionParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sourceFile", "string", s_Instance.sourceFile)
end

function Type:ReadinessLevelCharacteristics (p_class, p_guid)
	local s_Instance = ReadinessLevelCharacteristics(p_class) 
 	local className = "ReadinessLevelCharacteristics"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxReactionTime", "float", s_Instance.maxReactionTime)
	self:SendDefault(s_guid,className, "minReactionTime", "float", s_Instance.minReactionTime)
	self:SendDefault(s_guid,className, "reductionTime", "float", s_Instance.reductionTime)
end

function Type:ReadinessLevels (p_class, p_guid)
	local s_Instance = ReadinessLevels(p_class) 
 	local className = "ReadinessLevels"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "combat", "ReadinessLevelCharacteristics", s_Instance.combat)
	self:SendDefault(s_guid,className, "patrol", "ReadinessLevelCharacteristics", s_Instance.patrol)
	self:SendDefault(s_guid,className, "ready", "ReadinessLevelCharacteristics", s_Instance.ready)
end

function Type:ReceivedAwardSurveyEvent (p_class, p_guid)
	local s_Instance = ReceivedAwardSurveyEvent(p_class) 
 	local className = "ReceivedAwardSurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "awardName", "string", s_Instance.awardName)
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
end

function Type:ReceiveEntry (p_class, p_guid)
	local s_Instance = ReceiveEntry(p_class) 
 	local className = "ReceiveEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "parameter", "float", s_Instance.parameter)
	self:SendDefault(s_guid,className, "savedValue", "float", s_Instance.savedValue)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:ReceiveNodeData (p_class, p_guid)
	local s_Instance = ReceiveNodeData(p_class) 
 	local className = "ReceiveNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:RecoilData (p_class, p_guid)
	local s_Instance = RecoilData(p_class) 
 	local className = "RecoilData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxRecoilAngleX", "float", s_Instance.maxRecoilAngleX)
	self:SendDefault(s_guid,className, "maxRecoilAngleY", "float", s_Instance.maxRecoilAngleY)
	self:SendDefault(s_guid,className, "maxRecoilAngleZ", "float", s_Instance.maxRecoilAngleZ)
	self:SendDefault(s_guid,className, "maxRecoilFov", "float", s_Instance.maxRecoilFov)
	self:SendDefault(s_guid,className, "minRecoilAngleX", "float", s_Instance.minRecoilAngleX)
	self:SendDefault(s_guid,className, "minRecoilAngleY", "float", s_Instance.minRecoilAngleY)
	self:SendDefault(s_guid,className, "minRecoilAngleZ", "float", s_Instance.minRecoilAngleZ)
	self:SendDefault(s_guid,className, "minRecoilFov", "float", s_Instance.minRecoilFov)
	self:SendDefault(s_guid,className, "recoilFollowsDispersion", "bool", s_Instance.recoilFollowsDispersion)
end

function Type:RecordedInputData (p_class, p_guid)
	local s_Instance = RecordedInputData(p_class) 
 	local className = "RecordedInputData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "trackData", "List<InputRecorderTrackData)>", s_Instance.trackData)
end

function Type:ReferenceObjectData (p_class, p_guid)
	local s_Instance = ReferenceObjectData(p_class) 
 	local className = "ReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blueprint", "CtrRef", s_Instance.blueprint)
	self:SendDefault(s_guid,className, "blueprintTransform", "LinearTransform", s_Instance.blueprintTransform)
	self:SendDefault(s_guid,className, "castSunShadowEnable", "bool", s_Instance.castSunShadowEnable)
	self:SendDefault(s_guid,className, "excluded", "bool", s_Instance.excluded)
	self:SendDefault(s_guid,className, "objectVariation", "CtrRef", s_Instance.objectVariation)
	self:SendDefault(s_guid,className, "streamRealm", "fb.StreamRealm)", s_Instance.streamRealm)
end

function Type:RefreshNode (p_class, p_guid)
	local s_Instance = RefreshNode(p_class) 
 	local className = "RefreshNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "CtrRef", s_Instance.outValue)
end

function Type:RegistryContainer (p_class, p_guid)
	local s_Instance = RegistryContainer(p_class) 
 	local className = "RegistryContainer"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assetRegistry", "List<CtrRef)>", s_Instance.assetRegistry)
	self:SendDefault(s_guid,className, "blueprintRegistry", "List<CtrRef)>", s_Instance.blueprintRegistry)
	self:SendDefault(s_guid,className, "entityRegistry", "List<CtrRef)>", s_Instance.entityRegistry)
	self:SendDefault(s_guid,className, "referenceObjectRegistry", "List<CtrRef)>", s_Instance.referenceObjectRegistry)
end

function Type:RegularCameraViewData (p_class, p_guid)
	local s_Instance = RegularCameraViewData(p_class) 
 	local className = "RegularCameraViewData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowFieldOfViewScaling", "bool", s_Instance.allowFieldOfViewScaling)
	self:SendDefault(s_guid,className, "fieldOfView", "float", s_Instance.fieldOfView)
	self:SendDefault(s_guid,className, "fLIREnabled", "bool", s_Instance.fLIREnabled)
	self:SendDefault(s_guid,className, "inputSuppression", "InputSuppressionData", s_Instance.inputSuppression)
	self:SendDefault(s_guid,className, "lockMeshToRenderView", "bool", s_Instance.lockMeshToRenderView)
	self:SendDefault(s_guid,className, "maskMeshBlueprint", "CtrRef", s_Instance.maskMeshBlueprint)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "meshOffset", "Vec3", s_Instance.meshOffset)
	self:SendDefault(s_guid,className, "screenExposureAreaScale", "float", s_Instance.screenExposureAreaScale)
end

function Type:RegularSocketObjectData (p_class, p_guid)
	local s_Instance = RegularSocketObjectData(p_class) 
 	local className = "RegularSocketObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh3pTransforms", "List<LinearTransform)>", s_Instance.mesh3pTransforms)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:RenderVolumeEntityData (p_class, p_guid)
	local s_Instance = RenderVolumeEntityData(p_class) 
 	local className = "RenderVolumeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "shader", "SurfaceShaderInstanceDataStruct", s_Instance.shader)
	self:SendDefault(s_guid,className, "transformType", "RenderVolumeTransformType", s_Instance.transformType)
	self:SendDefault(s_guid,className, "userMasks", "Vec4", s_Instance.userMasks)
end

function Type:RepairToolWeaponData (p_class, p_guid)
	local s_Instance = RepairToolWeaponData(p_class) 
 	local className = "RepairToolWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rechargeSpeed", "float", s_Instance.rechargeSpeed)
end

function Type:ResourceManagerSettings (p_class, p_guid)
	local s_Instance = ResourceManagerSettings(p_class) 
 	local className = "ResourceManagerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bundleProfilingEnable", "bool", s_Instance.bundleProfilingEnable)
	self:SendDefault(s_guid,className, "casBundleDecompressBufferCount", "int", s_Instance.casBundleDecompressBufferCount)
	self:SendDefault(s_guid,className, "casBundleDecompressBufferSizeKb", "int", s_Instance.casBundleDecompressBufferSizeKb)
	self:SendDefault(s_guid,className, "casBundleReadBufferSizeKb", "int", s_Instance.casBundleReadBufferSizeKb)
	self:SendDefault(s_guid,className, "sPUDecompressEnable", "bool", s_Instance.sPUDecompressEnable)
end

function Type:RibbonData (p_class, p_guid)
	local s_Instance = RibbonData(p_class) 
 	local className = "RibbonData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ribbonPoints", "List<RibbonPointData)>", s_Instance.ribbonPoints)
end

function Type:RibbonPointData (p_class, p_guid)
	local s_Instance = RibbonPointData(p_class) 
 	local className = "RibbonPointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "left", "float", s_Instance.left)
	self:SendDefault(s_guid,className, "right", "float", s_Instance.right)
	self:SendDefault(s_guid,className, "userMaskLeft", "Vec4", s_Instance.userMaskLeft)
	self:SendDefault(s_guid,className, "userMaskRight", "Vec4", s_Instance.userMaskRight)
end

function Type:RichPresenceContext (p_class, p_guid)
	local s_Instance = RichPresenceContext(p_class) 
 	local className = "RichPresenceContext"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "CtrRef", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "index", "sbyte", s_Instance.index)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "values", "List<CtrRef)>", s_Instance.values)
end

function Type:RichPresenceContextSetting (p_class, p_guid)
	local s_Instance = RichPresenceContextSetting(p_class) 
 	local className = "RichPresenceContextSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "context", "CtrRef", s_Instance.context)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:RichPresenceContextValue (p_class, p_guid)
	local s_Instance = RichPresenceContextValue(p_class) 
 	local className = "RichPresenceContextValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "sbyte", s_Instance.index)
	self:SendDefault(s_guid,className, "sID", "string", s_Instance.sID)
end

function Type:RichPresenceContextValueWithKey (p_class, p_guid)
	local s_Instance = RichPresenceContextValueWithKey(p_class) 
 	local className = "RichPresenceContextValueWithKey"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
end

function Type:RichPresenceData (p_class, p_guid)
	local s_Instance = RichPresenceData(p_class) 
 	local className = "RichPresenceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "contexts", "List<CtrRef)>", s_Instance.contexts)
	self:SendDefault(s_guid,className, "defaultMode", "CtrRef", s_Instance.defaultMode)
	self:SendDefault(s_guid,className, "inactiveMode", "CtrRef", s_Instance.inactiveMode)
	self:SendDefault(s_guid,className, "presenceModes", "List<CtrRef)>", s_Instance.presenceModes)
	self:SendDefault(s_guid,className, "properties", "List<RichPresenceProperty)>", s_Instance.properties)
end

function Type:RichPresencePresenceString (p_class, p_guid)
	local s_Instance = RichPresencePresenceString(p_class) 
 	local className = "RichPresencePresenceString"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "sbyte", s_Instance.index)
	self:SendDefault(s_guid,className, "interpolated", "bool", s_Instance.interpolated)
	self:SendDefault(s_guid,className, "sID", "string", s_Instance.sID)
end

function Type:RichPresenceProperty (p_class, p_guid)
	local s_Instance = RichPresenceProperty(p_class) 
 	local className = "RichPresenceProperty"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "propertyType", "RichPresencePropertyType", s_Instance.propertyType)
end

function Type:RigidBodyConeConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyConeConstraintData(p_class) 
 	local className = "RigidBodyConeConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularFriction", "float", s_Instance.angularFriction)
	self:SendDefault(s_guid,className, "hasLimits", "bool", s_Instance.hasLimits)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:RigidBodyConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyConstraintData(p_class) 
 	local className = "RigidBodyConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "breakThreshold", "float", s_Instance.breakThreshold)
	self:SendDefault(s_guid,className, "isBreakable", "bool", s_Instance.isBreakable)
	self:SendDefault(s_guid,className, "parentBody", "CtrRef", s_Instance.parentBody)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:RigidBodyData (p_class, p_guid)
	local s_Instance = RigidBodyData(p_class) 
 	local className = "RigidBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularVelocityDamping", "float", s_Instance.angularVelocityDamping)
	self:SendDefault(s_guid,className, "collisionLayer", "RigidBodyCollisionLayer", s_Instance.collisionLayer)
	self:SendDefault(s_guid,className, "constraints", "List<CtrRef)>", s_Instance.constraints)
	self:SendDefault(s_guid,className, "floatPhysics", "CtrRef", s_Instance.floatPhysics)
	self:SendDefault(s_guid,className, "friction", "float", s_Instance.friction)
	self:SendDefault(s_guid,className, "inertiaModifier", "Vec3", s_Instance.inertiaModifier)
	self:SendDefault(s_guid,className, "interactionToolkitCollisionVolumeId", "uint", s_Instance.interactionToolkitCollisionVolumeId)
	self:SendDefault(s_guid,className, "linearVelocityDamping", "float", s_Instance.linearVelocityDamping)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
	self:SendDefault(s_guid,className, "motionType", "RigidBodyMotionType", s_Instance.motionType)
	self:SendDefault(s_guid,className, "qualityType", "RigidBodyQualityType", s_Instance.qualityType)
	self:SendDefault(s_guid,className, "restitution", "float", s_Instance.restitution)
	self:SendDefault(s_guid,className, "rigidBodyType", "fb.RigidBodyType)", s_Instance.rigidBodyType)
end

function Type:RigidBodyHingeConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyHingeConstraintData(p_class) 
 	local className = "RigidBodyHingeConstraintData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularFriction", "float", s_Instance.angularFriction)
	self:SendDefault(s_guid,className, "hasLimits", "bool", s_Instance.hasLimits)
	self:SendDefault(s_guid,className, "maxAngle", "float", s_Instance.maxAngle)
	self:SendDefault(s_guid,className, "minAngle", "float", s_Instance.minAngle)
end

function Type:RigidMeshEntityData (p_class, p_guid)
	local s_Instance = RigidMeshEntityData(p_class) 
 	local className = "RigidMeshEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
end

function Type:RigidMeshSocketTransform (p_class, p_guid)
	local s_Instance = RigidMeshSocketTransform(p_class) 
 	local className = "RigidMeshSocketTransform"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "socketObject", "CtrRef", s_Instance.socketObject)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:RoadData (p_class, p_guid)
	local s_Instance = RoadData(p_class) 
 	local className = "RoadData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shader2d", "CtrRef", s_Instance.shader2d)
	self:SendDefault(s_guid,className, "shader3dZOnly", "CtrRef", s_Instance.shader3dZOnly)
	self:SendDefault(s_guid,className, "stickToTerrain", "bool", s_Instance.stickToTerrain)
	self:SendDefault(s_guid,className, "uvTileFactor", "float", s_Instance.uvTileFactor)
end

function Type:RotateToHitData (p_class, p_guid)
	local s_Instance = RotateToHitData(p_class) 
 	local className = "RotateToHitData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rotationSpeedFactor", "float", s_Instance.rotationSpeedFactor)
end

function Type:RotateVectorData (p_class, p_guid)
	local s_Instance = RotateVectorData(p_class) 
 	local className = "RotateVectorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "inputAffectsPhi", "bool", s_Instance.inputAffectsPhi)
	self:SendDefault(s_guid,className, "rotateWithinPlane", "bool", s_Instance.rotateWithinPlane)
end

function Type:RotationBodyData (p_class, p_guid)
	local s_Instance = RotationBodyData(p_class) 
 	local className = "RotationBodyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularConstraintMax", "float", s_Instance.angularConstraintMax)
	self:SendDefault(s_guid,className, "angularConstraintMin", "float", s_Instance.angularConstraintMin)
	self:SendDefault(s_guid,className, "angularMomentumDamping", "float", s_Instance.angularMomentumDamping)
	self:SendDefault(s_guid,className, "angularMomentumDampingAcc", "float", s_Instance.angularMomentumDampingAcc)
	self:SendDefault(s_guid,className, "angularMomentumDampingDeacc", "float", s_Instance.angularMomentumDampingDeacc)
	self:SendDefault(s_guid,className, "angularMomentumMultiplier", "float", s_Instance.angularMomentumMultiplier)
	self:SendDefault(s_guid,className, "angularMomentumThreshold", "float", s_Instance.angularMomentumThreshold)
	self:SendDefault(s_guid,className, "extendedConstraints", "CtrRef", s_Instance.extendedConstraints)
	self:SendDefault(s_guid,className, "rotationAxis", "int", s_Instance.rotationAxis)
	self:SendDefault(s_guid,className, "useAngularConstraint", "bool", s_Instance.useAngularConstraint)
	self:SendDefault(s_guid,className, "useAngularMomentumDamping", "bool", s_Instance.useAngularMomentumDamping)
	self:SendDefault(s_guid,className, "useAngularMomentumThreshold", "bool", s_Instance.useAngularMomentumThreshold)
	self:SendDefault(s_guid,className, "usePostSatisfyConstraints", "bool", s_Instance.usePostSatisfyConstraints)
end

function Type:RotorComponentData (p_class, p_guid)
	local s_Instance = RotorComponentData(p_class) 
 	local className = "RotorComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blowEffect", "CtrRef", s_Instance.blowEffect)
	self:SendDefault(s_guid,className, "changeModelRpm", "float", s_Instance.changeModelRpm)
	self:SendDefault(s_guid,className, "criticalDamage", "bool", s_Instance.criticalDamage)
	self:SendDefault(s_guid,className, "criticallyDamagedRotationForce", "float", s_Instance.criticallyDamagedRotationForce)
	self:SendDefault(s_guid,className, "groundEffectOnTerrainOnly", "bool", s_Instance.groundEffectOnTerrainOnly)
	self:SendDefault(s_guid,className, "highRpmModel", "RotorModelData", s_Instance.highRpmModel)
	self:SendDefault(s_guid,className, "lowRpmModel", "RotorModelData", s_Instance.lowRpmModel)
	self:SendDefault(s_guid,className, "onlyTriggerBlowEffectInWater", "bool", s_Instance.onlyTriggerBlowEffectInWater)
	self:SendDefault(s_guid,className, "rotationAxis", "fb.RotationAxis)", s_Instance.rotationAxis)
	self:SendDefault(s_guid,className, "rotationMultiplier", "float", s_Instance.rotationMultiplier)
	self:SendDefault(s_guid,className, "triggerGroundEffectHeight", "float", s_Instance.triggerGroundEffectHeight)
end

function Type:RotorModelData (p_class, p_guid)
	local s_Instance = RotorModelData(p_class) 
 	local className = "RotorModelData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "partIndex", "uint", s_Instance.partIndex)
	self:SendDefault(s_guid,className, "rotationRpm", "float", s_Instance.rotationRpm)
end

function Type:RotorParameters (p_class, p_guid)
	local s_Instance = RotorParameters(p_class) 
 	local className = "RotorParameters"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalGravityModifier", "float", s_Instance.additionalGravityModifier)
	self:SendDefault(s_guid,className, "angleOfAttack", "List<Vec2)>", s_Instance.angleOfAttack)
	self:SendDefault(s_guid,className, "collectiveBrakeInputScale", "float", s_Instance.collectiveBrakeInputScale)
	self:SendDefault(s_guid,className, "collectiveInputIdle", "float", s_Instance.collectiveInputIdle)
	self:SendDefault(s_guid,className, "collectiveThrottleInputScale", "float", s_Instance.collectiveThrottleInputScale)
	self:SendDefault(s_guid,className, "cyclicFadeOutOffset", "float", s_Instance.cyclicFadeOutOffset)
	self:SendDefault(s_guid,className, "cyclicInputScalePitch", "float", s_Instance.cyclicInputScalePitch)
	self:SendDefault(s_guid,className, "cyclicInputScaleRoll", "float", s_Instance.cyclicInputScaleRoll)
	self:SendDefault(s_guid,className, "enableHorisontalMinEffect", "bool", s_Instance.enableHorisontalMinEffect)
	self:SendDefault(s_guid,className, "horisontalMinEffectMod", "float", s_Instance.horisontalMinEffectMod)
	self:SendDefault(s_guid,className, "horisontalMinEffectVelocity", "float", s_Instance.horisontalMinEffectVelocity)
	self:SendDefault(s_guid,className, "horizontalForceModifier", "float", s_Instance.horizontalForceModifier)
	self:SendDefault(s_guid,className, "reverseThrottle", "bool", s_Instance.reverseThrottle)
end

function Type:RoundEvent (p_class, p_guid)
	local s_Instance = RoundEvent(p_class) 
 	local className = "RoundEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "juiceSessionId", "int", s_Instance.juiceSessionId)
	self:SendDefault(s_guid,className, "levelName", "string", s_Instance.levelName)
end

function Type:RoundOverEntityData (p_class, p_guid)
	local s_Instance = RoundOverEntityData(p_class) 
 	local className = "RoundOverEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
end

function Type:RoundOverEvent (p_class, p_guid)
	local s_Instance = RoundOverEvent(p_class) 
 	local className = "RoundOverEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ticketsLeft", "int", s_Instance.ticketsLeft)
	self:SendDefault(s_guid,className, "winningTeam", "int", s_Instance.winningTeam)
end

function Type:RouteEntry (p_class, p_guid)
	local s_Instance = RouteEntry(p_class) 
 	local className = "RouteEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "output", "AudioGraphNodePort", s_Instance.output)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:RouteNodeData (p_class, p_guid)
	local s_Instance = RouteNodeData(p_class) 
 	local className = "RouteNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "routes", "List<CtrRef)>", s_Instance.routes)
end

function Type:RumbleFiringData (p_class, p_guid)
	local s_Instance = RumbleFiringData(p_class) 
 	local className = "RumbleFiringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "highRumble", "float", s_Instance.highRumble)
	self:SendDefault(s_guid,className, "lowRumble", "float", s_Instance.lowRumble)
	self:SendDefault(s_guid,className, "rumbleDuration", "float", s_Instance.rumbleDuration)
end

function Type:SamplerNodeData (p_class, p_guid)
	local s_Instance = SamplerNodeData(p_class) 
 	local className = "SamplerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amplitude", "AudioGraphNodePort", s_Instance.amplitude)
	self:SendDefault(s_guid,className, "basePitch", "float", s_Instance.basePitch)
	self:SendDefault(s_guid,className, "buffer", "AudioGraphNodePort", s_Instance.buffer)
	self:SendDefault(s_guid,className, "buffered", "AudioGraphNodePort", s_Instance.buffered)
	self:SendDefault(s_guid,className, "delay", "AudioGraphNodePort", s_Instance.delay)
	self:SendDefault(s_guid,className, "enableStep", "AudioGraphNodePort", s_Instance.enableStep)
	self:SendDefault(s_guid,className, "externalWave", "AudioGraphNodePort", s_Instance.externalWave)
	self:SendDefault(s_guid,className, "finished", "AudioGraphNodePort", s_Instance.finished)
	self:SendDefault(s_guid,className, "loop", "LoopType", s_Instance.loop)
	self:SendDefault(s_guid,className, "offset", "AudioGraphNodePort", s_Instance.offset)
	self:SendDefault(s_guid,className, "output", "AudioGraphNodePort", s_Instance.output)
	self:SendDefault(s_guid,className, "pitch", "AudioGraphNodePort", s_Instance.pitch)
	self:SendDefault(s_guid,className, "plugins", "List<SamplerPlugins)>", s_Instance.plugins)
	self:SendDefault(s_guid,className, "position", "AudioGraphNodePort", s_Instance.position)
	self:SendDefault(s_guid,className, "release", "AudioGraphNodePort", s_Instance.release)
	self:SendDefault(s_guid,className, "shuffleSegments", "bool", s_Instance.shuffleSegments)
	self:SendDefault(s_guid,className, "step", "AudioGraphNodePort", s_Instance.step)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "variation", "AudioGraphNodePort", s_Instance.variation)
	self:SendDefault(s_guid,className, "wave", "CtrRef", s_Instance.wave)
end

function Type:SamplerPlugins (p_class, p_guid)
	local s_Instance = SamplerPlugins(p_class) 
 	local className = "SamplerPlugins"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gain", "SoundGraphPluginRef", s_Instance.gain)
	self:SendDefault(s_guid,className, "pause", "SoundGraphPluginRef", s_Instance.pause)
	self:SendDefault(s_guid,className, "resample", "SoundGraphPluginRef", s_Instance.resample)
	self:SendDefault(s_guid,className, "sndPlayer", "SoundGraphPluginRef", s_Instance.sndPlayer)
end

function Type:SampleTextureData (p_class, p_guid)
	local s_Instance = SampleTextureData(p_class) 
 	local className = "SampleTextureData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "colorIntensityMax", "Vec3", s_Instance.colorIntensityMax)
	self:SendDefault(s_guid,className, "colorIntensityMin", "Vec3", s_Instance.colorIntensityMin)
	self:SendDefault(s_guid,className, "gradientData", "List<Vec4)>", s_Instance.gradientData)
	self:SendDefault(s_guid,className, "textureDimensions", "Vec2", s_Instance.textureDimensions)
	self:SendDefault(s_guid,className, "textureOriginU", "float", s_Instance.textureOriginU)
	self:SendDefault(s_guid,className, "textureOriginV", "float", s_Instance.textureOriginV)
end

function Type:SaveEntityData (p_class, p_guid)
	local s_Instance = SaveEntityData(p_class) 
 	local className = "SaveEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkForHumanPlayer", "bool", s_Instance.checkForHumanPlayer)
	self:SendDefault(s_guid,className, "levelName", "string", s_Instance.levelName)
	self:SendDefault(s_guid,className, "saveFileName", "string", s_Instance.saveFileName)
	self:SendDefault(s_guid,className, "saveNameSID", "string", s_Instance.saveNameSID)
	self:SendDefault(s_guid,className, "saveScreenTexture", "CtrRef", s_Instance.saveScreenTexture)
end

function Type:ScaleClampNodeData (p_class, p_guid)
	local s_Instance = ScaleClampNodeData(p_class) 
 	local className = "ScaleClampNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "inMax", "AudioGraphNodePort", s_Instance.inMax)
	self:SendDefault(s_guid,className, "inMin", "AudioGraphNodePort", s_Instance.inMin)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "outMax", "AudioGraphNodePort", s_Instance.outMax)
	self:SendDefault(s_guid,className, "outMin", "AudioGraphNodePort", s_Instance.outMin)
end

function Type:ScenarioTaskData (p_class, p_guid)
	local s_Instance = ScenarioTaskData(p_class) 
 	local className = "ScenarioTaskData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actorId", "int", s_Instance.actorId)
	self:SendDefault(s_guid,className, "connectTransforms", "List<LinearTransform)>", s_Instance.connectTransforms)
	self:SendDefault(s_guid,className, "endPointWorldOffset", "Vec3", s_Instance.endPointWorldOffset)
	self:SendDefault(s_guid,className, "levelId", "int", s_Instance.levelId)
	self:SendDefault(s_guid,className, "partId", "int", s_Instance.partId)
	self:SendDefault(s_guid,className, "scenarioId", "int", s_Instance.scenarioId)
	self:SendDefault(s_guid,className, "startPoint", "Vec3", s_Instance.startPoint)
	self:SendDefault(s_guid,className, "startTimerDistance", "float", s_Instance.startTimerDistance)
	self:SendDefault(s_guid,className, "startTurnDistance", "float", s_Instance.startTurnDistance)
	self:SendDefault(s_guid,className, "triggerScenario", "bool", s_Instance.triggerScenario)
	self:SendDefault(s_guid,className, "triggerScenarioDelay", "float", s_Instance.triggerScenarioDelay)
	self:SendDefault(s_guid,className, "useClientPosition", "bool", s_Instance.useClientPosition)
	self:SendDefault(s_guid,className, "worldAngle", "float", s_Instance.worldAngle)
end

function Type:ScenarioWaypointData (p_class, p_guid)
	local s_Instance = ScenarioWaypointData(p_class) 
 	local className = "ScenarioWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scenarioAntRef", "AntRef", s_Instance.scenarioAntRef)
	self:SendDefault(s_guid,className, "scenarioTask", "ScenarioTaskData", s_Instance.scenarioTask)
end

function Type:SceneRecordingData (p_class, p_guid)
	local s_Instance = SceneRecordingData(p_class) 
 	local className = "SceneRecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "List<CtrRef)>", s_Instance.data)
end

function Type:ScoreAggregate (p_class, p_guid)
	local s_Instance = ScoreAggregate(p_class) 
 	local className = "ScoreAggregate"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "totalScore", "float", s_Instance.totalScore)
end

function Type:ScoringBucketData (p_class, p_guid)
	local s_Instance = ScoringBucketData(p_class) 
 	local className = "ScoringBucketData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "addToEntry", "bool", s_Instance.addToEntry)
	self:SendDefault(s_guid,className, "bucketType", "ScoringBucketType", s_Instance.bucketType)
	self:SendDefault(s_guid,className, "connectedCategories", "List<CtrRef)>", s_Instance.connectedCategories)
	self:SendDefault(s_guid,className, "destinationBucket", "ScoringBucket", s_Instance.destinationBucket)
	self:SendDefault(s_guid,className, "globalScore", "bool", s_Instance.globalScore)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "roundScore", "bool", s_Instance.roundScore)
	self:SendDefault(s_guid,className, "teamTotalBucket", "CtrRef", s_Instance.teamTotalBucket)
	self:SendDefault(s_guid,className, "unlocks", "List<ScoringBucketUnlockData)>", s_Instance.unlocks)
end

function Type:ScoringBucketUnlockData (p_class, p_guid)
	local s_Instance = ScoringBucketUnlockData(p_class) 
 	local className = "ScoringBucketUnlockData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pointsNeeded", "uint", s_Instance.pointsNeeded)
	self:SendDefault(s_guid,className, "unlockInfo", "BasicUnlockInfo", s_Instance.unlockInfo)
end

function Type:ScoringData (p_class, p_guid)
	local s_Instance = ScoringData(p_class) 
 	local className = "ScoringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buckets", "List<CtrRef)>", s_Instance.buckets)
	self:SendDefault(s_guid,className, "scoringHandlers", "List<CtrRef)>", s_Instance.scoringHandlers)
	self:SendDefault(s_guid,className, "scoringTypes", "List<CtrRef)>", s_Instance.scoringTypes)
end

function Type:ScoringTypeData (p_class, p_guid)
	local s_Instance = ScoringTypeData(p_class) 
 	local className = "ScoringTypeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "additionalValueMultiplier", "float", s_Instance.additionalValueMultiplier)
	self:SendDefault(s_guid,className, "bucket", "ScoringBucket", s_Instance.bucket)
	self:SendDefault(s_guid,className, "descriptionSid", "string", s_Instance.descriptionSid)
	self:SendDefault(s_guid,className, "limit", "float", s_Instance.limit)
	self:SendDefault(s_guid,className, "measuring", "StatEvent", s_Instance.measuring)
	self:SendDefault(s_guid,className, "paramX", "CtrRef", s_Instance.paramX)
	self:SendDefault(s_guid,className, "paramY", "CtrRef", s_Instance.paramY)
	self:SendDefault(s_guid,className, "score", "float", s_Instance.score)
	self:SendDefault(s_guid,className, "showForTeam", "bool", s_Instance.showForTeam)
	self:SendDefault(s_guid,className, "visibilityType", "ScoringVisibilityType", s_Instance.visibilityType)
end

function Type:ScreenEffectComponentData (p_class, p_guid)
	local s_Instance = ScreenEffectComponentData(p_class) 
 	local className = "ScreenEffectComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "frameType", "ScreenEffectFrameType", s_Instance.frameType)
	self:SendDefault(s_guid,className, "frameWidth", "float", s_Instance.frameWidth)
	self:SendDefault(s_guid,className, "innerFrameOpacity", "float", s_Instance.innerFrameOpacity)
	self:SendDefault(s_guid,className, "outerFrameOpacity", "float", s_Instance.outerFrameOpacity)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "screenEffectParams", "Vec4", s_Instance.screenEffectParams)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
end

function Type:ScreenshotInfo (p_class, p_guid)
	local s_Instance = ScreenshotInfo(p_class) 
 	local className = "ScreenshotInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cropImage", "bool", s_Instance.cropImage)
	self:SendDefault(s_guid,className, "cropImageX1", "uint", s_Instance.cropImageX1)
	self:SendDefault(s_guid,className, "cropImageX2", "uint", s_Instance.cropImageX2)
	self:SendDefault(s_guid,className, "cropImageY1", "uint", s_Instance.cropImageY1)
	self:SendDefault(s_guid,className, "cropImageY2", "uint", s_Instance.cropImageY2)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "resizeOutputImage", "bool", s_Instance.resizeOutputImage)
	self:SendDefault(s_guid,className, "resizeOutputImageHeight", "uint", s_Instance.resizeOutputImageHeight)
	self:SendDefault(s_guid,className, "resizeOutputImageWidth", "uint", s_Instance.resizeOutputImageWidth)
end

function Type:ScriptEntityData (p_class, p_guid)
	local s_Instance = ScriptEntityData(p_class) 
 	local className = "ScriptEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "code", "string", s_Instance.code)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:SearchAndDestroyConstantData (p_class, p_guid)
	local s_Instance = SearchAndDestroyConstantData(p_class) 
 	local className = "SearchAndDestroyConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultSearchAndDestroyRadius", "float", s_Instance.defaultSearchAndDestroyRadius)
	self:SendDefault(s_guid,className, "timeToWaitMax", "float", s_Instance.timeToWaitMax)
	self:SendDefault(s_guid,className, "timeToWaitMin", "float", s_Instance.timeToWaitMin)
end

function Type:SearchAndDestroyOrderEntityData (p_class, p_guid)
	local s_Instance = SearchAndDestroyOrderEntityData(p_class) 
 	local className = "SearchAndDestroyOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aggressive", "bool", s_Instance.aggressive)
	self:SendDefault(s_guid,className, "findTargetTime", "float", s_Instance.findTargetTime)
	self:SendDefault(s_guid,className, "targetAreaFollowsTarget", "bool", s_Instance.targetAreaFollowsTarget)
	self:SendDefault(s_guid,className, "targetPosKnowledge", "TargetPosKnowledgeType", s_Instance.targetPosKnowledge)
end

function Type:SelectEventEntityData (p_class, p_guid)
	local s_Instance = SelectEventEntityData(p_class) 
 	local className = "SelectEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "List<string)>", s_Instance.events)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:SendEntry (p_class, p_guid)
	local s_Instance = SendEntry(p_class) 
 	local className = "SendEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
end

function Type:SendNodeData (p_class, p_guid)
	local s_Instance = SendNodeData(p_class) 
 	local className = "SendNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
end

function Type:SensingComponentData (p_class, p_guid)
	local s_Instance = SensingComponentData(p_class) 
 	local className = "SensingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
	self:SendDefault(s_guid,className, "sharedPlayerMemory", "bool", s_Instance.sharedPlayerMemory)
	self:SendDefault(s_guid,className, "template", "CtrRef", s_Instance.template)
	self:SendDefault(s_guid,className, "useWeaponTransform", "bool", s_Instance.useWeaponTransform)
end

function Type:SensingLimits (p_class, p_guid)
	local s_Instance = SensingLimits(p_class) 
 	local className = "SensingLimits"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hearingCutoff", "float", s_Instance.hearingCutoff)
	self:SendDefault(s_guid,className, "hearingDistance", "float", s_Instance.hearingDistance)
	self:SendDefault(s_guid,className, "peripheralMovementCutoff", "float", s_Instance.peripheralMovementCutoff)
	self:SendDefault(s_guid,className, "peripheralViewAngle", "float", s_Instance.peripheralViewAngle)
	self:SendDefault(s_guid,className, "peripheralViewDistance", "float", s_Instance.peripheralViewDistance)
	self:SendDefault(s_guid,className, "viewAngle", "float", s_Instance.viewAngle)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
end

function Type:SensingManagerEntityData (p_class, p_guid)
	local s_Instance = SensingManagerEntityData(p_class) 
 	local className = "SensingManagerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "senseTerrainAreas", "List<SensingSphere)>", s_Instance.senseTerrainAreas)
end

function Type:SensingSettings (p_class, p_guid)
	local s_Instance = SensingSettings(p_class) 
 	local className = "SensingSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attackerTrackTime", "double", s_Instance.attackerTrackTime)
	self:SendDefault(s_guid,className, "backgroundLoudnessFactor", "float", s_Instance.backgroundLoudnessFactor)
	self:SendDefault(s_guid,className, "characterVisionBoxSettings", "VisionBoxSettings", s_Instance.characterVisionBoxSettings)
	self:SendDefault(s_guid,className, "closeExplosiveImpactDistance", "float", s_Instance.closeExplosiveImpactDistance)
	self:SendDefault(s_guid,className, "closeFireImpactDistance", "float", s_Instance.closeFireImpactDistance)
	self:SendDefault(s_guid,className, "closeTrajectoryDistance", "float", s_Instance.closeTrajectoryDistance)
	self:SendDefault(s_guid,className, "defaultTemplate", "CtrRef", s_Instance.defaultTemplate)
	self:SendDefault(s_guid,className, "impactSenseDistance", "float", s_Instance.impactSenseDistance)
	self:SendDefault(s_guid,className, "lineOfSightTestTime", "double", s_Instance.lineOfSightTestTime)
	self:SendDefault(s_guid,className, "luckModifier", "float", s_Instance.luckModifier)
	self:SendDefault(s_guid,className, "maxRays", "int", s_Instance.maxRays)
	self:SendDefault(s_guid,className, "maxSize", "float", s_Instance.maxSize)
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "maxVolume", "float", s_Instance.maxVolume)
	self:SendDefault(s_guid,className, "motionDistanceFactor", "float", s_Instance.motionDistanceFactor)
	self:SendDefault(s_guid,className, "motionPeripheralityFactor", "float", s_Instance.motionPeripheralityFactor)
	self:SendDefault(s_guid,className, "motionSizeFactor", "float", s_Instance.motionSizeFactor)
	self:SendDefault(s_guid,className, "motionSpeedFactor", "float", s_Instance.motionSpeedFactor)
	self:SendDefault(s_guid,className, "movementModifier", "float", s_Instance.movementModifier)
	self:SendDefault(s_guid,className, "sensingTimeSpan", "double", s_Instance.sensingTimeSpan)
	self:SendDefault(s_guid,className, "smokeSphereDuration", "float", s_Instance.smokeSphereDuration)
	self:SendDefault(s_guid,className, "smokeSphereRadius", "float", s_Instance.smokeSphereRadius)
	self:SendDefault(s_guid,className, "spawnOutOfLOSRadius", "float", s_Instance.spawnOutOfLOSRadius)
	self:SendDefault(s_guid,className, "spawnOutOfLOSRaycastDistance", "float", s_Instance.spawnOutOfLOSRaycastDistance)
	self:SendDefault(s_guid,className, "spawnOutOfLOSRaycastHeight", "float", s_Instance.spawnOutOfLOSRaycastHeight)
	self:SendDefault(s_guid,className, "spawnOutOfLOSTraceDistance", "float", s_Instance.spawnOutOfLOSTraceDistance)
	self:SendDefault(s_guid,className, "vehicleVisionBoxSettings", "VisionBoxSettings", s_Instance.vehicleVisionBoxSettings)
	self:SendDefault(s_guid,className, "volumeModifier", "float", s_Instance.volumeModifier)
end

function Type:SensingSphere (p_class, p_guid)
	local s_Instance = SensingSphere(p_class) 
 	local className = "SensingSphere"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "radiusSqr", "float", s_Instance.radiusSqr)
end

function Type:SensingTemplateData (p_class, p_guid)
	local s_Instance = SensingTemplateData(p_class) 
 	local className = "SensingTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "awareForgetTime", "double", s_Instance.awareForgetTime)
	self:SendDefault(s_guid,className, "combatLimits", "SensingLimits", s_Instance.combatLimits)
	self:SendDefault(s_guid,className, "debugText", "string", s_Instance.debugText)
	self:SendDefault(s_guid,className, "lostForgetTime", "double", s_Instance.lostForgetTime)
	self:SendDefault(s_guid,className, "maximumAlertDistance", "float", s_Instance.maximumAlertDistance)
	self:SendDefault(s_guid,className, "maximumMergeDistance", "float", s_Instance.maximumMergeDistance)
	self:SendDefault(s_guid,className, "maximumReadinessRaiseDistance", "float", s_Instance.maximumReadinessRaiseDistance)
	self:SendDefault(s_guid,className, "noticeBullets", "bool", s_Instance.noticeBullets)
	self:SendDefault(s_guid,className, "readyLimits", "SensingLimits", s_Instance.readyLimits)
	self:SendDefault(s_guid,className, "relaxedLimits", "SensingLimits", s_Instance.relaxedLimits)
	self:SendDefault(s_guid,className, "timeUntilUnseenIsLost", "double", s_Instance.timeUntilUnseenIsLost)
	self:SendDefault(s_guid,className, "useSenseSharing", "bool", s_Instance.useSenseSharing)
end

function Type:SensitivityAtVelocity (p_class, p_guid)
	local s_Instance = SensitivityAtVelocity(p_class) 
 	local className = "SensitivityAtVelocity"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "steeringSensitivity", "float", s_Instance.steeringSensitivity)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:SequenceEntityData (p_class, p_guid)
	local s_Instance = SequenceEntityData(p_class) 
 	local className = "SequenceEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoPlayFirstFrame", "bool", s_Instance.autoPlayFirstFrame)
	self:SendDefault(s_guid,className, "autoStart", "bool", s_Instance.autoStart)
	self:SendDefault(s_guid,className, "clientUpdatePass", "UpdatePass", s_Instance.clientUpdatePass)
	self:SendDefault(s_guid,className, "customSequenceTracks", "List<CtrRef)>", s_Instance.customSequenceTracks)
	self:SendDefault(s_guid,className, "events", "List<SequenceEventData)>", s_Instance.events)
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "looping", "bool", s_Instance.looping)
	self:SendDefault(s_guid,className, "playInReverse", "bool", s_Instance.playInReverse)
	self:SendDefault(s_guid,className, "propertyTracks", "List<CtrRef)>", s_Instance.propertyTracks)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "sequenceLength", "int", s_Instance.sequenceLength)
	self:SendDefault(s_guid,className, "sequenceStartTime", "int", s_Instance.sequenceStartTime)
	self:SendDefault(s_guid,className, "serverUpdatePass", "UpdatePass", s_Instance.serverUpdatePass)
end

function Type:SequenceEventData (p_class, p_guid)
	local s_Instance = SequenceEventData(p_class) 
 	local className = "SequenceEventData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "event", "EventSpec", s_Instance.event)
	self:SendDefault(s_guid,className, "time", "int", s_Instance.time)
end

function Type:SequenceGeneratorNodeData (p_class, p_guid)
	local s_Instance = SequenceGeneratorNodeData(p_class) 
 	local className = "SequenceGeneratorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "AudioGraphNodePort", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "AudioGraphNodePort", s_Instance.min)
	self:SendDefault(s_guid,className, "reset", "AudioGraphNodePort", s_Instance.reset)
	self:SendDefault(s_guid,className, "step", "AudioGraphNodePort", s_Instance.step)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
end

function Type:ServerBackendAttributeMapping (p_class, p_guid)
	local s_Instance = ServerBackendAttributeMapping(p_class) 
 	local className = "ServerBackendAttributeMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attribute", "ServerBackendAttribute", s_Instance.attribute)
	self:SendDefault(s_guid,className, "defaultValue", "string", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "setting", "string", s_Instance.setting)
end

function Type:ServerBackendData (p_class, p_guid)
	local s_Instance = ServerBackendData(p_class) 
 	local className = "ServerBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mappings", "List<ServerBackendAttributeMapping)>", s_Instance.mappings)
end

function Type:ServerInfoSetting (p_class, p_guid)
	local s_Instance = ServerInfoSetting(p_class) 
 	local className = "ServerInfoSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isBool", "bool", s_Instance.isBool)
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:ServerMetricsSettings (p_class, p_guid)
	local s_Instance = ServerMetricsSettings(p_class) 
 	local className = "ServerMetricsSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "compressTransactions", "bool", s_Instance.compressTransactions)
	self:SendDefault(s_guid,className, "dbxReportEnabled", "bool", s_Instance.dbxReportEnabled)
	self:SendDefault(s_guid,className, "developmentTelemetryEnabled", "bool", s_Instance.developmentTelemetryEnabled)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "juiceTelemetryEnabled", "bool", s_Instance.juiceTelemetryEnabled)
	self:SendDefault(s_guid,className, "performanceProfileStateEnabled", "bool", s_Instance.performanceProfileStateEnabled)
	self:SendDefault(s_guid,className, "performanceTelemetryEnabled", "bool", s_Instance.performanceTelemetryEnabled)
	self:SendDefault(s_guid,className, "reportName", "string", s_Instance.reportName)
	self:SendDefault(s_guid,className, "tickTelemetryEnabled", "bool", s_Instance.tickTelemetryEnabled)
	self:SendDefault(s_guid,className, "transactionTelemetryEnabled", "bool", s_Instance.transactionTelemetryEnabled)
end

function Type:ServerPerformanceEvent (p_class, p_guid)
	local s_Instance = ServerPerformanceEvent(p_class) 
 	local className = "ServerPerformanceEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cPUAverage", "float", s_Instance.cPUAverage)
	self:SendDefault(s_guid,className, "cPUMemory", "float", s_Instance.cPUMemory)
	self:SendDefault(s_guid,className, "received", "uint", s_Instance.received)
	self:SendDefault(s_guid,className, "receivedAverage", "float", s_Instance.receivedAverage)
	self:SendDefault(s_guid,className, "sent", "uint", s_Instance.sent)
	self:SendDefault(s_guid,className, "sentAverage", "float", s_Instance.sentAverage)
end

function Type:ServerSettings (p_class, p_guid)
	local s_Instance = ServerSettings(p_class) 
 	local className = "ServerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "administrationEnabled", "bool", s_Instance.administrationEnabled)
	self:SendDefault(s_guid,className, "administrationEventsEnabled", "bool", s_Instance.administrationEventsEnabled)
	self:SendDefault(s_guid,className, "administrationLogEnabled", "bool", s_Instance.administrationLogEnabled)
	self:SendDefault(s_guid,className, "administrationPassword", "string", s_Instance.administrationPassword)
	self:SendDefault(s_guid,className, "administrationServerNameRestricted", "bool", s_Instance.administrationServerNameRestricted)
	self:SendDefault(s_guid,className, "administrationTimeStampLogNames", "bool", s_Instance.administrationTimeStampLogNames)
	self:SendDefault(s_guid,className, "aILooksIntoCamera", "bool", s_Instance.aILooksIntoCamera)
	self:SendDefault(s_guid,className, "allowIndestructibleParts", "bool", s_Instance.allowIndestructibleParts)
	self:SendDefault(s_guid,className, "autoUnspawnBangers", "bool", s_Instance.autoUnspawnBangers)
	self:SendDefault(s_guid,className, "corruptionChance", "float", s_Instance.corruptionChance)
	self:SendDefault(s_guid,className, "deathmatchDebugInfo", "bool", s_Instance.deathmatchDebugInfo)
	self:SendDefault(s_guid,className, "debrisClusterEnabled", "bool", s_Instance.debrisClusterEnabled)
	self:SendDefault(s_guid,className, "debugMenuClick", "string", s_Instance.debugMenuClick)
	self:SendDefault(s_guid,className, "dedicatedServerCpu", "int", s_Instance.dedicatedServerCpu)
	self:SendDefault(s_guid,className, "disableCutscenes", "bool", s_Instance.disableCutscenes)
	self:SendDefault(s_guid,className, "drawActivePhysicsObjects", "bool", s_Instance.drawActivePhysicsObjects)
	self:SendDefault(s_guid,className, "dropSpikeChance", "float", s_Instance.dropSpikeChance)
	self:SendDefault(s_guid,className, "duplicationChance", "float", s_Instance.duplicationChance)
	self:SendDefault(s_guid,className, "enableAnimationCulling", "bool", s_Instance.enableAnimationCulling)
	self:SendDefault(s_guid,className, "fallBackToSquadSpawn", "bool", s_Instance.fallBackToSquadSpawn)
	self:SendDefault(s_guid,className, "forcePlaylist", "bool", s_Instance.forcePlaylist)
	self:SendDefault(s_guid,className, "havokCaptureToFile", "bool", s_Instance.havokCaptureToFile)
	self:SendDefault(s_guid,className, "havokVisualDebugger", "bool", s_Instance.havokVisualDebugger)
	self:SendDefault(s_guid,className, "humanHealthMultiplier", "float", s_Instance.humanHealthMultiplier)
	self:SendDefault(s_guid,className, "incomingRate", "uint", s_Instance.incomingRate)
	self:SendDefault(s_guid,className, "ingameTimeout", "float", s_Instance.ingameTimeout)
	self:SendDefault(s_guid,className, "instancePath", "string", s_Instance.instancePath)
	self:SendDefault(s_guid,className, "isAiEnabled", "bool", s_Instance.isAiEnabled)
	self:SendDefault(s_guid,className, "isDesertingAllowed", "bool", s_Instance.isDesertingAllowed)
	self:SendDefault(s_guid,className, "isDestructionEnabled", "bool", s_Instance.isDestructionEnabled)
	self:SendDefault(s_guid,className, "isInternetSimulationEnabled", "bool", s_Instance.isInternetSimulationEnabled)
	self:SendDefault(s_guid,className, "isNetworkStatsEnabled", "bool", s_Instance.isNetworkStatsEnabled)
	self:SendDefault(s_guid,className, "isPresenceEnabled", "bool", s_Instance.isPresenceEnabled)
	self:SendDefault(s_guid,className, "isRanked", "bool", s_Instance.isRanked)
	self:SendDefault(s_guid,className, "isReconfigurable", "bool", s_Instance.isReconfigurable)
	self:SendDefault(s_guid,className, "isRenderDamageEvents", "bool", s_Instance.isRenderDamageEvents)
	self:SendDefault(s_guid,className, "isSoldierAnimationEnabled", "bool", s_Instance.isSoldierAnimationEnabled)
	self:SendDefault(s_guid,className, "isSoldierDetailedCollisionEnabled", "bool", s_Instance.isSoldierDetailedCollisionEnabled)
	self:SendDefault(s_guid,className, "isStatsEnabled", "bool", s_Instance.isStatsEnabled)
	self:SendDefault(s_guid,className, "isTreeDestructionEnabled", "bool", s_Instance.isTreeDestructionEnabled)
	self:SendDefault(s_guid,className, "jobEnable", "bool", s_Instance.jobEnable)
	self:SendDefault(s_guid,className, "loadingTimeout", "float", s_Instance.loadingTimeout)
	self:SendDefault(s_guid,className, "loadSavePoint", "bool", s_Instance.loadSavePoint)
	self:SendDefault(s_guid,className, "maxDropDuration", "float", s_Instance.maxDropDuration)
	self:SendDefault(s_guid,className, "maxLatency", "float", s_Instance.maxLatency)
	self:SendDefault(s_guid,className, "maxQueriesPerSecond", "uint", s_Instance.maxQueriesPerSecond)
	self:SendDefault(s_guid,className, "minDropDuration", "float", s_Instance.minDropDuration)
	self:SendDefault(s_guid,className, "minLatency", "float", s_Instance.minLatency)
	self:SendDefault(s_guid,className, "outgoingFrequency", "float", s_Instance.outgoingFrequency)
	self:SendDefault(s_guid,className, "outgoingRate", "uint", s_Instance.outgoingRate)
	self:SendDefault(s_guid,className, "packetDrops", "float", s_Instance.packetDrops)
	self:SendDefault(s_guid,className, "playerCountNeededForMultiplayer", "uint", s_Instance.playerCountNeededForMultiplayer)
	self:SendDefault(s_guid,className, "playlist", "string", s_Instance.playlist)
	self:SendDefault(s_guid,className, "queryProviderEnabled", "bool", s_Instance.queryProviderEnabled)
	self:SendDefault(s_guid,className, "regulatedAIThrottle", "bool", s_Instance.regulatedAIThrottle)
	self:SendDefault(s_guid,className, "remoteAdministrationPort", "string", s_Instance.remoteAdministrationPort)
	self:SendDefault(s_guid,className, "remoteControlPort", "uint", s_Instance.remoteControlPort)
	self:SendDefault(s_guid,className, "reorderingChance", "float", s_Instance.reorderingChance)
	self:SendDefault(s_guid,className, "respawnOnDeathPosition", "bool", s_Instance.respawnOnDeathPosition)
	self:SendDefault(s_guid,className, "respawnTimeModifier", "float", s_Instance.respawnTimeModifier)
	self:SendDefault(s_guid,className, "saveGameVersion", "uint", s_Instance.saveGameVersion)
	self:SendDefault(s_guid,className, "savePoint", "string", s_Instance.savePoint)
	self:SendDefault(s_guid,className, "scoringLogEnabled", "bool", s_Instance.scoringLogEnabled)
	self:SendDefault(s_guid,className, "serverName", "string", s_Instance.serverName)
	self:SendDefault(s_guid,className, "serverPassword", "string", s_Instance.serverPassword)
	self:SendDefault(s_guid,className, "showTriggerDebugText", "bool", s_Instance.showTriggerDebugText)
	self:SendDefault(s_guid,className, "threadedLoadingEnable", "bool", s_Instance.threadedLoadingEnable)
	self:SendDefault(s_guid,className, "threadingEnable", "bool", s_Instance.threadingEnable)
	self:SendDefault(s_guid,className, "timeoutGame", "bool", s_Instance.timeoutGame)
	self:SendDefault(s_guid,className, "timeoutTime", "float", s_Instance.timeoutTime)
	self:SendDefault(s_guid,className, "unlockResolver", "bool", s_Instance.unlockResolver)
	self:SendDefault(s_guid,className, "vegetationEnabled", "bool", s_Instance.vegetationEnabled)
	self:SendDefault(s_guid,className, "vehicleSpawnAllowed", "bool", s_Instance.vehicleSpawnAllowed)
	self:SendDefault(s_guid,className, "vehicleSpawnDelayModifier", "float", s_Instance.vehicleSpawnDelayModifier)
	self:SendDefault(s_guid,className, "waterPhysicsEnabled", "bool", s_Instance.waterPhysicsEnabled)
end

function Type:SettingConfig (p_class, p_guid)
	local s_Instance = SettingConfig(p_class) 
 	local className = "SettingConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "default", "uint", s_Instance.default)
	self:SendDefault(s_guid,className, "descSid", "string", s_Instance.descSid)
	self:SendDefault(s_guid,className, "key", "string", s_Instance.key)
	self:SendDefault(s_guid,className, "max", "uint", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "uint", s_Instance.min)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "ranked", "bool", s_Instance.ranked)
end

function Type:SettingEntityData (p_class, p_guid)
	local s_Instance = SettingEntityData(p_class) 
 	local className = "SettingEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolSettingName", "string", s_Instance.boolSettingName)
	self:SendDefault(s_guid,className, "floatSettingName", "string", s_Instance.floatSettingName)
	self:SendDefault(s_guid,className, "intSettingName", "string", s_Instance.intSettingName)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:SettingsBundleAsset (p_class, p_guid)
	local s_Instance = SettingsBundleAsset(p_class) 
 	local className = "SettingsBundleAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "List<CtrRef)>", s_Instance.settings)
end

function Type:ShaderColorUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderColorUnlockPartCollection(p_class) 
 	local className = "ShaderColorUnlockPartCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultColorReference", "CtrRef", s_Instance.defaultColorReference)
	self:SendDefault(s_guid,className, "unlockParts", "List<CtrRef)>", s_Instance.unlockParts)
end

function Type:ShaderCustomizationUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderCustomizationUnlockPartCollection(p_class) 
 	local className = "ShaderCustomizationUnlockPartCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshBlueprints", "List<CtrRef)>", s_Instance.meshBlueprints)
	self:SendDefault(s_guid,className, "meshMaterials", "List<CustomizedMeshMaterialsData)>", s_Instance.meshMaterials)
	self:SendDefault(s_guid,className, "shaderNodeName", "string", s_Instance.shaderNodeName)
end

function Type:ShaderDatabaseAsset (p_class, p_guid)
	local s_Instance = ShaderDatabaseAsset(p_class) 
 	local className = "ShaderDatabaseAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "levelName", "string", s_Instance.levelName)
end

function Type:ShaderGraph (p_class, p_guid)
	local s_Instance = ShaderGraph(p_class) 
 	local className = "ShaderGraph"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gammaCorrectionEnable", "bool", s_Instance.gammaCorrectionEnable)
	self:SendDefault(s_guid,className, "maxSubMaterialCount", "uint", s_Instance.maxSubMaterialCount)
end

function Type:ShaderParameterComponentData (p_class, p_guid)
	local s_Instance = ShaderParameterComponentData(p_class) 
 	local className = "ShaderParameterComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shaderParameterVectors", "List<ShaderParameterVector)>", s_Instance.shaderParameterVectors)
end

function Type:ShaderParameterVector (p_class, p_guid)
	local s_Instance = ShaderParameterVector(p_class) 
 	local className = "ShaderParameterVector"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "value", "Vec4", s_Instance.value)
end

function Type:ShaderParamsComponentData (p_class, p_guid)
	local s_Instance = ShaderParamsComponentData(p_class) 
 	local className = "ShaderParamsComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "value", "Vec4", s_Instance.value)
end

function Type:ShaderSystemSettings (p_class, p_guid)
	local s_Instance = ShaderSystemSettings(p_class) 
 	local className = "ShaderSystemSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alphaBlendEnable", "bool", s_Instance.alphaBlendEnable)
	self:SendDefault(s_guid,className, "boneConstantOptimizationEnable", "bool", s_Instance.boneConstantOptimizationEnable)
	self:SendDefault(s_guid,className, "clipPlanesEnable", "bool", s_Instance.clipPlanesEnable)
	self:SendDefault(s_guid,className, "databaseLoadingEnable", "bool", s_Instance.databaseLoadingEnable)
	self:SendDefault(s_guid,className, "debugNonFiniteColor", "Vec3", s_Instance.debugNonFiniteColor)
	self:SendDefault(s_guid,className, "depthEnable", "bool", s_Instance.depthEnable)
	self:SendDefault(s_guid,className, "depthTestEnable", "bool", s_Instance.depthTestEnable)
	self:SendDefault(s_guid,className, "depthWriteEnable", "bool", s_Instance.depthWriteEnable)
	self:SendDefault(s_guid,className, "dispatchDirectEnable", "bool", s_Instance.dispatchDirectEnable)
	self:SendDefault(s_guid,className, "dispatchExecuteEnable", "bool", s_Instance.dispatchExecuteEnable)
	self:SendDefault(s_guid,className, "dispatchPrepareBlockEnable", "bool", s_Instance.dispatchPrepareBlockEnable)
	self:SendDefault(s_guid,className, "dispatchPrepareJobCount", "int", s_Instance.dispatchPrepareJobCount)
	self:SendDefault(s_guid,className, "drawAdvancedStats", "bool", s_Instance.drawAdvancedStats)
	self:SendDefault(s_guid,className, "drawCallEnable", "bool", s_Instance.drawCallEnable)
	self:SendDefault(s_guid,className, "drawCallMultiplier", "uint", s_Instance.drawCallMultiplier)
	self:SendDefault(s_guid,className, "drawInlineBlocks", "bool", s_Instance.drawInlineBlocks)
	self:SendDefault(s_guid,className, "drawInstancedBlocks", "bool", s_Instance.drawInstancedBlocks)
	self:SendDefault(s_guid,className, "drawNonInstancedBlocks", "bool", s_Instance.drawNonInstancedBlocks)
	self:SendDefault(s_guid,className, "drawNonStreamedTextureBlocks", "bool", s_Instance.drawNonStreamedTextureBlocks)
	self:SendDefault(s_guid,className, "drawOpaque", "bool", s_Instance.drawOpaque)
	self:SendDefault(s_guid,className, "drawOpaqueAlphaTest", "bool", s_Instance.drawOpaqueAlphaTest)
	self:SendDefault(s_guid,className, "drawOpaqueAlphaTestSimple", "bool", s_Instance.drawOpaqueAlphaTestSimple)
	self:SendDefault(s_guid,className, "drawStats", "bool", s_Instance.drawStats)
	self:SendDefault(s_guid,className, "drawStreamedTextureBlocks", "bool", s_Instance.drawStreamedTextureBlocks)
	self:SendDefault(s_guid,className, "drawTileClassifiedBlocks", "bool", s_Instance.drawTileClassifiedBlocks)
	self:SendDefault(s_guid,className, "drawTransparent", "bool", s_Instance.drawTransparent)
	self:SendDefault(s_guid,className, "drawTransparentDecal", "bool", s_Instance.drawTransparentDecal)
	self:SendDefault(s_guid,className, "drawZOnly", "bool", s_Instance.drawZOnly)
	self:SendDefault(s_guid,className, "dxBatchedSamplerStatesEnable", "bool", s_Instance.dxBatchedSamplerStatesEnable)
	self:SendDefault(s_guid,className, "dxBatchedTexturesEnable", "bool", s_Instance.dxBatchedTexturesEnable)
	self:SendDefault(s_guid,className, "dxDelayedShaderLoadingEnable", "bool", s_Instance.dxDelayedShaderLoadingEnable)
	self:SendDefault(s_guid,className, "dxDispatchJobBlocksPerCommandList", "uint", s_Instance.dxDispatchJobBlocksPerCommandList)
	self:SendDefault(s_guid,className, "dxDispatchJobCount", "int", s_Instance.dxDispatchJobCount)
	self:SendDefault(s_guid,className, "dxDispatchJobMinBlockCount", "uint", s_Instance.dxDispatchJobMinBlockCount)
	self:SendDefault(s_guid,className, "dxFrameVertexBufferPoolSize", "uint", s_Instance.dxFrameVertexBufferPoolSize)
	self:SendDefault(s_guid,className, "dxInstancingBufferHandlingMethod", "uint", s_Instance.dxInstancingBufferHandlingMethod)
	self:SendDefault(s_guid,className, "dxMaxInstanceCount", "uint", s_Instance.dxMaxInstanceCount)
	self:SendDefault(s_guid,className, "dxMaxInstructionCount", "uint", s_Instance.dxMaxInstructionCount)
	self:SendDefault(s_guid,className, "dxMultisampleEnable", "bool", s_Instance.dxMultisampleEnable)
	self:SendDefault(s_guid,className, "dxParallelShaderLoadingEnable", "bool", s_Instance.dxParallelShaderLoadingEnable)
	self:SendDefault(s_guid,className, "dxPsExternalConstantBufferSize", "uint", s_Instance.dxPsExternalConstantBufferSize)
	self:SendDefault(s_guid,className, "dxPsFunctionConstantBufferSize", "uint", s_Instance.dxPsFunctionConstantBufferSize)
	self:SendDefault(s_guid,className, "dxSamplerStatesEnable", "bool", s_Instance.dxSamplerStatesEnable)
	self:SendDefault(s_guid,className, "dxStatesEnable", "bool", s_Instance.dxStatesEnable)
	self:SendDefault(s_guid,className, "dxTransparencySupersamplingEnable", "bool", s_Instance.dxTransparencySupersamplingEnable)
	self:SendDefault(s_guid,className, "dxVsExternalConstantBufferSize", "uint", s_Instance.dxVsExternalConstantBufferSize)
	self:SendDefault(s_guid,className, "dxVsFunctionConstantBufferSize", "uint", s_Instance.dxVsFunctionConstantBufferSize)
	self:SendDefault(s_guid,className, "flushEnable", "bool", s_Instance.flushEnable)
	self:SendDefault(s_guid,className, "forceDoubleSided", "bool", s_Instance.forceDoubleSided)
	self:SendDefault(s_guid,className, "forcePointFiltering", "bool", s_Instance.forcePointFiltering)
	self:SendDefault(s_guid,className, "frameMemoryBufferSize", "uint", s_Instance.frameMemoryBufferSize)
	self:SendDefault(s_guid,className, "gcmReplayMarkersEnable", "bool", s_Instance.gcmReplayMarkersEnable)
	self:SendDefault(s_guid,className, "logEnable", "bool", s_Instance.logEnable)
	self:SendDefault(s_guid,className, "maxAnisotropy", "uint", s_Instance.maxAnisotropy)
	self:SendDefault(s_guid,className, "mipmapBias", "float", s_Instance.mipmapBias)
	self:SendDefault(s_guid,className, "onDemandBuildingEnable", "bool", s_Instance.onDemandBuildingEnable)
	self:SendDefault(s_guid,className, "onDemandMonitoringEnable", "bool", s_Instance.onDemandMonitoringEnable)
	self:SendDefault(s_guid,className, "onDemandPrimingEnable", "bool", s_Instance.onDemandPrimingEnable)
	self:SendDefault(s_guid,className, "overdrawMaxLayerCount", "uint", s_Instance.overdrawMaxLayerCount)
	self:SendDefault(s_guid,className, "pixBlockEventsEnable", "bool", s_Instance.pixBlockEventsEnable)
	self:SendDefault(s_guid,className, "pixelConstantRedundancyCheckingEnable", "bool", s_Instance.pixelConstantRedundancyCheckingEnable)
	self:SendDefault(s_guid,className, "pixelConstantsEnable", "bool", s_Instance.pixelConstantsEnable)
	self:SendDefault(s_guid,className, "ps3CmdBufClearEnable", "bool", s_Instance.ps3CmdBufClearEnable)
	self:SendDefault(s_guid,className, "ps3CmdBufVertexShaderInlineEnable", "bool", s_Instance.ps3CmdBufVertexShaderInlineEnable)
	self:SendDefault(s_guid,className, "ps3DispatchBlocksPerJob", "uint", s_Instance.ps3DispatchBlocksPerJob)
	self:SendDefault(s_guid,className, "ps3DispatchFrameBlockEnable", "bool", s_Instance.ps3DispatchFrameBlockEnable)
	self:SendDefault(s_guid,className, "ps3DispatchJobCount", "uint", s_Instance.ps3DispatchJobCount)
	self:SendDefault(s_guid,className, "ps3DispatchJobEnable", "bool", s_Instance.ps3DispatchJobEnable)
	self:SendDefault(s_guid,className, "ps3DispatchJobPriority", "uint", s_Instance.ps3DispatchJobPriority)
	self:SendDefault(s_guid,className, "ps3DispatchJobSpuCount", "uint", s_Instance.ps3DispatchJobSpuCount)
	self:SendDefault(s_guid,className, "ps3DispatchOnlyJob", "int", s_Instance.ps3DispatchOnlyJob)
	self:SendDefault(s_guid,className, "ps3DispatchPrepareSpuJobEnable", "bool", s_Instance.ps3DispatchPrepareSpuJobEnable)
	self:SendDefault(s_guid,className, "ps3DispatchSetupSpuJobEnable", "bool", s_Instance.ps3DispatchSetupSpuJobEnable)
	self:SendDefault(s_guid,className, "ps3DispatchSpuBufferLinkingEnable", "bool", s_Instance.ps3DispatchSpuBufferLinkingEnable)
	self:SendDefault(s_guid,className, "ps3DispatchYieldGranularity", "float", s_Instance.ps3DispatchYieldGranularity)
	self:SendDefault(s_guid,className, "ps3DrawBlockCullEnable", "bool", s_Instance.ps3DrawBlockCullEnable)
	self:SendDefault(s_guid,className, "ps3DrawEdgeGeometryEnable", "bool", s_Instance.ps3DrawEdgeGeometryEnable)
	self:SendDefault(s_guid,className, "ps3DrawNonEdgeGeometryEnable", "bool", s_Instance.ps3DrawNonEdgeGeometryEnable)
	self:SendDefault(s_guid,className, "ps3FinishEnable", "bool", s_Instance.ps3FinishEnable)
	self:SendDefault(s_guid,className, "ps3FlushEnable", "bool", s_Instance.ps3FlushEnable)
	self:SendDefault(s_guid,className, "ps3GeometryDebugRenderEnable", "bool", s_Instance.ps3GeometryDebugRenderEnable)
	self:SendDefault(s_guid,className, "ps3GeometryJobCount", "uint", s_Instance.ps3GeometryJobCount)
	self:SendDefault(s_guid,className, "ps3GeometryJobEnable", "bool", s_Instance.ps3GeometryJobEnable)
	self:SendDefault(s_guid,className, "ps3GeometryJobPriority", "uint", s_Instance.ps3GeometryJobPriority)
	self:SendDefault(s_guid,className, "ps3GeometryJobSpuCount", "uint", s_Instance.ps3GeometryJobSpuCount)
	self:SendDefault(s_guid,className, "ps3GeometryJobWithoutDispatchJobEnable", "bool", s_Instance.ps3GeometryJobWithoutDispatchJobEnable)
	self:SendDefault(s_guid,className, "ps3GeometryYieldGranularity", "float", s_Instance.ps3GeometryYieldGranularity)
	self:SendDefault(s_guid,className, "ps3MaxMipmap", "uint", s_Instance.ps3MaxMipmap)
	self:SendDefault(s_guid,className, "ps3MinMipmap", "uint", s_Instance.ps3MinMipmap)
	self:SendDefault(s_guid,className, "ps3PartitionClipPlaneCullEnable", "bool", s_Instance.ps3PartitionClipPlaneCullEnable)
	self:SendDefault(s_guid,className, "ps3PartitionFrustumCullEnable", "bool", s_Instance.ps3PartitionFrustumCullEnable)
	self:SendDefault(s_guid,className, "ps3PartitionVolumeCullEnable", "bool", s_Instance.ps3PartitionVolumeCullEnable)
	self:SendDefault(s_guid,className, "ps3PixelShaderHashStoreEnable", "bool", s_Instance.ps3PixelShaderHashStoreEnable)
	self:SendDefault(s_guid,className, "ps3PixelShaderRedundancyCheckingEnable", "bool", s_Instance.ps3PixelShaderRedundancyCheckingEnable)
	self:SendDefault(s_guid,className, "ps3SCullEnable", "bool", s_Instance.ps3SCullEnable)
	self:SendDefault(s_guid,className, "ps3SpuClipPlaneRejectEnable", "bool", s_Instance.ps3SpuClipPlaneRejectEnable)
	self:SendDefault(s_guid,className, "ps3SpuCullVolumesEnable", "bool", s_Instance.ps3SpuCullVolumesEnable)
	self:SendDefault(s_guid,className, "ps3SpuInstancingEnable", "bool", s_Instance.ps3SpuInstancingEnable)
	self:SendDefault(s_guid,className, "ps3SpuYieldingEnable", "bool", s_Instance.ps3SpuYieldingEnable)
	self:SendDefault(s_guid,className, "ps3TriangleBackfaceCullEnable", "bool", s_Instance.ps3TriangleBackfaceCullEnable)
	self:SendDefault(s_guid,className, "ps3TriangleCull1BoneSkinningEnable", "bool", s_Instance.ps3TriangleCull1BoneSkinningEnable)
	self:SendDefault(s_guid,className, "ps3TriangleCull4BoneSkinningEnable", "bool", s_Instance.ps3TriangleCull4BoneSkinningEnable)
	self:SendDefault(s_guid,className, "ps3TriangleCullDoubleSidedEnable", "bool", s_Instance.ps3TriangleCullDoubleSidedEnable)
	self:SendDefault(s_guid,className, "ps3TriangleCullEnable", "bool", s_Instance.ps3TriangleCullEnable)
	self:SendDefault(s_guid,className, "ps3TriangleCullZPassEnable", "bool", s_Instance.ps3TriangleCullZPassEnable)
	self:SendDefault(s_guid,className, "ps3TriangleFrustumCullEnable", "bool", s_Instance.ps3TriangleFrustumCullEnable)
	self:SendDefault(s_guid,className, "ps3TrianglePartCullEnable", "bool", s_Instance.ps3TrianglePartCullEnable)
	self:SendDefault(s_guid,className, "ps3TxpDemotionEnable", "bool", s_Instance.ps3TxpDemotionEnable)
	self:SendDefault(s_guid,className, "ps3ZCullBehindLimit", "uint", s_Instance.ps3ZCullBehindLimit)
	self:SendDefault(s_guid,className, "ps3ZCullEnable", "bool", s_Instance.ps3ZCullEnable)
	self:SendDefault(s_guid,className, "ps3ZCullInFrontLimit", "uint", s_Instance.ps3ZCullInFrontLimit)
	self:SendDefault(s_guid,className, "pseudoInstancingEnable", "bool", s_Instance.pseudoInstancingEnable)
	self:SendDefault(s_guid,className, "shaderPixScopeEnable", "bool", s_Instance.shaderPixScopeEnable)
	self:SendDefault(s_guid,className, "simplePixelShaderEnable", "bool", s_Instance.simplePixelShaderEnable)
	self:SendDefault(s_guid,className, "simpleTextureFilteringEnable", "bool", s_Instance.simpleTextureFilteringEnable)
	self:SendDefault(s_guid,className, "simpleTexturesEnable", "bool", s_Instance.simpleTexturesEnable)
	self:SendDefault(s_guid,className, "simpleVertexShaderEnable", "bool", s_Instance.simpleVertexShaderEnable)
	self:SendDefault(s_guid,className, "singleFrameBlockLogEnable", "bool", s_Instance.singleFrameBlockLogEnable)
	self:SendDefault(s_guid,className, "singleFrameLogEnable", "bool", s_Instance.singleFrameLogEnable)
	self:SendDefault(s_guid,className, "singleFrameLogOverwrite", "bool", s_Instance.singleFrameLogOverwrite)
	self:SendDefault(s_guid,className, "singlePrimitiveEnable", "bool", s_Instance.singlePrimitiveEnable)
	self:SendDefault(s_guid,className, "sortBlocksEnable", "bool", s_Instance.sortBlocksEnable)
	self:SendDefault(s_guid,className, "statesEnable", "bool", s_Instance.statesEnable)
	self:SendDefault(s_guid,className, "stencilEnable", "bool", s_Instance.stencilEnable)
	self:SendDefault(s_guid,className, "textureGammaCorrectionEnable", "bool", s_Instance.textureGammaCorrectionEnable)
	self:SendDefault(s_guid,className, "tileClassificationEnable", "bool", s_Instance.tileClassificationEnable)
	self:SendDefault(s_guid,className, "vertexConstantRedundancyCheckingEnable", "bool", s_Instance.vertexConstantRedundancyCheckingEnable)
	self:SendDefault(s_guid,className, "vertexConstantsEnable", "bool", s_Instance.vertexConstantsEnable)
	self:SendDefault(s_guid,className, "xenonDispatchBlockOnCmdBufEnable", "bool", s_Instance.xenonDispatchBlockOnCmdBufEnable)
	self:SendDefault(s_guid,className, "xenonDispatchBlocksPerJob", "uint", s_Instance.xenonDispatchBlocksPerJob)
	self:SendDefault(s_guid,className, "xenonDispatchCmdBufferSegmentSize", "uint", s_Instance.xenonDispatchCmdBufferSegmentSize)
	self:SendDefault(s_guid,className, "xenonDispatchCmdBufferSize", "uint", s_Instance.xenonDispatchCmdBufferSize)
	self:SendDefault(s_guid,className, "xenonDispatchJobCount", "uint", s_Instance.xenonDispatchJobCount)
	self:SendDefault(s_guid,className, "xenonDispatchJobEnable", "bool", s_Instance.xenonDispatchJobEnable)
	self:SendDefault(s_guid,className, "xenonDispatchMinJobBlockCount", "uint", s_Instance.xenonDispatchMinJobBlockCount)
	self:SendDefault(s_guid,className, "xenonDispatchOnlyJob", "int", s_Instance.xenonDispatchOnlyJob)
	self:SendDefault(s_guid,className, "xenonHiZEnable", "bool", s_Instance.xenonHiZEnable)
	self:SendDefault(s_guid,className, "xenonTrilinearThreshold", "uint", s_Instance.xenonTrilinearThreshold)
	self:SendDefault(s_guid,className, "zeroViewportEnable", "bool", s_Instance.zeroViewportEnable)
	self:SendDefault(s_guid,className, "zOnlyMaxAnisotropy", "uint", s_Instance.zOnlyMaxAnisotropy)
end

function Type:ShaderTextureUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderTextureUnlockPartCollection(p_class) 
 	local className = "ShaderTextureUnlockPartCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultTextureReference", "CtrRef", s_Instance.defaultTextureReference)
	self:SendDefault(s_guid,className, "unlockParts", "List<CtrRef)>", s_Instance.unlockParts)
end

function Type:ShootAtFromCoverData (p_class, p_guid)
	local s_Instance = ShootAtFromCoverData(p_class) 
 	local className = "ShootAtFromCoverData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cycleTargets", "bool", s_Instance.cycleTargets)
	self:SendDefault(s_guid,className, "preferAlternativeWeapon", "bool", s_Instance.preferAlternativeWeapon)
	self:SendDefault(s_guid,className, "randomTargetOrder", "bool", s_Instance.randomTargetOrder)
	self:SendDefault(s_guid,className, "shootType", "fb.ShootType)", s_Instance.shootType)
	self:SendDefault(s_guid,className, "strengthType", "fb.StrengthType)", s_Instance.strengthType)
end

function Type:ShootOrderEntityData (p_class, p_guid)
	local s_Instance = ShootOrderEntityData(p_class) 
 	local className = "ShootOrderEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "completeWhenHumanIsSensed", "bool", s_Instance.completeWhenHumanIsSensed)
	self:SendDefault(s_guid,className, "cycleTargets", "bool", s_Instance.cycleTargets)
	self:SendDefault(s_guid,className, "pose", "PoseType", s_Instance.pose)
	self:SendDefault(s_guid,className, "preferAlternativeWeapon", "bool", s_Instance.preferAlternativeWeapon)
	self:SendDefault(s_guid,className, "randomTargetOrder", "bool", s_Instance.randomTargetOrder)
	self:SendDefault(s_guid,className, "shootType", "fb.ShootType)", s_Instance.shootType)
	self:SendDefault(s_guid,className, "strengthType", "fb.StrengthType)", s_Instance.strengthType)
end

function Type:ShotConfigData (p_class, p_guid)
	local s_Instance = ShotConfigData(p_class) 
 	local className = "ShotConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeForceSpawnToCamera", "bool", s_Instance.activeForceSpawnToCamera)
	self:SendDefault(s_guid,className, "alternateProjectiles", "List<UnlockableProjectile)>", s_Instance.alternateProjectiles)
	self:SendDefault(s_guid,className, "forceSpawnToCamera", "bool", s_Instance.forceSpawnToCamera)
	self:SendDefault(s_guid,className, "inheritWeaponSpeedAmount", "float", s_Instance.inheritWeaponSpeedAmount)
	self:SendDefault(s_guid,className, "initialDirection", "Vec3", s_Instance.initialDirection)
	self:SendDefault(s_guid,className, "initialPosition", "Vec3", s_Instance.initialPosition)
	self:SendDefault(s_guid,className, "initialSpeed", "Vec3", s_Instance.initialSpeed)
	self:SendDefault(s_guid,className, "muzzleExplosion", "CtrRef", s_Instance.muzzleExplosion)
	self:SendDefault(s_guid,className, "numberOfBulletsPerBurst", "uint", s_Instance.numberOfBulletsPerBurst)
	self:SendDefault(s_guid,className, "numberOfBulletsPerShell", "uint", s_Instance.numberOfBulletsPerShell)
	self:SendDefault(s_guid,className, "numberOfBulletsPerShot", "uint", s_Instance.numberOfBulletsPerShot)
	self:SendDefault(s_guid,className, "projectile", "CtrRef", s_Instance.projectile)
	self:SendDefault(s_guid,className, "projectileData", "CtrRef", s_Instance.projectileData)
	self:SendDefault(s_guid,className, "relativeTargetAiming", "bool", s_Instance.relativeTargetAiming)
	self:SendDefault(s_guid,className, "secondaryProjectile", "CtrRef", s_Instance.secondaryProjectile)
	self:SendDefault(s_guid,className, "secondaryProjectileData", "CtrRef", s_Instance.secondaryProjectileData)
	self:SendDefault(s_guid,className, "spawnDelay", "float", s_Instance.spawnDelay)
	self:SendDefault(s_guid,className, "spawnVisualAtWeaponBone", "bool", s_Instance.spawnVisualAtWeaponBone)
end

function Type:SimpleAnimationControlBinding (p_class, p_guid)
	local s_Instance = SimpleAnimationControlBinding(p_class) 
 	local className = "SimpleAnimationControlBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "locoTarget", "AntRef", s_Instance.locoTarget)
end

function Type:SimpleAnimationControlComponentData (p_class, p_guid)
	local s_Instance = SimpleAnimationControlComponentData(p_class) 
 	local className = "SimpleAnimationControlComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "binding", "SimpleAnimationControlBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "run", "bool", s_Instance.run)
end

function Type:SimpleMovementActionBaseData (p_class, p_guid)
	local s_Instance = SimpleMovementActionBaseData(p_class) 
 	local className = "SimpleMovementActionBaseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "runTimeInfo", "SimpleMovementActionTimeData", s_Instance.runTimeInfo)
	self:SendDefault(s_guid,className, "startTimeInfo", "SimpleMovementActionTimeData", s_Instance.startTimeInfo)
end

function Type:SimpleMovementActionData (p_class, p_guid)
	local s_Instance = SimpleMovementActionData(p_class) 
 	local className = "SimpleMovementActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "action", "EntryInputActionEnum", s_Instance.action)
	self:SendDefault(s_guid,className, "level", "float", s_Instance.level)
	self:SendDefault(s_guid,className, "respawn", "bool", s_Instance.respawn)
	self:SendDefault(s_guid,className, "specialAnimationIndex", "int", s_Instance.specialAnimationIndex)
	self:SendDefault(s_guid,className, "teleport", "bool", s_Instance.teleport)
end

function Type:SimpleMovementActionTimeData (p_class, p_guid)
	local s_Instance = SimpleMovementActionTimeData(p_class) 
 	local className = "SimpleMovementActionTimeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxVariation", "float", s_Instance.maxVariation)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:SimplePropertyTrackData (p_class, p_guid)
	local s_Instance = SimplePropertyTrackData(p_class) 
 	local className = "SimplePropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "interpolationType", "fb.InterpolationType)", s_Instance.interpolationType)
end

function Type:SimpleTransformNodeData (p_class, p_guid)
	local s_Instance = SimpleTransformNodeData(p_class) 
 	local className = "SimpleTransformNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angleUnit", "fb.AngleUnit)", s_Instance.angleUnit)
	self:SendDefault(s_guid,className, "operation", "SimpleTransformOperation", s_Instance.operation)
	self:SendDefault(s_guid,className, "x", "AudioGraphNodePort", s_Instance.x)
	self:SendDefault(s_guid,className, "y", "AudioGraphNodePort", s_Instance.y)
	self:SendDefault(s_guid,className, "z", "AudioGraphNodePort", s_Instance.z)
end

function Type:SimpleValueSelectorNodeData (p_class, p_guid)
	local s_Instance = SimpleValueSelectorNodeData(p_class) 
 	local className = "SimpleValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "AudioGraphNodePort", s_Instance.index)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "outValues", "List<float)>", s_Instance.outValues)
end

function Type:SkeletonAsset (p_class, p_guid)
	local s_Instance = SkeletonAsset(p_class) 
 	local className = "SkeletonAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneNames", "List<string)>", s_Instance.boneNames)
	self:SendDefault(s_guid,className, "cameraBoneName", "string", s_Instance.cameraBoneName)
	self:SendDefault(s_guid,className, "headBoneName", "string", s_Instance.headBoneName)
	self:SendDefault(s_guid,className, "hierarchy", "List<int)>", s_Instance.hierarchy)
	self:SendDefault(s_guid,className, "hipBoneName", "string", s_Instance.hipBoneName)
	self:SendDefault(s_guid,className, "localPose", "List<LinearTransform)>", s_Instance.localPose)
	self:SendDefault(s_guid,className, "modelPose", "List<LinearTransform)>", s_Instance.modelPose)
	self:SendDefault(s_guid,className, "weaponBoneName", "string", s_Instance.weaponBoneName)
end

function Type:SkeletonCollisionData (p_class, p_guid)
	local s_Instance = SkeletonCollisionData(p_class) 
 	local className = "SkeletonCollisionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneCollisionData", "List<fb).BoneCollisionData>", s_Instance.boneCollisionData)
	self:SendDefault(s_guid,className, "skeletonAsset", "CtrRef", s_Instance.skeletonAsset)
end

function Type:SkinnedMeshAsset (p_class, p_guid)
	local s_Instance = SkinnedMeshAsset(p_class) 
 	local className = "SkinnedMeshAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boundingBoxPositionOffset", "Vec3", s_Instance.boundingBoxPositionOffset)
	self:SendDefault(s_guid,className, "boundingBoxSizeOffset", "Vec3", s_Instance.boundingBoxSizeOffset)
end

function Type:SkinnedSocketObjectData (p_class, p_guid)
	local s_Instance = SkinnedSocketObjectData(p_class) 
 	local className = "SkinnedSocketObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "faceposerLibraryIndex", "int", s_Instance.faceposerLibraryIndex)
end

function Type:SkyCloudLayer (p_class, p_guid)
	local s_Instance = SkyCloudLayer(p_class) 
 	local className = "SkyCloudLayer"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alphaMul", "float", s_Instance.alphaMul)
	self:SendDefault(s_guid,className, "altitude", "float", s_Instance.altitude)
	self:SendDefault(s_guid,className, "ambientLightIntensity", "float", s_Instance.ambientLightIntensity)
	self:SendDefault(s_guid,className, "color", "Vec3", s_Instance.color)
	self:SendDefault(s_guid,className, "rotation", "float", s_Instance.rotation)
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
	self:SendDefault(s_guid,className, "sunLightIntensity", "float", s_Instance.sunLightIntensity)
	self:SendDefault(s_guid,className, "sunLightPower", "float", s_Instance.sunLightPower)
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
	self:SendDefault(s_guid,className, "tileFactor", "float", s_Instance.tileFactor)
end

function Type:SkyComponentData (p_class, p_guid)
	local s_Instance = SkyComponentData(p_class) 
 	local className = "SkyComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "brightnessScale", "float", s_Instance.brightnessScale)
	self:SendDefault(s_guid,className, "cloudLayer1AlphaMul", "float", s_Instance.cloudLayer1AlphaMul)
	self:SendDefault(s_guid,className, "cloudLayer1Altitude", "float", s_Instance.cloudLayer1Altitude)
	self:SendDefault(s_guid,className, "cloudLayer1AmbientLightIntensity", "float", s_Instance.cloudLayer1AmbientLightIntensity)
	self:SendDefault(s_guid,className, "cloudLayer1Color", "Vec3", s_Instance.cloudLayer1Color)
	self:SendDefault(s_guid,className, "cloudLayer1Rotation", "float", s_Instance.cloudLayer1Rotation)
	self:SendDefault(s_guid,className, "cloudLayer1Speed", "float", s_Instance.cloudLayer1Speed)
	self:SendDefault(s_guid,className, "cloudLayer1SunLightIntensity", "float", s_Instance.cloudLayer1SunLightIntensity)
	self:SendDefault(s_guid,className, "cloudLayer1SunLightPower", "float", s_Instance.cloudLayer1SunLightPower)
	self:SendDefault(s_guid,className, "cloudLayer1Texture", "CtrRef", s_Instance.cloudLayer1Texture)
	self:SendDefault(s_guid,className, "cloudLayer1TileFactor", "float", s_Instance.cloudLayer1TileFactor)
	self:SendDefault(s_guid,className, "cloudLayer2AlphaMul", "float", s_Instance.cloudLayer2AlphaMul)
	self:SendDefault(s_guid,className, "cloudLayer2Altitude", "float", s_Instance.cloudLayer2Altitude)
	self:SendDefault(s_guid,className, "cloudLayer2AmbientLightIntensity", "float", s_Instance.cloudLayer2AmbientLightIntensity)
	self:SendDefault(s_guid,className, "cloudLayer2Color", "Vec3", s_Instance.cloudLayer2Color)
	self:SendDefault(s_guid,className, "cloudLayer2Rotation", "float", s_Instance.cloudLayer2Rotation)
	self:SendDefault(s_guid,className, "cloudLayer2Speed", "float", s_Instance.cloudLayer2Speed)
	self:SendDefault(s_guid,className, "cloudLayer2SunLightIntensity", "float", s_Instance.cloudLayer2SunLightIntensity)
	self:SendDefault(s_guid,className, "cloudLayer2SunLightPower", "float", s_Instance.cloudLayer2SunLightPower)
	self:SendDefault(s_guid,className, "cloudLayer2Texture", "CtrRef", s_Instance.cloudLayer2Texture)
	self:SendDefault(s_guid,className, "cloudLayer2TileFactor", "float", s_Instance.cloudLayer2TileFactor)
	self:SendDefault(s_guid,className, "cloudLayerMaskTexture", "CtrRef", s_Instance.cloudLayerMaskTexture)
	self:SendDefault(s_guid,className, "cloudLayerSunColor", "Vec3", s_Instance.cloudLayerSunColor)
	self:SendDefault(s_guid,className, "customEnvmapAmbient", "float", s_Instance.customEnvmapAmbient)
	self:SendDefault(s_guid,className, "customEnvmapScale", "float", s_Instance.customEnvmapScale)
	self:SendDefault(s_guid,className, "customEnvmapTexture", "CtrRef", s_Instance.customEnvmapTexture)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "panoramicAlphaTexture", "CtrRef", s_Instance.panoramicAlphaTexture)
	self:SendDefault(s_guid,className, "panoramicRotation", "float", s_Instance.panoramicRotation)
	self:SendDefault(s_guid,className, "panoramicTexture", "CtrRef", s_Instance.panoramicTexture)
	self:SendDefault(s_guid,className, "panoramicTileFactor", "float", s_Instance.panoramicTileFactor)
	self:SendDefault(s_guid,className, "panoramicUVMaxX", "float", s_Instance.panoramicUVMaxX)
	self:SendDefault(s_guid,className, "panoramicUVMaxY", "float", s_Instance.panoramicUVMaxY)
	self:SendDefault(s_guid,className, "panoramicUVMinX", "float", s_Instance.panoramicUVMinX)
	self:SendDefault(s_guid,className, "panoramicUVMinY", "float", s_Instance.panoramicUVMinY)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "skyEnvmap8BitTexScale", "float", s_Instance.skyEnvmap8BitTexScale)
	self:SendDefault(s_guid,className, "skyGradientTexture", "CtrRef", s_Instance.skyGradientTexture)
	self:SendDefault(s_guid,className, "skyVisibilityExponent", "float", s_Instance.skyVisibilityExponent)
	self:SendDefault(s_guid,className, "staticEnvmapScale", "float", s_Instance.staticEnvmapScale)
	self:SendDefault(s_guid,className, "staticEnvmapTexture", "CtrRef", s_Instance.staticEnvmapTexture)
	self:SendDefault(s_guid,className, "sunScale", "float", s_Instance.sunScale)
	self:SendDefault(s_guid,className, "sunSize", "float", s_Instance.sunSize)
end

function Type:SkyEffectState (p_class, p_guid)
	local s_Instance = SkyEffectState(p_class) 
 	local className = "SkyEffectState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cloudLayer1", "SkyCloudLayer", s_Instance.cloudLayer1)
	self:SendDefault(s_guid,className, "cloudLayer2", "SkyCloudLayer", s_Instance.cloudLayer2)
	self:SendDefault(s_guid,className, "cloudLayerMaskTexture", "CtrRef", s_Instance.cloudLayerMaskTexture)
	self:SendDefault(s_guid,className, "cloudLayerSunColor", "Vec3", s_Instance.cloudLayerSunColor)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "panoramicAlphaTexture", "CtrRef", s_Instance.panoramicAlphaTexture)
	self:SendDefault(s_guid,className, "panoramicRotation", "float", s_Instance.panoramicRotation)
	self:SendDefault(s_guid,className, "panoramicTexture", "CtrRef", s_Instance.panoramicTexture)
	self:SendDefault(s_guid,className, "panoramicTileFactor", "float", s_Instance.panoramicTileFactor)
	self:SendDefault(s_guid,className, "panoramicUVMaxX", "float", s_Instance.panoramicUVMaxX)
	self:SendDefault(s_guid,className, "panoramicUVMaxY", "float", s_Instance.panoramicUVMaxY)
	self:SendDefault(s_guid,className, "panoramicUVMinX", "float", s_Instance.panoramicUVMinX)
	self:SendDefault(s_guid,className, "panoramicUVMinY", "float", s_Instance.panoramicUVMinY)
	self:SendDefault(s_guid,className, "skyGradientScale", "float", s_Instance.skyGradientScale)
	self:SendDefault(s_guid,className, "skyGradientTexture", "CtrRef", s_Instance.skyGradientTexture)
	self:SendDefault(s_guid,className, "staticEnvmapTexture", "CtrRef", s_Instance.staticEnvmapTexture)
	self:SendDefault(s_guid,className, "sunScale", "float", s_Instance.sunScale)
	self:SendDefault(s_guid,className, "sunSize", "float", s_Instance.sunSize)
	self:SendDefault(s_guid,className, "windDirection", "float", s_Instance.windDirection)
end

function Type:SlidingStateData (p_class, p_guid)
	local s_Instance = SlidingStateData(p_class) 
 	local className = "SlidingStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "gravityScale", "float", s_Instance.gravityScale)
	self:SendDefault(s_guid,className, "horizontalInputScale", "float", s_Instance.horizontalInputScale)
end

function Type:SlowMotionEntityData (p_class, p_guid)
	local s_Instance = SlowMotionEntityData(p_class) 
 	local className = "SlowMotionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scaleDownTransitionTime", "float", s_Instance.scaleDownTransitionTime)
	self:SendDefault(s_guid,className, "scaleUpTransitionTime", "float", s_Instance.scaleUpTransitionTime)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
end

function Type:SmokeJammingData (p_class, p_guid)
	local s_Instance = SmokeJammingData(p_class) 
 	local className = "SmokeJammingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enableSmokeJamming", "bool", s_Instance.enableSmokeJamming)
	self:SendDefault(s_guid,className, "jammingPositionIsLocationDependent", "bool", s_Instance.jammingPositionIsLocationDependent)
	self:SendDefault(s_guid,className, "jammingTime", "float", s_Instance.jammingTime)
	self:SendDefault(s_guid,className, "maxRadius", "float", s_Instance.maxRadius)
	self:SendDefault(s_guid,className, "minRadius", "float", s_Instance.minRadius)
	self:SendDefault(s_guid,className, "reportJammedBasedOnStartPosition", "bool", s_Instance.reportJammedBasedOnStartPosition)
	self:SendDefault(s_guid,className, "targetUpdateTime", "float", s_Instance.targetUpdateTime)
end

function Type:SniperLensScopeFilterData (p_class, p_guid)
	local s_Instance = SniperLensScopeFilterData(p_class) 
 	local className = "SniperLensScopeFilterData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurCenter", "Vec2", s_Instance.blurCenter)
	self:SendDefault(s_guid,className, "blurScale", "float", s_Instance.blurScale)
	self:SendDefault(s_guid,className, "chromaticAberrationColor1", "Vec3", s_Instance.chromaticAberrationColor1)
	self:SendDefault(s_guid,className, "chromaticAberrationColor2", "Vec3", s_Instance.chromaticAberrationColor2)
	self:SendDefault(s_guid,className, "chromaticAberrationDisplacement1", "Vec2", s_Instance.chromaticAberrationDisplacement1)
	self:SendDefault(s_guid,className, "chromaticAberrationDisplacement2", "Vec2", s_Instance.chromaticAberrationDisplacement2)
	self:SendDefault(s_guid,className, "chromaticAberrationStrengths", "Vec2", s_Instance.chromaticAberrationStrengths)
	self:SendDefault(s_guid,className, "colorTintData", "fb.ColorTintData)", s_Instance.colorTintData)
	self:SendDefault(s_guid,className, "radialBlendDistanceCoefficients", "Vec2", s_Instance.radialBlendDistanceCoefficients)
end

function Type:SocketData (p_class, p_guid)
	local s_Instance = SocketData(p_class) 
 	local className = "SocketData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "availableObjects", "List<CtrRef)>", s_Instance.availableObjects)
	self:SendDefault(s_guid,className, "boneId", "int", s_Instance.boneId)
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
	self:SendDefault(s_guid,className, "boneRigidTransform", "LinearTransform", s_Instance.boneRigidTransform)
	self:SendDefault(s_guid,className, "defaultEnableSocketEntities", "bool", s_Instance.defaultEnableSocketEntities)
	self:SendDefault(s_guid,className, "excluded", "bool", s_Instance.excluded)
	self:SendDefault(s_guid,className, "forceSocketEntitiesEnabled", "bool", s_Instance.forceSocketEntitiesEnabled)
	self:SendDefault(s_guid,className, "gearSlot", "fb.GearSlot)", s_Instance.gearSlot)
	self:SendDefault(s_guid,className, "hideByLightToggle", "bool", s_Instance.hideByLightToggle)
	self:SendDefault(s_guid,className, "hideByZoomTransition", "bool", s_Instance.hideByZoomTransition)
	self:SendDefault(s_guid,className, "socketType", "fb.SocketType)", s_Instance.socketType)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
	self:SendDefault(s_guid,className, "unlockAsset", "CtrRef", s_Instance.unlockAsset)
	self:SendDefault(s_guid,className, "usesDefaultObject", "bool", s_Instance.usesDefaultObject)
end

function Type:SocketObjectData (p_class, p_guid)
	local s_Instance = SocketObjectData(p_class) 
 	local className = "SocketObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset1pGuid", "GUID", s_Instance.asset1pGuid)
	self:SendDefault(s_guid,className, "asset1pZoomGuid", "GUID", s_Instance.asset1pZoomGuid)
	self:SendDefault(s_guid,className, "asset3pGuid", "GUID", s_Instance.asset3pGuid)
	self:SendDefault(s_guid,className, "customizedMaterials", "List<CtrRef)>", s_Instance.customizedMaterials)
	self:SendDefault(s_guid,className, "variation1pGuids", "List<GUID)>", s_Instance.variation1pGuids)
	self:SendDefault(s_guid,className, "variation1pZoomGuids", "List<GUID)>", s_Instance.variation1pZoomGuids)
	self:SendDefault(s_guid,className, "variation3pGuids", "List<GUID)>", s_Instance.variation3pGuids)
end

function Type:SoldierAimAssistData (p_class, p_guid)
	local s_Instance = SoldierAimAssistData(p_class) 
 	local className = "SoldierAimAssistData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accelerationDamping", "float", s_Instance.accelerationDamping)
	self:SendDefault(s_guid,className, "accelerationInputThreshold", "float", s_Instance.accelerationInputThreshold)
	self:SendDefault(s_guid,className, "accelerationMultiplier", "float", s_Instance.accelerationMultiplier)
	self:SendDefault(s_guid,className, "accelerationTimeThreshold", "float", s_Instance.accelerationTimeThreshold)
	self:SendDefault(s_guid,className, "attractDistanceFallOff", "List<float)>", s_Instance.attractDistanceFallOff)
	self:SendDefault(s_guid,className, "attractOwnRequiredMovementForMaximumAttract", "float", s_Instance.attractOwnRequiredMovementForMaximumAttract)
	self:SendDefault(s_guid,className, "attractOwnSpeedInfluence", "float", s_Instance.attractOwnSpeedInfluence)
	self:SendDefault(s_guid,className, "attractPitchStrength", "float", s_Instance.attractPitchStrength)
	self:SendDefault(s_guid,className, "attractSoftZone", "float", s_Instance.attractSoftZone)
	self:SendDefault(s_guid,className, "attractStartInputThreshold", "float", s_Instance.attractStartInputThreshold)
	self:SendDefault(s_guid,className, "attractTargetSpeedInfluence", "float", s_Instance.attractTargetSpeedInfluence)
	self:SendDefault(s_guid,className, "attractUserInputMultiplier", "float", s_Instance.attractUserInputMultiplier)
	self:SendDefault(s_guid,className, "attractYawStrength", "float", s_Instance.attractYawStrength)
	self:SendDefault(s_guid,className, "attractZoomingMultiplier", "float", s_Instance.attractZoomingMultiplier)
	self:SendDefault(s_guid,className, "attractZoomingPostTime", "float", s_Instance.attractZoomingPostTime)
	self:SendDefault(s_guid,className, "eyePosOffset", "Vec3", s_Instance.eyePosOffset)
	self:SendDefault(s_guid,className, "inputPolynomial", "List<float)>", s_Instance.inputPolynomial)
	self:SendDefault(s_guid,className, "maxAcceleration", "Vec2", s_Instance.maxAcceleration)
	self:SendDefault(s_guid,className, "pitchSpeedStrength", "float", s_Instance.pitchSpeedStrength)
	self:SendDefault(s_guid,className, "snapBoxScale", "Vec3", s_Instance.snapBoxScale)
	self:SendDefault(s_guid,className, "snapDistanceScale", "Vec3", s_Instance.snapDistanceScale)
	self:SendDefault(s_guid,className, "squaredAcceleration", "float", s_Instance.squaredAcceleration)
	self:SendDefault(s_guid,className, "stickyBoxScale", "Vec3", s_Instance.stickyBoxScale)
	self:SendDefault(s_guid,className, "stickyDistanceScale", "Vec3", s_Instance.stickyDistanceScale)
	self:SendDefault(s_guid,className, "usePitchAcceleration", "bool", s_Instance.usePitchAcceleration)
	self:SendDefault(s_guid,className, "useYawAcceleration", "bool", s_Instance.useYawAcceleration)
	self:SendDefault(s_guid,className, "yawSpeedStrength", "float", s_Instance.yawSpeedStrength)
	self:SendDefault(s_guid,className, "zoomedInputPolynomial", "List<float)>", s_Instance.zoomedInputPolynomial)
end

function Type:SoldierAimingConstraintsData (p_class, p_guid)
	local s_Instance = SoldierAimingConstraintsData(p_class) 
 	local className = "SoldierAimingConstraintsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "swimmingConstraints", "AimingConstraintsData", s_Instance.swimmingConstraints)
end

function Type:SoldierAimingSimulationData (p_class, p_guid)
	local s_Instance = SoldierAimingSimulationData(p_class) 
 	local className = "SoldierAimingSimulationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimAssist", "CtrRef", s_Instance.aimAssist)
	self:SendDefault(s_guid,className, "aimingRange", "float", s_Instance.aimingRange)
	self:SendDefault(s_guid,className, "crouchPose", "AimingPoseData", s_Instance.crouchPose)
	self:SendDefault(s_guid,className, "fovDelayTime", "float", s_Instance.fovDelayTime)
	self:SendDefault(s_guid,className, "fovTransitionTime", "float", s_Instance.fovTransitionTime)
	self:SendDefault(s_guid,className, "lockAimToTargetSpeed", "float", s_Instance.lockAimToTargetSpeed)
	self:SendDefault(s_guid,className, "modifiers", "List<CtrRef)>", s_Instance.modifiers)
	self:SendDefault(s_guid,className, "pronePose", "AimingPoseData", s_Instance.pronePose)
	self:SendDefault(s_guid,className, "returnToZoomAfterReload", "bool", s_Instance.returnToZoomAfterReload)
	self:SendDefault(s_guid,className, "standPose", "AimingPoseData", s_Instance.standPose)
	self:SendDefault(s_guid,className, "zoomLevels", "List<CtrRef)>", s_Instance.zoomLevels)
	self:SendDefault(s_guid,className, "zoomTransitionTime", "float", s_Instance.zoomTransitionTime)
	self:SendDefault(s_guid,className, "zoomTransitionTimeArray", "List<ZoomLevelSpecificTransitionTime)>", s_Instance.zoomTransitionTimeArray)
end

function Type:SoldierAnimatedCameraData (p_class, p_guid)
	local s_Instance = SoldierAnimatedCameraData(p_class) 
 	local className = "SoldierAnimatedCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraTransitionTime", "float", s_Instance.cameraTransitionTime)
	self:SendDefault(s_guid,className, "enableFeature", "bool", s_Instance.enableFeature)
end

function Type:SoldierAutoAimData (p_class, p_guid)
	local s_Instance = SoldierAutoAimData(p_class) 
 	local className = "SoldierAutoAimData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "poses", "List<AutoAimData)>", s_Instance.poses)
end

function Type:SoldierBodyComponentData (p_class, p_guid)
	local s_Instance = SoldierBodyComponentData(p_class) 
 	local className = "SoldierBodyComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "overrideGravity", "bool", s_Instance.overrideGravity)
	self:SendDefault(s_guid,className, "overrideGravityValue", "float", s_Instance.overrideGravityValue)
	self:SendDefault(s_guid,className, "overrideVelocity", "bool", s_Instance.overrideVelocity)
	self:SendDefault(s_guid,className, "overrideVelocityY", "float", s_Instance.overrideVelocityY)
	self:SendDefault(s_guid,className, "sprintMultiplier", "float", s_Instance.sprintMultiplier)
end

function Type:SoldierCameraComponentData (p_class, p_guid)
	local s_Instance = SoldierCameraComponentData(p_class) 
 	local className = "SoldierCameraComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "authoritativeEyePosition", "bool", s_Instance.authoritativeEyePosition)
	self:SendDefault(s_guid,className, "cameraBinding", "fb.CameraBinding)", s_Instance.cameraBinding)
	self:SendDefault(s_guid,className, "cameras", "List<CtrRef)>", s_Instance.cameras)
	self:SendDefault(s_guid,className, "disableAiming", "bool", s_Instance.disableAiming)
	self:SendDefault(s_guid,className, "explosionImpulseMultiplier", "float", s_Instance.explosionImpulseMultiplier)
	self:SendDefault(s_guid,className, "forceFieldOfView", "float", s_Instance.forceFieldOfView)
	self:SendDefault(s_guid,className, "pitchTiltStrength", "float", s_Instance.pitchTiltStrength)
	self:SendDefault(s_guid,className, "strafeTiltStrength", "float", s_Instance.strafeTiltStrength)
end

function Type:SoldierCustomizationAsset (p_class, p_guid)
	local s_Instance = SoldierCustomizationAsset(p_class) 
 	local className = "SoldierCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponTable", "CtrRef", s_Instance.weaponTable)
end

function Type:SoldierDecalComponentData (p_class, p_guid)
	local s_Instance = SoldierDecalComponentData(p_class) 
 	local className = "SoldierDecalComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "poolDecal", "CtrRef", s_Instance.poolDecal)
	self:SendDefault(s_guid,className, "poolRayLength", "float", s_Instance.poolRayLength)
	self:SendDefault(s_guid,className, "poolRayYOffset", "float", s_Instance.poolRayYOffset)
	self:SendDefault(s_guid,className, "splashDecal", "CtrRef", s_Instance.splashDecal)
	self:SendDefault(s_guid,className, "splashRayLength", "float", s_Instance.splashRayLength)
end

function Type:SoldierDetonationData (p_class, p_guid)
	local s_Instance = SoldierDetonationData(p_class) 
 	local className = "SoldierDetonationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angle", "float", s_Instance.angle)
	self:SendDefault(s_guid,className, "hasSoldierDetonation", "bool", s_Instance.hasSoldierDetonation)
	self:SendDefault(s_guid,className, "minSpeedForActivation", "float", s_Instance.minSpeedForActivation)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "soldierDetonationActivationDelay", "float", s_Instance.soldierDetonationActivationDelay)
	self:SendDefault(s_guid,className, "useAngle", "bool", s_Instance.useAngle)
end

function Type:SoldierEmoteBinding (p_class, p_guid)
	local s_Instance = SoldierEmoteBinding(p_class) 
 	local className = "SoldierEmoteBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emoteAttackCapturePoint", "AntRef", s_Instance.emoteAttackCapturePoint)
	self:SendDefault(s_guid,className, "emoteDefendCapturePoint", "AntRef", s_Instance.emoteDefendCapturePoint)
	self:SendDefault(s_guid,className, "emoteFollowMe", "AntRef", s_Instance.emoteFollowMe)
	self:SendDefault(s_guid,className, "emoteGoGoGo", "AntRef", s_Instance.emoteGoGoGo)
	self:SendDefault(s_guid,className, "emoteMoveToPosition", "AntRef", s_Instance.emoteMoveToPosition)
	self:SendDefault(s_guid,className, "emoteNeedAmmo", "AntRef", s_Instance.emoteNeedAmmo)
	self:SendDefault(s_guid,className, "emoteNeedARide", "AntRef", s_Instance.emoteNeedARide)
	self:SendDefault(s_guid,className, "emoteNeedBackup", "AntRef", s_Instance.emoteNeedBackup)
	self:SendDefault(s_guid,className, "emoteNeedMedic", "AntRef", s_Instance.emoteNeedMedic)
	self:SendDefault(s_guid,className, "emoteNo", "AntRef", s_Instance.emoteNo)
	self:SendDefault(s_guid,className, "emoteOk", "AntRef", s_Instance.emoteOk)
	self:SendDefault(s_guid,className, "emoteSorry", "AntRef", s_Instance.emoteSorry)
	self:SendDefault(s_guid,className, "emoteSpot", "AntRef", s_Instance.emoteSpot)
	self:SendDefault(s_guid,className, "emoteThanks", "AntRef", s_Instance.emoteThanks)
	self:SendDefault(s_guid,className, "isSquadLeader", "AntRef", s_Instance.isSquadLeader)
	self:SendDefault(s_guid,className, "speak", "AntRef", s_Instance.speak)
end

function Type:SoldierEmoteComponentData (p_class, p_guid)
	local s_Instance = SoldierEmoteComponentData(p_class) 
 	local className = "SoldierEmoteComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "SoldierEmoteBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "networkedMessageMappings", "List<CtrRef)>", s_Instance.networkedMessageMappings)
end

function Type:SoldierEmoteNetworkedMessageMapping (p_class, p_guid)
	local s_Instance = SoldierEmoteNetworkedMessageMapping(p_class) 
 	local className = "SoldierEmoteNetworkedMessageMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "emote", "SoldierEmote", s_Instance.emote)
	self:SendDefault(s_guid,className, "messages", "List<UIMessageType)>", s_Instance.messages)
	self:SendDefault(s_guid,className, "soldierEmoteNetworkedMessageMapping",  "readonly", s_Instance.soldierEmoteNetworkedMessageMapping)
	self:SendDefault(s_guid,className, "uIMessageType",  "uint", s_Instance.uIMessageType)
end

function Type:SoldierEntityData (p_class, p_guid)
	local s_Instance = SoldierEntityData(p_class) 
 	local className = "SoldierEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "CtrRef", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "autoAim", "CtrRef", s_Instance.autoAim)
	self:SendDefault(s_guid,className, "boneFakePhysics", "List<CtrRef)>", s_Instance.boneFakePhysics)
	self:SendDefault(s_guid,className, "breathControl", "List<CtrRef)>", s_Instance.breathControl)
	self:SendDefault(s_guid,className, "characterPhysics", "CtrRef", s_Instance.characterPhysics)
	self:SendDefault(s_guid,className, "collisionEnabled", "bool", s_Instance.collisionEnabled)
	self:SendDefault(s_guid,className, "collisionInfo", "CtrRef", s_Instance.collisionInfo)
	self:SendDefault(s_guid,className, "enableGroundmapLighting", "bool", s_Instance.enableGroundmapLighting)
	self:SendDefault(s_guid,className, "explosionDamageModifier", "float", s_Instance.explosionDamageModifier)
	self:SendDefault(s_guid,className, "fLIRKeyColor", "Vec3", s_Instance.fLIRKeyColor)
	self:SendDefault(s_guid,className, "fLIRValue", "float", s_Instance.fLIRValue)
	self:SendDefault(s_guid,className, "footMaterialPair", "CtrRef", s_Instance.footMaterialPair)
	self:SendDefault(s_guid,className, "freeSpaceCheck", "bool", s_Instance.freeSpaceCheck)
	self:SendDefault(s_guid,className, "headCollision", "CtrRef", s_Instance.headCollision)
	self:SendDefault(s_guid,className, "headMaterialPair", "CtrRef", s_Instance.headMaterialPair)
	self:SendDefault(s_guid,className, "healthModule", "CtrRef", s_Instance.healthModule)
	self:SendDefault(s_guid,className, "hidableMeshParts", "List<HidableSoldierMeshWeaponPart)>", s_Instance.hidableMeshParts)
	self:SendDefault(s_guid,className, "humanPlayerControlled", "bool", s_Instance.humanPlayerControlled)
	self:SendDefault(s_guid,className, "impulseReactionTime", "float", s_Instance.impulseReactionTime)
	self:SendDefault(s_guid,className, "interactiveManDownAllowed", "bool", s_Instance.interactiveManDownAllowed)
	self:SendDefault(s_guid,className, "isPushable", "bool", s_Instance.isPushable)
	self:SendDefault(s_guid,className, "lowerGunOnOwnTeam", "bool", s_Instance.lowerGunOnOwnTeam)
	self:SendDefault(s_guid,className, "maxHealth", "float", s_Instance.maxHealth)
	self:SendDefault(s_guid,className, "meshes1p", "List<SoldierMeshData)>", s_Instance.meshes1p)
	self:SendDefault(s_guid,className, "meshes3p", "List<SoldierMeshData)>", s_Instance.meshes3p)
	self:SendDefault(s_guid,className, "physicsControlled", "bool", s_Instance.physicsControlled)
	self:SendDefault(s_guid,className, "proximityCheck", "bool", s_Instance.proximityCheck)
	self:SendDefault(s_guid,className, "regenerationDelayModifier", "float", s_Instance.regenerationDelayModifier)
	self:SendDefault(s_guid,className, "showNametag", "bool", s_Instance.showNametag)
	self:SendDefault(s_guid,className, "showWeaponWhenDead", "bool", s_Instance.showWeaponWhenDead)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
	self:SendDefault(s_guid,className, "sprintSettings", "CtrRef", s_Instance.sprintSettings)
	self:SendDefault(s_guid,className, "streamGroup1p", "CtrRef", s_Instance.streamGroup1p)
	self:SendDefault(s_guid,className, "uIParts", "List<CtrRef)>", s_Instance.uIParts)
	self:SendDefault(s_guid,className, "useSpineXRotation", "bool", s_Instance.useSpineXRotation)
	self:SendDefault(s_guid,className, "voiceOverInfo", "CtrRef", s_Instance.voiceOverInfo)
end

function Type:SoldierEntryComponentData (p_class, p_guid)
	local s_Instance = SoldierEntryComponentData(p_class) 
 	local className = "SoldierEntryComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "AimingConstraintsData", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "alignConstraintsToEntity", "bool", s_Instance.alignConstraintsToEntity)
	self:SendDefault(s_guid,className, "antEntryEnumeration", "CtrRef", s_Instance.antEntryEnumeration)
end

function Type:SoldierFootplantEffectComponentData (p_class, p_guid)
	local s_Instance = SoldierFootplantEffectComponentData(p_class) 
 	local className = "SoldierFootplantEffectComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "footMaterialPair", "CtrRef", s_Instance.footMaterialPair)
	self:SendDefault(s_guid,className, "footVelocityThreshold", "float", s_Instance.footVelocityThreshold)
	self:SendDefault(s_guid,className, "fullFootplantingEnabled", "bool", s_Instance.fullFootplantingEnabled)
	self:SendDefault(s_guid,className, "heightOverGroundThreshold", "float", s_Instance.heightOverGroundThreshold)
	self:SendDefault(s_guid,className, "lodDistance", "float", s_Instance.lodDistance)
end

function Type:SoldierHeadCollisionData (p_class, p_guid)
	local s_Instance = SoldierHeadCollisionData(p_class) 
 	local className = "SoldierHeadCollisionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "headRadius", "float", s_Instance.headRadius)
	self:SendDefault(s_guid,className, "poseStates", "List<SoldierHeadCollisionPoseData)>", s_Instance.poseStates)
end

function Type:SoldierHeadCollisionPoseData (p_class, p_guid)
	local s_Instance = SoldierHeadCollisionPoseData(p_class) 
 	local className = "SoldierHeadCollisionPoseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "idleOffset", "Vec3", s_Instance.idleOffset)
	self:SendDefault(s_guid,className, "movingForwardOffset", "Vec3", s_Instance.movingForwardOffset)
end

function Type:SoldierHealthModuleBinding (p_class, p_guid)
	local s_Instance = SoldierHealthModuleBinding(p_class) 
 	local className = "SoldierHealthModuleBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criticallyHit", "AntRef", s_Instance.criticallyHit)
	self:SendDefault(s_guid,className, "dead", "AntRef", s_Instance.dead)
	self:SendDefault(s_guid,className, "deathAnimationTriggered", "AntRef", s_Instance.deathAnimationTriggered)
	self:SendDefault(s_guid,className, "deathHitDirection", "AntRef", s_Instance.deathHitDirection)
	self:SendDefault(s_guid,className, "explosion", "AntRef", s_Instance.explosion)
	self:SendDefault(s_guid,className, "forwardSpeed", "AntRef", s_Instance.forwardSpeed)
	self:SendDefault(s_guid,className, "headShot", "AntRef", s_Instance.headShot)
	self:SendDefault(s_guid,className, "hitBack", "AntRef", s_Instance.hitBack)
	self:SendDefault(s_guid,className, "hitFront", "AntRef", s_Instance.hitFront)
	self:SendDefault(s_guid,className, "hitLeft", "AntRef", s_Instance.hitLeft)
	self:SendDefault(s_guid,className, "hitRight", "AntRef", s_Instance.hitRight)
	self:SendDefault(s_guid,className, "interactiveManDown", "AntRef", s_Instance.interactiveManDown)
	self:SendDefault(s_guid,className, "leftArmHit", "AntRef", s_Instance.leftArmHit)
	self:SendDefault(s_guid,className, "leftLegHit", "AntRef", s_Instance.leftLegHit)
	self:SendDefault(s_guid,className, "onGround", "AntRef", s_Instance.onGround)
	self:SendDefault(s_guid,className, "pose", "AntRef", s_Instance.pose)
	self:SendDefault(s_guid,className, "randomAnimationIndex", "AntRef", s_Instance.randomAnimationIndex)
	self:SendDefault(s_guid,className, "randomValue", "AntRef", s_Instance.randomValue)
	self:SendDefault(s_guid,className, "revived", "AntRef", s_Instance.revived)
	self:SendDefault(s_guid,className, "rightArmHit", "AntRef", s_Instance.rightArmHit)
	self:SendDefault(s_guid,className, "rightLegHit", "AntRef", s_Instance.rightLegHit)
	self:SendDefault(s_guid,className, "rightSpeed", "AntRef", s_Instance.rightSpeed)
	self:SendDefault(s_guid,className, "sprinting", "AntRef", s_Instance.sprinting)
end

function Type:SoldierMeshData (p_class, p_guid)
	local s_Instance = SoldierMeshData(p_class) 
 	local className = "SoldierMeshData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "meshBlueprint", "CtrRef", s_Instance.meshBlueprint)
	self:SendDefault(s_guid,className, "randomGroup", "int", s_Instance.randomGroup)
end

function Type:SoldierMovementSequenceData (p_class, p_guid)
	local s_Instance = SoldierMovementSequenceData(p_class) 
 	local className = "SoldierMovementSequenceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ignoreRecordingIndexFilter", "bool", s_Instance.ignoreRecordingIndexFilter)
	self:SendDefault(s_guid,className, "inputRecordingIndex", "int", s_Instance.inputRecordingIndex)
	self:SendDefault(s_guid,className, "recordedInput", "CtrRef", s_Instance.recordedInput)
	self:SendDefault(s_guid,className, "reportWhenFinished", "bool", s_Instance.reportWhenFinished)
end

function Type:SoldierParachuteBinding (p_class, p_guid)
	local s_Instance = SoldierParachuteBinding(p_class) 
 	local className = "SoldierParachuteBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accelerateBrake", "AntRef", s_Instance.accelerateBrake)
	self:SendDefault(s_guid,className, "enabled", "AntRef", s_Instance.enabled)
	self:SendDefault(s_guid,className, "pitch", "AntRef", s_Instance.pitch)
	self:SendDefault(s_guid,className, "roll", "AntRef", s_Instance.roll)
	self:SendDefault(s_guid,className, "steerLeftRight", "AntRef", s_Instance.steerLeftRight)
end

function Type:SoldierParachuteComponentData (p_class, p_guid)
	local s_Instance = SoldierParachuteComponentData(p_class) 
 	local className = "SoldierParachuteComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "AimingConstraintsData", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "binding", "SoldierParachuteBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "undeployTime", "float", s_Instance.undeployTime)
end

function Type:SoldierSoundComponentData (p_class, p_guid)
	local s_Instance = SoldierSoundComponentData(p_class) 
 	local className = "SoldierSoundComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "runPeriod", "float", s_Instance.runPeriod)
	self:SendDefault(s_guid,className, "runVelocityThreshold", "float", s_Instance.runVelocityThreshold)
	self:SendDefault(s_guid,className, "walkPeriod", "float", s_Instance.walkPeriod)
	self:SendDefault(s_guid,className, "walkVelocityThreshold", "float", s_Instance.walkVelocityThreshold)
end

function Type:SoldierSoundData (p_class, p_guid)
	local s_Instance = SoldierSoundData(p_class) 
 	local className = "SoldierSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "breathControl", "CtrRef", s_Instance.breathControl)
	self:SendDefault(s_guid,className, "bulletImpact", "CtrRef", s_Instance.bulletImpact)
	self:SendDefault(s_guid,className, "death", "CtrRef", s_Instance.death)
	self:SendDefault(s_guid,className, "healing", "CtrRef", s_Instance.healing)
	self:SendDefault(s_guid,className, "hitIndicator", "CtrRef", s_Instance.hitIndicator)
	self:SendDefault(s_guid,className, "minHealSoundTime", "float", s_Instance.minHealSoundTime)
	self:SendDefault(s_guid,className, "movement", "CtrRef", s_Instance.movement)
	self:SendDefault(s_guid,className, "movementThreshold", "float", s_Instance.movementThreshold)
	self:SendDefault(s_guid,className, "pickupAmmo", "CtrRef", s_Instance.pickupAmmo)
	self:SendDefault(s_guid,className, "pickupKit", "CtrRef", s_Instance.pickupKit)
	self:SendDefault(s_guid,className, "sprintTimeForRecovery", "float", s_Instance.sprintTimeForRecovery)
end

function Type:SoldierSpawnAppearanceTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnAppearanceTemplateData(p_class) 
 	local className = "SoldierSpawnAppearanceTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "body", "uint", s_Instance.body)
end

function Type:SoldierSpawnKitTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnKitTemplateData(p_class) 
 	local className = "SoldierSpawnKitTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "kit", "uint", s_Instance.kit)
	self:SendDefault(s_guid,className, "mainGun", "uint", s_Instance.mainGun)
end

function Type:SoldierSpawnTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnTemplateData(p_class) 
 	local className = "SoldierSpawnTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationTemplate", "CtrRef", s_Instance.animationTemplate)
	self:SendDefault(s_guid,className, "behaviour", "CtrRef", s_Instance.behaviour)
	self:SendDefault(s_guid,className, "customizeSoldierData", "CtrRef", s_Instance.customizeSoldierData)
	self:SendDefault(s_guid,className, "sensing", "CtrRef", s_Instance.sensing)
	self:SendDefault(s_guid,className, "voiceOverLabels", "List<CtrRef)>", s_Instance.voiceOverLabels)
end

function Type:SoldierSprintSettingsData (p_class, p_guid)
	local s_Instance = SoldierSprintSettingsData(p_class) 
 	local className = "SoldierSprintSettingsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fov", "float", s_Instance.fov)
	self:SendDefault(s_guid,className, "fovInDelay", "float", s_Instance.fovInDelay)
	self:SendDefault(s_guid,className, "fovInTime", "float", s_Instance.fovInTime)
	self:SendDefault(s_guid,className, "fovOutDelay", "float", s_Instance.fovOutDelay)
	self:SendDefault(s_guid,className, "fovOutTime", "float", s_Instance.fovOutTime)
	self:SendDefault(s_guid,className, "interruptingActions", "List<EntryInputActionEnum)>", s_Instance.interruptingActions)
	self:SendDefault(s_guid,className, "recoverTime", "float", s_Instance.recoverTime)
	self:SendDefault(s_guid,className, "sprintToProneRecoverTime", "float", s_Instance.sprintToProneRecoverTime)
	self:SendDefault(s_guid,className, "soldierSprintSettingsData",  "readonly", s_Instance.soldierSprintSettingsData)
	self:SendDefault(s_guid,className, "entryInputActionEnum",  "uint", s_Instance.entryInputActionEnum)
end

function Type:SoldierSuppressionComponentData (p_class, p_guid)
	local s_Instance = SoldierSuppressionComponentData(p_class) 
 	local className = "SoldierSuppressionComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkLineOfSight", "bool", s_Instance.checkLineOfSight)
	self:SendDefault(s_guid,className, "fallOffDelay", "float", s_Instance.fallOffDelay)
	self:SendDefault(s_guid,className, "fallOffMultiplier", "float", s_Instance.fallOffMultiplier)
	self:SendDefault(s_guid,className, "reactionToSuppression", "SuppressionReactionData", s_Instance.reactionToSuppression)
	self:SendDefault(s_guid,className, "suppressionAbortsHealthRegeneration", "bool", s_Instance.suppressionAbortsHealthRegeneration)
	self:SendDefault(s_guid,className, "suppressionBoostModifier", "float", s_Instance.suppressionBoostModifier)
	self:SendDefault(s_guid,className, "suppressionDecay", "float", s_Instance.suppressionDecay)
	self:SendDefault(s_guid,className, "suppressionResistModifier", "float", s_Instance.suppressionResistModifier)
	self:SendDefault(s_guid,className, "suppressionSphereRadius", "float", s_Instance.suppressionSphereRadius)
end

function Type:SoldierTestEntityData (p_class, p_guid)
	local s_Instance = SoldierTestEntityData(p_class) 
 	local className = "SoldierTestEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeInputRecording", "float", s_Instance.activeInputRecording)
	self:SendDefault(s_guid,className, "authoritativeAimingActive", "float", s_Instance.authoritativeAimingActive)
	self:SendDefault(s_guid,className, "authoritativePitch", "float", s_Instance.authoritativePitch)
	self:SendDefault(s_guid,className, "authoritativeYaw", "float", s_Instance.authoritativeYaw)
	self:SendDefault(s_guid,className, "cameraMovementsFilename", "string", s_Instance.cameraMovementsFilename)
	self:SendDefault(s_guid,className, "fireCounterMeasure", "float", s_Instance.fireCounterMeasure)
	self:SendDefault(s_guid,className, "fireInputVal", "float", s_Instance.fireInputVal)
	self:SendDefault(s_guid,className, "inputRecorder", "CtrRef", s_Instance.inputRecorder)
	self:SendDefault(s_guid,className, "jumpInputVal", "float", s_Instance.jumpInputVal)
	self:SendDefault(s_guid,className, "pitchInputVal", "float", s_Instance.pitchInputVal)
	self:SendDefault(s_guid,className, "proneInputVal", "float", s_Instance.proneInputVal)
	self:SendDefault(s_guid,className, "randomSeed", "int", s_Instance.randomSeed)
	self:SendDefault(s_guid,className, "rollInputVal", "float", s_Instance.rollInputVal)
	self:SendDefault(s_guid,className, "runAutomatically", "bool", s_Instance.runAutomatically)
	self:SendDefault(s_guid,className, "specialAnimationIndex", "float", s_Instance.specialAnimationIndex)
	self:SendDefault(s_guid,className, "sprintInputVal", "bool", s_Instance.sprintInputVal)
	self:SendDefault(s_guid,className, "startSequence", "CtrRef", s_Instance.startSequence)
	self:SendDefault(s_guid,className, "startSequenceRoot", "CtrRef", s_Instance.startSequenceRoot)
	self:SendDefault(s_guid,className, "strafeInputVal", "float", s_Instance.strafeInputVal)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
	self:SendDefault(s_guid,className, "template", "CtrRef", s_Instance.template)
	self:SendDefault(s_guid,className, "testSoldier", "CtrRef", s_Instance.testSoldier)
	self:SendDefault(s_guid,className, "testVehicle", "CtrRef", s_Instance.testVehicle)
	self:SendDefault(s_guid,className, "throttleInputVal", "float", s_Instance.throttleInputVal)
	self:SendDefault(s_guid,className, "unlocksProfile", "CtrRef", s_Instance.unlocksProfile)
	self:SendDefault(s_guid,className, "useUnlocksProfile", "bool", s_Instance.useUnlocksProfile)
	self:SendDefault(s_guid,className, "yawInputVal", "float", s_Instance.yawInputVal)
	self:SendDefault(s_guid,className, "zoomInputVal", "float", s_Instance.zoomInputVal)
end

function Type:SoldierWeaponCustomizationAsset (p_class, p_guid)
	local s_Instance = SoldierWeaponCustomizationAsset(p_class) 
 	local className = "SoldierWeaponCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customization", "CtrRef", s_Instance.customization)
end

function Type:SoldierWeaponData (p_class, p_guid)
	local s_Instance = SoldierWeaponData(p_class) 
 	local className = "SoldierWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingController", "CtrRef", s_Instance.aimingController)
	self:SendDefault(s_guid,className, "allowSwitchingToWeaponInVehicles", "bool", s_Instance.allowSwitchingToWeaponInVehicles)
	self:SendDefault(s_guid,className, "allowSwitchingToWeaponOutOfAmmo", "bool", s_Instance.allowSwitchingToWeaponOutOfAmmo)
	self:SendDefault(s_guid,className, "allowSwitchingToWeaponReloading", "bool", s_Instance.allowSwitchingToWeaponReloading)
	self:SendDefault(s_guid,className, "animationData", "CtrRef", s_Instance.animationData)
	self:SendDefault(s_guid,className, "animBaseSet", "WeaponAnimBaseSetEnum", s_Instance.animBaseSet)
	self:SendDefault(s_guid,className, "canBeInSupportedShooting", "bool", s_Instance.canBeInSupportedShooting)
	self:SendDefault(s_guid,className, "customization", "CtrRef", s_Instance.customization)
	self:SendDefault(s_guid,className, "damageGiverName", "string", s_Instance.damageGiverName)
	self:SendDefault(s_guid,className, "enableBreathControl", "bool", s_Instance.enableBreathControl)
	self:SendDefault(s_guid,className, "firstPersonCamera", "CtrRef", s_Instance.firstPersonCamera)
	self:SendDefault(s_guid,className, "hideWhenOutOfAmmo", "bool", s_Instance.hideWhenOutOfAmmo)
	self:SendDefault(s_guid,className, "hud", "HudData", s_Instance.hud)
	self:SendDefault(s_guid,className, "interactionOffset", "Vec3", s_Instance.interactionOffset)
	self:SendDefault(s_guid,className, "isSilenced", "bool", s_Instance.isSilenced)
	self:SendDefault(s_guid,className, "lowerOnOwnTeam", "bool", s_Instance.lowerOnOwnTeam)
	self:SendDefault(s_guid,className, "persistenceId", "string", s_Instance.persistenceId)
	self:SendDefault(s_guid,className, "pickupSettings", "PickupSettingsData", s_Instance.pickupSettings)
	self:SendDefault(s_guid,className, "quickThrowType", "QuickThrowTypeEnum", s_Instance.quickThrowType)
	self:SendDefault(s_guid,className, "redeployWhenSwitchingWeaponStates", "bool", s_Instance.redeployWhenSwitchingWeaponStates)
	self:SendDefault(s_guid,className, "renderFov", "float", s_Instance.renderFov)
	self:SendDefault(s_guid,className, "sockets", "List<CtrRef)>", s_Instance.sockets)
	self:SendDefault(s_guid,className, "soldierWeaponBlueprint", "CtrRef", s_Instance.soldierWeaponBlueprint)
	self:SendDefault(s_guid,className, "streamGroup1p", "CtrRef", s_Instance.streamGroup1p)
	self:SendDefault(s_guid,className, "switchToPrimaryWhenOutOfAmmo", "bool", s_Instance.switchToPrimaryWhenOutOfAmmo)
	self:SendDefault(s_guid,className, "switchWeaponStateInputAction", "EntryInputActionEnum", s_Instance.switchWeaponStateInputAction)
	self:SendDefault(s_guid,className, "useQuickThrowOnAutomaticSwitchback", "bool", s_Instance.useQuickThrowOnAutomaticSwitchback)
	self:SendDefault(s_guid,className, "voiceOverInfo", "CtrRef", s_Instance.voiceOverInfo)
	self:SendDefault(s_guid,className, "weaponFloatParam", "float", s_Instance.weaponFloatParam)
	self:SendDefault(s_guid,className, "weaponModifierData", "List<fb).WeaponModifierData>", s_Instance.weaponModifierData)
	self:SendDefault(s_guid,className, "zoomRenderFov", "float", s_Instance.zoomRenderFov)
end

function Type:SoldierWeaponDispersion (p_class, p_guid)
	local s_Instance = SoldierWeaponDispersion(p_class) 
 	local className = "SoldierWeaponDispersion"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "crouchDispersion", "FiringDispersionData", s_Instance.crouchDispersion)
	self:SendDefault(s_guid,className, "decreasePerSecond", "float", s_Instance.decreasePerSecond)
	self:SendDefault(s_guid,className, "jumpDispersionAngle", "float", s_Instance.jumpDispersionAngle)
	self:SendDefault(s_guid,className, "moveDispersionAngle", "float", s_Instance.moveDispersionAngle)
	self:SendDefault(s_guid,className, "moveZoomedDispersionAngle", "float", s_Instance.moveZoomedDispersionAngle)
	self:SendDefault(s_guid,className, "proneDispersion", "FiringDispersionData", s_Instance.proneDispersion)
	self:SendDefault(s_guid,className, "proneTransitionDispersionAngle", "float", s_Instance.proneTransitionDispersionAngle)
	self:SendDefault(s_guid,className, "standDispersion", "FiringDispersionData", s_Instance.standDispersion)
end

function Type:SoldierWeaponMultiUnlock (p_class, p_guid)
	local s_Instance = SoldierWeaponMultiUnlock(p_class) 
 	local className = "SoldierWeaponMultiUnlock"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "first", "CtrRef", s_Instance.first)
	self:SendDefault(s_guid,className, "unlockAssetPairs", "List<UnlockAssetPair)>", s_Instance.unlockAssetPairs)
end

function Type:SoldierWeaponOverrideData (p_class, p_guid)
	local s_Instance = SoldierWeaponOverrideData(p_class) 
 	local className = "SoldierWeaponOverrideData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "overrides", "List<CtrRef)>", s_Instance.overrides)
end

function Type:SoldierWeaponsComponentData (p_class, p_guid)
	local s_Instance = SoldierWeaponsComponentData(p_class) 
 	local className = "SoldierWeaponsComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimDir", "LinearTransform", s_Instance.aimDir)
	self:SendDefault(s_guid,className, "ammoClipIncreaseMultiplier", "float", s_Instance.ammoClipIncreaseMultiplier)
	self:SendDefault(s_guid,className, "animated1pOnlyWeaponBinding", "fb.Animated1pOnlyWeaponBinding)", s_Instance.animated1pOnlyWeaponBinding)
	self:SendDefault(s_guid,className, "animated3pOnlyWeaponBinding", "fb.Animated3pOnlyWeaponBinding)", s_Instance.animated3pOnlyWeaponBinding)
	self:SendDefault(s_guid,className, "animatedWeaponBinding", "fb.AnimatedWeaponBinding)", s_Instance.animatedWeaponBinding)
	self:SendDefault(s_guid,className, "explosiveIncreaseMultiplier", "float", s_Instance.explosiveIncreaseMultiplier)
	self:SendDefault(s_guid,className, "grenadeIncrease", "int", s_Instance.grenadeIncrease)
	self:SendDefault(s_guid,className, "lockTimeMultiplier", "float", s_Instance.lockTimeMultiplier)
	self:SendDefault(s_guid,className, "primaryWeaponId", "int", s_Instance.primaryWeaponId)
	self:SendDefault(s_guid,className, "underslungGrenadeIncrease", "int", s_Instance.underslungGrenadeIncrease)
	self:SendDefault(s_guid,className, "unlimitedAmmo", "bool", s_Instance.unlimitedAmmo)
	self:SendDefault(s_guid,className, "unlimitedMags", "bool", s_Instance.unlimitedMags)
	self:SendDefault(s_guid,className, "useExternalAimDir", "bool", s_Instance.useExternalAimDir)
	self:SendDefault(s_guid,className, "weaponSkeleton", "CtrRef", s_Instance.weaponSkeleton)
end

function Type:SoldierWeaponSwitchingData (p_class, p_guid)
	local s_Instance = SoldierWeaponSwitchingData(p_class) 
 	local className = "SoldierWeaponSwitchingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "directSwitchMap", "List<DirectWeaponSwitchingMapData)>", s_Instance.directSwitchMap)
	self:SendDefault(s_guid,className, "switchMap", "List<WeaponSwitchingMapData)>", s_Instance.switchMap)
	self:SendDefault(s_guid,className, "switchToGadgetCooldownTime", "float", s_Instance.switchToGadgetCooldownTime)
end

function Type:SoldierWeaponUnlockAsset (p_class, p_guid)
	local s_Instance = SoldierWeaponUnlockAsset(p_class) 
 	local className = "SoldierWeaponUnlockAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "extra", "CtrRef", s_Instance.extra)
	self:SendDefault(s_guid,className, "weapon", "CtrRef", s_Instance.weapon)
	self:SendDefault(s_guid,className, "weaponIdentifier", "uint", s_Instance.weaponIdentifier)
end

function Type:SoundAreaEntityData (p_class, p_guid)
	local s_Instance = SoundAreaEntityData(p_class) 
 	local className = "SoundAreaEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bigWorld", "CtrRef", s_Instance.bigWorld)
	self:SendDefault(s_guid,className, "fadeCurve", "FadeCurveType", s_Instance.fadeCurve)
	self:SendDefault(s_guid,className, "fadeWidth", "float", s_Instance.fadeWidth)
	self:SendDefault(s_guid,className, "proximityMultiplier", "float", s_Instance.proximityMultiplier)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:SoundAsset (p_class, p_guid)
	local s_Instance = SoundAsset(p_class) 
 	local className = "SoundAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scope", "CtrRef", s_Instance.scope)
end

function Type:SoundBusData (p_class, p_guid)
	local s_Instance = SoundBusData(p_class) 
 	local className = "SoundBusData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "busName", "string", s_Instance.busName)
	self:SendDefault(s_guid,className, "channelCount", "sbyte", s_Instance.channelCount)
	self:SendDefault(s_guid,className, "submixPlugin", "SoundGraphPluginRef", s_Instance.submixPlugin)
end

function Type:SoundDataAsset (p_class, p_guid)
	local s_Instance = SoundDataAsset(p_class) 
 	local className = "SoundDataAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chunks", "List<SoundDataChunk)>", s_Instance.chunks)
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
end

function Type:SoundDataChunk (p_class, p_guid)
	local s_Instance = SoundDataChunk(p_class) 
 	local className = "SoundDataChunk"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chunkId", "GUID", s_Instance.chunkId)
	self:SendDefault(s_guid,className, "chunkSize", "uint", s_Instance.chunkSize)
end

function Type:SoundEffectEntityData (p_class, p_guid)
	local s_Instance = SoundEffectEntityData(p_class) 
 	local className = "SoundEffectEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:SoundEntityData (p_class, p_guid)
	local s_Instance = SoundEntityData(p_class) 
 	local className = "SoundEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "obstructionHandle", "int", s_Instance.obstructionHandle)
	self:SendDefault(s_guid,className, "playOnCreation", "bool", s_Instance.playOnCreation)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:SoundEnvironmentConstantData (p_class, p_guid)
	local s_Instance = SoundEnvironmentConstantData(p_class) 
 	local className = "SoundEnvironmentConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "humanPlayerSoldierMovementVolumeOverride", "float", s_Instance.humanPlayerSoldierMovementVolumeOverride)
	self:SendDefault(s_guid,className, "memoryTime", "float", s_Instance.memoryTime)
	self:SendDefault(s_guid,className, "minimumLoudness", "float", s_Instance.minimumLoudness)
end

function Type:SoundGraphAsset (p_class, p_guid)
	local s_Instance = SoundGraphAsset(p_class) 
 	local className = "SoundGraphAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "graph", "CtrRef", s_Instance.graph)
	self:SendDefault(s_guid,className, "mixer", "CtrRef", s_Instance.mixer)
end

function Type:SoundGraphData (p_class, p_guid)
	local s_Instance = SoundGraphData(p_class) 
 	local className = "SoundGraphData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "info", "SoundGraphInfo", s_Instance.info)
	self:SendDefault(s_guid,className, "inputEvents", "List<CtrRef)>", s_Instance.inputEvents)
	self:SendDefault(s_guid,className, "inputParameters", "List<CtrRef)>", s_Instance.inputParameters)
	self:SendDefault(s_guid,className, "outputEvents", "List<CtrRef)>", s_Instance.outputEvents)
	self:SendDefault(s_guid,className, "outputParameters", "List<CtrRef)>", s_Instance.outputParameters)
end

function Type:SoundGraphInfo (p_class, p_guid)
	local s_Instance = SoundGraphInfo(p_class) 
 	local className = "SoundGraphInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "connections", "List<SoundGraphPluginConnection)>", s_Instance.connections)
	self:SendDefault(s_guid,className, "constructParams", "List<SoundGraphPluginConstructParam)>", s_Instance.constructParams)
	self:SendDefault(s_guid,className, "linkedPluginAttributes", "List<SoundGraphLinkedPluginAttribute)>", s_Instance.linkedPluginAttributes)
	self:SendDefault(s_guid,className, "pluginCount", "uint", s_Instance.pluginCount)
	self:SendDefault(s_guid,className, "pluginsParamCount", "uint", s_Instance.pluginsParamCount)
	self:SendDefault(s_guid,className, "voices", "List<SoundGraphVoiceInfo)>", s_Instance.voices)
end

function Type:SoundGraphLinkedPluginAttribute (p_class, p_guid)
	local s_Instance = SoundGraphLinkedPluginAttribute(p_class) 
 	local className = "SoundGraphLinkedPluginAttribute"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowExtremeValues", "bool", s_Instance.allowExtremeValues)
	self:SendDefault(s_guid,className, "attributeIndex", "sbyte", s_Instance.attributeIndex)
	self:SendDefault(s_guid,className, "node", "CtrRef", s_Instance.node)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
	self:SendDefault(s_guid,className, "port", "AudioGraphNodePort", s_Instance.port)
end

function Type:SoundGraphPluginConnection (p_class, p_guid)
	local s_Instance = SoundGraphPluginConnection(p_class) 
 	local className = "SoundGraphPluginConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bus", "CtrRef", s_Instance.bus)
	self:SendDefault(s_guid,className, "connectionType", "SoundGraphPluginConnectionType", s_Instance.connectionType)
	self:SendDefault(s_guid,className, "parameters", "List<SoundGraphPluginConnectionParam)>", s_Instance.parameters)
	self:SendDefault(s_guid,className, "voiceIndex", "sbyte", s_Instance.voiceIndex)
end

function Type:SoundGraphPluginConnectionParam (p_class, p_guid)
	local s_Instance = SoundGraphPluginConnectionParam(p_class) 
 	local className = "SoundGraphPluginConnectionParam"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "sbyte", s_Instance.index)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:SoundGraphPluginConstructParam (p_class, p_guid)
	local s_Instance = SoundGraphPluginConstructParam(p_class) 
 	local className = "SoundGraphPluginConstructParam"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "index", "sbyte", s_Instance.index)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:SoundGraphPluginInfo (p_class, p_guid)
	local s_Instance = SoundGraphPluginInfo(p_class) 
 	local className = "SoundGraphPluginInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "connectionIndex", "sbyte", s_Instance.connectionIndex)
	self:SendDefault(s_guid,className, "constructParamCount", "sbyte", s_Instance.constructParamCount)
	self:SendDefault(s_guid,className, "constructParamsIndex", "sbyte", s_Instance.constructParamsIndex)
	self:SendDefault(s_guid,className, "enableAttributeReadMask", "uint", s_Instance.enableAttributeReadMask)
	self:SendDefault(s_guid,className, "id", "uint", s_Instance.id)
	self:SendDefault(s_guid,className, "outputChannelCount", "sbyte", s_Instance.outputChannelCount)
end

function Type:SoundGraphPluginRef (p_class, p_guid)
	local s_Instance = SoundGraphPluginRef(p_class) 
 	local className = "SoundGraphPluginRef"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isValid", "bool", s_Instance.isValid)
	self:SendDefault(s_guid,className, "pluginIndex", "sbyte", s_Instance.pluginIndex)
	self:SendDefault(s_guid,className, "voiceIndex", "sbyte", s_Instance.voiceIndex)
end

function Type:SoundGraphVoiceInfo (p_class, p_guid)
	local s_Instance = SoundGraphVoiceInfo(p_class) 
 	local className = "SoundGraphVoiceInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "plugins", "List<SoundGraphPluginInfo)>", s_Instance.plugins)
	self:SendDefault(s_guid,className, "processingStage", "sbyte", s_Instance.processingStage)
end

function Type:SoundMasterPatchAsset (p_class, p_guid)
	local s_Instance = SoundMasterPatchAsset(p_class) 
 	local className = "SoundMasterPatchAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "busses", "List<CtrRef)>", s_Instance.busses)
	self:SendDefault(s_guid,className, "rwMovieBus", "CtrRef", s_Instance.rwMovieBus)
end

function Type:SoundPatchAsset (p_class, p_guid)
	local s_Instance = SoundPatchAsset(p_class) 
 	local className = "SoundPatchAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aILoudness", "float", s_Instance.aILoudness)
	self:SendDefault(s_guid,className, "defaultEnterScopeEvent", "CtrRef", s_Instance.defaultEnterScopeEvent)
	self:SendDefault(s_guid,className, "defaultForceInitEvent", "CtrRef", s_Instance.defaultForceInitEvent)
	self:SendDefault(s_guid,className, "defaultStartEvent", "CtrRef", s_Instance.defaultStartEvent)
	self:SendDefault(s_guid,className, "defaultStopEvent", "CtrRef", s_Instance.defaultStopEvent)
	self:SendDefault(s_guid,className, "dopplerFactor", "float", s_Instance.dopplerFactor)
	self:SendDefault(s_guid,className, "isLooping", "bool", s_Instance.isLooping)
	self:SendDefault(s_guid,className, "isPersistent", "bool", s_Instance.isPersistent)
	self:SendDefault(s_guid,className, "loudness", "float", s_Instance.loudness)
	self:SendDefault(s_guid,className, "masterPitch", "float", s_Instance.masterPitch)
	self:SendDefault(s_guid,className, "mixGroup", "CtrRef", s_Instance.mixGroup)
	self:SendDefault(s_guid,className, "outputNodes", "List<CtrRef)>", s_Instance.outputNodes)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
end

function Type:SoundPatchConfigurationAsset (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationAsset(p_class) 
 	local className = "SoundPatchConfigurationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entries", "List<CtrRef)>", s_Instance.entries)
	self:SendDefault(s_guid,className, "loudness", "float", s_Instance.loudness)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:SoundPatchConfigurationAssetEntry (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationAssetEntry(p_class) 
 	local className = "SoundPatchConfigurationAssetEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:SoundPatchConfigurationParameterEntry (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationParameterEntry(p_class) 
 	local className = "SoundPatchConfigurationParameterEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameHash", "uint", s_Instance.nameHash)
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:SoundPatchPublicNode (p_class, p_guid)
	local s_Instance = SoundPatchPublicNode(p_class) 
 	local className = "SoundPatchPublicNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "uint", s_Instance.id)
	self:SendDefault(s_guid,className, "node", "CtrRef", s_Instance.node)
end

function Type:SoundPrimeEntityData (p_class, p_guid)
	local s_Instance = SoundPrimeEntityData(p_class) 
 	local className = "SoundPrimeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataAssets", "List<CtrRef)>", s_Instance.dataAssets)
end

function Type:SoundScopeData (p_class, p_guid)
	local s_Instance = SoundScopeData(p_class) 
 	local className = "SoundScopeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultStrategy", "CtrRef", s_Instance.defaultStrategy)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:SoundScopeSetupData (p_class, p_guid)
	local s_Instance = SoundScopeSetupData(p_class) 
 	local className = "SoundScopeSetupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mappings", "List<SoundScopeStrategyMapping)>", s_Instance.mappings)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:SoundScopeSetupEntityData (p_class, p_guid)
	local s_Instance = SoundScopeSetupEntityData(p_class) 
 	local className = "SoundScopeSetupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "setup", "CtrRef", s_Instance.setup)
end

function Type:SoundScopeStrategyData (p_class, p_guid)
	local s_Instance = SoundScopeStrategyData(p_class) 
 	local className = "SoundScopeStrategyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:SoundScopeStrategyMapping (p_class, p_guid)
	local s_Instance = SoundScopeStrategyMapping(p_class) 
 	local className = "SoundScopeStrategyMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scope", "CtrRef", s_Instance.scope)
	self:SendDefault(s_guid,className, "strategy", "CtrRef", s_Instance.strategy)
end

function Type:SoundSettings (p_class, p_guid)
	local s_Instance = SoundSettings(p_class) 
 	local className = "SoundSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "audioSystemUri", "string", s_Instance.audioSystemUri)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "vOCommon", "string", s_Instance.vOCommon)
	self:SendDefault(s_guid,className, "vOEnglish", "string", s_Instance.vOEnglish)
	self:SendDefault(s_guid,className, "vOFrench", "string", s_Instance.vOFrench)
	self:SendDefault(s_guid,className, "vOGerman", "string", s_Instance.vOGerman)
	self:SendDefault(s_guid,className, "vOItalian", "string", s_Instance.vOItalian)
	self:SendDefault(s_guid,className, "vOSpanish", "string", s_Instance.vOSpanish)
end

function Type:SoundState (p_class, p_guid)
	local s_Instance = SoundState(p_class) 
 	local className = "SoundState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bypassSound", "CtrRef", s_Instance.bypassSound)
	self:SendDefault(s_guid,className, "duration", "float", s_Instance.duration)
	self:SendDefault(s_guid,className, "fadeInTime", "float", s_Instance.fadeInTime)
	self:SendDefault(s_guid,className, "fadeOutTime", "float", s_Instance.fadeOutTime)
	self:SendDefault(s_guid,className, "fadeSound", "bool", s_Instance.fadeSound)
	self:SendDefault(s_guid,className, "hdrSetting", "CtrRef", s_Instance.hdrSetting)
	self:SendDefault(s_guid,className, "lpCutoffFrequency", "float", s_Instance.lpCutoffFrequency)
	self:SendDefault(s_guid,className, "mixer", "CtrRef", s_Instance.mixer)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:SoundStateEntityData (p_class, p_guid)
	local s_Instance = SoundStateEntityData(p_class) 
 	local className = "SoundStateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "soundState", "CtrRef", s_Instance.soundState)
end

function Type:SoundStateSettingsAsset (p_class, p_guid)
	local s_Instance = SoundStateSettingsAsset(p_class) 
 	local className = "SoundStateSettingsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "impairedHearingImpulseThreshold", "float", s_Instance.impairedHearingImpulseThreshold)
	self:SendDefault(s_guid,className, "screamThreshold", "float", s_Instance.screamThreshold)
	self:SendDefault(s_guid,className, "soundStates", "List<CtrRef)>", s_Instance.soundStates)
	self:SendDefault(s_guid,className, "supressionThreshold", "float", s_Instance.supressionThreshold)
end

function Type:SoundTestAsset (p_class, p_guid)
	local s_Instance = SoundTestAsset(p_class) 
 	local className = "SoundTestAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suites", "List<CtrRef)>", s_Instance.suites)
	self:SendDefault(s_guid,className, "taskSpecs", "List<CtrRef)>", s_Instance.taskSpecs)
	self:SendDefault(s_guid,className, "testSpecs", "List<CtrRef)>", s_Instance.testSpecs)
end

function Type:SoundTestEventTask (p_class, p_guid)
	local s_Instance = SoundTestEventTask(p_class) 
 	local className = "SoundTestEventTask"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventName", "string", s_Instance.eventName)
end

function Type:SoundTestParamTask (p_class, p_guid)
	local s_Instance = SoundTestParamTask(p_class) 
 	local className = "SoundTestParamTask"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "behavior", "SoundTestParamBehavior", s_Instance.behavior)
	self:SendDefault(s_guid,className, "initialValue", "float", s_Instance.initialValue)
	self:SendDefault(s_guid,className, "paramName", "string", s_Instance.paramName)
	self:SendDefault(s_guid,className, "rangeMax", "float", s_Instance.rangeMax)
	self:SendDefault(s_guid,className, "rangeMin", "float", s_Instance.rangeMin)
end

function Type:SoundTestSpec (p_class, p_guid)
	local s_Instance = SoundTestSpec(p_class) 
 	local className = "SoundTestSpec"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "duration", "float", s_Instance.duration)
	self:SendDefault(s_guid,className, "mainStartTask", "CtrRef", s_Instance.mainStartTask)
	self:SendDefault(s_guid,className, "mainStopTask", "CtrRef", s_Instance.mainStopTask)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "tasks", "List<CtrRef)>", s_Instance.tasks)
end

function Type:SoundTestSuite (p_class, p_guid)
	local s_Instance = SoundTestSuite(p_class) 
 	local className = "SoundTestSuite"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assets", "List<CtrRef)>", s_Instance.assets)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "profileTests", "bool", s_Instance.profileTests)
	self:SendDefault(s_guid,className, "tests", "List<CtrRef)>", s_Instance.tests)
end

function Type:SoundTestTask (p_class, p_guid)
	local s_Instance = SoundTestTask(p_class) 
 	local className = "SoundTestTask"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "param", "CtrRef", s_Instance.param)
	self:SendDefault(s_guid,className, "repetitions", "uint", s_Instance.repetitions)
	self:SendDefault(s_guid,className, "spec", "CtrRef", s_Instance.spec)
	self:SendDefault(s_guid,className, "startTime", "float", s_Instance.startTime)
end

function Type:SoundTestTaskSpec (p_class, p_guid)
	local s_Instance = SoundTestTaskSpec(p_class) 
 	local className = "SoundTestTaskSpec"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "duration", "float", s_Instance.duration)
end

function Type:SoundTestTransformTask (p_class, p_guid)
	local s_Instance = SoundTestTransformTask(p_class) 
 	local className = "SoundTestTransformTask"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "behavior", "SoundTestTransformBehavior", s_Instance.behavior)
	self:SendDefault(s_guid,className, "initialPosition", "Vec3", s_Instance.initialPosition)
	self:SendDefault(s_guid,className, "relativeListener", "bool", s_Instance.relativeListener)
end

function Type:SoundWaveAsset (p_class, p_guid)
	local s_Instance = SoundWaveAsset(p_class) 
 	local className = "SoundWaveAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "channelCount", "sbyte", s_Instance.channelCount)
	self:SendDefault(s_guid,className, "localization", "List<SoundWaveLocalizationInfo)>", s_Instance.localization)
	self:SendDefault(s_guid,className, "persistentVariationCount", "sbyte", s_Instance.persistentVariationCount)
	self:SendDefault(s_guid,className, "preferAvailableVariations", "bool", s_Instance.preferAvailableVariations)
	self:SendDefault(s_guid,className, "primePriority", "sbyte", s_Instance.primePriority)
	self:SendDefault(s_guid,className, "requestPriority", "sbyte", s_Instance.requestPriority)
	self:SendDefault(s_guid,className, "seekable", "bool", s_Instance.seekable)
	self:SendDefault(s_guid,className, "selection", "SoundWaveVariationSelection", s_Instance.selection)
	self:SendDefault(s_guid,className, "streamPool", "CtrRef", s_Instance.streamPool)
	self:SendDefault(s_guid,className, "subtitleStringIds", "List<string)>", s_Instance.subtitleStringIds)
	self:SendDefault(s_guid,className, "variations", "List<CtrRef)>", s_Instance.variations)
	self:SendDefault(s_guid,className, "voicePriority", "sbyte", s_Instance.voicePriority)
end

function Type:SoundWaveLocalizationInfo (p_class, p_guid)
	local s_Instance = SoundWaveLocalizationInfo(p_class) 
 	local className = "SoundWaveLocalizationInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "firstVariationIndex", "ushort", s_Instance.firstVariationIndex)
	self:SendDefault(s_guid,className, "language", "CtrRef", s_Instance.language)
	self:SendDefault(s_guid,className, "variationCount", "ushort", s_Instance.variationCount)
end

function Type:SoundWaveSubtitle (p_class, p_guid)
	local s_Instance = SoundWaveSubtitle(p_class) 
 	local className = "SoundWaveSubtitle"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "stringIndex", "sbyte", s_Instance.stringIndex)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:SoundWaveVariation (p_class, p_guid)
	local s_Instance = SoundWaveVariation(p_class) 
 	local className = "SoundWaveVariation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chunkIndex", "sbyte", s_Instance.chunkIndex)
	self:SendDefault(s_guid,className, "firstLoopSegmentIndex", "sbyte", s_Instance.firstLoopSegmentIndex)
	self:SendDefault(s_guid,className, "lastLoopSegmentIndex", "sbyte", s_Instance.lastLoopSegmentIndex)
	self:SendDefault(s_guid,className, "seekTablesSize", "uint", s_Instance.seekTablesSize)
	self:SendDefault(s_guid,className, "segments", "List<SoundWaveVariationSegment)>", s_Instance.segments)
	self:SendDefault(s_guid,className, "subtitles", "List<SoundWaveSubtitle)>", s_Instance.subtitles)
end

function Type:SoundWaveVariationSegment (p_class, p_guid)
	local s_Instance = SoundWaveVariationSegment(p_class) 
 	local className = "SoundWaveVariationSegment"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "samplesOffset", "uint", s_Instance.samplesOffset)
	self:SendDefault(s_guid,className, "seekTableOffset", "uint", s_Instance.seekTableOffset)
	self:SendDefault(s_guid,className, "segmentLength", "float", s_Instance.segmentLength)
end

function Type:SpatialEntityData (p_class, p_guid)
	local s_Instance = SpatialEntityData(p_class) 
 	local className = "SpatialEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:SpawnAnimationData (p_class, p_guid)
	local s_Instance = SpawnAnimationData(p_class) 
 	local className = "SpawnAnimationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationSpeed", "float", s_Instance.animationSpeed)
end

function Type:SpawnAnimationFrameData (p_class, p_guid)
	local s_Instance = SpawnAnimationFrameData(p_class) 
 	local className = "SpawnAnimationFrameData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationFrame", "uint", s_Instance.animationFrame)
end

function Type:SpawnDirectionData (p_class, p_guid)
	local s_Instance = SpawnDirectionData(p_class) 
 	local className = "SpawnDirectionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "directionFromEmitterOrigin", "float", s_Instance.directionFromEmitterOrigin)
	self:SendDefault(s_guid,className, "inheritSpeedAndDirectionFromEmitter", "bool", s_Instance.inheritSpeedAndDirectionFromEmitter)
end

function Type:SpawnEvent (p_class, p_guid)
	local s_Instance = SpawnEvent(p_class) 
 	local className = "SpawnEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:SpawnPointManagerData (p_class, p_guid)
	local s_Instance = SpawnPointManagerData(p_class) 
 	local className = "SpawnPointManagerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "useAiLodSystem", "bool", s_Instance.useAiLodSystem)
end

function Type:SpawnRateData (p_class, p_guid)
	local s_Instance = SpawnRateData(p_class) 
 	local className = "SpawnRateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distributeOverDistance", "bool", s_Instance.distributeOverDistance)
	self:SendDefault(s_guid,className, "distributeOverTime", "bool", s_Instance.distributeOverTime)
	self:SendDefault(s_guid,className, "spawnRate", "float", s_Instance.spawnRate)
	self:SendDefault(s_guid,className, "trailSegmentLength", "float", s_Instance.trailSegmentLength)
end

function Type:SpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = SpawnReferenceObjectData(p_class) 
 	local className = "SpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "airdropTransform", "LinearTransform", s_Instance.airdropTransform)
	self:SendDefault(s_guid,className, "autoSpawn", "bool", s_Instance.autoSpawn)
	self:SendDefault(s_guid,className, "clearBangersOnSpawn", "bool", s_Instance.clearBangersOnSpawn)
	self:SendDefault(s_guid,className, "controllableInput", "LinearTransform", s_Instance.controllableInput)
	self:SendDefault(s_guid,className, "controllableTransform", "LinearTransform", s_Instance.controllableTransform)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "initialAutoSpawn", "bool", s_Instance.initialAutoSpawn)
	self:SendDefault(s_guid,className, "initialSpawnDelay", "float", s_Instance.initialSpawnDelay)
	self:SendDefault(s_guid,className, "initialVelocity", "float", s_Instance.initialVelocity)
	self:SendDefault(s_guid,className, "isDynamicSpawn", "bool", s_Instance.isDynamicSpawn)
	self:SendDefault(s_guid,className, "locationNameSid", "string", s_Instance.locationNameSid)
	self:SendDefault(s_guid,className, "locationTextSid", "string", s_Instance.locationTextSid)
	self:SendDefault(s_guid,className, "lockedTeam", "bool", s_Instance.lockedTeam)
	self:SendDefault(s_guid,className, "maxCount", "int", s_Instance.maxCount)
	self:SendDefault(s_guid,className, "maxCountSimultaneously", "int", s_Instance.maxCountSimultaneously)
	self:SendDefault(s_guid,className, "onlySendEventForHumanPlayers", "bool", s_Instance.onlySendEventForHumanPlayers)
	self:SendDefault(s_guid,className, "overwriteThrottle", "bool", s_Instance.overwriteThrottle)
	self:SendDefault(s_guid,className, "returnControlOnIdle", "bool", s_Instance.returnControlOnIdle)
	self:SendDefault(s_guid,className, "rotationPitch", "float", s_Instance.rotationPitch)
	self:SendDefault(s_guid,className, "rotationRoll", "float", s_Instance.rotationRoll)
	self:SendDefault(s_guid,className, "rotationYaw", "float", s_Instance.rotationYaw)
	self:SendDefault(s_guid,className, "sendWeaponEvents", "bool", s_Instance.sendWeaponEvents)
	self:SendDefault(s_guid,className, "spawnAreaRadius", "float", s_Instance.spawnAreaRadius)
	self:SendDefault(s_guid,className, "spawnDelay", "float", s_Instance.spawnDelay)
	self:SendDefault(s_guid,className, "spawnProtectionCheckAllTeams", "bool", s_Instance.spawnProtectionCheckAllTeams)
	self:SendDefault(s_guid,className, "spawnProtectionFriendlyKilledCount", "uint", s_Instance.spawnProtectionFriendlyKilledCount)
	self:SendDefault(s_guid,className, "spawnProtectionFriendlyKilledTime", "float", s_Instance.spawnProtectionFriendlyKilledTime)
	self:SendDefault(s_guid,className, "spawnProtectionRadius", "float", s_Instance.spawnProtectionRadius)
	self:SendDefault(s_guid,className, "takeControlEntryIndex", "int", s_Instance.takeControlEntryIndex)
	self:SendDefault(s_guid,className, "takeControlOnTransformChange", "bool", s_Instance.takeControlOnTransformChange)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
	self:SendDefault(s_guid,className, "throttle", "float", s_Instance.throttle)
	self:SendDefault(s_guid,className, "totalCountSimultaneouslyOfType", "int", s_Instance.totalCountSimultaneouslyOfType)
	self:SendDefault(s_guid,className, "tryToSpawnOutOfSight", "bool", s_Instance.tryToSpawnOutOfSight)
	self:SendDefault(s_guid,className, "useAsSpawnPoint", "bool", s_Instance.useAsSpawnPoint)
end

function Type:SpawnRotationData (p_class, p_guid)
	local s_Instance = SpawnRotationData(p_class) 
 	local className = "SpawnRotationData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rotation", "float", s_Instance.rotation)
end

function Type:SpawnRotationSpeedData (p_class, p_guid)
	local s_Instance = SpawnRotationSpeedData(p_class) 
 	local className = "SpawnRotationSpeedData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rotationSpeed", "float", s_Instance.rotationSpeed)
end

function Type:SpawnScreenWeaponData (p_class, p_guid)
	local s_Instance = SpawnScreenWeaponData(p_class) 
 	local className = "SpawnScreenWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
	self:SendDefault(s_guid,className, "weaponName", "string", s_Instance.weaponName)
end

function Type:SpawnSizeData (p_class, p_guid)
	local s_Instance = SpawnSizeData(p_class) 
 	local className = "SpawnSizeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "size", "float", s_Instance.size)
end

function Type:SpawnSpeedData (p_class, p_guid)
	local s_Instance = SpawnSpeedData(p_class) 
 	local className = "SpawnSpeedData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
end

function Type:SpawnState (p_class, p_guid)
	local s_Instance = SpawnState(p_class) 
 	local className = "SpawnState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "team", "int", s_Instance.team)
end

function Type:SpawnSurveyEvent (p_class, p_guid)
	local s_Instance = SpawnSurveyEvent(p_class) 
 	local className = "SpawnSurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
end

function Type:SpecialMoveInterpolatedPoint (p_class, p_guid)
	local s_Instance = SpecialMoveInterpolatedPoint(p_class) 
 	local className = "SpecialMoveInterpolatedPoint"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
	self:SendDefault(s_guid,className, "value", "Vec3", s_Instance.value)
end

function Type:SpecialMovesBinding (p_class, p_guid)
	local s_Instance = SpecialMovesBinding(p_class) 
 	local className = "SpecialMovesBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cancelAnimation", "AntRef", s_Instance.cancelAnimation)
	self:SendDefault(s_guid,className, "objectDistance", "AntRef", s_Instance.objectDistance)
	self:SendDefault(s_guid,className, "objectHeight", "AntRef", s_Instance.objectHeight)
	self:SendDefault(s_guid,className, "specialAnimationIndex", "AntRef", s_Instance.specialAnimationIndex)
	self:SendDefault(s_guid,className, "startObjectDistanceTimer", "AntRef", s_Instance.startObjectDistanceTimer)
	self:SendDefault(s_guid,className, "triggerHighVault", "AntRef", s_Instance.triggerHighVault)
	self:SendDefault(s_guid,className, "triggerLowVault", "AntRef", s_Instance.triggerLowVault)
	self:SendDefault(s_guid,className, "triggerSlideIntoProne", "AntRef", s_Instance.triggerSlideIntoProne)
	self:SendDefault(s_guid,className, "triggerSpecialAnimation", "AntRef", s_Instance.triggerSpecialAnimation)
	self:SendDefault(s_guid,className, "triggerUpVault", "AntRef", s_Instance.triggerUpVault)
	self:SendDefault(s_guid,className, "vaultObjectPositionX", "AntRef", s_Instance.vaultObjectPositionX)
	self:SendDefault(s_guid,className, "vaultObjectPositionZ", "AntRef", s_Instance.vaultObjectPositionZ)
end

function Type:SpecialMovesComponentData (p_class, p_guid)
	local s_Instance = SpecialMovesComponentData(p_class) 
 	local className = "SpecialMovesComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "SpecialMovesBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "deathState", "SpecialMoveStateData", s_Instance.deathState)
	self:SendDefault(s_guid,className, "indexedDeathStates", "List<SpecialMoveStateData)>", s_Instance.indexedDeathStates)
	self:SendDefault(s_guid,className, "indexedSpecialAnimationStates", "List<SpecialMoveStateData)>", s_Instance.indexedSpecialAnimationStates)
	self:SendDefault(s_guid,className, "indexedVaultOverHighStates", "List<SpecialMoveVaultStateCriteria)>", s_Instance.indexedVaultOverHighStates)
	self:SendDefault(s_guid,className, "indexedVaultOverLowStates", "List<SpecialMoveVaultStateCriteria)>", s_Instance.indexedVaultOverLowStates)
	self:SendDefault(s_guid,className, "indexedVaultUpStates", "List<SpecialMoveVaultStateCriteria)>", s_Instance.indexedVaultUpStates)
	self:SendDefault(s_guid,className, "specialAnimationState", "SpecialMoveStateData", s_Instance.specialAnimationState)
	self:SendDefault(s_guid,className, "sprintToProneState", "SpecialMoveStateData", s_Instance.sprintToProneState)
	self:SendDefault(s_guid,className, "vaultOverHighState", "SpecialMoveStateData", s_Instance.vaultOverHighState)
	self:SendDefault(s_guid,className, "vaultOverLowState", "SpecialMoveStateData", s_Instance.vaultOverLowState)
	self:SendDefault(s_guid,className, "vaultUpHighState", "SpecialMoveStateData", s_Instance.vaultUpHighState)
end

function Type:SpecialMoveStateData (p_class, p_guid)
	local s_Instance = SpecialMoveStateData(p_class) 
 	local className = "SpecialMoveStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "exitAnimationDrivenStateVelocity", "float", s_Instance.exitAnimationDrivenStateVelocity)
	self:SendDefault(s_guid,className, "gravityPoints", "List<SpecialMoveInterpolatedPoint)>", s_Instance.gravityPoints)
	self:SendDefault(s_guid,className, "keepInitialSoldierDirection", "bool", s_Instance.keepInitialSoldierDirection)
	self:SendDefault(s_guid,className, "maxDistanceScale", "float", s_Instance.maxDistanceScale)
	self:SendDefault(s_guid,className, "maxHeightScale", "float", s_Instance.maxHeightScale)
	self:SendDefault(s_guid,className, "maxObjectLengthScale", "float", s_Instance.maxObjectLengthScale)
	self:SendDefault(s_guid,className, "minDistanceScale", "float", s_Instance.minDistanceScale)
	self:SendDefault(s_guid,className, "minHeightScale", "float", s_Instance.minHeightScale)
	self:SendDefault(s_guid,className, "minObjectLengthScale", "float", s_Instance.minObjectLengthScale)
	self:SendDefault(s_guid,className, "motionPoints", "List<SpecialMoveInterpolatedPoint)>", s_Instance.motionPoints)
	self:SendDefault(s_guid,className, "optimumDistanceFromObject", "float", s_Instance.optimumDistanceFromObject)
	self:SendDefault(s_guid,className, "optimumHeightOfObject", "float", s_Instance.optimumHeightOfObject)
	self:SendDefault(s_guid,className, "optimumLengthOfObject", "float", s_Instance.optimumLengthOfObject)
	self:SendDefault(s_guid,className, "overridePose", "SpecialMovesPoseType", s_Instance.overridePose)
	self:SendDefault(s_guid,className, "resetPose", "SpecialMovesPoseType", s_Instance.resetPose)
	self:SendDefault(s_guid,className, "scaleWithDistanceToObject", "bool", s_Instance.scaleWithDistanceToObject)
end

function Type:SpecialMoveVaultStateCriteria (p_class, p_guid)
	local s_Instance = SpecialMoveVaultStateCriteria(p_class) 
 	local className = "SpecialMoveVaultStateCriteria"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distToObject", "float", s_Instance.distToObject)
	self:SendDefault(s_guid,className, "distToObjectTolerance", "float", s_Instance.distToObjectTolerance)
	self:SendDefault(s_guid,className, "heightOfObject", "float", s_Instance.heightOfObject)
	self:SendDefault(s_guid,className, "heightOfObjectTolerance", "float", s_Instance.heightOfObjectTolerance)
	self:SendDefault(s_guid,className, "lengthOfObject", "float", s_Instance.lengthOfObject)
	self:SendDefault(s_guid,className, "lengthOfObjectTolerance", "float", s_Instance.lengthOfObjectTolerance)
	self:SendDefault(s_guid,className, "specialMoveState", "SpecialMoveStateData", s_Instance.specialMoveState)
end

function Type:SpeedEventGateEntityData (p_class, p_guid)
	local s_Instance = SpeedEventGateEntityData(p_class) 
 	local className = "SpeedEventGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "minSpeed", "float", s_Instance.minSpeed)
end

function Type:SpeedModifierData (p_class, p_guid)
	local s_Instance = SpeedModifierData(p_class) 
 	local className = "SpeedModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "backwardConstant", "float", s_Instance.backwardConstant)
	self:SendDefault(s_guid,className, "forwardConstant", "float", s_Instance.forwardConstant)
	self:SendDefault(s_guid,className, "leftConstant", "float", s_Instance.leftConstant)
	self:SendDefault(s_guid,className, "rightConstant", "float", s_Instance.rightConstant)
end

function Type:SphereCollisionData (p_class, p_guid)
	local s_Instance = SphereCollisionData(p_class) 
 	local className = "SphereCollisionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "counterNormalBrakeForceMod", "float", s_Instance.counterNormalBrakeForceMod)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "extraRadius", "float", s_Instance.extraRadius)
end

function Type:SphereData (p_class, p_guid)
	local s_Instance = SphereData(p_class) 
 	local className = "SphereData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
end

function Type:SphereEvaluatorData (p_class, p_guid)
	local s_Instance = SphereEvaluatorData(p_class) 
 	local className = "SphereEvaluatorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pivot", "Vec3", s_Instance.pivot)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "scale", "Vec3", s_Instance.scale)
end

function Type:SplitterNode (p_class, p_guid)
	local s_Instance = SplitterNode(p_class) 
 	local className = "SplitterNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
end

function Type:SpotLightEntityData (p_class, p_guid)
	local s_Instance = SpotLightEntityData(p_class) 
 	local className = "SpotLightEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "castShadowsEnable", "bool", s_Instance.castShadowsEnable)
	self:SendDefault(s_guid,className, "castShadowsMinLevel", "QualityLevel", s_Instance.castShadowsMinLevel)
	self:SendDefault(s_guid,className, "coneInnerAngle", "float", s_Instance.coneInnerAngle)
	self:SendDefault(s_guid,className, "coneOuterAngle", "float", s_Instance.coneOuterAngle)
	self:SendDefault(s_guid,className, "frustumAspect", "float", s_Instance.frustumAspect)
	self:SendDefault(s_guid,className, "frustumFov", "float", s_Instance.frustumFov)
	self:SendDefault(s_guid,className, "orthoHeight", "float", s_Instance.orthoHeight)
	self:SendDefault(s_guid,className, "orthoWidth", "float", s_Instance.orthoWidth)
	self:SendDefault(s_guid,className, "shape", "SpotLightShape", s_Instance.shape)
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
end

function Type:SpottingComponentData (p_class, p_guid)
	local s_Instance = SpottingComponentData(p_class) 
 	local className = "SpottingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammoOrderDistance", "float", s_Instance.ammoOrderDistance)
	self:SendDefault(s_guid,className, "coolDownAllowedSpotsWithinHistory", "int", s_Instance.coolDownAllowedSpotsWithinHistory)
	self:SendDefault(s_guid,className, "coolDownHistoryTime", "float", s_Instance.coolDownHistoryTime)
	self:SendDefault(s_guid,className, "healOrderDistance", "float", s_Instance.healOrderDistance)
	self:SendDefault(s_guid,className, "onlyAllowedToHaveOneSpottedPlayer", "bool", s_Instance.onlyAllowedToHaveOneSpottedPlayer)
	self:SendDefault(s_guid,className, "orderHealPercentage", "float", s_Instance.orderHealPercentage)
	self:SendDefault(s_guid,className, "orderNeedAmmoPercentage", "float", s_Instance.orderNeedAmmoPercentage)
	self:SendDefault(s_guid,className, "orderRepairPercentage", "float", s_Instance.orderRepairPercentage)
	self:SendDefault(s_guid,className, "passiveSpottingTimeInterval", "float", s_Instance.passiveSpottingTimeInterval)
	self:SendDefault(s_guid,className, "pickupOrderDistance", "float", s_Instance.pickupOrderDistance)
	self:SendDefault(s_guid,className, "repairOrderDistance", "float", s_Instance.repairOrderDistance)
	self:SendDefault(s_guid,className, "spottingDistance", "float", s_Instance.spottingDistance)
	self:SendDefault(s_guid,className, "spottingFov", "float", s_Instance.spottingFov)
	self:SendDefault(s_guid,className, "teamOrderFov", "float", s_Instance.teamOrderFov)
	self:SendDefault(s_guid,className, "timeRequiredToPassiveSpot", "float", s_Instance.timeRequiredToPassiveSpot)
end

function Type:SpottingEntityData (p_class, p_guid)
	local s_Instance = SpottingEntityData(p_class) 
 	local className = "SpottingEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "teamToSpot", "TeamId", s_Instance.teamToSpot)
end

function Type:SpottingTargetComponentData (p_class, p_guid)
	local s_Instance = SpottingTargetComponentData(p_class) 
 	local className = "SpottingTargetComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeSpottedTime", "float", s_Instance.activeSpottedTime)
	self:SendDefault(s_guid,className, "activeSpottedTimeMultiplier", "float", s_Instance.activeSpottedTimeMultiplier)
	self:SendDefault(s_guid,className, "passiveSpottedTime", "float", s_Instance.passiveSpottedTime)
	self:SendDefault(s_guid,className, "passiveSpottedTimeMultiplier", "float", s_Instance.passiveSpottedTimeMultiplier)
	self:SendDefault(s_guid,className, "spotOnFireMultiplier", "float", s_Instance.spotOnFireMultiplier)
	self:SendDefault(s_guid,className, "targetBoundingBoxCenter", "bool", s_Instance.targetBoundingBoxCenter)
end

function Type:SpringData (p_class, p_guid)
	local s_Instance = SpringData(p_class) 
 	local className = "SpringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "attachOffsetY", "float", s_Instance.attachOffsetY)
	self:SendDefault(s_guid,className, "damping", "float", s_Instance.damping)
	self:SendDefault(s_guid,className, "disabledStrenghModifier", "float", s_Instance.disabledStrenghModifier)
	self:SendDefault(s_guid,className, "length", "float", s_Instance.length)
	self:SendDefault(s_guid,className, "maxSpringForce", "float", s_Instance.maxSpringForce)
	self:SendDefault(s_guid,className, "progressiveExponent", "float", s_Instance.progressiveExponent)
	self:SendDefault(s_guid,className, "progressiveStartRatio", "float", s_Instance.progressiveStartRatio)
	self:SendDefault(s_guid,className, "stiffness", "float", s_Instance.stiffness)
	self:SendDefault(s_guid,className, "visualClipOffset", "float", s_Instance.visualClipOffset)
end

function Type:StabilizerData (p_class, p_guid)
	local s_Instance = StabilizerData(p_class) 
 	local className = "StabilizerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "advanced", "bool", s_Instance.advanced)
	self:SendDefault(s_guid,className, "advancedYaw", "bool", s_Instance.advancedYaw)
	self:SendDefault(s_guid,className, "pitchStrength", "float", s_Instance.pitchStrength)
	self:SendDefault(s_guid,className, "rollStrength", "float", s_Instance.rollStrength)
	self:SendDefault(s_guid,className, "verticalVelocityStrength", "float", s_Instance.verticalVelocityStrength)
	self:SendDefault(s_guid,className, "yawStrength", "float", s_Instance.yawStrength)
end

function Type:StabilizerSettings (p_class, p_guid)
	local s_Instance = StabilizerSettings(p_class) 
 	local className = "StabilizerSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "advanced", "bool", s_Instance.advanced)
	self:SendDefault(s_guid,className, "property", "StabilizerProperty", s_Instance.property)
	self:SendDefault(s_guid,className, "strength", "float", s_Instance.strength)
end

function Type:StanceCameraData (p_class, p_guid)
	local s_Instance = StanceCameraData(p_class) 
 	local className = "StanceCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultCameraForStances", "List<int)>", s_Instance.defaultCameraForStances)
	self:SendDefault(s_guid,className, "validStances", "List<int)>", s_Instance.validStances)
end

function Type:StanceFilterComponentData (p_class, p_guid)
	local s_Instance = StanceFilterComponentData(p_class) 
 	local className = "StanceFilterComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionsToFilter", "List<ActionSuppressor)>", s_Instance.actionsToFilter)
	self:SendDefault(s_guid,className, "filterSpecificActions", "bool", s_Instance.filterSpecificActions)
	self:SendDefault(s_guid,className, "stanceChangeTime", "float", s_Instance.stanceChangeTime)
	self:SendDefault(s_guid,className, "undoParentStanceFilter", "bool", s_Instance.undoParentStanceFilter)
	self:SendDefault(s_guid,className, "validStances", "List<int)>", s_Instance.validStances)
end

function Type:StanceSwitchSoundData (p_class, p_guid)
	local s_Instance = StanceSwitchSoundData(p_class) 
 	local className = "StanceSwitchSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "stanceSwitchSound", "CtrRef", s_Instance.stanceSwitchSound)
	self:SendDefault(s_guid,className, "validStances", "List<int)>", s_Instance.validStances)
end

function Type:StandardMoveWaypointData (p_class, p_guid)
	local s_Instance = StandardMoveWaypointData(p_class) 
 	local className = "StandardMoveWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "moveTask", "AILocoMoveTaskData", s_Instance.moveTask)
end

function Type:StartEntityData (p_class, p_guid)
	local s_Instance = StartEntityData(p_class) 
 	local className = "StartEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isDefault", "bool", s_Instance.isDefault)
	self:SendDefault(s_guid,className, "sortIndex", "float", s_Instance.sortIndex)
	self:SendDefault(s_guid,className, "startName", "string", s_Instance.startName)
end

function Type:StatCategoriesBaseTree (p_class, p_guid)
	local s_Instance = StatCategoriesBaseTree(p_class) 
 	local className = "StatCategoriesBaseTree"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "paramX", "List<CtrRef)>", s_Instance.paramX)
	self:SendDefault(s_guid,className, "paramY", "List<CtrRef)>", s_Instance.paramY)
	self:SendDefault(s_guid,className, "processAllLevelsInTree", "bool", s_Instance.processAllLevelsInTree)
	self:SendDefault(s_guid,className, "rootBaseCategories", "List<CtrRef)>", s_Instance.rootBaseCategories)
end

function Type:StatCategoriesTree (p_class, p_guid)
	local s_Instance = StatCategoriesTree(p_class) 
 	local className = "StatCategoriesTree"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "categories", "List<CtrRef)>", s_Instance.categories)
end

function Type:StatCategoryTreeCollection (p_class, p_guid)
	local s_Instance = StatCategoryTreeCollection(p_class) 
 	local className = "StatCategoryTreeCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "categoryTrees", "List<CtrRef)>", s_Instance.categoryTrees)
end

function Type:StateEventGateEntityData (p_class, p_guid)
	local s_Instance = StateEventGateEntityData(p_class) 
 	local className = "StateEventGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkedState", "EventGateState", s_Instance.checkedState)
end

function Type:StateNode (p_class, p_guid)
	local s_Instance = StateNode(p_class) 
 	local className = "StateNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hide", "CtrRef", s_Instance.hide)
	self:SendDefault(s_guid,className, "in", "CtrRef", s_Instance.inValue)
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "renderToTexture", "bool", s_Instance.renderToTexture)
	self:SendDefault(s_guid,className, "screen", "CtrRef", s_Instance.screen)
	self:SendDefault(s_guid,className, "show", "CtrRef", s_Instance.show)
end

function Type:StateRenderSettings (p_class, p_guid)
	local s_Instance = StateRenderSettings(p_class) 
 	local className = "StateRenderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ps3PixelShaderConstantsEnable", "bool", s_Instance.ps3PixelShaderConstantsEnable)
end

function Type:StatEventTriggerEntityData (p_class, p_guid)
	local s_Instance = StatEventTriggerEntityData(p_class) 
 	local className = "StatEventTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "miscParamX", "string", s_Instance.miscParamX)
	self:SendDefault(s_guid,className, "miscParamY", "string", s_Instance.miscParamY)
	self:SendDefault(s_guid,className, "sendToAll", "bool", s_Instance.sendToAll)
	self:SendDefault(s_guid,className, "statEvent", "fb.StatEvent)", s_Instance.statEvent)
end

function Type:StaticCameraData (p_class, p_guid)
	local s_Instance = StaticCameraData(p_class) 
 	local className = "StaticCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accumulateInput", "bool", s_Instance.accumulateInput)
	self:SendDefault(s_guid,className, "averageFilterFrames", "int", s_Instance.averageFilterFrames)
	self:SendDefault(s_guid,className, "downCurve", "List<Vec3)>", s_Instance.downCurve)
	self:SendDefault(s_guid,className, "downPitchAngle", "float", s_Instance.downPitchAngle)
	self:SendDefault(s_guid,className, "leftCurve", "List<Vec3)>", s_Instance.leftCurve)
	self:SendDefault(s_guid,className, "leftYawAngle", "float", s_Instance.leftYawAngle)
	self:SendDefault(s_guid,className, "loosePartPhysics", "List<CtrRef)>", s_Instance.loosePartPhysics)
	self:SendDefault(s_guid,className, "mirrorHorizontalCurves", "bool", s_Instance.mirrorHorizontalCurves)
	self:SendDefault(s_guid,className, "mirrorVerticalCurves", "bool", s_Instance.mirrorVerticalCurves)
	self:SendDefault(s_guid,className, "pitchInputAction", "EntryInputActionEnum", s_Instance.pitchInputAction)
	self:SendDefault(s_guid,className, "pitchSensitivityNonZoomed", "float", s_Instance.pitchSensitivityNonZoomed)
	self:SendDefault(s_guid,className, "pitchSensitivityZoomed", "float", s_Instance.pitchSensitivityZoomed)
	self:SendDefault(s_guid,className, "resetAccumulatedInputOnViewChange", "bool", s_Instance.resetAccumulatedInputOnViewChange)
	self:SendDefault(s_guid,className, "rightCurve", "List<Vec3)>", s_Instance.rightCurve)
	self:SendDefault(s_guid,className, "rightYawAngle", "float", s_Instance.rightYawAngle)
	self:SendDefault(s_guid,className, "upCurve", "List<Vec3)>", s_Instance.upCurve)
	self:SendDefault(s_guid,className, "upPitchAngle", "float", s_Instance.upPitchAngle)
	self:SendDefault(s_guid,className, "yawInputAction", "EntryInputActionEnum", s_Instance.yawInputAction)
	self:SendDefault(s_guid,className, "yawSensitivityNonZoomed", "float", s_Instance.yawSensitivityNonZoomed)
	self:SendDefault(s_guid,className, "yawSensitivityZoomed", "float", s_Instance.yawSensitivityZoomed)
end

function Type:StaticEnlightenData (p_class, p_guid)
	local s_Instance = StaticEnlightenData(p_class) 
 	local className = "StaticEnlightenData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "staticDirectionTexture", "CtrRef", s_Instance.staticDirectionTexture)
	self:SendDefault(s_guid,className, "staticIrradianceChromaTexture", "CtrRef", s_Instance.staticIrradianceChromaTexture)
	self:SendDefault(s_guid,className, "staticIrradianceLumaTexture", "CtrRef", s_Instance.staticIrradianceLumaTexture)
end

function Type:StaticEnlightenEntityData (p_class, p_guid)
	local s_Instance = StaticEnlightenEntityData(p_class) 
 	local className = "StaticEnlightenEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dynamicEnlightenData", "CtrRef", s_Instance.dynamicEnlightenData)
	self:SendDefault(s_guid,className, "enlightenData", "CtrRef", s_Instance.enlightenData)
end

function Type:StaticListItem (p_class, p_guid)
	local s_Instance = StaticListItem(p_class) 
 	local className = "StaticListItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "appendPlatformToSID", "bool", s_Instance.appendPlatformToSID)
	self:SendDefault(s_guid,className, "dynamicDisable", "UIDataSourceInfo", s_Instance.dynamicDisable)
	self:SendDefault(s_guid,className, "dynamicNewContent", "UIDataSourceInfo", s_Instance.dynamicNewContent)
	self:SendDefault(s_guid,className, "excludeInRetail", "bool", s_Instance.excludeInRetail)
	self:SendDefault(s_guid,className, "itemName", "string", s_Instance.itemName)
end

function Type:StaticModelEntityData (p_class, p_guid)
	local s_Instance = StaticModelEntityData(p_class) 
 	local className = "StaticModelEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatePhysics", "bool", s_Instance.animatePhysics)
	self:SendDefault(s_guid,className, "basePoseTransforms", "List<LinearTransform)>", s_Instance.basePoseTransforms)
	self:SendDefault(s_guid,className, "boneCount", "uint", s_Instance.boneCount)
	self:SendDefault(s_guid,className, "excludeFromNearbyObjectDestruction", "bool", s_Instance.excludeFromNearbyObjectDestruction)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "networkInfo", "StaticModelNetworkInfo", s_Instance.networkInfo)
	self:SendDefault(s_guid,className, "partLinks", "List<CtrRef)>", s_Instance.partLinks)
	self:SendDefault(s_guid,className, "physicsPartInfos", "List<PhysicsPartInfo)>", s_Instance.physicsPartInfos)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:StaticModelGroupEntityData (p_class, p_guid)
	local s_Instance = StaticModelGroupEntityData(p_class) 
 	local className = "StaticModelGroupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hackToSolveRealTimeTweakingIssue", "GUID", s_Instance.hackToSolveRealTimeTweakingIssue)
	self:SendDefault(s_guid,className, "memberDatas", "List<StaticModelGroupMemberData)>", s_Instance.memberDatas)
	self:SendDefault(s_guid,className, "networkIdCount", "uint", s_Instance.networkIdCount)
end

function Type:StaticModelGroupMemberData (p_class, p_guid)
	local s_Instance = StaticModelGroupMemberData(p_class) 
 	local className = "StaticModelGroupMemberData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healthStateEntityManagerId", "uint", s_Instance.healthStateEntityManagerId)
	self:SendDefault(s_guid,className, "instanceCastSunShadow", "List<bool)>", s_Instance.instanceCastSunShadow)
	self:SendDefault(s_guid,className, "instanceCount", "uint", s_Instance.instanceCount)
	self:SendDefault(s_guid,className, "instanceObjectVariation", "List<uint)>", s_Instance.instanceObjectVariation)
	self:SendDefault(s_guid,className, "instanceScale", "List<float)>", s_Instance.instanceScale)
	self:SendDefault(s_guid,className, "instanceTransforms", "List<LinearTransform)>", s_Instance.instanceTransforms)
	self:SendDefault(s_guid,className, "memberType", "CtrRef", s_Instance.memberType)
	self:SendDefault(s_guid,className, "meshEntityType", "CtrRef", s_Instance.meshEntityType)
	self:SendDefault(s_guid,className, "networkIdCountPerInstance", "uint", s_Instance.networkIdCountPerInstance)
	self:SendDefault(s_guid,className, "networkIdRange", "IndexRange", s_Instance.networkIdRange)
	self:SendDefault(s_guid,className, "physicsPartCountPerInstance", "uint", s_Instance.physicsPartCountPerInstance)
	self:SendDefault(s_guid,className, "physicsPartRange", "IndexRange", s_Instance.physicsPartRange)
end

function Type:StaticModelNetworkInfo (p_class, p_guid)
	local s_Instance = StaticModelNetworkInfo(p_class) 
 	local className = "StaticModelNetworkInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "childNetworkIdCount", "uint", s_Instance.childNetworkIdCount)
	self:SendDefault(s_guid,className, "childNetworkInfos", "List<ChildStaticModelNetworkInfo)>", s_Instance.childNetworkInfos)
	self:SendDefault(s_guid,className, "networkIdCount", "uint", s_Instance.networkIdCount)
	self:SendDefault(s_guid,className, "partNetworkIdRanges", "List<IndexRange)>", s_Instance.partNetworkIdRanges)
end

function Type:StaticUnlockList (p_class, p_guid)
	local s_Instance = StaticUnlockList(p_class) 
 	local className = "StaticUnlockList"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "unlockInfos", "List<BasicUnlockInfo)>", s_Instance.unlockInfos)
end

function Type:StatsCategoryBaseData (p_class, p_guid)
	local s_Instance = StatsCategoryBaseData(p_class) 
 	local className = "StatsCategoryBaseData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "baseSubCategories", "List<CtrRef)>", s_Instance.baseSubCategories)
	self:SendDefault(s_guid,className, "code", "string", s_Instance.code)
end

function Type:StatsCategoryData (p_class, p_guid)
	local s_Instance = StatsCategoryData(p_class) 
 	local className = "StatsCategoryData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "categories", "List<CtrRef)>", s_Instance.categories)
	self:SendDefault(s_guid,className, "members", "List<string)>", s_Instance.members)
end

function Type:StatsCategoryGuidData (p_class, p_guid)
	local s_Instance = StatsCategoryGuidData(p_class) 
 	local className = "StatsCategoryGuidData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "objectInstanceGuids", "List<GUID)>", s_Instance.objectInstanceGuids)
end

function Type:StatsCategoryPlayerRoleData (p_class, p_guid)
	local s_Instance = StatsCategoryPlayerRoleData(p_class) 
 	local className = "StatsCategoryPlayerRoleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "roles", "List<PlayerRole)>", s_Instance.roles)
	self:SendDefault(s_guid,className, "statsCategoryPlayerRoleData",  "readonly", s_Instance.statsCategoryPlayerRoleData)
	self:SendDefault(s_guid,className, "playerRole",  "uint", s_Instance.playerRole)
end

function Type:StatsCategoryScoreboardPositionData (p_class, p_guid)
	local s_Instance = StatsCategoryScoreboardPositionData(p_class) 
 	local className = "StatsCategoryScoreboardPositionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "positions", "List<ScoreboardPosition)>", s_Instance.positions)
	self:SendDefault(s_guid,className, "statsCategoryScoreboardPositionData",  "readonly", s_Instance.statsCategoryScoreboardPositionData)
	self:SendDefault(s_guid,className, "scoreboardPosition",  "uint", s_Instance.scoreboardPosition)
end

function Type:StatsCategoryVehicleData (p_class, p_guid)
	local s_Instance = StatsCategoryVehicleData(p_class) 
 	local className = "StatsCategoryVehicleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "firstVehicleId", "uint", s_Instance.firstVehicleId)
end

function Type:StatsCategoryVehicleStateTypeData (p_class, p_guid)
	local s_Instance = StatsCategoryVehicleStateTypeData(p_class) 
 	local className = "StatsCategoryVehicleStateTypeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "states", "List<VehicleStateType)>", s_Instance.states)
	self:SendDefault(s_guid,className, "statsCategoryVehicleStateTypeData",  "readonly", s_Instance.statsCategoryVehicleStateTypeData)
	self:SendDefault(s_guid,className, "vehicleStateType",  "uint", s_Instance.vehicleStateType)
end

function Type:StatsCategoryWeaponData (p_class, p_guid)
	local s_Instance = StatsCategoryWeaponData(p_class) 
 	local className = "StatsCategoryWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accessoryUnlockGates", "CtrRef", s_Instance.accessoryUnlockGates)
	self:SendDefault(s_guid,className, "soldierWeaponId", "uint", s_Instance.soldierWeaponId)
	self:SendDefault(s_guid,className, "unlocksInfo", "List<BasicUnlockInfo)>", s_Instance.unlocksInfo)
end

function Type:StatSpamSetting (p_class, p_guid)
	local s_Instance = StatSpamSetting(p_class) 
 	local className = "StatSpamSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "amountLimit", "uint", s_Instance.amountLimit)
	self:SendDefault(s_guid,className, "event", "StatEvent", s_Instance.event)
	self:SendDefault(s_guid,className, "playerToPlayer", "bool", s_Instance.playerToPlayer)
	self:SendDefault(s_guid,className, "timeLimit", "float", s_Instance.timeLimit)
end

function Type:StatSpamSettings (p_class, p_guid)
	local s_Instance = StatSpamSettings(p_class) 
 	local className = "StatSpamSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "spamList", "List<StatSpamSetting)>", s_Instance.spamList)
end

function Type:StatSurveyEvent (p_class, p_guid)
	local s_Instance = StatSurveyEvent(p_class) 
 	local className = "StatSurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
end

function Type:StopWatchEntityData (p_class, p_guid)
	local s_Instance = StopWatchEntityData(p_class) 
 	local className = "StopWatchEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "multiplier", "float", s_Instance.multiplier)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "triggerOnTime", "float", s_Instance.triggerOnTime)
	self:SendDefault(s_guid,className, "updatePass", "fb.UpdatePass)", s_Instance.updatePass)
end

function Type:StreamGridCell (p_class, p_guid)
	local s_Instance = StreamGridCell(p_class) 
 	local className = "StreamGridCell"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "referenceData", "CtrRef", s_Instance.referenceData)
	self:SendDefault(s_guid,className, "x", "int", s_Instance.x)
	self:SendDefault(s_guid,className, "z", "int", s_Instance.z)
end

function Type:StreamGridEntityData (p_class, p_guid)
	local s_Instance = StreamGridEntityData(p_class) 
 	local className = "StreamGridEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cells", "List<StreamGridCell)>", s_Instance.cells)
	self:SendDefault(s_guid,className, "cellSize", "float", s_Instance.cellSize)
	self:SendDefault(s_guid,className, "maxStreamInCountPerFrame", "int", s_Instance.maxStreamInCountPerFrame)
	self:SendDefault(s_guid,className, "maxStreamOutCountPerFrame", "int", s_Instance.maxStreamOutCountPerFrame)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
end

function Type:StreamGroupData (p_class, p_guid)
	local s_Instance = StreamGroupData(p_class) 
 	local className = "StreamGroupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "assets", "List<CtrRef)>", s_Instance.assets)
end

function Type:StreamingGateEntityData (p_class, p_guid)
	local s_Instance = StreamingGateEntityData(p_class) 
 	local className = "StreamingGateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "timeout", "float", s_Instance.timeout)
end

function Type:StreamPoolAsset (p_class, p_guid)
	local s_Instance = StreamPoolAsset(p_class) 
 	local className = "StreamPoolAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "streamBufferSizePs3", "uint", s_Instance.streamBufferSizePs3)
	self:SendDefault(s_guid,className, "streamBufferSizeWin32", "uint", s_Instance.streamBufferSizeWin32)
	self:SendDefault(s_guid,className, "streamBufferSizeXenon", "uint", s_Instance.streamBufferSizeXenon)
	self:SendDefault(s_guid,className, "streamCountPs3", "uint", s_Instance.streamCountPs3)
	self:SendDefault(s_guid,className, "streamCountWin32", "uint", s_Instance.streamCountWin32)
	self:SendDefault(s_guid,className, "streamCountXenon", "uint", s_Instance.streamCountXenon)
	self:SendDefault(s_guid,className, "streamPoolId", "uint", s_Instance.streamPoolId)
	self:SendDefault(s_guid,className, "streamReadBlockSizePs3", "uint", s_Instance.streamReadBlockSizePs3)
	self:SendDefault(s_guid,className, "streamReadBlockSizeWin32", "uint", s_Instance.streamReadBlockSizeWin32)
	self:SendDefault(s_guid,className, "streamReadBlockSizeXenon", "uint", s_Instance.streamReadBlockSizeXenon)
	self:SendDefault(s_guid,className, "streamStarveMode", "fb.StreamStarveMode)", s_Instance.streamStarveMode)
end

function Type:Strengths (p_class, p_guid)
	local s_Instance = Strengths(p_class) 
 	local className = "Strengths"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heavyArmour", "float", s_Instance.heavyArmour)
	self:SendDefault(s_guid,className, "helicopter", "float", s_Instance.helicopter)
	self:SendDefault(s_guid,className, "infantry", "float", s_Instance.infantry)
	self:SendDefault(s_guid,className, "lightArmour", "float", s_Instance.lightArmour)
end

function Type:StringOption (p_class, p_guid)
	local s_Instance = StringOption(p_class) 
 	local className = "StringOption"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:SubScreenData (p_class, p_guid)
	local s_Instance = SubScreenData(p_class) 
 	local className = "SubScreenData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "iconSize", "float", s_Instance.iconSize)
	self:SendDefault(s_guid,className, "projectionAngleX", "float", s_Instance.projectionAngleX)
	self:SendDefault(s_guid,className, "projectionAngleY", "float", s_Instance.projectionAngleY)
	self:SendDefault(s_guid,className, "projectionAngleZ", "float", s_Instance.projectionAngleZ)
	self:SendDefault(s_guid,className, "renderTargetApectRatio", "float", s_Instance.renderTargetApectRatio)
	self:SendDefault(s_guid,className, "renderTargetIndex", "int", s_Instance.renderTargetIndex)
	self:SendDefault(s_guid,className, "scaleIconSizeByDepthStrength", "float", s_Instance.scaleIconSizeByDepthStrength)
	self:SendDefault(s_guid,className, "screenPosition", "Vec3", s_Instance.screenPosition)
	self:SendDefault(s_guid,className, "screenSize", "float", s_Instance.screenSize)
	self:SendDefault(s_guid,className, "useRenderTarget", "bool", s_Instance.useRenderTarget)
end

function Type:SubSkeleton (p_class, p_guid)
	local s_Instance = SubSkeleton(p_class) 
 	local className = "SubSkeleton"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneMap", "List<int)>", s_Instance.boneMap)
	self:SendDefault(s_guid,className, "skeleton", "CtrRef", s_Instance.skeleton)
	self:SendDefault(s_guid,className, "transformMap", "List<LinearTransform)>", s_Instance.transformMap)
end

function Type:SubsystemTimingConfigData (p_class, p_guid)
	local s_Instance = SubsystemTimingConfigData(p_class) 
 	local className = "SubsystemTimingConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "behaviourExecution", "float", s_Instance.behaviourExecution)
	self:SendDefault(s_guid,className, "behaviourSelection", "float", s_Instance.behaviourSelection)
	self:SendDefault(s_guid,className, "evaluation", "float", s_Instance.evaluation)
	self:SendDefault(s_guid,className, "goalUpdates", "float", s_Instance.goalUpdates)
	self:SendDefault(s_guid,className, "intentUpdates", "float", s_Instance.intentUpdates)
	self:SendDefault(s_guid,className, "sensing", "float", s_Instance.sensing)
end

function Type:SubtitleDataNode (p_class, p_guid)
	local s_Instance = SubtitleDataNode(p_class) 
 	local className = "SubtitleDataNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "sID1", "string", s_Instance.sID1)
	self:SendDefault(s_guid,className, "sID2", "string", s_Instance.sID2)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:SubtitleDataTree (p_class, p_guid)
	local s_Instance = SubtitleDataTree(p_class) 
 	local className = "SubtitleDataTree"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "subtitles", "List<CtrRef)>", s_Instance.subtitles)
end

function Type:SubtitleMainDataNode (p_class, p_guid)
	local s_Instance = SubtitleMainDataNode(p_class) 
 	local className = "SubtitleMainDataNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "language", "LanguageFormat", s_Instance.language)
	self:SendDefault(s_guid,className, "subtitles", "List<CtrRef)>", s_Instance.subtitles)
end

function Type:SubWorldData (p_class, p_guid)
	local s_Instance = SubWorldData(p_class) 
 	local className = "SubWorldData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isPs3SubLevel", "bool", s_Instance.isPs3SubLevel)
	self:SendDefault(s_guid,className, "isWin32SubLevel", "bool", s_Instance.isWin32SubLevel)
	self:SendDefault(s_guid,className, "isXenonSubLevel", "bool", s_Instance.isXenonSubLevel)
	self:SendDefault(s_guid,className, "registryContainer", "CtrRef", s_Instance.registryContainer)
	self:SendDefault(s_guid,className, "rememberStateOnStreamOut", "bool", s_Instance.rememberStateOnStreamOut)
end

function Type:SubWorldInclusion (p_class, p_guid)
	local s_Instance = SubWorldInclusion(p_class) 
 	local className = "SubWorldInclusion"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criteria", "List<CtrRef)>", s_Instance.criteria)
end

function Type:SubWorldInclusionCriterion (p_class, p_guid)
	local s_Instance = SubWorldInclusionCriterion(p_class) 
 	local className = "SubWorldInclusionCriterion"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "options", "List<string)>", s_Instance.options)
end

function Type:SubWorldInclusionSetting (p_class, p_guid)
	local s_Instance = SubWorldInclusionSetting(p_class) 
 	local className = "SubWorldInclusionSetting"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criterion", "CtrRef", s_Instance.criterion)
	self:SendDefault(s_guid,className, "enabledOptions", "List<string)>", s_Instance.enabledOptions)
end

function Type:SubWorldInclusionSettings (p_class, p_guid)
	local s_Instance = SubWorldInclusionSettings(p_class) 
 	local className = "SubWorldInclusionSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "List<CtrRef)>", s_Instance.settings)
end

function Type:SubWorldReferenceObjectData (p_class, p_guid)
	local s_Instance = SubWorldReferenceObjectData(p_class) 
 	local className = "SubWorldReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoLoad", "bool", s_Instance.autoLoad)
	self:SendDefault(s_guid,className, "bundleName", "string", s_Instance.bundleName)
	self:SendDefault(s_guid,className, "inclusionSettings", "CtrRef", s_Instance.inclusionSettings)
	self:SendDefault(s_guid,className, "isPs3SubLevel", "bool", s_Instance.isPs3SubLevel)
	self:SendDefault(s_guid,className, "isWin32SubLevel", "bool", s_Instance.isWin32SubLevel)
	self:SendDefault(s_guid,className, "isXenonSubLevel", "bool", s_Instance.isXenonSubLevel)
end

function Type:SunFlareComponentData (p_class, p_guid)
	local s_Instance = SunFlareComponentData(p_class) 
 	local className = "SunFlareComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugDrawOccluder", "bool", s_Instance.debugDrawOccluder)
	self:SendDefault(s_guid,className, "element1AlphaOccluderCurve", "Vec4", s_Instance.element1AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element1AlphaScreenPosCurve", "Vec4", s_Instance.element1AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element1Enable", "bool", s_Instance.element1Enable)
	self:SendDefault(s_guid,className, "element1RayDistance", "float", s_Instance.element1RayDistance)
	self:SendDefault(s_guid,className, "element1Shader", "CtrRef", s_Instance.element1Shader)
	self:SendDefault(s_guid,className, "element1Size", "Vec2", s_Instance.element1Size)
	self:SendDefault(s_guid,className, "element1SizeOccluderCurve", "Vec4", s_Instance.element1SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element1SizeScreenPosCurve", "Vec4", s_Instance.element1SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element2AlphaOccluderCurve", "Vec4", s_Instance.element2AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element2AlphaScreenPosCurve", "Vec4", s_Instance.element2AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element2Enable", "bool", s_Instance.element2Enable)
	self:SendDefault(s_guid,className, "element2RayDistance", "float", s_Instance.element2RayDistance)
	self:SendDefault(s_guid,className, "element2Shader", "CtrRef", s_Instance.element2Shader)
	self:SendDefault(s_guid,className, "element2Size", "Vec2", s_Instance.element2Size)
	self:SendDefault(s_guid,className, "element2SizeOccluderCurve", "Vec4", s_Instance.element2SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element2SizeScreenPosCurve", "Vec4", s_Instance.element2SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element3AlphaOccluderCurve", "Vec4", s_Instance.element3AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element3AlphaScreenPosCurve", "Vec4", s_Instance.element3AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element3Enable", "bool", s_Instance.element3Enable)
	self:SendDefault(s_guid,className, "element3RayDistance", "float", s_Instance.element3RayDistance)
	self:SendDefault(s_guid,className, "element3Shader", "CtrRef", s_Instance.element3Shader)
	self:SendDefault(s_guid,className, "element3Size", "Vec2", s_Instance.element3Size)
	self:SendDefault(s_guid,className, "element3SizeOccluderCurve", "Vec4", s_Instance.element3SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element3SizeScreenPosCurve", "Vec4", s_Instance.element3SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element4AlphaOccluderCurve", "Vec4", s_Instance.element4AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element4AlphaScreenPosCurve", "Vec4", s_Instance.element4AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element4Enable", "bool", s_Instance.element4Enable)
	self:SendDefault(s_guid,className, "element4RayDistance", "float", s_Instance.element4RayDistance)
	self:SendDefault(s_guid,className, "element4Shader", "CtrRef", s_Instance.element4Shader)
	self:SendDefault(s_guid,className, "element4Size", "Vec2", s_Instance.element4Size)
	self:SendDefault(s_guid,className, "element4SizeOccluderCurve", "Vec4", s_Instance.element4SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element4SizeScreenPosCurve", "Vec4", s_Instance.element4SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element5AlphaOccluderCurve", "Vec4", s_Instance.element5AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element5AlphaScreenPosCurve", "Vec4", s_Instance.element5AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element5Enable", "bool", s_Instance.element5Enable)
	self:SendDefault(s_guid,className, "element5RayDistance", "float", s_Instance.element5RayDistance)
	self:SendDefault(s_guid,className, "element5Shader", "CtrRef", s_Instance.element5Shader)
	self:SendDefault(s_guid,className, "element5Size", "Vec2", s_Instance.element5Size)
	self:SendDefault(s_guid,className, "element5SizeOccluderCurve", "Vec4", s_Instance.element5SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element5SizeScreenPosCurve", "Vec4", s_Instance.element5SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "occluderSize", "float", s_Instance.occluderSize)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:SunFlareEffectState (p_class, p_guid)
	local s_Instance = SunFlareEffectState(p_class) 
 	local className = "SunFlareEffectState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugDrawOccluder", "bool", s_Instance.debugDrawOccluder)
	self:SendDefault(s_guid,className, "element1AlphaOccluderCurve", "Vec4", s_Instance.element1AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element1AlphaScreenPosCurve", "Vec4", s_Instance.element1AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element1Enable", "bool", s_Instance.element1Enable)
	self:SendDefault(s_guid,className, "element1RayDistance", "float", s_Instance.element1RayDistance)
	self:SendDefault(s_guid,className, "element1Shader", "CtrRef", s_Instance.element1Shader)
	self:SendDefault(s_guid,className, "element1Size", "Vec2", s_Instance.element1Size)
	self:SendDefault(s_guid,className, "element1SizeOccluderCurve", "Vec4", s_Instance.element1SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element1SizeScreenPosCurve", "Vec4", s_Instance.element1SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element2AlphaOccluderCurve", "Vec4", s_Instance.element2AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element2AlphaScreenPosCurve", "Vec4", s_Instance.element2AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element2Enable", "bool", s_Instance.element2Enable)
	self:SendDefault(s_guid,className, "element2RayDistance", "float", s_Instance.element2RayDistance)
	self:SendDefault(s_guid,className, "element2Shader", "CtrRef", s_Instance.element2Shader)
	self:SendDefault(s_guid,className, "element2Size", "Vec2", s_Instance.element2Size)
	self:SendDefault(s_guid,className, "element2SizeOccluderCurve", "Vec4", s_Instance.element2SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element2SizeScreenPosCurve", "Vec4", s_Instance.element2SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element3AlphaOccluderCurve", "Vec4", s_Instance.element3AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element3AlphaScreenPosCurve", "Vec4", s_Instance.element3AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element3Enable", "bool", s_Instance.element3Enable)
	self:SendDefault(s_guid,className, "element3RayDistance", "float", s_Instance.element3RayDistance)
	self:SendDefault(s_guid,className, "element3Shader", "CtrRef", s_Instance.element3Shader)
	self:SendDefault(s_guid,className, "element3Size", "Vec2", s_Instance.element3Size)
	self:SendDefault(s_guid,className, "element3SizeOccluderCurve", "Vec4", s_Instance.element3SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element3SizeScreenPosCurve", "Vec4", s_Instance.element3SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element4AlphaOccluderCurve", "Vec4", s_Instance.element4AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element4AlphaScreenPosCurve", "Vec4", s_Instance.element4AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element4Enable", "bool", s_Instance.element4Enable)
	self:SendDefault(s_guid,className, "element4RayDistance", "float", s_Instance.element4RayDistance)
	self:SendDefault(s_guid,className, "element4Shader", "CtrRef", s_Instance.element4Shader)
	self:SendDefault(s_guid,className, "element4Size", "Vec2", s_Instance.element4Size)
	self:SendDefault(s_guid,className, "element4SizeOccluderCurve", "Vec4", s_Instance.element4SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element4SizeScreenPosCurve", "Vec4", s_Instance.element4SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "element5AlphaOccluderCurve", "Vec4", s_Instance.element5AlphaOccluderCurve)
	self:SendDefault(s_guid,className, "element5AlphaScreenPosCurve", "Vec4", s_Instance.element5AlphaScreenPosCurve)
	self:SendDefault(s_guid,className, "element5Enable", "bool", s_Instance.element5Enable)
	self:SendDefault(s_guid,className, "element5RayDistance", "float", s_Instance.element5RayDistance)
	self:SendDefault(s_guid,className, "element5Shader", "CtrRef", s_Instance.element5Shader)
	self:SendDefault(s_guid,className, "element5Size", "Vec2", s_Instance.element5Size)
	self:SendDefault(s_guid,className, "element5SizeOccluderCurve", "Vec4", s_Instance.element5SizeOccluderCurve)
	self:SendDefault(s_guid,className, "element5SizeScreenPosCurve", "Vec4", s_Instance.element5SizeScreenPosCurve)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "occluderSize", "float", s_Instance.occluderSize)
end

function Type:SupplyData (p_class, p_guid)
	local s_Instance = SupplyData(p_class) 
 	local className = "SupplyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammo", "SupplyUnitSphereData", s_Instance.ammo)
	self:SendDefault(s_guid,className, "excludeSelf", "bool", s_Instance.excludeSelf)
	self:SendDefault(s_guid,className, "healing", "SupplyUnitSphereData", s_Instance.healing)
	self:SendDefault(s_guid,className, "supplySoldiers", "bool", s_Instance.supplySoldiers)
	self:SendDefault(s_guid,className, "supplyVehicles", "bool", s_Instance.supplyVehicles)
	self:SendDefault(s_guid,className, "teamSpecific", "bool", s_Instance.teamSpecific)
end

function Type:SupplySphereComponentData (p_class, p_guid)
	local s_Instance = SupplySphereComponentData(p_class) 
 	local className = "SupplySphereComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "supplyData", "fb.SupplyData)", s_Instance.supplyData)
end

function Type:SupplySphereEntityData (p_class, p_guid)
	local s_Instance = SupplySphereEntityData(p_class) 
 	local className = "SupplySphereEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "supplyData", "fb.SupplyData)", s_Instance.supplyData)
end

function Type:SupplySphereWeaponData (p_class, p_guid)
	local s_Instance = SupplySphereWeaponData(p_class) 
 	local className = "SupplySphereWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "supplyData", "fb.SupplyData)", s_Instance.supplyData)
end

function Type:SupplyUnitSphereData (p_class, p_guid)
	local s_Instance = SupplyUnitSphereData(p_class) 
 	local className = "SupplyUnitSphereData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "infiniteCapacity", "bool", s_Instance.infiniteCapacity)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "supplyIncSpeed", "float", s_Instance.supplyIncSpeed)
	self:SendDefault(s_guid,className, "supplyPointsCapacity", "float", s_Instance.supplyPointsCapacity)
	self:SendDefault(s_guid,className, "supplyPointsRefillSpeed", "float", s_Instance.supplyPointsRefillSpeed)
end

function Type:SupportedShootingBinding (p_class, p_guid)
	local s_Instance = SupportedShootingBinding(p_class) 
 	local className = "SupportedShootingBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatedCamera", "AntRef", s_Instance.animatedCamera)
	self:SendDefault(s_guid,className, "distToObject", "AntRef", s_Instance.distToObject)
	self:SendDefault(s_guid,className, "forwardVector", "AntRef", s_Instance.forwardVector)
	self:SendDefault(s_guid,className, "heightOfObject", "AntRef", s_Instance.heightOfObject)
	self:SendDefault(s_guid,className, "pitch", "AntRef", s_Instance.pitch)
	self:SendDefault(s_guid,className, "supported", "AntRef", s_Instance.supported)
	self:SendDefault(s_guid,className, "supportedPos", "AntRef", s_Instance.supportedPos)
	self:SendDefault(s_guid,className, "undeploying", "AntRef", s_Instance.undeploying)
	self:SendDefault(s_guid,className, "yaw", "AntRef", s_Instance.yaw)
end

function Type:SupportedShootingCommonData (p_class, p_guid)
	local s_Instance = SupportedShootingCommonData(p_class) 
 	local className = "SupportedShootingCommonData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "AimingConstraintsData", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "binding", "SupportedShootingBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "crouch", "SupportedShootingProximityChecking", s_Instance.crouch)
	self:SendDefault(s_guid,className, "enterSupportedShootingAction", "EntryInputActionEnum", s_Instance.enterSupportedShootingAction)
	self:SendDefault(s_guid,className, "stand", "SupportedShootingProximityChecking", s_Instance.stand)
end

function Type:SupportedShootingComponentData (p_class, p_guid)
	local s_Instance = SupportedShootingComponentData(p_class) 
 	local className = "SupportedShootingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "commonData", "CtrRef", s_Instance.commonData)
end

function Type:SupportedShootingProximityChecking (p_class, p_guid)
	local s_Instance = SupportedShootingProximityChecking(p_class) 
 	local className = "SupportedShootingProximityChecking"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rayAboveGunHeightOffset", "float", s_Instance.rayAboveGunHeightOffset)
	self:SendDefault(s_guid,className, "rayAboveLength", "float", s_Instance.rayAboveLength)
	self:SendDefault(s_guid,className, "rayBelowGunHeightOffset", "float", s_Instance.rayBelowGunHeightOffset)
	self:SendDefault(s_guid,className, "rayBelowLength", "float", s_Instance.rayBelowLength)
end

function Type:SuppressionReactionData (p_class, p_guid)
	local s_Instance = SuppressionReactionData(p_class) 
 	local className = "SuppressionReactionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suppressionHighThreshold", "float", s_Instance.suppressionHighThreshold)
	self:SendDefault(s_guid,className, "suppressionLowThreshold", "float", s_Instance.suppressionLowThreshold)
	self:SendDefault(s_guid,className, "suppressionUIThreshold", "float", s_Instance.suppressionUIThreshold)
end

function Type:SuppressionScoringHandlerData (p_class, p_guid)
	local s_Instance = SuppressionScoringHandlerData(p_class) 
 	local className = "SuppressionScoringHandlerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suppressionAmountLimit", "float", s_Instance.suppressionAmountLimit)
	self:SendDefault(s_guid,className, "timeSinceSuppressionLimit", "float", s_Instance.timeSinceSuppressionLimit)
end

function Type:SurfaceShaderInstanceData (p_class, p_guid)
	local s_Instance = SurfaceShaderInstanceData(p_class) 
 	local className = "SurfaceShaderInstanceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
end

function Type:SurfaceShaderInstanceDataStruct (p_class, p_guid)
	local s_Instance = SurfaceShaderInstanceDataStruct(p_class) 
 	local className = "SurfaceShaderInstanceDataStruct"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolParameters", "List<BoolShaderParameter)>", s_Instance.boolParameters)
	self:SendDefault(s_guid,className, "shader", "CtrRef", s_Instance.shader)
	self:SendDefault(s_guid,className, "textureParameters", "List<TextureShaderParameter)>", s_Instance.textureParameters)
	self:SendDefault(s_guid,className, "vectorArrayParameters", "List<VectorArrayShaderParameter)>", s_Instance.vectorArrayParameters)
	self:SendDefault(s_guid,className, "vectorParameters", "List<VectorShaderParameter)>", s_Instance.vectorParameters)
end

function Type:SurroundingGeometryEntityData (p_class, p_guid)
	local s_Instance = SurroundingGeometryEntityData(p_class) 
 	local className = "SurroundingGeometryEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowedVehicleList", "CtrRef", s_Instance.allowedVehicleList)
	self:SendDefault(s_guid,className, "combatArea", "CtrRef", s_Instance.combatArea)
	self:SendDefault(s_guid,className, "combatAreaIndex", "uint", s_Instance.combatAreaIndex)
end

function Type:SurveyEvent (p_class, p_guid)
	local s_Instance = SurveyEvent(p_class) 
 	local className = "SurveyEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "answerQuestion1", "int", s_Instance.answerQuestion1)
	self:SendDefault(s_guid,className, "answerQuestion2", "int", s_Instance.answerQuestion2)
	self:SendDefault(s_guid,className, "answerQuestion3", "int", s_Instance.answerQuestion3)
	self:SendDefault(s_guid,className, "answerQuestion4", "int", s_Instance.answerQuestion4)
	self:SendDefault(s_guid,className, "answerQuestion5", "int", s_Instance.answerQuestion5)
	self:SendDefault(s_guid,className, "freeTextField", "string", s_Instance.freeTextField)
	self:SendDefault(s_guid,className, "surveyMetricLink", "GUID", s_Instance.surveyMetricLink)
	self:SendDefault(s_guid,className, "surveyName", "string", s_Instance.surveyName)
end

function Type:SurveySuppressedEvent (p_class, p_guid)
	local s_Instance = SurveySuppressedEvent(p_class) 
 	local className = "SurveySuppressedEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suppressReason", "string", s_Instance.suppressReason)
end

function Type:SwimmingStateData (p_class, p_guid)
	local s_Instance = SwimmingStateData(p_class) 
 	local className = "SwimmingStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bodyUnderWater", "float", s_Instance.bodyUnderWater)
end

function Type:SwitcherEntry (p_class, p_guid)
	local s_Instance = SwitcherEntry(p_class) 
 	local className = "SwitcherEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "caseTrigger", "AudioGraphNodePort", s_Instance.caseTrigger)
	self:SendDefault(s_guid,className, "caseValue", "float", s_Instance.caseValue)
end

function Type:SwitcherNodeData (p_class, p_guid)
	local s_Instance = SwitcherNodeData(p_class) 
 	local className = "SwitcherNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultCaseValue", "float", s_Instance.defaultCaseValue)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "trigger", "AudioGraphNodePort", s_Instance.trigger)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
end

function Type:SwitchPropertyStringEntityData (p_class, p_guid)
	local s_Instance = SwitchPropertyStringEntityData(p_class) 
 	local className = "SwitchPropertyStringEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "stringProperties", "List<string)>", s_Instance.stringProperties)
end

function Type:SyncAnimationsEntityData (p_class, p_guid)
	local s_Instance = SyncAnimationsEntityData(p_class) 
 	local className = "SyncAnimationsEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "externalTime", "float", s_Instance.externalTime)
	self:SendDefault(s_guid,className, "nearEndEventTime", "float", s_Instance.nearEndEventTime)
	self:SendDefault(s_guid,className, "startServerPaused", "bool", s_Instance.startServerPaused)
end

function Type:SyncedBFSettings (p_class, p_guid)
	local s_Instance = SyncedBFSettings(p_class) 
 	local className = "SyncedBFSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allUnlocksUnlocked", "bool", s_Instance.allUnlocksUnlocked)
	self:SendDefault(s_guid,className, "gameModeCounterModifier", "float", s_Instance.gameModeCounterModifier)
	self:SendDefault(s_guid,className, "memoryDefragGlobal", "bool", s_Instance.memoryDefragGlobal)
	self:SendDefault(s_guid,className, "memoryDefragUI", "bool", s_Instance.memoryDefragUI)
	self:SendDefault(s_guid,className, "memoryGarbageCollectHavok", "bool", s_Instance.memoryGarbageCollectHavok)
	self:SendDefault(s_guid,className, "no3dSpotting", "bool", s_Instance.no3dSpotting)
	self:SendDefault(s_guid,className, "noHud", "bool", s_Instance.noHud)
	self:SendDefault(s_guid,className, "noMinimap", "bool", s_Instance.noMinimap)
	self:SendDefault(s_guid,className, "noMinimapSpotting", "bool", s_Instance.noMinimapSpotting)
	self:SendDefault(s_guid,className, "noNameTag", "bool", s_Instance.noNameTag)
	self:SendDefault(s_guid,className, "onlySquadLeaderSpawn", "bool", s_Instance.onlySquadLeaderSpawn)
	self:SendDefault(s_guid,className, "teamSwitchingAllowed", "bool", s_Instance.teamSwitchingAllowed)
	self:SendDefault(s_guid,className, "unlicensedUnlocksUnlocked", "bool", s_Instance.unlicensedUnlocksUnlocked)
end

function Type:SyncedBoolEntityData (p_class, p_guid)
	local s_Instance = SyncedBoolEntityData(p_class) 
 	local className = "SyncedBoolEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "bool", s_Instance.inValue)
end

function Type:SyncedFloatEntityData (p_class, p_guid)
	local s_Instance = SyncedFloatEntityData(p_class) 
 	local className = "SyncedFloatEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "float", s_Instance.inValue)
end

function Type:SyncedGameSettings (p_class, p_guid)
	local s_Instance = SyncedGameSettings(p_class) 
 	local className = "SyncedGameSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowClientSideDamageArbitration", "bool", s_Instance.allowClientSideDamageArbitration)
	self:SendDefault(s_guid,className, "bulletDamageModifier", "float", s_Instance.bulletDamageModifier)
	self:SendDefault(s_guid,className, "difficultyIndex", "uint", s_Instance.difficultyIndex)
	self:SendDefault(s_guid,className, "disableRegenerateHealth", "bool", s_Instance.disableRegenerateHealth)
	self:SendDefault(s_guid,className, "disableToggleEntryCamera", "bool", s_Instance.disableToggleEntryCamera)
	self:SendDefault(s_guid,className, "enableFriendlyFire", "bool", s_Instance.enableFriendlyFire)
	self:SendDefault(s_guid,className, "manDownTimeModifier", "float", s_Instance.manDownTimeModifier)
	self:SendDefault(s_guid,className, "maxAllowedLatency", "float", s_Instance.maxAllowedLatency)
end

function Type:SyncedIntEntityData (p_class, p_guid)
	local s_Instance = SyncedIntEntityData(p_class) 
 	local className = "SyncedIntEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "int", s_Instance.inValue)
end

function Type:SyncedSequenceEntityData (p_class, p_guid)
	local s_Instance = SyncedSequenceEntityData(p_class) 
 	local className = "SyncedSequenceEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "interpolateTime", "bool", s_Instance.interpolateTime)
end

function Type:SyncedTransformEntityData (p_class, p_guid)
	local s_Instance = SyncedTransformEntityData(p_class) 
 	local className = "SyncedTransformEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "LinearTransform", s_Instance.inValue)
	self:SendDefault(s_guid,className, "interpolate", "bool", s_Instance.interpolate)
end

function Type:SystemSettings (p_class, p_guid)
	local s_Instance = SystemSettings(p_class) 
 	local className = "SystemSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:TacticalObjectiveEntityData (p_class, p_guid)
	local s_Instance = TacticalObjectiveEntityData(p_class) 
 	local className = "TacticalObjectiveEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "briefingSidTeam1", "string", s_Instance.briefingSidTeam1)
	self:SendDefault(s_guid,className, "briefingSidTeam2", "string", s_Instance.briefingSidTeam2)
	self:SendDefault(s_guid,className, "missionSid", "string", s_Instance.missionSid)
	self:SendDefault(s_guid,className, "team1Timer", "float", s_Instance.team1Timer)
	self:SendDefault(s_guid,className, "team2Timer", "float", s_Instance.team2Timer)
end

function Type:TargetCameraData (p_class, p_guid)
	local s_Instance = TargetCameraData(p_class) 
 	local className = "TargetCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hud", "HudData", s_Instance.hud)
	self:SendDefault(s_guid,className, "uIParts", "List<CtrRef)>", s_Instance.uIParts)
end

function Type:TargetCameraEntityData (p_class, p_guid)
	local s_Instance = TargetCameraEntityData(p_class) 
 	local className = "TargetCameraEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "camera", "CtrRef", s_Instance.camera)
end

function Type:TargetEvaluationConstantData (p_class, p_guid)
	local s_Instance = TargetEvaluationConstantData(p_class) 
 	local className = "TargetEvaluationConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultHumanTargetPreference", "float", s_Instance.defaultHumanTargetPreference)
	self:SendDefault(s_guid,className, "maxBattleStrength", "float", s_Instance.maxBattleStrength)
	self:SendDefault(s_guid,className, "otherSquadAttackerFactorUsage", "float", s_Instance.otherSquadAttackerFactorUsage)
	self:SendDefault(s_guid,className, "targetFlipFactorUsage", "float", s_Instance.targetFlipFactorUsage)
end

function Type:TargetEvaluatorComponentData (p_class, p_guid)
	local s_Instance = TargetEvaluatorComponentData(p_class) 
 	local className = "TargetEvaluatorComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "updateInterval", "float", s_Instance.updateInterval)
end

function Type:TeamData (p_class, p_guid)
	local s_Instance = TeamData(p_class) 
 	local className = "TeamData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "faction", "FactionId", s_Instance.faction)
	self:SendDefault(s_guid,className, "soldier", "CtrRef", s_Instance.soldier)
	self:SendDefault(s_guid,className, "soldierCustomization", "List<CtrRef)>", s_Instance.soldierCustomization)
	self:SendDefault(s_guid,className, "vehicleCustomization", "List<CtrRef)>", s_Instance.vehicleCustomization)
end

function Type:TeamEntityData (p_class, p_guid)
	local s_Instance = TeamEntityData(p_class) 
 	local className = "TeamEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "TeamId", s_Instance.id)
	self:SendDefault(s_guid,className, "team", "CtrRef", s_Instance.team)
end

function Type:TeamFilterEntityData (p_class, p_guid)
	local s_Instance = TeamFilterEntityData(p_class) 
 	local className = "TeamFilterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "generateEventForEveryMatchingTeamMember", "bool", s_Instance.generateEventForEveryMatchingTeamMember)
	self:SendDefault(s_guid,className, "invertFilter", "bool", s_Instance.invertFilter)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "team", "TeamId", s_Instance.team)
end

function Type:TelemetryTriggerEntityData (p_class, p_guid)
	local s_Instance = TelemetryTriggerEntityData(p_class) 
 	local className = "TelemetryTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:TerrainEntityData (p_class, p_guid)
	local s_Instance = TerrainEntityData(p_class) 
 	local className = "TerrainEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "terrainAsset", "CtrRef", s_Instance.terrainAsset)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
	self:SendDefault(s_guid,className, "waterMaterial", "CtrRef", s_Instance.waterMaterial)
end

function Type:TerrainFillDecalData (p_class, p_guid)
	local s_Instance = TerrainFillDecalData(p_class) 
 	local className = "TerrainFillDecalData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shader2d", "CtrRef", s_Instance.shader2d)
	self:SendDefault(s_guid,className, "shader3dZOnly", "CtrRef", s_Instance.shader3dZOnly)
end

function Type:TerrainLayerProceduralMask (p_class, p_guid)
	local s_Instance = TerrainLayerProceduralMask(p_class) 
 	local className = "TerrainLayerProceduralMask"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altitudeMin", "float", s_Instance.altitudeMin)
end

function Type:TerrainQuadDecalAtlasTile (p_class, p_guid)
	local s_Instance = TerrainQuadDecalAtlasTile(p_class) 
 	local className = "TerrainQuadDecalAtlasTile"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flipX", "bool", s_Instance.flipX)
	self:SendDefault(s_guid,className, "flipY", "bool", s_Instance.flipY)
	self:SendDefault(s_guid,className, "tileCountX", "uint", s_Instance.tileCountX)
	self:SendDefault(s_guid,className, "tileCountY", "uint", s_Instance.tileCountY)
	self:SendDefault(s_guid,className, "tileIndexX", "uint", s_Instance.tileIndexX)
	self:SendDefault(s_guid,className, "tileIndexY", "uint", s_Instance.tileIndexY)
end

function Type:TerrainQuadDecalAtlasTileTemplateData (p_class, p_guid)
	local s_Instance = TerrainQuadDecalAtlasTileTemplateData(p_class) 
 	local className = "TerrainQuadDecalAtlasTileTemplateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasTile", "TerrainQuadDecalAtlasTile", s_Instance.atlasTile)
end

function Type:TerrainQuadDecalData (p_class, p_guid)
	local s_Instance = TerrainQuadDecalData(p_class) 
 	local className = "TerrainQuadDecalData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "atlasTile", "TerrainQuadDecalAtlasTile", s_Instance.atlasTile)
	self:SendDefault(s_guid,className, "atlasTileTemplate", "CtrRef", s_Instance.atlasTileTemplate)
	self:SendDefault(s_guid,className, "shader2d", "CtrRef", s_Instance.shader2d)
	self:SendDefault(s_guid,className, "shader3dZOnly", "CtrRef", s_Instance.shader3dZOnly)
	self:SendDefault(s_guid,className, "userMasks", "Vec4", s_Instance.userMasks)
end

function Type:TerrainSettings (p_class, p_guid)
	local s_Instance = TerrainSettings(p_class) 
 	local className = "TerrainSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heightQueryCacheSize", "uint", s_Instance.heightQueryCacheSize)
	self:SendDefault(s_guid,className, "intersectingModifiersMax", "uint", s_Instance.intersectingModifiersMax)
	self:SendDefault(s_guid,className, "modifierDepthFactor", "float", s_Instance.modifierDepthFactor)
	self:SendDefault(s_guid,className, "modifiersCapacity", "uint", s_Instance.modifiersCapacity)
	self:SendDefault(s_guid,className, "modifiersEnable", "bool", s_Instance.modifiersEnable)
	self:SendDefault(s_guid,className, "modifierSlopeMax", "float", s_Instance.modifierSlopeMax)
end

function Type:TerrainStreamingSettings (p_class, p_guid)
	local s_Instance = TerrainStreamingSettings(p_class) 
 	local className = "TerrainStreamingSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeFreeStreamingDataLoadJobCount", "uint", s_Instance.activeFreeStreamingDataLoadJobCount)
	self:SendDefault(s_guid,className, "additionalBlurriness", "uint", s_Instance.additionalBlurriness)
	self:SendDefault(s_guid,className, "colorAdditionalBlurriness", "uint", s_Instance.colorAdditionalBlurriness)
	self:SendDefault(s_guid,className, "colorAtlasSampleCountXFactor", "uint", s_Instance.colorAtlasSampleCountXFactor)
	self:SendDefault(s_guid,className, "colorAtlasSampleCountYFactor", "uint", s_Instance.colorAtlasSampleCountYFactor)
	self:SendDefault(s_guid,className, "dataLoadJobCount", "uint", s_Instance.dataLoadJobCount)
	self:SendDefault(s_guid,className, "heightfieldAtlasSampleCountXFactor", "uint", s_Instance.heightfieldAtlasSampleCountXFactor)
	self:SendDefault(s_guid,className, "heightfieldAtlasSampleCountYFactor", "uint", s_Instance.heightfieldAtlasSampleCountYFactor)
	self:SendDefault(s_guid,className, "invisibleDetailReductionFactor", "float", s_Instance.invisibleDetailReductionFactor)
	self:SendDefault(s_guid,className, "keepPoolFullEnable", "bool", s_Instance.keepPoolFullEnable)
	self:SendDefault(s_guid,className, "loadOccluderDataEnable", "bool", s_Instance.loadOccluderDataEnable)
	self:SendDefault(s_guid,className, "maskAdditionalBlurriness", "uint", s_Instance.maskAdditionalBlurriness)
	self:SendDefault(s_guid,className, "maskAtlasSampleCountXFactor", "uint", s_Instance.maskAtlasSampleCountXFactor)
	self:SendDefault(s_guid,className, "maskAtlasSampleCountYFactor", "uint", s_Instance.maskAtlasSampleCountYFactor)
	self:SendDefault(s_guid,className, "occludedDetailReductionFactor", "float", s_Instance.occludedDetailReductionFactor)
end

function Type:TestCaseEntityData (p_class, p_guid)
	local s_Instance = TestCaseEntityData(p_class) 
 	local className = "TestCaseEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "stable", "bool", s_Instance.stable)
	self:SendDefault(s_guid,className, "testCaseName", "string", s_Instance.testCaseName)
	self:SendDefault(s_guid,className, "testGroup", "string", s_Instance.testGroup)
	self:SendDefault(s_guid,className, "timeOut", "float", s_Instance.timeOut)
end

function Type:TestPointEntityData (p_class, p_guid)
	local s_Instance = TestPointEntityData(p_class) 
 	local className = "TestPointEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outputName", "string", s_Instance.outputName)
end

function Type:TextUnlockPartData (p_class, p_guid)
	local s_Instance = TextUnlockPartData(p_class) 
 	local className = "TextUnlockPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "meshBlueprint", "CtrRef", s_Instance.meshBlueprint)
	self:SendDefault(s_guid,className, "shaderNodeName", "string", s_Instance.shaderNodeName)
end

function Type:TextureAssetUnlockPartData (p_class, p_guid)
	local s_Instance = TextureAssetUnlockPartData(p_class) 
 	local className = "TextureAssetUnlockPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
end

function Type:TextureCompressSettings (p_class, p_guid)
	local s_Instance = TextureCompressSettings(p_class) 
 	local className = "TextureCompressSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debugDrawAlphaOverlayScale", "float", s_Instance.debugDrawAlphaOverlayScale)
	self:SendDefault(s_guid,className, "debugDrawEnable", "bool", s_Instance.debugDrawEnable)
	self:SendDefault(s_guid,className, "textureCompressJobPoolSize", "uint", s_Instance.textureCompressJobPoolSize)
	self:SendDefault(s_guid,className, "viewMode", "TextureCompressQualityMode", s_Instance.viewMode)
end

function Type:TextureReference (p_class, p_guid)
	local s_Instance = TextureReference(p_class) 
 	local className = "TextureReference"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
end

function Type:TextureSettings (p_class, p_guid)
	local s_Instance = TextureSettings(p_class) 
 	local className = "TextureSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "loadingEnabled", "bool", s_Instance.loadingEnabled)
	self:SendDefault(s_guid,className, "renderTexturesEnabled", "bool", s_Instance.renderTexturesEnabled)
	self:SendDefault(s_guid,className, "skipMipmapCount", "uint", s_Instance.skipMipmapCount)
end

function Type:TextureShaderParameter (p_class, p_guid)
	local s_Instance = TextureShaderParameter(p_class) 
 	local className = "TextureShaderParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:TextureSliceUnlockPartData (p_class, p_guid)
	local s_Instance = TextureSliceUnlockPartData(p_class) 
 	local className = "TextureSliceUnlockPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sliceIndex", "int", s_Instance.sliceIndex)
end

function Type:TextureStreamingSettings (p_class, p_guid)
	local s_Instance = TextureStreamingSettings(p_class) 
 	local className = "TextureStreamingSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asyncCreatesEnable", "bool", s_Instance.asyncCreatesEnable)
	self:SendDefault(s_guid,className, "chunkLoadEnable", "bool", s_Instance.chunkLoadEnable)
	self:SendDefault(s_guid,className, "defragEnable", "bool", s_Instance.defragEnable)
	self:SendDefault(s_guid,className, "defragFrameTransferLimit", "uint", s_Instance.defragFrameTransferLimit)
	self:SendDefault(s_guid,className, "defragTransfersEnable", "bool", s_Instance.defragTransfersEnable)
	self:SendDefault(s_guid,className, "drawLoadingListEnable", "bool", s_Instance.drawLoadingListEnable)
	self:SendDefault(s_guid,className, "drawPriorityListEnable", "bool", s_Instance.drawPriorityListEnable)
	self:SendDefault(s_guid,className, "drawStatsEnable", "bool", s_Instance.drawStatsEnable)
	self:SendDefault(s_guid,className, "drawTextureFormatStatsEnable", "bool", s_Instance.drawTextureFormatStatsEnable)
	self:SendDefault(s_guid,className, "drawTextureGroupStatsEnable", "bool", s_Instance.drawTextureGroupStatsEnable)
	self:SendDefault(s_guid,className, "dumpLoadedList", "bool", s_Instance.dumpLoadedList)
	self:SendDefault(s_guid,className, "dxImmutableUsageEnable", "bool", s_Instance.dxImmutableUsageEnable)
	self:SendDefault(s_guid,className, "dynamicLoadingEnable", "bool", s_Instance.dynamicLoadingEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "fadeMipmapsEnable", "bool", s_Instance.fadeMipmapsEnable)
	self:SendDefault(s_guid,className, "fadeMipmapTime", "float", s_Instance.fadeMipmapTime)
	self:SendDefault(s_guid,className, "forceMipmap", "int", s_Instance.forceMipmap)
	self:SendDefault(s_guid,className, "forceWantedEnable", "bool", s_Instance.forceWantedEnable)
	self:SendDefault(s_guid,className, "instantUnloadingEnable", "bool", s_Instance.instantUnloadingEnable)
	self:SendDefault(s_guid,className, "listViewPageIndex", "uint", s_Instance.listViewPageIndex)
	self:SendDefault(s_guid,className, "loadMipmapsEnable", "bool", s_Instance.loadMipmapsEnable)
	self:SendDefault(s_guid,className, "maxFrameTextureCreateCount", "uint", s_Instance.maxFrameTextureCreateCount)
	self:SendDefault(s_guid,className, "maxFrameTextureCreateSize", "uint", s_Instance.maxFrameTextureCreateSize)
	self:SendDefault(s_guid,className, "maxMipmapCount", "uint", s_Instance.maxMipmapCount)
	self:SendDefault(s_guid,className, "maxPendingLoadCount", "uint", s_Instance.maxPendingLoadCount)
	self:SendDefault(s_guid,className, "maxTextureSizeKb", "uint", s_Instance.maxTextureSizeKb)
	self:SendDefault(s_guid,className, "minMipmapCount", "uint", s_Instance.minMipmapCount)
	self:SendDefault(s_guid,className, "minTextureSize", "uint", s_Instance.minTextureSize)
	self:SendDefault(s_guid,className, "mipmapBias", "float", s_Instance.mipmapBias)
	self:SendDefault(s_guid,className, "mipmapsEnable", "bool", s_Instance.mipmapsEnable)
	self:SendDefault(s_guid,className, "onDemandPoolSize", "uint", s_Instance.onDemandPoolSize)
	self:SendDefault(s_guid,className, "onlyWantedInPool", "bool", s_Instance.onlyWantedInPool)
	self:SendDefault(s_guid,className, "overridePoolSize", "bool", s_Instance.overridePoolSize)
	self:SendDefault(s_guid,className, "poolEnable", "bool", s_Instance.poolEnable)
	self:SendDefault(s_guid,className, "poolHeadroomSize", "uint", s_Instance.poolHeadroomSize)
	self:SendDefault(s_guid,className, "poolSize", "uint", s_Instance.poolSize)
	self:SendDefault(s_guid,className, "priorityThreshold", "float", s_Instance.priorityThreshold)
	self:SendDefault(s_guid,className, "textureUpdateEnable", "bool", s_Instance.textureUpdateEnable)
	self:SendDefault(s_guid,className, "updateEnable", "bool", s_Instance.updateEnable)
	self:SendDefault(s_guid,className, "uploadMipmapsEnable", "bool", s_Instance.uploadMipmapsEnable)
	self:SendDefault(s_guid,className, "useConditionalStreaming", "bool", s_Instance.useConditionalStreaming)
	self:SendDefault(s_guid,className, "xenonFinalPoolSizeAdjustment", "uint", s_Instance.xenonFinalPoolSizeAdjustment)
	self:SendDefault(s_guid,className, "xenonRetailPoolSizeAdjustment", "uint", s_Instance.xenonRetailPoolSizeAdjustment)
end

function Type:TextureUnlockPartData (p_class, p_guid)
	local s_Instance = TextureUnlockPartData(p_class) 
 	local className = "TextureUnlockPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "textureReference", "CtrRef", s_Instance.textureReference)
end

function Type:TicketCounterEntityData (p_class, p_guid)
	local s_Instance = TicketCounterEntityData(p_class) 
 	local className = "TicketCounterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decreaseTickets", "TicketDecreaseType", s_Instance.decreaseTickets)
	self:SendDefault(s_guid,className, "haltTicketLossOnEqualPointCount", "bool", s_Instance.haltTicketLossOnEqualPointCount)
	self:SendDefault(s_guid,className, "initialTicketCount", "int", s_Instance.initialTicketCount)
	self:SendDefault(s_guid,className, "resetCapturePointsOnReset", "bool", s_Instance.resetCapturePointsOnReset)
	self:SendDefault(s_guid,className, "setBestSquadSpawner", "bool", s_Instance.setBestSquadSpawner)
	self:SendDefault(s_guid,className, "spawnAlwaysAllowed", "bool", s_Instance.spawnAlwaysAllowed)
	self:SendDefault(s_guid,className, "teamId", "fb.TeamId)", s_Instance.teamId)
	self:SendDefault(s_guid,className, "ticketLossPerMin", "int", s_Instance.ticketLossPerMin)
	self:SendDefault(s_guid,className, "ticketLossStart", "int", s_Instance.ticketLossStart)
	self:SendDefault(s_guid,className, "ticketLossWhenLostAll", "int", s_Instance.ticketLossWhenLostAll)
	self:SendDefault(s_guid,className, "ticketLossWhenLostAllControlsPoint", "int", s_Instance.ticketLossWhenLostAllControlsPoint)
	self:SendDefault(s_guid,className, "ticketPercentages", "List<TicketCountPercentage)>", s_Instance.ticketPercentages)
end

function Type:TicketCountPercentage (p_class, p_guid)
	local s_Instance = TicketCountPercentage(p_class) 
 	local className = "TicketCountPercentage"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxPercentOfTicketsLeft", "int", s_Instance.maxPercentOfTicketsLeft)
	self:SendDefault(s_guid,className, "ticketLossPerMin", "int", s_Instance.ticketLossPerMin)
end

function Type:TickEvent (p_class, p_guid)
	local s_Instance = TickEvent(p_class) 
 	local className = "TickEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
	self:SendDefault(s_guid,className, "time", "float", s_Instance.time)
end

function Type:TimerNodeData (p_class, p_guid)
	local s_Instance = TimerNodeData(p_class) 
 	local className = "TimerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mode", "TimerMode", s_Instance.mode)
	self:SendDefault(s_guid,className, "period", "AudioGraphNodePort", s_Instance.period)
	self:SendDefault(s_guid,className, "progress", "AudioGraphNodePort", s_Instance.progress)
	self:SendDefault(s_guid,className, "start", "AudioGraphNodePort", s_Instance.start)
	self:SendDefault(s_guid,className, "stop", "AudioGraphNodePort", s_Instance.stop)
	self:SendDefault(s_guid,className, "tick", "AudioGraphNodePort", s_Instance.tick)
end

function Type:TimingConstantData (p_class, p_guid)
	local s_Instance = TimingConstantData(p_class) 
 	local className = "TimingConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "priorityClasses", "List<CtrRef)>", s_Instance.priorityClasses)
	self:SendDefault(s_guid,className, "subsystemTimeParts", "SubsystemTimingConfigData", s_Instance.subsystemTimeParts)
	self:SendDefault(s_guid,className, "updateTimePerFrame", "float", s_Instance.updateTimePerFrame)
end

function Type:TimingViewCategories (p_class, p_guid)
	local s_Instance = TimingViewCategories(p_class) 
 	local className = "TimingViewCategories"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "timingCategories", "List<CtrRef)>", s_Instance.timingCategories)
end

function Type:TimingViewCategory (p_class, p_guid)
	local s_Instance = TimingViewCategory(p_class) 
 	local className = "TimingViewCategory"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "categoryName", "string", s_Instance.categoryName)
	self:SendDefault(s_guid,className, "cpuBudget", "float", s_Instance.cpuBudget)
	self:SendDefault(s_guid,className, "gpuBudget", "float", s_Instance.gpuBudget)
	self:SendDefault(s_guid,className, "keywords", "List<string)>", s_Instance.keywords)
	self:SendDefault(s_guid,className, "spuBudget", "float", s_Instance.spuBudget)
end

function Type:TimingViewSettings (p_class, p_guid)
	local s_Instance = TimingViewSettings(p_class) 
 	local className = "TimingViewSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autolockNameFilter", "string", s_Instance.autolockNameFilter)
	self:SendDefault(s_guid,className, "autolockThreshold", "float", s_Instance.autolockThreshold)
	self:SendDefault(s_guid,className, "averageFrameCount", "int", s_Instance.averageFrameCount)
	self:SendDefault(s_guid,className, "barHeight", "uint", s_Instance.barHeight)
	self:SendDefault(s_guid,className, "barMinTime", "double", s_Instance.barMinTime)
	self:SendDefault(s_guid,className, "barPad", "uint", s_Instance.barPad)
	self:SendDefault(s_guid,className, "barSyncProcessor", "int", s_Instance.barSyncProcessor)
	self:SendDefault(s_guid,className, "drawBarsEnable", "bool", s_Instance.drawBarsEnable)
	self:SendDefault(s_guid,className, "drawCpuLegendEnable", "bool", s_Instance.drawCpuLegendEnable)
	self:SendDefault(s_guid,className, "drawEnable", "bool", s_Instance.drawEnable)
	self:SendDefault(s_guid,className, "drawGpuLegendEnable", "bool", s_Instance.drawGpuLegendEnable)
	self:SendDefault(s_guid,className, "drawLegendEnable", "bool", s_Instance.drawLegendEnable)
	self:SendDefault(s_guid,className, "drawOnlySummaryEnable", "bool", s_Instance.drawOnlySummaryEnable)
	self:SendDefault(s_guid,className, "drawSpuLegendEnable", "bool", s_Instance.drawSpuLegendEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "filterEnable", "bool", s_Instance.filterEnable)
	self:SendDefault(s_guid,className, "filterEventName", "string", s_Instance.filterEventName)
	self:SendDefault(s_guid,className, "frameCount", "uint", s_Instance.frameCount)
	self:SendDefault(s_guid,className, "frameDelayCount", "uint", s_Instance.frameDelayCount)
	self:SendDefault(s_guid,className, "gpuBarFrameOffset", "int", s_Instance.gpuBarFrameOffset)
	self:SendDefault(s_guid,className, "legendColumnWidth", "int", s_Instance.legendColumnWidth)
	self:SendDefault(s_guid,className, "legendDisplayMode", "int", s_Instance.legendDisplayMode)
	self:SendDefault(s_guid,className, "legendScreenOffset", "int", s_Instance.legendScreenOffset)
	self:SendDefault(s_guid,className, "maxCpuLegendColumnCount", "int", s_Instance.maxCpuLegendColumnCount)
	self:SendDefault(s_guid,className, "maxFrameEventCount", "uint", s_Instance.maxFrameEventCount)
	self:SendDefault(s_guid,className, "maxGpuLegendColumnCount", "int", s_Instance.maxGpuLegendColumnCount)
	self:SendDefault(s_guid,className, "maxSpuLegendColumnCount", "int", s_Instance.maxSpuLegendColumnCount)
	self:SendDefault(s_guid,className, "snoopEnable", "bool", s_Instance.snoopEnable)
	self:SendDefault(s_guid,className, "snoopEventName", "string", s_Instance.snoopEventName)
	self:SendDefault(s_guid,className, "snoopOnly", "bool", s_Instance.snoopOnly)
	self:SendDefault(s_guid,className, "sortByTime", "bool", s_Instance.sortByTime)
	self:SendDefault(s_guid,className, "timeOffset", "float", s_Instance.timeOffset)
	self:SendDefault(s_guid,className, "timeRange", "float", s_Instance.timeRange)
end

function Type:TonemapComponentData (p_class, p_guid)
	local s_Instance = TonemapComponentData(p_class) 
 	local className = "TonemapComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bloomScale", "Vec3", s_Instance.bloomScale)
	self:SendDefault(s_guid,className, "chromostereopsisEnable", "bool", s_Instance.chromostereopsisEnable)
	self:SendDefault(s_guid,className, "chromostereopsisOffset", "float", s_Instance.chromostereopsisOffset)
	self:SendDefault(s_guid,className, "chromostereopsisScale", "float", s_Instance.chromostereopsisScale)
	self:SendDefault(s_guid,className, "exposureAdjustTime", "float", s_Instance.exposureAdjustTime)
	self:SendDefault(s_guid,className, "maxExposure", "float", s_Instance.maxExposure)
	self:SendDefault(s_guid,className, "middleGray", "float", s_Instance.middleGray)
	self:SendDefault(s_guid,className, "minExposure", "float", s_Instance.minExposure)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "tonemapMethod", "fb.TonemapMethod)", s_Instance.tonemapMethod)
end

function Type:ToolData (p_class, p_guid)
	local s_Instance = ToolData(p_class) 
 	local className = "ToolData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isAlwaysActive", "bool", s_Instance.isAlwaysActive)
end

function Type:ToWorldSpaceTransformEntityData (p_class, p_guid)
	local s_Instance = ToWorldSpaceTransformEntityData(p_class) 
 	local className = "ToWorldSpaceTransformEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "LinearTransform", s_Instance.in1)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TrackComponentData (p_class, p_guid)
	local s_Instance = TrackComponentData(p_class) 
 	local className = "TrackComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "scrollFactor", "float", s_Instance.scrollFactor)
end

function Type:TrackPlayerEntityData (p_class, p_guid)
	local s_Instance = TrackPlayerEntityData(p_class) 
 	local className = "TrackPlayerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkPlayerAlive", "bool", s_Instance.checkPlayerAlive)
	self:SendDefault(s_guid,className, "enforceSharedCombatArea", "bool", s_Instance.enforceSharedCombatArea)
	self:SendDefault(s_guid,className, "randomizeTracker", "bool", s_Instance.randomizeTracker)
	self:SendDefault(s_guid,className, "reseted", "bool", s_Instance.reseted)
	self:SendDefault(s_guid,className, "snapHeightOffsetY", "float", s_Instance.snapHeightOffsetY)
	self:SendDefault(s_guid,className, "snapHeightOnKilledDestroyed", "bool", s_Instance.snapHeightOnKilledDestroyed)
	self:SendDefault(s_guid,className, "trackMultiplePlayers", "bool", s_Instance.trackMultiplePlayers)
	self:SendDefault(s_guid,className, "updateFlagComponent", "bool", s_Instance.updateFlagComponent)
end

function Type:TrackWheelComponentData (p_class, p_guid)
	local s_Instance = TrackWheelComponentData(p_class) 
 	local className = "TrackWheelComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boneName", "string", s_Instance.boneName)
end

function Type:TrajectoryEntityData (p_class, p_guid)
	local s_Instance = TrajectoryEntityData(p_class) 
 	local className = "TrajectoryEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outTransform", "LinearTransform", s_Instance.outTransform)
end

function Type:TransformBlendEntityData (p_class, p_guid)
	local s_Instance = TransformBlendEntityData(p_class) 
 	local className = "TransformBlendEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blendValue", "float", s_Instance.blendValue)
	self:SendDefault(s_guid,className, "blendValue2", "float", s_Instance.blendValue2)
	self:SendDefault(s_guid,className, "in1", "LinearTransform", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "LinearTransform", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TransformEntityData (p_class, p_guid)
	local s_Instance = TransformEntityData(p_class) 
 	local className = "TransformEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultTransform", "LinearTransform", s_Instance.defaultTransform)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TransformHubEntityData (p_class, p_guid)
	local s_Instance = TransformHubEntityData(p_class) 
 	local className = "TransformHubEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "LinearTransform", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "LinearTransform", s_Instance.in2)
	self:SendDefault(s_guid,className, "in3", "LinearTransform", s_Instance.in3)
	self:SendDefault(s_guid,className, "in4", "LinearTransform", s_Instance.in4)
	self:SendDefault(s_guid,className, "in5", "LinearTransform", s_Instance.in5)
	self:SendDefault(s_guid,className, "in6", "LinearTransform", s_Instance.in6)
	self:SendDefault(s_guid,className, "in7", "LinearTransform", s_Instance.in7)
	self:SendDefault(s_guid,className, "in8", "LinearTransform", s_Instance.in8)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TransformModifierEntityData (p_class, p_guid)
	local s_Instance = TransformModifierEntityData(p_class) 
 	local className = "TransformModifierEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forward", "ModifierAxis", s_Instance.forward)
	self:SendDefault(s_guid,className, "in", "LinearTransform", s_Instance.inValue)
	self:SendDefault(s_guid,className, "invertForward", "bool", s_Instance.invertForward)
	self:SendDefault(s_guid,className, "invertLeft", "bool", s_Instance.invertLeft)
	self:SendDefault(s_guid,className, "invertUp", "bool", s_Instance.invertUp)
	self:SendDefault(s_guid,className, "left", "ModifierAxis", s_Instance.left)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "up", "ModifierAxis", s_Instance.up)
end

function Type:TransformMultiplierEntityData (p_class, p_guid)
	local s_Instance = TransformMultiplierEntityData(p_class) 
 	local className = "TransformMultiplierEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "LinearTransform", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "LinearTransform", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TransformPartPropertyTrackData (p_class, p_guid)
	local s_Instance = TransformPartPropertyTrackData(p_class) 
 	local className = "TransformPartPropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isStatic", "bool", s_Instance.isStatic)
	self:SendDefault(s_guid,className, "keyCount", "uint", s_Instance.keyCount)
	self:SendDefault(s_guid,className, "keyStartIndex", "uint", s_Instance.keyStartIndex)
	self:SendDefault(s_guid,className, "postInfinity", "CurveInfinityType", s_Instance.postInfinity)
	self:SendDefault(s_guid,className, "preInfinity", "CurveInfinityType", s_Instance.preInfinity)
	self:SendDefault(s_guid,className, "resourceName", "string", s_Instance.resourceName)
	self:SendDefault(s_guid,className, "transformPart", "fb.TransformPart)", s_Instance.transformPart)
	self:SendDefault(s_guid,className, "weighted", "bool", s_Instance.weighted)
end

function Type:TransformPropertyTrackData (p_class, p_guid)
	local s_Instance = TransformPropertyTrackData(p_class) 
 	local className = "TransformPropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<LinearTransform)>", s_Instance.values)
end

function Type:TransformSelectorEntityData (p_class, p_guid)
	local s_Instance = TransformSelectorEntityData(p_class) 
 	local className = "TransformSelectorEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "LinearTransform", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "LinearTransform", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "selection", "bool", s_Instance.selection)
end

function Type:TransformSnapToGroundEntityData (p_class, p_guid)
	local s_Instance = TransformSnapToGroundEntityData(p_class) 
 	local className = "TransformSnapToGroundEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alignWithGroundNormal", "bool", s_Instance.alignWithGroundNormal)
	self:SendDefault(s_guid,className, "distanceToGround", "float", s_Instance.distanceToGround)
	self:SendDefault(s_guid,className, "in", "LinearTransform", s_Instance.inValue)
	self:SendDefault(s_guid,className, "rayCastLength", "float", s_Instance.rayCastLength)
	self:SendDefault(s_guid,className, "rayCastUpOffset", "float", s_Instance.rayCastUpOffset)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:TransformSplitterEntityData (p_class, p_guid)
	local s_Instance = TransformSplitterEntityData(p_class) 
 	local className = "TransformSplitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:TreeNodeBase (p_class, p_guid)
	local s_Instance = TreeNodeBase(p_class) 
 	local className = "TreeNodeBase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nodeName", "string", s_Instance.nodeName)
end

function Type:TriggerEntityData (p_class, p_guid)
	local s_Instance = TriggerEntityData(p_class) 
 	local className = "TriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delay", "float", s_Instance.delay)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
end

function Type:TurbulanceData (p_class, p_guid)
	local s_Instance = TurbulanceData(p_class) 
 	local className = "TurbulanceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "intensity", "float", s_Instance.intensity)
end

function Type:TurnEffectData (p_class, p_guid)
	local s_Instance = TurnEffectData(p_class) 
 	local className = "TurnEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "beginTime", "float", s_Instance.beginTime)
	self:SendDefault(s_guid,className, "endTime", "float", s_Instance.endTime)
	self:SendDefault(s_guid,className, "holdTime", "float", s_Instance.holdTime)
	self:SendDefault(s_guid,className, "maxPitchAngle", "float", s_Instance.maxPitchAngle)
	self:SendDefault(s_guid,className, "maxRollAngle", "float", s_Instance.maxRollAngle)
	self:SendDefault(s_guid,className, "safeTime", "float", s_Instance.safeTime)
	self:SendDefault(s_guid,className, "velocityThreshhold", "float", s_Instance.velocityThreshhold)
	self:SendDefault(s_guid,className, "yawVelocityThreshhold", "float", s_Instance.yawVelocityThreshhold)
end

function Type:TurretControlConstantData (p_class, p_guid)
	local s_Instance = TurretControlConstantData(p_class) 
 	local className = "TurretControlConstantData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fastLookSpeed", "float", s_Instance.fastLookSpeed)
	self:SendDefault(s_guid,className, "normalLookSpeed", "float", s_Instance.normalLookSpeed)
	self:SendDefault(s_guid,className, "searchLookSpeed", "float", s_Instance.searchLookSpeed)
	self:SendDefault(s_guid,className, "slowLookSpeed", "float", s_Instance.slowLookSpeed)
end

function Type:TurretData (p_class, p_guid)
	local s_Instance = TurretData(p_class) 
 	local className = "TurretData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingConstraints", "CtrRef", s_Instance.aimingConstraints)
	self:SendDefault(s_guid,className, "fakeShootSpaceMaxDistance", "float", s_Instance.fakeShootSpaceMaxDistance)
	self:SendDefault(s_guid,className, "fakeShootSpaceMinDistance", "float", s_Instance.fakeShootSpaceMinDistance)
	self:SendDefault(s_guid,className, "pitchP", "float", s_Instance.pitchP)
	self:SendDefault(s_guid,className, "yawP", "float", s_Instance.yawP)
end

function Type:TurretRotationInfo (p_class, p_guid)
	local s_Instance = TurretRotationInfo(p_class) 
 	local className = "TurretRotationInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "channel", "RotationChannel", s_Instance.channel)
	self:SendDefault(s_guid,className, "invertRotation", "bool", s_Instance.invertRotation)
	self:SendDefault(s_guid,className, "maxRotation", "float", s_Instance.maxRotation)
	self:SendDefault(s_guid,className, "minRotation", "float", s_Instance.minRotation)
	self:SendDefault(s_guid,className, "normalizeRotation", "bool", s_Instance.normalizeRotation)
	self:SendDefault(s_guid,className, "phaseOffset", "float", s_Instance.phaseOffset)
	self:SendDefault(s_guid,className, "rotationAxis", "fb.RotationAxis)", s_Instance.rotationAxis)
end

function Type:UavCameraData (p_class, p_guid)
	local s_Instance = UavCameraData(p_class) 
 	local className = "UavCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "centerPoint", "UavCameraPointData", s_Instance.centerPoint)
	self:SendDefault(s_guid,className, "focusPoint", "UavCameraPointData", s_Instance.focusPoint)
	self:SendDefault(s_guid,className, "fov", "float", s_Instance.fov)
	self:SendDefault(s_guid,className, "rotationSpeed", "float", s_Instance.rotationSpeed)
	self:SendDefault(s_guid,className, "rotationSpeedCurve", "List<CameraSineCurveData)>", s_Instance.rotationSpeedCurve)
	self:SendDefault(s_guid,className, "upWeightDistance", "float", s_Instance.upWeightDistance)
	self:SendDefault(s_guid,className, "viewAngle", "float", s_Instance.viewAngle)
	self:SendDefault(s_guid,className, "viewAngleCurve", "List<CameraSineCurveData)>", s_Instance.viewAngleCurve)
	self:SendDefault(s_guid,className, "viewDistance", "float", s_Instance.viewDistance)
	self:SendDefault(s_guid,className, "viewDistanceCurve", "List<CameraSineCurveData)>", s_Instance.viewDistanceCurve)
	self:SendDefault(s_guid,className, "zoomDelay", "float", s_Instance.zoomDelay)
	self:SendDefault(s_guid,className, "zoomFov", "float", s_Instance.zoomFov)
	self:SendDefault(s_guid,className, "zoomTransitionTime", "float", s_Instance.zoomTransitionTime)
end

function Type:UavCameraPointData (p_class, p_guid)
	local s_Instance = UavCameraPointData(p_class) 
 	local className = "UavCameraPointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "accelerationTime", "float", s_Instance.accelerationTime)
	self:SendDefault(s_guid,className, "maxTime", "float", s_Instance.maxTime)
	self:SendDefault(s_guid,className, "minTime", "float", s_Instance.minTime)
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
end

function Type:UI3dIconCompData (p_class, p_guid)
	local s_Instance = UI3dIconCompData(p_class) 
 	local className = "UI3dIconCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "circularSnap", "bool", s_Instance.circularSnap)
	self:SendDefault(s_guid,className, "drawDistance", "float", s_Instance.drawDistance)
	self:SendDefault(s_guid,className, "fadeDistance", "float", s_Instance.fadeDistance)
	self:SendDefault(s_guid,className, "fadeEndDistance", "float", s_Instance.fadeEndDistance)
	self:SendDefault(s_guid,className, "horisontalOffset", "float", s_Instance.horisontalOffset)
	self:SendDefault(s_guid,className, "iconSize", "float", s_Instance.iconSize)
	self:SendDefault(s_guid,className, "maxCloseFade", "float", s_Instance.maxCloseFade)
	self:SendDefault(s_guid,className, "maxFarFade", "float", s_Instance.maxFarFade)
	self:SendDefault(s_guid,className, "maxLookAtThreshold", "float", s_Instance.maxLookAtThreshold)
	self:SendDefault(s_guid,className, "maxScaleMod", "float", s_Instance.maxScaleMod)
	self:SendDefault(s_guid,className, "maxTagUpdatesPerFrame", "int", s_Instance.maxTagUpdatesPerFrame)
	self:SendDefault(s_guid,className, "maxXRotation", "float", s_Instance.maxXRotation)
	self:SendDefault(s_guid,className, "maxYRotation", "float", s_Instance.maxYRotation)
	self:SendDefault(s_guid,className, "minimumDrawDistance", "float", s_Instance.minimumDrawDistance)
	self:SendDefault(s_guid,className, "minimumFadeDistance", "float", s_Instance.minimumFadeDistance)
	self:SendDefault(s_guid,className, "minLookAtThreshold", "float", s_Instance.minLookAtThreshold)
	self:SendDefault(s_guid,className, "minLookAtThresholdDistance", "float", s_Instance.minLookAtThresholdDistance)
	self:SendDefault(s_guid,className, "onlyShowSnapped", "bool", s_Instance.onlyShowSnapped)
	self:SendDefault(s_guid,className, "pixelOffset", "Vec2", s_Instance.pixelOffset)
	self:SendDefault(s_guid,className, "scaleDistance", "float", s_Instance.scaleDistance)
	self:SendDefault(s_guid,className, "showEngineerArmorThreshold", "float", s_Instance.showEngineerArmorThreshold)
	self:SendDefault(s_guid,className, "showLabelRange", "float", s_Instance.showLabelRange)
	self:SendDefault(s_guid,className, "showMedicHealthThreshold", "float", s_Instance.showMedicHealthThreshold)
	self:SendDefault(s_guid,className, "showSupportAmmoThreshold", "float", s_Instance.showSupportAmmoThreshold)
	self:SendDefault(s_guid,className, "shrinkSnapAnimationTime", "float", s_Instance.shrinkSnapAnimationTime)
	self:SendDefault(s_guid,className, "snapCenterYOffset", "float", s_Instance.snapCenterYOffset)
	self:SendDefault(s_guid,className, "snapIcons", "bool", s_Instance.snapIcons)
	self:SendDefault(s_guid,className, "snapSafeZone", "float", s_Instance.snapSafeZone)
	self:SendDefault(s_guid,className, "teamRadioDistance", "float", s_Instance.teamRadioDistance)
	self:SendDefault(s_guid,className, "trackerHudRadiusX", "float", s_Instance.trackerHudRadiusX)
	self:SendDefault(s_guid,className, "trackerHudRadiusY", "float", s_Instance.trackerHudRadiusY)
	self:SendDefault(s_guid,className, "verticalOffset", "float", s_Instance.verticalOffset)
	self:SendDefault(s_guid,className, "verticalOffsetMaxOffset", "float", s_Instance.verticalOffsetMaxOffset)
	self:SendDefault(s_guid,className, "verticalOffsetScaleFactor", "float", s_Instance.verticalOffsetScaleFactor)
end

function Type:UIActionData (p_class, p_guid)
	local s_Instance = UIActionData(p_class) 
 	local className = "UIActionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionKeys", "List<string)>", s_Instance.actionKeys)
end

function Type:UIAnimatedTextureAsset (p_class, p_guid)
	local s_Instance = UIAnimatedTextureAsset(p_class) 
 	local className = "UIAnimatedTextureAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frameRate", "float", s_Instance.frameRate)
	self:SendDefault(s_guid,className, "textureAtlas", "CtrRef", s_Instance.textureAtlas)
	self:SendDefault(s_guid,className, "textureInfos", "List<UITextureAtlasInfo)>", s_Instance.textureInfos)
end

function Type:UIAudioEventAsset (p_class, p_guid)
	local s_Instance = UIAudioEventAsset(p_class) 
 	local className = "UIAudioEventAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "audioEventMappings", "List<UIAudioEventMapping)>", s_Instance.audioEventMappings)
end

function Type:UIAudioEventMapping (p_class, p_guid)
	local s_Instance = UIAudioEventMapping(p_class) 
 	local className = "UIAudioEventMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventName", "string", s_Instance.eventName)
	self:SendDefault(s_guid,className, "soundAsset", "CtrRef", s_Instance.soundAsset)
end

function Type:UIAwardDescription (p_class, p_guid)
	local s_Instance = UIAwardDescription(p_class) 
 	local className = "UIAwardDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ignoreBuild", "bool", s_Instance.ignoreBuild)
end

function Type:UIAwardsScreenCompData (p_class, p_guid)
	local s_Instance = UIAwardsScreenCompData(p_class) 
 	local className = "UIAwardsScreenCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "trackableAwardCol", "List<CtrRef)>", s_Instance.trackableAwardCol)
	self:SendDefault(s_guid,className, "trackableAwardRow", "List<CtrRef)>", s_Instance.trackableAwardRow)
end

function Type:UIBarDataBinding (p_class, p_guid)
	local s_Instance = UIBarDataBinding(p_class) 
 	local className = "UIBarDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "UIDataSourceInfo", s_Instance.color)
	self:SendDefault(s_guid,className, "refresh", "bool", s_Instance.refresh)
	self:SendDefault(s_guid,className, "value", "UIDataSourceInfo", s_Instance.value)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
end

function Type:UIBundleAssetState (p_class, p_guid)
	local s_Instance = UIBundleAssetState(p_class) 
 	local className = "UIBundleAssetState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "resourceBundleName", "string", s_Instance.resourceBundleName)
	self:SendDefault(s_guid,className, "stateName", "string", s_Instance.stateName)
	self:SendDefault(s_guid,className, "uIState", "fb.UIState)", s_Instance.uIState)
end

function Type:UIBundlesAsset (p_class, p_guid)
	local s_Instance = UIBundlesAsset(p_class) 
 	local className = "UIBundlesAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "uIBundleAssetStateList", "List<UIBundleAssetState)>", s_Instance.uIBundleAssetStateList)
end

function Type:UIButton (p_class, p_guid)
	local s_Instance = UIButton(p_class) 
 	local className = "UIButton"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buttonId", "string", s_Instance.buttonId)
	self:SendDefault(s_guid,className, "buttonLabel", "string", s_Instance.buttonLabel)
	self:SendDefault(s_guid,className, "isPremium", "bool", s_Instance.isPremium)
end

function Type:UIButtonDataBinding (p_class, p_guid)
	local s_Instance = UIButtonDataBinding(p_class) 
 	local className = "UIButtonDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buttonsDatasource", "UIDataSourceInfo", s_Instance.buttonsDatasource)
	self:SendDefault(s_guid,className, "defaultButtonSet", "UIButtonSet", s_Instance.defaultButtonSet)
	self:SendDefault(s_guid,className, "inputOnRelease", "bool", s_Instance.inputOnRelease)
	self:SendDefault(s_guid,className, "invertVisible", "bool", s_Instance.invertVisible)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:UIButtonSet (p_class, p_guid)
	local s_Instance = UIButtonSet(p_class) 
 	local className = "UIButtonSet"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buttons", "List<UIButton)>", s_Instance.buttons)
end

function Type:UIChatCompData (p_class, p_guid)
	local s_Instance = UIChatCompData(p_class) 
 	local className = "UIChatCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
end

function Type:UIColor (p_class, p_guid)
	local s_Instance = UIColor(p_class) 
 	local className = "UIColor"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "Vec4", s_Instance.color)
	self:SendDefault(s_guid,className, "colorType", "UIColorType", s_Instance.colorType)
end

function Type:UIColorTemplate (p_class, p_guid)
	local s_Instance = UIColorTemplate(p_class) 
 	local className = "UIColorTemplate"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "active", "bool", s_Instance.active)
	self:SendDefault(s_guid,className, "colors", "List<CtrRef)>", s_Instance.colors)
end

function Type:UICombatAreaAsset (p_class, p_guid)
	local s_Instance = UICombatAreaAsset(p_class) 
 	local className = "UICombatAreaAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "prefix", "string", s_Instance.prefix)
end

function Type:UICombatAreaCompData (p_class, p_guid)
	local s_Instance = UICombatAreaCompData(p_class) 
 	local className = "UICombatAreaCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "outOfAreaSidPrefix", "string", s_Instance.outOfAreaSidPrefix)
end

function Type:UICombatAreaEntityData (p_class, p_guid)
	local s_Instance = UICombatAreaEntityData(p_class) 
 	local className = "UICombatAreaEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
end

function Type:UICompassDataBinding (p_class, p_guid)
	local s_Instance = UICompassDataBinding(p_class) 
 	local className = "UICompassDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heading", "UIDataSourceInfo", s_Instance.heading)
	self:SendDefault(s_guid,className, "objectives", "UIDataSourceInfo", s_Instance.objectives)
	self:SendDefault(s_guid,className, "radarSweepDegree", "UIDataSourceInfo", s_Instance.radarSweepDegree)
	self:SendDefault(s_guid,className, "showAirRadar", "UIDataSourceInfo", s_Instance.showAirRadar)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
end

function Type:UIComponentData (p_class, p_guid)
	local s_Instance = UIComponentData(p_class) 
 	local className = "UIComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataSources", "List<string)>", s_Instance.dataSources)
	self:SendDefault(s_guid,className, "shortName", "string", s_Instance.shortName)
	self:SendDefault(s_guid,className, "updatesPerSecond", "int", s_Instance.updatesPerSecond)
	self:SendDefault(s_guid,className, "updateType", "UIUpdateType", s_Instance.updateType)
end

function Type:UICoopLevelDescription (p_class, p_guid)
	local s_Instance = UICoopLevelDescription(p_class) 
 	local className = "UICoopLevelDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "debriefing", "string", s_Instance.debriefing)
	self:SendDefault(s_guid,className, "devTime", "int", s_Instance.devTime)
	self:SendDefault(s_guid,className, "unlockedByLevels", "List<string)>", s_Instance.unlockedByLevels)
end

function Type:UICreditsAsset (p_class, p_guid)
	local s_Instance = UICreditsAsset(p_class) 
 	local className = "UICreditsAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pages", "List<UICreditsPage)>", s_Instance.pages)
end

function Type:UICreditsLine (p_class, p_guid)
	local s_Instance = UICreditsLine(p_class) 
 	local className = "UICreditsLine"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "text", "string", s_Instance.text)
	self:SendDefault(s_guid,className, "textType", "UICreditsTextType", s_Instance.textType)
end

function Type:UICreditsPage (p_class, p_guid)
	local s_Instance = UICreditsPage(p_class) 
 	local className = "UICreditsPage"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "header1", "string", s_Instance.header1)
	self:SendDefault(s_guid,className, "header2", "string", s_Instance.header2)
	self:SendDefault(s_guid,className, "lines", "List<UICreditsLine)>", s_Instance.lines)
end

function Type:UICrosshairDataBinding (p_class, p_guid)
	local s_Instance = UICrosshairDataBinding(p_class) 
 	local className = "UICrosshairDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dispersion", "UIDataSourceInfo", s_Instance.dispersion)
	self:SendDefault(s_guid,className, "dispersionBaseOffset", "float", s_Instance.dispersionBaseOffset)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
	self:SendDefault(s_guid,className, "zoomed", "UIDataSourceInfo", s_Instance.zoomed)
end

function Type:UICustomizationCompData (p_class, p_guid)
	local s_Instance = UICustomizationCompData(p_class) 
 	local className = "UICustomizationCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "networkThrottleTimer", "float", s_Instance.networkThrottleTimer)
	self:SendDefault(s_guid,className, "soldierOffset", "Vec3", s_Instance.soldierOffset)
	self:SendDefault(s_guid,className, "soldierRotation", "Vec3", s_Instance.soldierRotation)
	self:SendDefault(s_guid,className, "vehicleRotation", "Vec3", s_Instance.vehicleRotation)
end

function Type:UIDamageIndicatorCompData (p_class, p_guid)
	local s_Instance = UIDamageIndicatorCompData(p_class) 
 	local className = "UIDamageIndicatorCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxUpdateTime", "float", s_Instance.maxUpdateTime)
end

function Type:UIDataSourceInfo (p_class, p_guid)
	local s_Instance = UIDataSourceInfo(p_class) 
 	local className = "UIDataSourceInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataCategory", "CtrRef", s_Instance.dataCategory)
	self:SendDefault(s_guid,className, "dataKey", "int", s_Instance.dataKey)
	self:SendDefault(s_guid,className, "dataName", "string", s_Instance.dataName)
	self:SendDefault(s_guid,className, "updateOnInitialize", "bool", s_Instance.updateOnInitialize)
	self:SendDefault(s_guid,className, "useDirectAccess", "bool", s_Instance.useDirectAccess)
end

function Type:UIDetailedServerInfoCompData (p_class, p_guid)
	local s_Instance = UIDetailedServerInfoCompData(p_class) 
 	local className = "UIDetailedServerInfoCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "List<ServerInfoSetting)>", s_Instance.settings)
end

function Type:UIDistanceFieldAsset (p_class, p_guid)
	local s_Instance = UIDistanceFieldAsset(p_class) 
 	local className = "UIDistanceFieldAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceFieldTexture", "CtrRef", s_Instance.distanceFieldTexture)
end

function Type:UIDogTagDescription (p_class, p_guid)
	local s_Instance = UIDogTagDescription(p_class) 
 	local className = "UIDogTagDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ignoreBuild", "bool", s_Instance.ignoreBuild)
end

function Type:UIDynamicDataBinding (p_class, p_guid)
	local s_Instance = UIDynamicDataBinding(p_class) 
 	local className = "UIDynamicDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bindings", "List<UIDataSourceInfo)>", s_Instance.bindings)
	self:SendDefault(s_guid,className, "refresh", "bool", s_Instance.refresh)
end

function Type:UIEndOfRoundEntityData (p_class, p_guid)
	local s_Instance = UIEndOfRoundEntityData(p_class) 
 	local className = "UIEndOfRoundEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eorTime", "float", s_Instance.eorTime)
	self:SendDefault(s_guid,className, "preEorTime", "float", s_Instance.preEorTime)
end

function Type:UIEventAsset (p_class, p_guid)
	local s_Instance = UIEventAsset(p_class) 
 	local className = "UIEventAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "eventList", "List<string)>", s_Instance.eventList)
end

function Type:UIFontAsset (p_class, p_guid)
	local s_Instance = UIFontAsset(p_class) 
 	local className = "UIFontAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "completeJapanese", "bool", s_Instance.completeJapanese)
	self:SendDefault(s_guid,className, "completeKorean", "bool", s_Instance.completeKorean)
	self:SendDefault(s_guid,className, "completeTraditionalChinese", "bool", s_Instance.completeTraditionalChinese)
	self:SendDefault(s_guid,className, "numericsOnly", "bool", s_Instance.numericsOnly)
	self:SendDefault(s_guid,className, "scaleformFontName", "List<string)>", s_Instance.scaleformFontName)
	self:SendDefault(s_guid,className, "sourceFile", "string", s_Instance.sourceFile)
	self:SendDefault(s_guid,className, "textDatabase", "CtrRef", s_Instance.textDatabase)
end

function Type:UIFontCollection (p_class, p_guid)
	local s_Instance = UIFontCollection(p_class) 
 	local className = "UIFontCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bundleKind", "ResourceBundleKind", s_Instance.bundleKind)
	self:SendDefault(s_guid,className, "fonts", "List<CtrRef)>", s_Instance.fonts)
	self:SendDefault(s_guid,className, "language", "LanguageFormat", s_Instance.language)
	self:SendDefault(s_guid,className, "textDatabase", "CtrRef", s_Instance.textDatabase)
end

function Type:UIFontMapping (p_class, p_guid)
	local s_Instance = UIFontMapping(p_class) 
 	local className = "UIFontMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fontLongName", "string", s_Instance.fontLongName)
	self:SendDefault(s_guid,className, "scaleformFontName", "List<string)>", s_Instance.scaleformFontName)
end

function Type:UIFontMappingCollection (p_class, p_guid)
	local s_Instance = UIFontMappingCollection(p_class) 
 	local className = "UIFontMappingCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fonts", "List<UIFontMapping)>", s_Instance.fonts)
	self:SendDefault(s_guid,className, "textDatabase", "List<CtrRef)>", s_Instance.textDatabase)
end

function Type:UIGameModeDescription (p_class, p_guid)
	local s_Instance = UIGameModeDescription(p_class) 
 	local className = "UIGameModeDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "abbreviation", "string", s_Instance.abbreviation)
	self:SendDefault(s_guid,className, "battlelogId", "int", s_Instance.battlelogId)
	self:SendDefault(s_guid,className, "desc", "string", s_Instance.desc)
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "variations", "List<GameModeVariation)>", s_Instance.variations)
end

function Type:UIGenericItemDescription (p_class, p_guid)
	local s_Instance = UIGenericItemDescription(p_class) 
 	local className = "UIGenericItemDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "imagePath", "string", s_Instance.imagePath)
end

function Type:UIGeoLatitude (p_class, p_guid)
	local s_Instance = UIGeoLatitude(p_class) 
 	local className = "UIGeoLatitude"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "degrees", "int", s_Instance.degrees)
	self:SendDefault(s_guid,className, "minuites", "int", s_Instance.minuites)
	self:SendDefault(s_guid,className, "seconds", "int", s_Instance.seconds)
end

function Type:UIGeoLongitude (p_class, p_guid)
	local s_Instance = UIGeoLongitude(p_class) 
 	local className = "UIGeoLongitude"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "degrees", "int", s_Instance.degrees)
	self:SendDefault(s_guid,className, "minuites", "int", s_Instance.minuites)
	self:SendDefault(s_guid,className, "seconds", "int", s_Instance.seconds)
end

function Type:UIGPSPosition (p_class, p_guid)
	local s_Instance = UIGPSPosition(p_class) 
 	local className = "UIGPSPosition"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "latitude", "double", s_Instance.latitude)
	self:SendDefault(s_guid,className, "longitude", "double", s_Instance.longitude)
	self:SendDefault(s_guid,className, "seaLevelOffset", "double", s_Instance.seaLevelOffset)
end

function Type:UIGraphAsset (p_class, p_guid)
	local s_Instance = UIGraphAsset(p_class) 
 	local className = "UIGraphAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "audioEventMappings", "CtrRef", s_Instance.audioEventMappings)
	self:SendDefault(s_guid,className, "bundleAssetName", "string", s_Instance.bundleAssetName)
	self:SendDefault(s_guid,className, "connections", "List<CtrRef)>", s_Instance.connections)
	self:SendDefault(s_guid,className, "eventList", "List<CtrRef)>", s_Instance.eventList)
	self:SendDefault(s_guid,className, "globalNode", "CtrRef", s_Instance.globalNode)
	self:SendDefault(s_guid,className, "isPs3UIGraphAsset", "bool", s_Instance.isPs3UIGraphAsset)
	self:SendDefault(s_guid,className, "isWin32UIGraphAsset", "bool", s_Instance.isWin32UIGraphAsset)
	self:SendDefault(s_guid,className, "isXenonUIGraphAsset", "bool", s_Instance.isXenonUIGraphAsset)
	self:SendDefault(s_guid,className, "modal", "bool", s_Instance.modal)
	self:SendDefault(s_guid,className, "nodes", "List<CtrRef)>", s_Instance.nodes)
	self:SendDefault(s_guid,className, "protectScreens", "bool", s_Instance.protectScreens)
end

function Type:UIGraphEntityData (p_class, p_guid)
	local s_Instance = UIGraphEntityData(p_class) 
 	local className = "UIGraphEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "List<EventSpec)>", s_Instance.events)
	self:SendDefault(s_guid,className, "graphAsset", "CtrRef", s_Instance.graphAsset)
	self:SendDefault(s_guid,className, "graphPriority", "UIGraphPriority", s_Instance.graphPriority)
	self:SendDefault(s_guid,className, "popPreviousGraph", "bool", s_Instance.popPreviousGraph)
	self:SendDefault(s_guid,className, "state", "UIState", s_Instance.state)
end

function Type:UIGraphPipelineSettings (p_class, p_guid)
	local s_Instance = UIGraphPipelineSettings(p_class) 
 	local className = "UIGraphPipelineSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "oneBundlePerGraph", "bool", s_Instance.oneBundlePerGraph)
end

function Type:UIHUDMessageBinding (p_class, p_guid)
	local s_Instance = UIHUDMessageBinding(p_class) 
 	local className = "UIHUDMessageBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "messageQuery", "UIDataSourceInfo", s_Instance.messageQuery)
	self:SendDefault(s_guid,className, "numberOfRows", "int", s_Instance.numberOfRows)
	self:SendDefault(s_guid,className, "visibilityQuery", "UIDataSourceInfo", s_Instance.visibilityQuery)
end

function Type:UIImageDataBinding (p_class, p_guid)
	local s_Instance = UIImageDataBinding(p_class) 
 	local className = "UIImageDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "imageData", "UIDataSourceInfo", s_Instance.imageData)
	self:SendDefault(s_guid,className, "staticImageUrl", "string", s_Instance.staticImageUrl)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:UIInputEventNodePort (p_class, p_guid)
	local s_Instance = UIInputEventNodePort(p_class) 
 	local className = "UIInputEventNodePort"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputEventType", "UIInputAction", s_Instance.inputEventType)
end

function Type:UIInteractionCompData (p_class, p_guid)
	local s_Instance = UIInteractionCompData(p_class) 
 	local className = "UIInteractionCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pickupShrinkSnap", "bool", s_Instance.pickupShrinkSnap)
	self:SendDefault(s_guid,className, "repairSnapCircle", "bool", s_Instance.repairSnapCircle)
	self:SendDefault(s_guid,className, "repairSnapDistance", "float", s_Instance.repairSnapDistance)
end

function Type:UIInterruptFlow (p_class, p_guid)
	local s_Instance = UIInterruptFlow(p_class) 
 	local className = "UIInterruptFlow"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "interruptFlow", "List<InterruptFlow)>", s_Instance.interruptFlow)
end

function Type:UIItemDescription (p_class, p_guid)
	local s_Instance = UIItemDescription(p_class) 
 	local className = "UIItemDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ignoreBuild", "bool", s_Instance.ignoreBuild)
	self:SendDefault(s_guid,className, "itemIds", "List<uint)>", s_Instance.itemIds)
end

function Type:UIItemDescriptionAsset (p_class, p_guid)
	local s_Instance = UIItemDescriptionAsset(p_class) 
 	local className = "UIItemDescriptionAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "children", "List<CtrRef)>", s_Instance.children)
	self:SendDefault(s_guid,className, "items", "List<CtrRef)>", s_Instance.items)
end

function Type:UIKitItemDescription (p_class, p_guid)
	local s_Instance = UIKitItemDescription(p_class) 
 	local className = "UIKitItemDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "hiddenInProgression", "bool", s_Instance.hiddenInProgression)
	self:SendDefault(s_guid,className, "hudIcon", "UIHudIcon", s_Instance.hudIcon)
	self:SendDefault(s_guid,className, "iconTexturePath", "string", s_Instance.iconTexturePath)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "notExplicitelySelectable", "bool", s_Instance.notExplicitelySelectable)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "unlockName", "string", s_Instance.unlockName)
	self:SendDefault(s_guid,className, "unlockTexturePath", "string", s_Instance.unlockTexturePath)
end

function Type:UILeaderboardData (p_class, p_guid)
	local s_Instance = UILeaderboardData(p_class) 
 	local className = "UILeaderboardData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:UILevelDescription (p_class, p_guid)
	local s_Instance = UILevelDescription(p_class) 
 	local className = "UILevelDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "levelName", "string", s_Instance.levelName)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "thumbnailTexturePath", "string", s_Instance.thumbnailTexturePath)
end

function Type:UILevelDescriptionComponent (p_class, p_guid)
	local s_Instance = UILevelDescriptionComponent(p_class) 
 	local className = "UILevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "creditsAssets", "List<CtrRef)>", s_Instance.creditsAssets)
	self:SendDefault(s_guid,className, "gPSPosition", "UIGPSPosition", s_Instance.gPSPosition)
	self:SendDefault(s_guid,className, "hintAsset", "CtrRef", s_Instance.hintAsset)
	self:SendDefault(s_guid,className, "isMenuLevel", "bool", s_Instance.isMenuLevel)
	self:SendDefault(s_guid,className, "levelCompledStatData", "UILevelStatData", s_Instance.levelCompledStatData)
	self:SendDefault(s_guid,className, "levelImagePath", "string", s_Instance.levelImagePath)
	self:SendDefault(s_guid,className, "levelScoreStatData", "UILevelStatData", s_Instance.levelScoreStatData)
	self:SendDefault(s_guid,className, "loadingImagePath", "string", s_Instance.loadingImagePath)
	self:SendDefault(s_guid,className, "loadingMusic", "CtrRef", s_Instance.loadingMusic)
	self:SendDefault(s_guid,className, "loadingMusicPath", "string", s_Instance.loadingMusicPath)
	self:SendDefault(s_guid,className, "minimapData", "UIMinimapData", s_Instance.minimapData)
	self:SendDefault(s_guid,className, "mPLoadingAssetPath", "string", s_Instance.mPLoadingAssetPath)
	self:SendDefault(s_guid,className, "sortIndex", "int", s_Instance.sortIndex)
	self:SendDefault(s_guid,className, "sPLoadingAssetPath", "string", s_Instance.sPLoadingAssetPath)
end

function Type:UILevelLocationDescription (p_class, p_guid)
	local s_Instance = UILevelLocationDescription(p_class) 
 	local className = "UILevelLocationDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
end

function Type:UILevelSpecificPageHeader (p_class, p_guid)
	local s_Instance = UILevelSpecificPageHeader(p_class) 
 	local className = "UILevelSpecificPageHeader"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "header", "string", s_Instance.header)
	self:SendDefault(s_guid,className, "levelNameSID", "string", s_Instance.levelNameSID)
	self:SendDefault(s_guid,className, "subHeader", "string", s_Instance.subHeader)
end

function Type:UILevelStatData (p_class, p_guid)
	local s_Instance = UILevelStatData(p_class) 
 	local className = "UILevelStatData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "statEasy", "string", s_Instance.statEasy)
	self:SendDefault(s_guid,className, "statHard", "string", s_Instance.statHard)
	self:SendDefault(s_guid,className, "statHardcore", "string", s_Instance.statHardcore)
	self:SendDefault(s_guid,className, "statMedium", "string", s_Instance.statMedium)
end

function Type:UILicenseDescription (p_class, p_guid)
	local s_Instance = UILicenseDescription(p_class) 
 	local className = "UILicenseDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "licenseId", "string", s_Instance.licenseId)
	self:SendDefault(s_guid,className, "popupText", "string", s_Instance.popupText)
end

function Type:UIListDataBinding (p_class, p_guid)
	local s_Instance = UIListDataBinding(p_class) 
 	local className = "UIListDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clearListAtNavigationEvent", "bool", s_Instance.clearListAtNavigationEvent)
	self:SendDefault(s_guid,className, "dataIncludesButtonLayout", "bool", s_Instance.dataIncludesButtonLayout)
	self:SendDefault(s_guid,className, "defaultHighlightedRow", "DefaultSelectionItem", s_Instance.defaultHighlightedRow)
	self:SendDefault(s_guid,className, "disabledRows", "string", s_Instance.disabledRows)
	self:SendDefault(s_guid,className, "emptyRowType", "UIListEmptyRowType", s_Instance.emptyRowType)
	self:SendDefault(s_guid,className, "fireHighlightOnMouseOut", "bool", s_Instance.fireHighlightOnMouseOut)
	self:SendDefault(s_guid,className, "highLightOnUpdate", "bool", s_Instance.highLightOnUpdate)
	self:SendDefault(s_guid,className, "keepScrollOffset", "bool", s_Instance.keepScrollOffset)
	self:SendDefault(s_guid,className, "listIndex", "int", s_Instance.listIndex)
	self:SendDefault(s_guid,className, "listQuery", "UIDataSourceInfo", s_Instance.listQuery)
	self:SendDefault(s_guid,className, "navigationType", "UIListNavigationType", s_Instance.navigationType)
	self:SendDefault(s_guid,className, "navigationTypeSource", "UIDataSourceInfo", s_Instance.navigationTypeSource)
	self:SendDefault(s_guid,className, "rowSpacing", "int", s_Instance.rowSpacing)
	self:SendDefault(s_guid,className, "rowType", "UIListRowType", s_Instance.rowType)
	self:SendDefault(s_guid,className, "screenRotationEnabled", "bool", s_Instance.screenRotationEnabled)
	self:SendDefault(s_guid,className, "sendIndexWithEvent", "bool", s_Instance.sendIndexWithEvent)
	self:SendDefault(s_guid,className, "spinnerEnabled", "bool", s_Instance.spinnerEnabled)
	self:SendDefault(s_guid,className, "staticItems", "List<StaticListItem)>", s_Instance.staticItems)
	self:SendDefault(s_guid,className, "unFocusMode", "UIListUnFocusMode", s_Instance.unFocusMode)
	self:SendDefault(s_guid,className, "use3DSelection", "bool", s_Instance.use3DSelection)
	self:SendDefault(s_guid,className, "useScrollBar", "bool", s_Instance.useScrollBar)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:UIListItem (p_class, p_guid)
	local s_Instance = UIListItem(p_class) 
 	local className = "UIListItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dataUpdate", "UIDataSourceInfo", s_Instance.dataUpdate)
	self:SendDefault(s_guid,className, "defaultIsEnabled", "bool", s_Instance.defaultIsEnabled)
	self:SendDefault(s_guid,className, "defaultIsVisible", "bool", s_Instance.defaultIsVisible)
	self:SendDefault(s_guid,className, "isEnabled", "UIDataSourceInfo", s_Instance.isEnabled)
	self:SendDefault(s_guid,className, "isVisible", "UIDataSourceInfo", s_Instance.isVisible)
	self:SendDefault(s_guid,className, "label", "string", s_Instance.label)
	self:SendDefault(s_guid,className, "toggleItems", "UIDataSourceInfo", s_Instance.toggleItems)
end

function Type:UIManDownCompData (p_class, p_guid)
	local s_Instance = UIManDownCompData(p_class) 
 	local className = "UIManDownCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delayManDownTextTime", "float", s_Instance.delayManDownTextTime)
end

function Type:UIMapmarkerCompData (p_class, p_guid)
	local s_Instance = UIMapmarkerCompData(p_class) 
 	local className = "UIMapmarkerCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "proximityIntervals", "List<int)>", s_Instance.proximityIntervals)
end

function Type:UIMessageCompData (p_class, p_guid)
	local s_Instance = UIMessageCompData(p_class) 
 	local className = "UIMessageCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "chatMessageInfo", "MessageInfo", s_Instance.chatMessageInfo)
	self:SendDefault(s_guid,className, "forceSubtitlesForTheseLevels", "List<string)>", s_Instance.forceSubtitlesForTheseLevels)
	self:SendDefault(s_guid,className, "forceSubtitlesOffForTheseLevels", "List<string)>", s_Instance.forceSubtitlesOffForTheseLevels)
	self:SendDefault(s_guid,className, "gameMessageInfo", "MessageInfo", s_Instance.gameMessageInfo)
	self:SendDefault(s_guid,className, "gunMasterMessageInfo", "MessageInfo", s_Instance.gunMasterMessageInfo)
	self:SendDefault(s_guid,className, "killMessageInfo", "MessageInfo", s_Instance.killMessageInfo)
	self:SendDefault(s_guid,className, "killScoreMessageInfo", "MessageInfo", s_Instance.killScoreMessageInfo)
	self:SendDefault(s_guid,className, "localKillMessageInfo", "MessageInfo", s_Instance.localKillMessageInfo)
	self:SendDefault(s_guid,className, "logLinesMessageInfo", "MessageInfo", s_Instance.logLinesMessageInfo)
	self:SendDefault(s_guid,className, "outOfBoundsMessageInfo", "MessageInfo", s_Instance.outOfBoundsMessageInfo)
	self:SendDefault(s_guid,className, "rewardMessageInfo", "MessageInfo", s_Instance.rewardMessageInfo)
	self:SendDefault(s_guid,className, "scoreAggregateTime", "float", s_Instance.scoreAggregateTime)
	self:SendDefault(s_guid,className, "scoreMajorMessageInfo", "MessageInfo", s_Instance.scoreMajorMessageInfo)
	self:SendDefault(s_guid,className, "scoreMessageInfo", "MessageInfo", s_Instance.scoreMessageInfo)
	self:SendDefault(s_guid,className, "scoreMinorMessageInfo", "MessageInfo", s_Instance.scoreMinorMessageInfo)
	self:SendDefault(s_guid,className, "serverAdminYellMessageInfo", "MessageInfo", s_Instance.serverAdminYellMessageInfo)
	self:SendDefault(s_guid,className, "staticMessageInfo", "MessageInfo", s_Instance.staticMessageInfo)
	self:SendDefault(s_guid,className, "subtitleMessageInfo", "MessageInfo", s_Instance.subtitleMessageInfo)
	self:SendDefault(s_guid,className, "tooltipMessageInfo", "MessageInfo", s_Instance.tooltipMessageInfo)
end

function Type:UIMessageTriggerData (p_class, p_guid)
	local s_Instance = UIMessageTriggerData(p_class) 
 	local className = "UIMessageTriggerData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:UIMinimapConfig (p_class, p_guid)
	local s_Instance = UIMinimapConfig(p_class) 
 	local className = "UIMinimapConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cameraInterpolationTime", "float", s_Instance.cameraInterpolationTime)
	self:SendDefault(s_guid,className, "cameraPanSensitivity", "float", s_Instance.cameraPanSensitivity)
	self:SendDefault(s_guid,className, "combatAreaCameraDelay", "float", s_Instance.combatAreaCameraDelay)
	self:SendDefault(s_guid,className, "combatAreaFadeSpeed", "float", s_Instance.combatAreaFadeSpeed)
	self:SendDefault(s_guid,className, "disableDefaultState", "bool", s_Instance.disableDefaultState)
	self:SendDefault(s_guid,className, "maxVelocity", "float", s_Instance.maxVelocity)
	self:SendDefault(s_guid,className, "minVelocity", "float", s_Instance.minVelocity)
	self:SendDefault(s_guid,className, "velocityModifier", "float", s_Instance.velocityModifier)
	self:SendDefault(s_guid,className, "zoomStates", "List<UIMinimapZoomConfig)>", s_Instance.zoomStates)
end

function Type:UIMinimapData (p_class, p_guid)
	local s_Instance = UIMinimapData(p_class) 
 	local className = "UIMinimapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "airRadarFadeTexture", "CtrRef", s_Instance.airRadarFadeTexture)
	self:SendDefault(s_guid,className, "airRadarRange", "float", s_Instance.airRadarRange)
	self:SendDefault(s_guid,className, "combatAreaAlphaThreshold", "float", s_Instance.combatAreaAlphaThreshold)
	self:SendDefault(s_guid,className, "combatAreaColor", "Vec4", s_Instance.combatAreaColor)
	self:SendDefault(s_guid,className, "combatAreaDistanceScale", "float", s_Instance.combatAreaDistanceScale)
	self:SendDefault(s_guid,className, "combatAreaFadeSpeed", "float", s_Instance.combatAreaFadeSpeed)
	self:SendDefault(s_guid,className, "combatAreaMultiplyTexture", "CtrRef", s_Instance.combatAreaMultiplyTexture)
	self:SendDefault(s_guid,className, "combatAreaMultiplyWrapAmount", "Vec2", s_Instance.combatAreaMultiplyWrapAmount)
	self:SendDefault(s_guid,className, "combatAreaScale", "float", s_Instance.combatAreaScale)
	self:SendDefault(s_guid,className, "detail", "UIMinimapDistanceFieldParams", s_Instance.detail)
	self:SendDefault(s_guid,className, "detailTexture", "CtrRef", s_Instance.detailTexture)
	self:SendDefault(s_guid,className, "detailTextureTint", "Vec4", s_Instance.detailTextureTint)
	self:SendDefault(s_guid,className, "fadeTexture", "CtrRef", s_Instance.fadeTexture)
	self:SendDefault(s_guid,className, "streamingMinimapDelay", "float", s_Instance.streamingMinimapDelay)
	self:SendDefault(s_guid,className, "streamingMinimapTransitionSpeed", "float", s_Instance.streamingMinimapTransitionSpeed)
	self:SendDefault(s_guid,className, "useCombatAreaTexture", "bool", s_Instance.useCombatAreaTexture)
	self:SendDefault(s_guid,className, "useStreamingMinimap", "bool", s_Instance.useStreamingMinimap)
	self:SendDefault(s_guid,className, "vegetation", "UIMinimapDistanceFieldParams", s_Instance.vegetation)
	self:SendDefault(s_guid,className, "worldCenter", "Vec2", s_Instance.worldCenter)
	self:SendDefault(s_guid,className, "worldRange", "float", s_Instance.worldRange)
	self:SendDefault(s_guid,className, "worldRotation", "float", s_Instance.worldRotation)
	self:SendDefault(s_guid,className, "worldSize", "float", s_Instance.worldSize)
end

function Type:UIMinimapDistanceFieldParams (p_class, p_guid)
	local s_Instance = UIMinimapDistanceFieldParams(p_class) 
 	local className = "UIMinimapDistanceFieldParams"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alphaThreshold", "float", s_Instance.alphaThreshold)
	self:SendDefault(s_guid,className, "colorTint", "Vec4", s_Instance.colorTint)
	self:SendDefault(s_guid,className, "distanceField", "CtrRef", s_Instance.distanceField)
	self:SendDefault(s_guid,className, "distanceScale", "float", s_Instance.distanceScale)
	self:SendDefault(s_guid,className, "outlineColor", "Vec4", s_Instance.outlineColor)
	self:SendDefault(s_guid,className, "outlineInner", "float", s_Instance.outlineInner)
	self:SendDefault(s_guid,className, "outlineOuter", "float", s_Instance.outlineOuter)
end

function Type:UIMinimapIconTexture (p_class, p_guid)
	local s_Instance = UIMinimapIconTexture(p_class) 
 	local className = "UIMinimapIconTexture"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "iconType", "UIHudIcon", s_Instance.iconType)
	self:SendDefault(s_guid,className, "states", "List<UIMinimapIconTextureState)>", s_Instance.states)
end

function Type:UIMinimapIconTextureAtlasAsset (p_class, p_guid)
	local s_Instance = UIMinimapIconTextureAtlasAsset(p_class) 
 	local className = "UIMinimapIconTextureAtlasAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "icons", "List<UIMinimapIconTexture)>", s_Instance.icons)
	self:SendDefault(s_guid,className, "textureAtlas", "CtrRef", s_Instance.textureAtlas)
end

function Type:UIMinimapIconTextureState (p_class, p_guid)
	local s_Instance = UIMinimapIconTextureState(p_class) 
 	local className = "UIMinimapIconTextureState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "frameRate", "float", s_Instance.frameRate)
	self:SendDefault(s_guid,className, "shouldRotate", "bool", s_Instance.shouldRotate)
	self:SendDefault(s_guid,className, "state", "UIIconState", s_Instance.state)
	self:SendDefault(s_guid,className, "textureInfos", "List<UIMinimapIconUv)>", s_Instance.textureInfos)
end

function Type:UIMinimapIconUv (p_class, p_guid)
	local s_Instance = UIMinimapIconUv(p_class) 
 	local className = "UIMinimapIconUv"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxUv", "Vec2", s_Instance.maxUv)
	self:SendDefault(s_guid,className, "minUv", "Vec2", s_Instance.minUv)
end

function Type:UIMinimapVolumeEntityData (p_class, p_guid)
	local s_Instance = UIMinimapVolumeEntityData(p_class) 
 	local className = "UIMinimapVolumeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
	self:SendDefault(s_guid,className, "isDefault", "bool", s_Instance.isDefault)
end

function Type:UIMinimapZoomConfig (p_class, p_guid)
	local s_Instance = UIMinimapZoomConfig(p_class) 
 	local className = "UIMinimapZoomConfig"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "MinimapData", s_Instance.data)
	self:SendDefault(s_guid,className, "state", "UIMinimapZoomState", s_Instance.state)
end

function Type:UIModDescription (p_class, p_guid)
	local s_Instance = UIModDescription(p_class) 
 	local className = "UIModDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "desc", "string", s_Instance.desc)
	self:SendDefault(s_guid,className, "fullName", "string", s_Instance.fullName)
	self:SendDefault(s_guid,className, "identifier", "string", s_Instance.identifier)
	self:SendDefault(s_guid,className, "shortName", "string", s_Instance.shortName)
end

function Type:UINametag (p_class, p_guid)
	local s_Instance = UINametag(p_class) 
 	local className = "UINametag"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "healthFadeDistance", "float", s_Instance.healthFadeDistance)
	self:SendDefault(s_guid,className, "healthMaxDistance", "float", s_Instance.healthMaxDistance)
	self:SendDefault(s_guid,className, "icon", "UIHudIcon", s_Instance.icon)
	self:SendDefault(s_guid,className, "iconFadeDistance", "float", s_Instance.iconFadeDistance)
	self:SendDefault(s_guid,className, "iconMaxDistance", "float", s_Instance.iconMaxDistance)
	self:SendDefault(s_guid,className, "targetInTimer", "float", s_Instance.targetInTimer)
	self:SendDefault(s_guid,className, "targetOutTimer", "float", s_Instance.targetOutTimer)
	self:SendDefault(s_guid,className, "textColor", "Vec3", s_Instance.textColor)
	self:SendDefault(s_guid,className, "textFadeDistance", "float", s_Instance.textFadeDistance)
	self:SendDefault(s_guid,className, "textMaxDistance", "float", s_Instance.textMaxDistance)
end

function Type:UINametagCompData (p_class, p_guid)
	local s_Instance = UINametagCompData(p_class) 
 	local className = "UINametagCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enemyTint", "Vec4", s_Instance.enemyTint)
	self:SendDefault(s_guid,className, "friendlyTint", "Vec4", s_Instance.friendlyTint)
	self:SendDefault(s_guid,className, "healthBarSize", "float", s_Instance.healthBarSize)
	self:SendDefault(s_guid,className, "nameFontSize", "float", s_Instance.nameFontSize)
	self:SendDefault(s_guid,className, "nameGlowSize", "float", s_Instance.nameGlowSize)
	self:SendDefault(s_guid,className, "orderCooldown", "int", s_Instance.orderCooldown)
	self:SendDefault(s_guid,className, "squadTint", "Vec4", s_Instance.squadTint)
	self:SendDefault(s_guid,className, "tooltipCooldown", "int", s_Instance.tooltipCooldown)
end

function Type:UINestedListDataBinding (p_class, p_guid)
	local s_Instance = UINestedListDataBinding(p_class) 
 	local className = "UINestedListDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clearListAtNavigationEvent", "bool", s_Instance.clearListAtNavigationEvent)
	self:SendDefault(s_guid,className, "dataIncludesButtonLayout", "bool", s_Instance.dataIncludesButtonLayout)
	self:SendDefault(s_guid,className, "defaultHighlightedRow", "DefaultSelectionItem", s_Instance.defaultHighlightedRow)
	self:SendDefault(s_guid,className, "emptyRowType", "UIListEmptyRowType", s_Instance.emptyRowType)
	self:SendDefault(s_guid,className, "highLightOnUpdate", "bool", s_Instance.highLightOnUpdate)
	self:SendDefault(s_guid,className, "invertVisible", "bool", s_Instance.invertVisible)
	self:SendDefault(s_guid,className, "keepScrollOffset", "bool", s_Instance.keepScrollOffset)
	self:SendDefault(s_guid,className, "listIndex", "int", s_Instance.listIndex)
	self:SendDefault(s_guid,className, "navigationType", "UIListNavigationType", s_Instance.navigationType)
	self:SendDefault(s_guid,className, "nestedLists", "List<NestedList)>", s_Instance.nestedLists)
	self:SendDefault(s_guid,className, "rowSpacing", "int", s_Instance.rowSpacing)
	self:SendDefault(s_guid,className, "rowType", "UIListRowType", s_Instance.rowType)
	self:SendDefault(s_guid,className, "screenRotationEnabled", "bool", s_Instance.screenRotationEnabled)
	self:SendDefault(s_guid,className, "selectorWidth", "int", s_Instance.selectorWidth)
	self:SendDefault(s_guid,className, "sendIndexWithEvent", "bool", s_Instance.sendIndexWithEvent)
	self:SendDefault(s_guid,className, "use3DSelection", "bool", s_Instance.use3DSelection)
	self:SendDefault(s_guid,className, "useScrollBar", "bool", s_Instance.useScrollBar)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
	self:SendDefault(s_guid,className, "visible", "bool", s_Instance.visible)
end

function Type:UINetworkTextInfo (p_class, p_guid)
	local s_Instance = UINetworkTextInfo(p_class) 
 	local className = "UINetworkTextInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "displayTime", "float", s_Instance.displayTime)
	self:SendDefault(s_guid,className, "stringId", "string", s_Instance.stringId)
end

function Type:UINodeConnection (p_class, p_guid)
	local s_Instance = UINodeConnection(p_class) 
 	local className = "UINodeConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "numScreensToPop", "int", s_Instance.numScreensToPop)
	self:SendDefault(s_guid,className, "sourceNode", "CtrRef", s_Instance.sourceNode)
	self:SendDefault(s_guid,className, "sourcePort", "CtrRef", s_Instance.sourcePort)
	self:SendDefault(s_guid,className, "targetNode", "CtrRef", s_Instance.targetNode)
	self:SendDefault(s_guid,className, "targetPort", "CtrRef", s_Instance.targetPort)
end

function Type:UINodeData (p_class, p_guid)
	local s_Instance = UINodeData(p_class) 
 	local className = "UINodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isRootNode", "bool", s_Instance.isRootNode)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "parentGraph", "CtrRef", s_Instance.parentGraph)
	self:SendDefault(s_guid,className, "parentIsScreen", "bool", s_Instance.parentIsScreen)
end

function Type:UINodePort (p_class, p_guid)
	local s_Instance = UINodePort(p_class) 
 	local className = "UINodePort"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowManualRemove", "bool", s_Instance.allowManualRemove)
	self:SendDefault(s_guid,className, "instanceName", "string", s_Instance.instanceName)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "query", "UIWidgetEventID", s_Instance.query)
end

function Type:UIntRange (p_class, p_guid)
	local s_Instance = UIntRange(p_class) 
 	local className = "UIntRange"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "max", "uint", s_Instance.max)
	self:SendDefault(s_guid,className, "min", "uint", s_Instance.min)
end

function Type:UINumberDataBinding (p_class, p_guid)
	local s_Instance = UINumberDataBinding(p_class) 
 	local className = "UINumberDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "numValue", "int", s_Instance.numValue)
	self:SendDefault(s_guid,className, "refresh", "bool", s_Instance.refresh)
	self:SendDefault(s_guid,className, "value", "UIDataSourceInfo", s_Instance.value)
end

function Type:UIOnDemandFontComponentData (p_class, p_guid)
	local s_Instance = UIOnDemandFontComponentData(p_class) 
 	local className = "UIOnDemandFontComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fontCollections", "List<CtrRef)>", s_Instance.fontCollections)
end

function Type:UIPageHeaderBinding (p_class, p_guid)
	local s_Instance = UIPageHeaderBinding(p_class) 
 	local className = "UIPageHeaderBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "header", "UIDataSourceInfo", s_Instance.header)
	self:SendDefault(s_guid,className, "icon", "UIDataSourceInfo", s_Instance.icon)
	self:SendDefault(s_guid,className, "levelSpecificHeaders", "List<UILevelSpecificPageHeader)>", s_Instance.levelSpecificHeaders)
	self:SendDefault(s_guid,className, "staticHeader", "string", s_Instance.staticHeader)
	self:SendDefault(s_guid,className, "staticIcon", "string", s_Instance.staticIcon)
	self:SendDefault(s_guid,className, "staticSubHeader", "string", s_Instance.staticSubHeader)
	self:SendDefault(s_guid,className, "subHeader", "UIDataSourceInfo", s_Instance.subHeader)
end

function Type:UIPartProperties (p_class, p_guid)
	local s_Instance = UIPartProperties(p_class) 
 	local className = "UIPartProperties"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "compensateFreelook", "bool", s_Instance.compensateFreelook)
	self:SendDefault(s_guid,className, "frequency", "float", s_Instance.frequency)
	self:SendDefault(s_guid,className, "identifier", "UIPartIdentifier", s_Instance.identifier)
	self:SendDefault(s_guid,className, "range", "float", s_Instance.range)
end

function Type:UIPartPropertyList (p_class, p_guid)
	local s_Instance = UIPartPropertyList(p_class) 
 	local className = "UIPartPropertyList"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hudPropertyList", "List<UIPartProperties)>", s_Instance.hudPropertyList)
end

function Type:UIPopupButton (p_class, p_guid)
	local s_Instance = UIPopupButton(p_class) 
 	local className = "UIPopupButton"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputConcept", "UIInputAction", s_Instance.inputConcept)
	self:SendDefault(s_guid,className, "label", "string", s_Instance.label)
end

function Type:UIPopupTextInput (p_class, p_guid)
	local s_Instance = UIPopupTextInput(p_class) 
 	local className = "UIPopupTextInput"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "string", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "id", "string", s_Instance.id)
	self:SendDefault(s_guid,className, "isPassword", "bool", s_Instance.isPassword)
	self:SendDefault(s_guid,className, "label", "string", s_Instance.label)
end

function Type:UIPostProcessComponentData (p_class, p_guid)
	local s_Instance = UIPostProcessComponentData(p_class) 
 	local className = "UIPostProcessComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bShift", "float", s_Instance.bShift)
	self:SendDefault(s_guid,className, "distort", "float", s_Instance.distort)
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "gShift", "float", s_Instance.gShift)
	self:SendDefault(s_guid,className, "highlight", "float", s_Instance.highlight)
	self:SendDefault(s_guid,className, "highlightThreshold", "float", s_Instance.highlightThreshold)
	self:SendDefault(s_guid,className, "noiseTexture", "CtrRef", s_Instance.noiseTexture)
	self:SendDefault(s_guid,className, "rShift", "float", s_Instance.rShift)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
	self:SendDefault(s_guid,className, "tweakMode", "bool", s_Instance.tweakMode)
	self:SendDefault(s_guid,className, "xPower", "float", s_Instance.xPower)
	self:SendDefault(s_guid,className, "yPower", "float", s_Instance.yPower)
end

function Type:UIQueuedEventsCompData (p_class, p_guid)
	local s_Instance = UIQueuedEventsCompData(p_class) 
 	local className = "UIQueuedEventsCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "initialQueueDelay", "float", s_Instance.initialQueueDelay)
	self:SendDefault(s_guid,className, "showUnlocksBecomingAvailable", "bool", s_Instance.showUnlocksBecomingAvailable)
end

function Type:UIRankDescription (p_class, p_guid)
	local s_Instance = UIRankDescription(p_class) 
 	local className = "UIRankDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ignoreBuild", "bool", s_Instance.ignoreBuild)
end

function Type:UIRenderCompData (p_class, p_guid)
	local s_Instance = UIRenderCompData(p_class) 
 	local className = "UIRenderCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alphaAnimationSpeed", "float", s_Instance.alphaAnimationSpeed)
	self:SendDefault(s_guid,className, "alphaMax", "float", s_Instance.alphaMax)
	self:SendDefault(s_guid,className, "alphaMin", "float", s_Instance.alphaMin)
	self:SendDefault(s_guid,className, "alphaOffset", "float", s_Instance.alphaOffset)
	self:SendDefault(s_guid,className, "backgroundRect0", "Vec4", s_Instance.backgroundRect0)
	self:SendDefault(s_guid,className, "backgroundRect1", "Vec4", s_Instance.backgroundRect1)
	self:SendDefault(s_guid,className, "bgTexture1", "CtrRef", s_Instance.bgTexture1)
	self:SendDefault(s_guid,className, "bgTexture2", "CtrRef", s_Instance.bgTexture2)
end

function Type:UIScoreboardCompData (p_class, p_guid)
	local s_Instance = UIScoreboardCompData(p_class) 
 	local className = "UIScoreboardCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxUpdateInterval", "float", s_Instance.maxUpdateInterval)
end

function Type:UIScreenshotCompData (p_class, p_guid)
	local s_Instance = UIScreenshotCompData(p_class) 
 	local className = "UIScreenshotCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoResizeImage", "bool", s_Instance.autoResizeImage)
	self:SendDefault(s_guid,className, "resizeImageHeight", "uint", s_Instance.resizeImageHeight)
	self:SendDefault(s_guid,className, "resizeImageWidth", "uint", s_Instance.resizeImageWidth)
	self:SendDefault(s_guid,className, "screenshotInfos", "List<ScreenshotInfo)>", s_Instance.screenshotInfos)
end

function Type:UISettings (p_class, p_guid)
	local s_Instance = UISettings(p_class) 
 	local className = "UISettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bundles", "CtrRef", s_Instance.bundles)
	self:SendDefault(s_guid,className, "dataCop", "DataCopSettings", s_Instance.dataCop)
	self:SendDefault(s_guid,className, "drawEnable", "bool", s_Instance.drawEnable)
	self:SendDefault(s_guid,className, "language", "LanguageFormat", s_Instance.language)
	self:SendDefault(s_guid,className, "oneBundlePerGraph", "bool", s_Instance.oneBundlePerGraph)
	self:SendDefault(s_guid,className, "profileOptions", "CtrRef", s_Instance.profileOptions)
	self:SendDefault(s_guid,className, "system", "UISystemType", s_Instance.system)
end

function Type:UISettingsCompData (p_class, p_guid)
	local s_Instance = UISettingsCompData(p_class) 
 	local className = "UISettingsCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settingsPages", "List<UISettingsPage)>", s_Instance.settingsPages)
end

function Type:UISettingsGroup (p_class, p_guid)
	local s_Instance = UISettingsGroup(p_class) 
 	local className = "UISettingsGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "screenColumn", "int", s_Instance.screenColumn)
	self:SendDefault(s_guid,className, "settingsItems", "List<UISettingsItem)>", s_Instance.settingsItems)
end

function Type:UISettingsItem (p_class, p_guid)
	local s_Instance = UISettingsItem(p_class) 
 	local className = "UISettingsItem"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "setting", "CtrRef", s_Instance.setting)
	self:SendDefault(s_guid,className, "startEndSymbols", "UISettingSymbols", s_Instance.startEndSymbols)
end

function Type:UISettingsPage (p_class, p_guid)
	local s_Instance = UISettingsPage(p_class) 
 	local className = "UISettingsPage"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "settingsGroups", "List<UISettingsGroup)>", s_Instance.settingsGroups)
end

function Type:UISetupServerWizardCompData (p_class, p_guid)
	local s_Instance = UISetupServerWizardCompData(p_class) 
 	local className = "UISetupServerWizardCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "passwdMinLen", "int", s_Instance.passwdMinLen)
end

function Type:UISetValueData (p_class, p_guid)
	local s_Instance = UISetValueData(p_class) 
 	local className = "UISetValueData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "boolValue", "bool", s_Instance.boolValue)
	self:SendDefault(s_guid,className, "dataSource", "UIDataSourceInfo", s_Instance.dataSource)
	self:SendDefault(s_guid,className, "floatValue", "float", s_Instance.floatValue)
	self:SendDefault(s_guid,className, "intValue", "int", s_Instance.intValue)
	self:SendDefault(s_guid,className, "stringValue", "string", s_Instance.stringValue)
end

function Type:UISoldierCompData (p_class, p_guid)
	local s_Instance = UISoldierCompData(p_class) 
 	local className = "UISoldierCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "criticalHealthThreshold", "float", s_Instance.criticalHealthThreshold)
	self:SendDefault(s_guid,className, "eKGLineAlpha", "float", s_Instance.eKGLineAlpha)
	self:SendDefault(s_guid,className, "eKGLineThickness", "float", s_Instance.eKGLineThickness)
	self:SendDefault(s_guid,className, "focusAbilityIndex", "int", s_Instance.focusAbilityIndex)
	self:SendDefault(s_guid,className, "hitShaderDamageMultiplier", "float", s_Instance.hitShaderDamageMultiplier)
	self:SendDefault(s_guid,className, "hitShaderGradientDurationMultiplier", "float", s_Instance.hitShaderGradientDurationMultiplier)
	self:SendDefault(s_guid,className, "hitShaderIndicatorDurationMultiplier", "float", s_Instance.hitShaderIndicatorDurationMultiplier)
	self:SendDefault(s_guid,className, "hitShaderMaxDamage", "float", s_Instance.hitShaderMaxDamage)
	self:SendDefault(s_guid,className, "hitShaderMinDamage", "float", s_Instance.hitShaderMinDamage)
	self:SendDefault(s_guid,className, "rangerPTProgramAbilityIndex", "int", s_Instance.rangerPTProgramAbilityIndex)
	self:SendDefault(s_guid,className, "shockTraumaAbilityIndex", "int", s_Instance.shockTraumaAbilityIndex)
	self:SendDefault(s_guid,className, "spawnOnSquadLeaders", "bool", s_Instance.spawnOnSquadLeaders)
	self:SendDefault(s_guid,className, "useSquadSpawn", "bool", s_Instance.useSquadSpawn)
	self:SendDefault(s_guid,className, "useVehicleTeamSpawn", "bool", s_Instance.useVehicleTeamSpawn)
end

function Type:UISquadCompData (p_class, p_guid)
	local s_Instance = UISquadCompData(p_class) 
 	local className = "UISquadCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hideLocalSquadBoostData", "bool", s_Instance.hideLocalSquadBoostData)
	self:SendDefault(s_guid,className, "squad1", "string", s_Instance.squad1)
	self:SendDefault(s_guid,className, "squad10", "string", s_Instance.squad10)
	self:SendDefault(s_guid,className, "squad11", "string", s_Instance.squad11)
	self:SendDefault(s_guid,className, "squad12", "string", s_Instance.squad12)
	self:SendDefault(s_guid,className, "squad13", "string", s_Instance.squad13)
	self:SendDefault(s_guid,className, "squad14", "string", s_Instance.squad14)
	self:SendDefault(s_guid,className, "squad15", "string", s_Instance.squad15)
	self:SendDefault(s_guid,className, "squad16", "string", s_Instance.squad16)
	self:SendDefault(s_guid,className, "squad17", "string", s_Instance.squad17)
	self:SendDefault(s_guid,className, "squad18", "string", s_Instance.squad18)
	self:SendDefault(s_guid,className, "squad19", "string", s_Instance.squad19)
	self:SendDefault(s_guid,className, "squad2", "string", s_Instance.squad2)
	self:SendDefault(s_guid,className, "squad20", "string", s_Instance.squad20)
	self:SendDefault(s_guid,className, "squad21", "string", s_Instance.squad21)
	self:SendDefault(s_guid,className, "squad22", "string", s_Instance.squad22)
	self:SendDefault(s_guid,className, "squad23", "string", s_Instance.squad23)
	self:SendDefault(s_guid,className, "squad24", "string", s_Instance.squad24)
	self:SendDefault(s_guid,className, "squad25", "string", s_Instance.squad25)
	self:SendDefault(s_guid,className, "squad26", "string", s_Instance.squad26)
	self:SendDefault(s_guid,className, "squad27", "string", s_Instance.squad27)
	self:SendDefault(s_guid,className, "squad28", "string", s_Instance.squad28)
	self:SendDefault(s_guid,className, "squad29", "string", s_Instance.squad29)
	self:SendDefault(s_guid,className, "squad3", "string", s_Instance.squad3)
	self:SendDefault(s_guid,className, "squad30", "string", s_Instance.squad30)
	self:SendDefault(s_guid,className, "squad31", "string", s_Instance.squad31)
	self:SendDefault(s_guid,className, "squad32", "string", s_Instance.squad32)
	self:SendDefault(s_guid,className, "squad4", "string", s_Instance.squad4)
	self:SendDefault(s_guid,className, "squad5", "string", s_Instance.squad5)
	self:SendDefault(s_guid,className, "squad6", "string", s_Instance.squad6)
	self:SendDefault(s_guid,className, "squad7", "string", s_Instance.squad7)
	self:SendDefault(s_guid,className, "squad8", "string", s_Instance.squad8)
	self:SendDefault(s_guid,className, "squad9", "string", s_Instance.squad9)
end

function Type:UIStateAsset (p_class, p_guid)
	local s_Instance = UIStateAsset(p_class) 
 	local className = "UIStateAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "actionscriptLibraries", "List<CtrRef)>", s_Instance.actionscriptLibraries)
	self:SendDefault(s_guid,className, "actionscriptNames", "List<string)>", s_Instance.actionscriptNames)
	self:SendDefault(s_guid,className, "stateName", "string", s_Instance.stateName)
	self:SendDefault(s_guid,className, "statePath", "string", s_Instance.statePath)
	self:SendDefault(s_guid,className, "uIComponents", "List<CtrRef)>", s_Instance.uIComponents)
end

function Type:UITaggedVehicleCrosshair (p_class, p_guid)
	local s_Instance = UITaggedVehicleCrosshair(p_class) 
 	local className = "UITaggedVehicleCrosshair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "maxSize", "int", s_Instance.maxSize)
	self:SendDefault(s_guid,className, "minDistance", "float", s_Instance.minDistance)
	self:SendDefault(s_guid,className, "minSize", "int", s_Instance.minSize)
end

function Type:UITextDatabase (p_class, p_guid)
	local s_Instance = UITextDatabase(p_class) 
 	local className = "UITextDatabase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binaryChunk", "GUID", s_Instance.binaryChunk)
	self:SendDefault(s_guid,className, "binaryChunkSize", "uint", s_Instance.binaryChunkSize)
	self:SendDefault(s_guid,className, "histogramChunk", "GUID", s_Instance.histogramChunk)
	self:SendDefault(s_guid,className, "histogramChunkSize", "uint", s_Instance.histogramChunkSize)
	self:SendDefault(s_guid,className, "language", "LanguageFormat", s_Instance.language)
end

function Type:UITextDataBinding (p_class, p_guid)
	local s_Instance = UITextDataBinding(p_class) 
 	local className = "UITextDataBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "overrideDirectAccess", "bool", s_Instance.overrideDirectAccess)
	self:SendDefault(s_guid,className, "refresh", "bool", s_Instance.refresh)
	self:SendDefault(s_guid,className, "staticText", "string", s_Instance.staticText)
	self:SendDefault(s_guid,className, "textData", "UIDataSourceInfo", s_Instance.textData)
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
end

function Type:UITextureAtlasInfo (p_class, p_guid)
	local s_Instance = UITextureAtlasInfo(p_class) 
 	local className = "UITextureAtlasInfo"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxUv", "Vec2", s_Instance.maxUv)
	self:SendDefault(s_guid,className, "minUv", "Vec2", s_Instance.minUv)
end

function Type:UITrackingtagCompData (p_class, p_guid)
	local s_Instance = UITrackingtagCompData(p_class) 
 	local className = "UITrackingtagCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "showUnlockedLockAlways", "bool", s_Instance.showUnlockedLockAlways)
	self:SendDefault(s_guid,className, "showUnlockedLockOnHeat", "bool", s_Instance.showUnlockedLockOnHeat)
	self:SendDefault(s_guid,className, "showUnlockedLockOnLaserPainted", "bool", s_Instance.showUnlockedLockOnLaserPainted)
	self:SendDefault(s_guid,className, "showUnlockedLockOnRadar", "bool", s_Instance.showUnlockedLockOnRadar)
end

function Type:UIVehicleCompData (p_class, p_guid)
	local s_Instance = UIVehicleCompData(p_class) 
 	local className = "UIVehicleCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "rangeMeterUpdatesPerSecond", "int", s_Instance.rangeMeterUpdatesPerSecond)
end

function Type:UIVehicleDescription (p_class, p_guid)
	local s_Instance = UIVehicleDescription(p_class) 
 	local className = "UIVehicleDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
end

function Type:UIVehicleUnlockDescription (p_class, p_guid)
	local s_Instance = UIVehicleUnlockDescription(p_class) 
 	local className = "UIVehicleUnlockDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "hiddenInProgression", "bool", s_Instance.hiddenInProgression)
	self:SendDefault(s_guid,className, "iconTexturePath", "string", s_Instance.iconTexturePath)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "notExplicitelySelectable", "bool", s_Instance.notExplicitelySelectable)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "unlockTexturePath", "string", s_Instance.unlockTexturePath)
end

function Type:UIVehicleWeaponDescription (p_class, p_guid)
	local s_Instance = UIVehicleWeaponDescription(p_class) 
 	local className = "UIVehicleWeaponDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:UIVoiceCompData (p_class, p_guid)
	local s_Instance = UIVoiceCompData(p_class) 
 	local className = "UIVoiceCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "hudMaxSpeakers", "uint", s_Instance.hudMaxSpeakers)
end

function Type:UIWeaponAccessoryDescription (p_class, p_guid)
	local s_Instance = UIWeaponAccessoryDescription(p_class) 
 	local className = "UIWeaponAccessoryDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "coreAccessory", "bool", s_Instance.coreAccessory)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "hiddenInProgression", "bool", s_Instance.hiddenInProgression)
	self:SendDefault(s_guid,className, "iconTexturePath", "string", s_Instance.iconTexturePath)
	self:SendDefault(s_guid,className, "miscTexturePath", "string", s_Instance.miscTexturePath)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "unlockTexturePath", "string", s_Instance.unlockTexturePath)
end

function Type:UIWeaponCompData (p_class, p_guid)
	local s_Instance = UIWeaponCompData(p_class) 
 	local className = "UIWeaponCompData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxHitIndicatorLimit", "float", s_Instance.maxHitIndicatorLimit)
	self:SendDefault(s_guid,className, "minHitIndicatorLimit", "float", s_Instance.minHitIndicatorLimit)
	self:SendDefault(s_guid,className, "normalHitIndicatorLimit", "float", s_Instance.normalHitIndicatorLimit)
end

function Type:UIWeaponDescription (p_class, p_guid)
	local s_Instance = UIWeaponDescription(p_class) 
 	local className = "UIWeaponDescription"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammo", "string", s_Instance.ammo)
	self:SendDefault(s_guid,className, "category", "string", s_Instance.category)
	self:SendDefault(s_guid,className, "description", "string", s_Instance.description)
	self:SendDefault(s_guid,className, "fireModeAuto", "bool", s_Instance.fireModeAuto)
	self:SendDefault(s_guid,className, "fireModeBurst", "bool", s_Instance.fireModeBurst)
	self:SendDefault(s_guid,className, "fireModeSingle", "bool", s_Instance.fireModeSingle)
	self:SendDefault(s_guid,className, "hiddenInProgression", "bool", s_Instance.hiddenInProgression)
	self:SendDefault(s_guid,className, "iconTexturePath", "string", s_Instance.iconTexturePath)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "range", "string", s_Instance.range)
	self:SendDefault(s_guid,className, "rateOfFire", "string", s_Instance.rateOfFire)
	self:SendDefault(s_guid,className, "texturePath", "string", s_Instance.texturePath)
	self:SendDefault(s_guid,className, "unlockName", "string", s_Instance.unlockName)
	self:SendDefault(s_guid,className, "unlockTexturePath", "string", s_Instance.unlockTexturePath)
end

function Type:UIWidgetAsset (p_class, p_guid)
	local s_Instance = UIWidgetAsset(p_class) 
 	local className = "UIWidgetAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "widgetEvents", "List<WidgetEventQueryPair)>", s_Instance.widgetEvents)
end

function Type:UIWidgetPathBinding (p_class, p_guid)
	local s_Instance = UIWidgetPathBinding(p_class) 
 	local className = "UIWidgetPathBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "visibility", "UIDataSourceInfo", s_Instance.visibility)
	self:SendDefault(s_guid,className, "widgetPathQuery", "UIDataSourceInfo", s_Instance.widgetPathQuery)
end

function Type:UIWidgetProperty (p_class, p_guid)
	local s_Instance = UIWidgetProperty(p_class) 
 	local className = "UIWidgetProperty"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "value", "string", s_Instance.value)
end

function Type:UnderFireTriggerEntityData (p_class, p_guid)
	local s_Instance = UnderFireTriggerEntityData(p_class) 
 	local className = "UnderFireTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "coolDownTime", "float", s_Instance.coolDownTime)
	self:SendDefault(s_guid,className, "disableIfTrackEntityIsLost", "bool", s_Instance.disableIfTrackEntityIsLost)
	self:SendDefault(s_guid,className, "indicateHit", "bool", s_Instance.indicateHit)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "randomYaw", "bool", s_Instance.randomYaw)
	self:SendDefault(s_guid,className, "triggeredBy", "AreaTriggerInclude", s_Instance.triggeredBy)
	self:SendDefault(s_guid,className, "triggerOnMaterialOnly", "CtrRef", s_Instance.triggerOnMaterialOnly)
end

function Type:UnlockableColorCollection (p_class, p_guid)
	local s_Instance = UnlockableColorCollection(p_class) 
 	local className = "UnlockableColorCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "CtrRef", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "possibleValues", "List<CtrRef)>", s_Instance.possibleValues)
end

function Type:UnlockableProjectile (p_class, p_guid)
	local s_Instance = UnlockableProjectile(p_class) 
 	local className = "UnlockableProjectile"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "initialSpeed", "Vec3", s_Instance.initialSpeed)
	self:SendDefault(s_guid,className, "projectile", "CtrRef", s_Instance.projectile)
	self:SendDefault(s_guid,className, "projectileData", "CtrRef", s_Instance.projectileData)
	self:SendDefault(s_guid,className, "unlock", "CtrRef", s_Instance.unlock)
end

function Type:UnlockableShaderParameterValueCollection (p_class, p_guid)
	local s_Instance = UnlockableShaderParameterValueCollection(p_class) 
 	local className = "UnlockableShaderParameterValueCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "shaderParameterName", "string", s_Instance.shaderParameterName)
end

function Type:UnlockableTextureCollection (p_class, p_guid)
	local s_Instance = UnlockableTextureCollection(p_class) 
 	local className = "UnlockableTextureCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "CtrRef", s_Instance.defaultValue)
end

function Type:UnlockableTextureSliceCollection (p_class, p_guid)
	local s_Instance = UnlockableTextureSliceCollection(p_class) 
 	local className = "UnlockableTextureSliceCollection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "int", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "possibleValues", "List<CtrRef)>", s_Instance.possibleValues)
end

function Type:UnlockAsset (p_class, p_guid)
	local s_Instance = UnlockAsset(p_class) 
 	local className = "UnlockAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "linkedTo", "List<CtrRef)>", s_Instance.linkedTo)
end

function Type:UnlockAssetBase (p_class, p_guid)
	local s_Instance = UnlockAssetBase(p_class) 
 	local className = "UnlockAssetBase"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoAvailable", "bool", s_Instance.autoAvailable)
	self:SendDefault(s_guid,className, "availableForPlayer", "UnlockAvailability", s_Instance.availableForPlayer)
	self:SendDefault(s_guid,className, "debugUnlockId", "string", s_Instance.debugUnlockId)
	self:SendDefault(s_guid,className, "hiddenInProgression", "bool", s_Instance.hiddenInProgression)
	self:SendDefault(s_guid,className, "identifier", "uint", s_Instance.identifier)
	self:SendDefault(s_guid,className, "nextLevelUnlockAsset", "CtrRef", s_Instance.nextLevelUnlockAsset)
	self:SendDefault(s_guid,className, "unlockScore", "uint", s_Instance.unlockScore)
	self:SendDefault(s_guid,className, "unlockUserData", "CtrRef", s_Instance.unlockUserData)
end

function Type:UnlockAssetPair (p_class, p_guid)
	local s_Instance = UnlockAssetPair(p_class) 
 	local className = "UnlockAssetPair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "result", "CtrRef", s_Instance.result)
	self:SendDefault(s_guid,className, "second", "CtrRef", s_Instance.second)
end

function Type:UnlockComponentData (p_class, p_guid)
	local s_Instance = UnlockComponentData(p_class) 
 	local className = "UnlockComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "invertUnlockTest", "bool", s_Instance.invertUnlockTest)
	self:SendDefault(s_guid,className, "unlockableFromAllEntries", "bool", s_Instance.unlockableFromAllEntries)
	self:SendDefault(s_guid,className, "unlockAsset", "CtrRef", s_Instance.unlockAsset)
	self:SendDefault(s_guid,className, "unlockDataKey", "uint", s_Instance.unlockDataKey)
end

function Type:UnlockValuePair (p_class, p_guid)
	local s_Instance = UnlockValuePair(p_class) 
 	local className = "UnlockValuePair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "id", "string", s_Instance.id)
end

function Type:UnlockWeaponAndSlot (p_class, p_guid)
	local s_Instance = UnlockWeaponAndSlot(p_class) 
 	local className = "UnlockWeaponAndSlot"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "slot", "WeaponSlot", s_Instance.slot)
	self:SendDefault(s_guid,className, "unlockAssets", "List<CtrRef)>", s_Instance.unlockAssets)
	self:SendDefault(s_guid,className, "weapon", "CtrRef", s_Instance.weapon)
end

function Type:UpdateAgeData (p_class, p_guid)
	local s_Instance = UpdateAgeData(p_class) 
 	local className = "UpdateAgeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lifetime", "float", s_Instance.lifetime)
end

function Type:UpdateAlphaLevelMaxData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelMaxData(p_class) 
 	local className = "UpdateAlphaLevelMaxData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxLevel", "float", s_Instance.maxLevel)
end

function Type:UpdateAlphaLevelMinData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelMinData(p_class) 
 	local className = "UpdateAlphaLevelMinData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "minLevel", "float", s_Instance.minLevel)
end

function Type:UpdateAlphaLevelScaleData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelScaleData(p_class) 
 	local className = "UpdateAlphaLevelScaleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "exponent", "float", s_Instance.exponent)
end

function Type:UpdateCameraProximityData (p_class, p_guid)
	local s_Instance = UpdateCameraProximityData(p_class) 
 	local className = "UpdateCameraProximityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "forwardOffset", "float", s_Instance.forwardOffset)
	self:SendDefault(s_guid,className, "size", "Vec3", s_Instance.size)
end

function Type:UpdateClipScaleData (p_class, p_guid)
	local s_Instance = UpdateClipScaleData(p_class) 
 	local className = "UpdateClipScaleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lookup", "List<short)>", s_Instance.lookup)
end

function Type:UpdateColorData (p_class, p_guid)
	local s_Instance = UpdateColorData(p_class) 
 	local className = "UpdateColorData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "Vec3", s_Instance.color)
end

function Type:UpdateSizeData (p_class, p_guid)
	local s_Instance = UpdateSizeData(p_class) 
 	local className = "UpdateSizeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "pivot", "Vec2", s_Instance.pivot)
end

function Type:UpdateTextureCoordsData (p_class, p_guid)
	local s_Instance = UpdateTextureCoordsData(p_class) 
 	local className = "UpdateTextureCoordsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "textureBlendValue", "float", s_Instance.textureBlendValue)
	self:SendDefault(s_guid,className, "textureInfo1", "EmitterTextureInfo", s_Instance.textureInfo1)
end

function Type:UpdateTransparencyData (p_class, p_guid)
	local s_Instance = UpdateTransparencyData(p_class) 
 	local className = "UpdateTransparencyData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cullThreshold", "float", s_Instance.cullThreshold)
end

function Type:UrgencyModifierData (p_class, p_guid)
	local s_Instance = UrgencyModifierData(p_class) 
 	local className = "UrgencyModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "modifier", "float", s_Instance.modifier)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:UrgencySetData (p_class, p_guid)
	local s_Instance = UrgencySetData(p_class) 
 	local className = "UrgencySetData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "urgencyModifiers", "List<UrgencyModifierData)>", s_Instance.urgencyModifiers)
end

function Type:UrgencyUserData (p_class, p_guid)
	local s_Instance = UrgencyUserData(p_class) 
 	local className = "UrgencyUserData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "base", "CtrRef", s_Instance.base)
	self:SendDefault(s_guid,className, "modifierSets", "List<CtrRef)>", s_Instance.modifierSets)
	self:SendDefault(s_guid,className, "urgencyModifiers", "List<UrgencyModifierData)>", s_Instance.urgencyModifiers)
end

function Type:UserMusicArbiterNodeData (p_class, p_guid)
	local s_Instance = UserMusicArbiterNodeData(p_class) 
 	local className = "UserMusicArbiterNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in", "AudioGraphNodePort", s_Instance.inValue)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "plugin", "SoundGraphPluginRef", s_Instance.plugin)
end

function Type:UserMusicControllerNodeData (p_class, p_guid)
	local s_Instance = UserMusicControllerNodeData(p_class) 
 	local className = "UserMusicControllerNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "override", "AudioGraphNodePort", s_Instance.override)
	self:SendDefault(s_guid,className, "restore", "AudioGraphNodePort", s_Instance.restore)
	self:SendDefault(s_guid,className, "restoreOnDeactivated", "bool", s_Instance.restoreOnDeactivated)
end

function Type:ValueAtX (p_class, p_guid)
	local s_Instance = ValueAtX(p_class) 
 	local className = "ValueAtX"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
	self:SendDefault(s_guid,className, "x", "float", s_Instance.x)
end

function Type:ValueDebugNodeData (p_class, p_guid)
	local s_Instance = ValueDebugNodeData(p_class) 
 	local className = "ValueDebugNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<CtrRef)>", s_Instance.values)
end

function Type:ValueSelectorEntry (p_class, p_guid)
	local s_Instance = ValueSelectorEntry(p_class) 
 	local className = "ValueSelectorEntry"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "caseValue", "float", s_Instance.caseValue)
	self:SendDefault(s_guid,className, "input", "AudioGraphNodePort", s_Instance.input)
end

function Type:ValueSelectorNodeData (p_class, p_guid)
	local s_Instance = ValueSelectorNodeData(p_class) 
 	local className = "ValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultCaseValue", "float", s_Instance.defaultCaseValue)
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "out", "AudioGraphNodePort", s_Instance.outValue)
	self:SendDefault(s_guid,className, "value", "AudioGraphNodePort", s_Instance.value)
end

function Type:ValueUnlockAsset (p_class, p_guid)
	local s_Instance = ValueUnlockAsset(p_class) 
 	local className = "ValueUnlockAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "unlockValues", "List<CtrRef)>", s_Instance.unlockValues)
end

function Type:VaultWaypointData (p_class, p_guid)
	local s_Instance = VaultWaypointData(p_class) 
 	local className = "VaultWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "vaultTask", "AILocoVaultTaskData", s_Instance.vaultTask)
end

function Type:Vec2PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec2PropertyTrackData(p_class) 
 	local className = "Vec2PropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec2)>", s_Instance.values)
end

function Type:Vec2RecordingData (p_class, p_guid)
	local s_Instance = Vec2RecordingData(p_class) 
 	local className = "Vec2RecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec2)>", s_Instance.values)
end

function Type:Vec3EntityData (p_class, p_guid)
	local s_Instance = Vec3EntityData(p_class) 
 	local className = "Vec3EntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "defaultValue", "Vec3", s_Instance.defaultValue)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:Vec3MathOpEntityData (p_class, p_guid)
	local s_Instance = Vec3MathOpEntityData(p_class) 
 	local className = "Vec3MathOpEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "operators", "List<Vec3MathOp)>", s_Instance.operators)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "vec3MathOpEntityData",  "readonly", s_Instance.vec3MathOpEntityData)
	self:SendDefault(s_guid,className, "vec3MathOp",  "uint", s_Instance.vec3MathOp)
end

function Type:Vec3PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec3PropertyTrackData(p_class) 
 	local className = "Vec3PropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec3)>", s_Instance.values)
end

function Type:Vec3RecordingData (p_class, p_guid)
	local s_Instance = Vec3RecordingData(p_class) 
 	local className = "Vec3RecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec3)>", s_Instance.values)
end

function Type:Vec4PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec4PropertyTrackData(p_class) 
 	local className = "Vec4PropertyTrackData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec4)>", s_Instance.values)
end

function Type:Vec4RecordingData (p_class, p_guid)
	local s_Instance = Vec4RecordingData(p_class) 
 	local className = "Vec4RecordingData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "values", "List<Vec4)>", s_Instance.values)
end

function Type:VecSplitterEntityData (p_class, p_guid)
	local s_Instance = VecSplitterEntityData(p_class) 
 	local className = "VecSplitterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "vec3", "RimeLib.Frostbite).Containers.Vec3", s_Instance.vec3)
	self:SendDefault(s_guid,className, "vec4", "RimeLib.Frostbite).Containers.Vec4", s_Instance.vec4)
end

function Type:VectorArrayShaderParameter (p_class, p_guid)
	local s_Instance = VectorArrayShaderParameter(p_class) 
 	local className = "VectorArrayShaderParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "parameterType", "ShaderParameterType", s_Instance.parameterType)
	self:SendDefault(s_guid,className, "values", "List<Vec4)>", s_Instance.values)
end

function Type:VectorShaderParameter (p_class, p_guid)
	local s_Instance = VectorShaderParameter(p_class) 
 	local className = "VectorShaderParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "parameterName", "string", s_Instance.parameterName)
	self:SendDefault(s_guid,className, "parameterType", "ShaderParameterType", s_Instance.parameterType)
	self:SendDefault(s_guid,className, "value", "Vec4", s_Instance.value)
end

function Type:VectorShapeData (p_class, p_guid)
	local s_Instance = VectorShapeData(p_class) 
 	local className = "VectorShapeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowRoll", "bool", s_Instance.allowRoll)
	self:SendDefault(s_guid,className, "isClosed", "bool", s_Instance.isClosed)
	self:SendDefault(s_guid,className, "normals", "List<Vec3)>", s_Instance.normals)
	self:SendDefault(s_guid,className, "points", "List<Vec3)>", s_Instance.points)
	self:SendDefault(s_guid,className, "tension", "float", s_Instance.tension)
end

function Type:VegetationBaseEntityData (p_class, p_guid)
	local s_Instance = VegetationBaseEntityData(p_class) 
 	local className = "VegetationBaseEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "basePoseTransforms", "List<LinearTransform)>", s_Instance.basePoseTransforms)
	self:SendDefault(s_guid,className, "basePoseTranslations", "List<Vec3)>", s_Instance.basePoseTranslations)
	self:SendDefault(s_guid,className, "hierarchy", "List<int)>", s_Instance.hierarchy)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "physicsData", "CtrRef", s_Instance.physicsData)
	self:SendDefault(s_guid,className, "shadowMesh", "CtrRef", s_Instance.shadowMesh)
end

function Type:VegetationSystemSettings (p_class, p_guid)
	local s_Instance = VegetationSystemSettings(p_class) 
 	local className = "VegetationSystemSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "batchDrawEnable", "bool", s_Instance.batchDrawEnable)
	self:SendDefault(s_guid,className, "destructionEnabled", "bool", s_Instance.destructionEnabled)
	self:SendDefault(s_guid,className, "dissolveEnable", "bool", s_Instance.dissolveEnable)
	self:SendDefault(s_guid,className, "drawEnable", "bool", s_Instance.drawEnable)
	self:SendDefault(s_guid,className, "drawNodes", "bool", s_Instance.drawNodes)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "enableJobs", "bool", s_Instance.enableJobs)
	self:SendDefault(s_guid,className, "forceShadowLod", "int", s_Instance.forceShadowLod)
	self:SendDefault(s_guid,className, "jobCount", "uint", s_Instance.jobCount)
	self:SendDefault(s_guid,className, "jointTensionLimit", "float", s_Instance.jointTensionLimit)
	self:SendDefault(s_guid,className, "jointTensionLimitIndex", "int", s_Instance.jointTensionLimitIndex)
	self:SendDefault(s_guid,className, "localInfluencesEnabled", "bool", s_Instance.localInfluencesEnabled)
	self:SendDefault(s_guid,className, "maxActiveDistance", "float", s_Instance.maxActiveDistance)
	self:SendDefault(s_guid,className, "maxPreSimsPerJob", "uint", s_Instance.maxPreSimsPerJob)
	self:SendDefault(s_guid,className, "shadowMeshEnable", "bool", s_Instance.shadowMeshEnable)
	self:SendDefault(s_guid,className, "simulateServerSide", "bool", s_Instance.simulateServerSide)
	self:SendDefault(s_guid,className, "simulationMemKbClient", "uint", s_Instance.simulationMemKbClient)
	self:SendDefault(s_guid,className, "simulationMemKbServer", "uint", s_Instance.simulationMemKbServer)
	self:SendDefault(s_guid,className, "subDestructionEnabled", "bool", s_Instance.subDestructionEnabled)
	self:SendDefault(s_guid,className, "timeScale", "float", s_Instance.timeScale)
	self:SendDefault(s_guid,className, "useShadowLodOffset", "bool", s_Instance.useShadowLodOffset)
	self:SendDefault(s_guid,className, "windStrength", "float", s_Instance.windStrength)
	self:SendDefault(s_guid,className, "windVariation", "float", s_Instance.windVariation)
	self:SendDefault(s_guid,className, "windVariationRate", "float", s_Instance.windVariationRate)
end

function Type:VegetationTreeEntityData (p_class, p_guid)
	local s_Instance = VegetationTreeEntityData(p_class) 
 	local className = "VegetationTreeEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "branchHitpoints", "float", s_Instance.branchHitpoints)
	self:SendDefault(s_guid,className, "branchL2Hitpoints", "float", s_Instance.branchL2Hitpoints)
	self:SendDefault(s_guid,className, "branchStiffness", "float", s_Instance.branchStiffness)
	self:SendDefault(s_guid,className, "branchStiffnessL2", "float", s_Instance.branchStiffnessL2)
	self:SendDefault(s_guid,className, "breakableJointThreshold", "float", s_Instance.breakableJointThreshold)
	self:SendDefault(s_guid,className, "bulletImpactEffect", "CtrRef", s_Instance.bulletImpactEffect)
	self:SendDefault(s_guid,className, "clientSideOnly", "bool", s_Instance.clientSideOnly)
	self:SendDefault(s_guid,className, "coliPlaneDepth", "float", s_Instance.coliPlaneDepth)
	self:SendDefault(s_guid,className, "collisionEffect", "CtrRef", s_Instance.collisionEffect)
	self:SendDefault(s_guid,className, "collisionImpactMultiplier", "float", s_Instance.collisionImpactMultiplier)
	self:SendDefault(s_guid,className, "constraintStemB1", "bool", s_Instance.constraintStemB1)
	self:SendDefault(s_guid,className, "constraintStemB2", "bool", s_Instance.constraintStemB2)
	self:SendDefault(s_guid,className, "fallDirectionEnd", "float", s_Instance.fallDirectionEnd)
	self:SendDefault(s_guid,className, "fallDirectionStart", "float", s_Instance.fallDirectionStart)
	self:SendDefault(s_guid,className, "forceFullSim", "bool", s_Instance.forceFullSim)
	self:SendDefault(s_guid,className, "groundImpactEffect", "CtrRef", s_Instance.groundImpactEffect)
	self:SendDefault(s_guid,className, "impactThreshold", "float", s_Instance.impactThreshold)
	self:SendDefault(s_guid,className, "localWindEffect", "CtrRef", s_Instance.localWindEffect)
	self:SendDefault(s_guid,className, "partsTimeToLive", "float", s_Instance.partsTimeToLive)
	self:SendDefault(s_guid,className, "shadowLODOffset", "uint", s_Instance.shadowLODOffset)
	self:SendDefault(s_guid,className, "splashDistantEffect", "CtrRef", s_Instance.splashDistantEffect)
	self:SendDefault(s_guid,className, "splashNearEffect", "CtrRef", s_Instance.splashNearEffect)
	self:SendDefault(s_guid,className, "stemBoneCount", "int", s_Instance.stemBoneCount)
	self:SendDefault(s_guid,className, "stemHitpoints", "float", s_Instance.stemHitpoints)
	self:SendDefault(s_guid,className, "stemPhysicsWidth", "float", s_Instance.stemPhysicsWidth)
	self:SendDefault(s_guid,className, "stemRipEffect", "CtrRef", s_Instance.stemRipEffect)
	self:SendDefault(s_guid,className, "stemStiffness", "float", s_Instance.stemStiffness)
	self:SendDefault(s_guid,className, "stemStiffnessSpread", "float", s_Instance.stemStiffnessSpread)
	self:SendDefault(s_guid,className, "treeFallEffect", "CtrRef", s_Instance.treeFallEffect)
	self:SendDefault(s_guid,className, "useImpactThreshold", "bool", s_Instance.useImpactThreshold)
	self:SendDefault(s_guid,className, "usePhysicsShapes", "bool", s_Instance.usePhysicsShapes)
	self:SendDefault(s_guid,className, "windBranch", "float", s_Instance.windBranch)
	self:SendDefault(s_guid,className, "windBranchL2", "float", s_Instance.windBranchL2)
	self:SendDefault(s_guid,className, "windStem", "float", s_Instance.windStem)
end

function Type:VehicleCameraControlBinding (p_class, p_guid)
	local s_Instance = VehicleCameraControlBinding(p_class) 
 	local className = "VehicleCameraControlBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enableAnimatedVehicleCamera", "AntRef", s_Instance.enableAnimatedVehicleCamera)
end

function Type:VehicleCameraData (p_class, p_guid)
	local s_Instance = VehicleCameraData(p_class) 
 	local className = "VehicleCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fixedAngleZ", "bool", s_Instance.fixedAngleZ)
	self:SendDefault(s_guid,className, "fixedPosition", "bool", s_Instance.fixedPosition)
	self:SendDefault(s_guid,className, "moveToPosition", "Vec3", s_Instance.moveToPosition)
	self:SendDefault(s_guid,className, "moveToPositionSlopeFactor", "Vec3", s_Instance.moveToPositionSlopeFactor)
	self:SendDefault(s_guid,className, "positionFactor", "float", s_Instance.positionFactor)
	self:SendDefault(s_guid,className, "resetDistance", "float", s_Instance.resetDistance)
	self:SendDefault(s_guid,className, "rotationFactor", "Vec3", s_Instance.rotationFactor)
	self:SendDefault(s_guid,className, "targetOffset", "Vec3", s_Instance.targetOffset)
	self:SendDefault(s_guid,className, "targetOffsetSlopeFactor", "Vec3", s_Instance.targetOffsetSlopeFactor)
	self:SendDefault(s_guid,className, "useTerrainAdjustment", "bool", s_Instance.useTerrainAdjustment)
end

function Type:VehicleConfigData (p_class, p_guid)
	local s_Instance = VehicleConfigData(p_class) 
 	local className = "VehicleConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aeroDynamicPhysics", "CtrRef", s_Instance.aeroDynamicPhysics)
	self:SendDefault(s_guid,className, "airDensity", "float", s_Instance.airDensity)
	self:SendDefault(s_guid,className, "airDragArea", "float", s_Instance.airDragArea)
	self:SendDefault(s_guid,className, "antiRollBars", "fb.AntiRollBars)", s_Instance.antiRollBars)
	self:SendDefault(s_guid,className, "bodyMass", "float", s_Instance.bodyMass)
	self:SendDefault(s_guid,className, "centerOfMass", "Vec3", s_Instance.centerOfMass)
	self:SendDefault(s_guid,className, "centerOfMassHandlingOffset", "Vec3", s_Instance.centerOfMassHandlingOffset)
	self:SendDefault(s_guid,className, "coefficientOfAirFriction", "float", s_Instance.coefficientOfAirFriction)
	self:SendDefault(s_guid,className, "constantForce", "List<ConstantForceData)>", s_Instance.constantForce)
	self:SendDefault(s_guid,className, "downForceBaseFactor", "float", s_Instance.downForceBaseFactor)
	self:SendDefault(s_guid,className, "downForceWheelFactor", "float", s_Instance.downForceWheelFactor)
	self:SendDefault(s_guid,className, "floatPhysics", "CtrRef", s_Instance.floatPhysics)
	self:SendDefault(s_guid,className, "gravityModifier", "float", s_Instance.gravityModifier)
	self:SendDefault(s_guid,className, "inertiaModifier", "Vec3", s_Instance.inertiaModifier)
	self:SendDefault(s_guid,className, "input", "VehicleInputData", s_Instance.input)
	self:SendDefault(s_guid,className, "invertPitchAllowed", "bool", s_Instance.invertPitchAllowed)
	self:SendDefault(s_guid,className, "motionDamping", "CtrRef", s_Instance.motionDamping)
	self:SendDefault(s_guid,className, "motorbikePhysics", "CtrRef", s_Instance.motorbikePhysics)
	self:SendDefault(s_guid,className, "parachutePhysics", "CtrRef", s_Instance.parachutePhysics)
	self:SendDefault(s_guid,className, "stabilizer", "CtrRef", s_Instance.stabilizer)
	self:SendDefault(s_guid,className, "stabilizers", "List<StabilizerSettings)>", s_Instance.stabilizers)
	self:SendDefault(s_guid,className, "standStillLowSpeedTimeLimit", "float", s_Instance.standStillLowSpeedTimeLimit)
	self:SendDefault(s_guid,className, "staticFrictionBreakCollisionMod", "float", s_Instance.staticFrictionBreakCollisionMod)
	self:SendDefault(s_guid,className, "staticFrictionBreakVelocityMod", "float", s_Instance.staticFrictionBreakVelocityMod)
	self:SendDefault(s_guid,className, "useDownForce", "bool", s_Instance.useDownForce)
	self:SendDefault(s_guid,className, "useDownForceWheelFactor", "bool", s_Instance.useDownForceWheelFactor)
	self:SendDefault(s_guid,className, "useGearbox", "bool", s_Instance.useGearbox)
	self:SendDefault(s_guid,className, "useMotorcycleControl", "bool", s_Instance.useMotorcycleControl)
	self:SendDefault(s_guid,className, "useStandStillBrake", "bool", s_Instance.useStandStillBrake)
	self:SendDefault(s_guid,className, "useStandStillSleep", "bool", s_Instance.useStandStillSleep)
	self:SendDefault(s_guid,className, "useTurnAroundForce", "bool", s_Instance.useTurnAroundForce)
	self:SendDefault(s_guid,className, "useWindResistance", "bool", s_Instance.useWindResistance)
	self:SendDefault(s_guid,className, "vehicleModeAtReset", "VehicleMode", s_Instance.vehicleModeAtReset)
	self:SendDefault(s_guid,className, "vehicleModeChangeEnteringTime", "float", s_Instance.vehicleModeChangeEnteringTime)
	self:SendDefault(s_guid,className, "vehicleModeChangeLeavingTime", "float", s_Instance.vehicleModeChangeLeavingTime)
	self:SendDefault(s_guid,className, "vehicleModeChangeStartingTime", "float", s_Instance.vehicleModeChangeStartingTime)
	self:SendDefault(s_guid,className, "vehicleModeChangeStoppingTime", "float", s_Instance.vehicleModeChangeStoppingTime)
	self:SendDefault(s_guid,className, "windResistanceBaseFactor", "float", s_Instance.windResistanceBaseFactor)
	self:SendDefault(s_guid,className, "windResistanceVelocityFactor", "float", s_Instance.windResistanceVelocityFactor)
	self:SendDefault(s_guid,className, "windResistanceVelocityFactorMax", "float", s_Instance.windResistanceVelocityFactorMax)
	self:SendDefault(s_guid,className, "windResistanceVelocityFactorMin", "float", s_Instance.windResistanceVelocityFactorMin)
	self:SendDefault(s_guid,className, "yawMax", "float", s_Instance.yawMax)
	self:SendDefault(s_guid,className, "yawMin", "float", s_Instance.yawMin)
end

function Type:VehicleCustomizationAsset (p_class, p_guid)
	local s_Instance = VehicleCustomizationAsset(p_class) 
 	local className = "VehicleCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customization", "CtrRef", s_Instance.customization)
end

function Type:VehicleDeployWeaponData (p_class, p_guid)
	local s_Instance = VehicleDeployWeaponData(p_class) 
 	local className = "VehicleDeployWeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "canRemoteEnterVehicle", "bool", s_Instance.canRemoteEnterVehicle)
	self:SendDefault(s_guid,className, "checkClearSky", "bool", s_Instance.checkClearSky)
	self:SendDefault(s_guid,className, "deployAreaGroundFlatness", "float", s_Instance.deployAreaGroundFlatness)
	self:SendDefault(s_guid,className, "deployAreaGroundRayLength", "float", s_Instance.deployAreaGroundRayLength)
	self:SendDefault(s_guid,className, "deployAreaRadius", "float", s_Instance.deployAreaRadius)
	self:SendDefault(s_guid,className, "previewObject", "CtrRef", s_Instance.previewObject)
	self:SendDefault(s_guid,className, "usePreview", "bool", s_Instance.usePreview)
end

function Type:VehicleEntityData (p_class, p_guid)
	local s_Instance = VehicleEntityData(p_class) 
 	local className = "VehicleEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowVehicleOutsideCombatAreas", "bool", s_Instance.allowVehicleOutsideCombatAreas)
	self:SendDefault(s_guid,className, "angleOfImpact", "AngleOfImpactData", s_Instance.angleOfImpact)
	self:SendDefault(s_guid,className, "armorMultiplier", "float", s_Instance.armorMultiplier)
	self:SendDefault(s_guid,className, "belowWaterDamageDelay", "float", s_Instance.belowWaterDamageDelay)
	self:SendDefault(s_guid,className, "choseExitPointByDirection", "bool", s_Instance.choseExitPointByDirection)
	self:SendDefault(s_guid,className, "cockpitMesh", "CtrRef", s_Instance.cockpitMesh)
	self:SendDefault(s_guid,className, "controllableType", "string", s_Instance.controllableType)
	self:SendDefault(s_guid,className, "criticalDamageTime", "float", s_Instance.criticalDamageTime)
	self:SendDefault(s_guid,className, "criticallyDamagedEffect", "CtrRef", s_Instance.criticallyDamagedEffect)
	self:SendDefault(s_guid,className, "criticallyDamagedEffectPosition", "Vec3", s_Instance.criticallyDamagedEffectPosition)
	self:SendDefault(s_guid,className, "decayDelay", "float", s_Instance.decayDelay)
	self:SendDefault(s_guid,className, "decayRate", "float", s_Instance.decayRate)
	self:SendDefault(s_guid,className, "disabledDamageThreshold", "float", s_Instance.disabledDamageThreshold)
	self:SendDefault(s_guid,className, "emergencyRepairHealth", "float", s_Instance.emergencyRepairHealth)
	self:SendDefault(s_guid,className, "enableGroundmapLighting", "bool", s_Instance.enableGroundmapLighting)
	self:SendDefault(s_guid,className, "equipmentFakeVehicle", "bool", s_Instance.equipmentFakeVehicle)
	self:SendDefault(s_guid,className, "exitAllowed", "bool", s_Instance.exitAllowed)
	self:SendDefault(s_guid,className, "exitCameraSwitchDelay", "float", s_Instance.exitCameraSwitchDelay)
	self:SendDefault(s_guid,className, "exitDirectionSpeedThreshold", "float", s_Instance.exitDirectionSpeedThreshold)
	self:SendDefault(s_guid,className, "exitSpeedThreshold", "float", s_Instance.exitSpeedThreshold)
	self:SendDefault(s_guid,className, "explosion", "CtrRef", s_Instance.explosion)
	self:SendDefault(s_guid,className, "explosionPacksAttachable", "bool", s_Instance.explosionPacksAttachable)
	self:SendDefault(s_guid,className, "fLIRKeyColor", "Vec3", s_Instance.fLIRKeyColor)
	self:SendDefault(s_guid,className, "fLIRValue", "float", s_Instance.fLIRValue)
	self:SendDefault(s_guid,className, "foregroundRenderCockpitMesh", "bool", s_Instance.foregroundRenderCockpitMesh)
	self:SendDefault(s_guid,className, "frontHealthZone", "VehicleHealthZoneData", s_Instance.frontHealthZone)
	self:SendDefault(s_guid,className, "healthZonesShareDamage", "bool", s_Instance.healthZonesShareDamage)
	self:SendDefault(s_guid,className, "highAltitudeLockHeight", "float", s_Instance.highAltitudeLockHeight)
	self:SendDefault(s_guid,className, "hudData", "VehicleHudData", s_Instance.hudData)
	self:SendDefault(s_guid,className, "ignoreSoldierCollisionNormal", "bool", s_Instance.ignoreSoldierCollisionNormal)
	self:SendDefault(s_guid,className, "interactionOffset", "Vec3", s_Instance.interactionOffset)
	self:SendDefault(s_guid,className, "isAffectedByEMP", "bool", s_Instance.isAffectedByEMP)
	self:SendDefault(s_guid,className, "isLockable", "bool", s_Instance.isLockable)
	self:SendDefault(s_guid,className, "killSoldierCollisionSpeedThreshold", "float", s_Instance.killSoldierCollisionSpeedThreshold)
	self:SendDefault(s_guid,className, "leftHealthZone", "VehicleHealthZoneData", s_Instance.leftHealthZone)
	self:SendDefault(s_guid,className, "lockingTimeMultiplier", "float", s_Instance.lockingTimeMultiplier)
	self:SendDefault(s_guid,className, "maxPlayersInVehicle", "int", s_Instance.maxPlayersInVehicle)
	self:SendDefault(s_guid,className, "mesh", "CtrRef", s_Instance.mesh)
	self:SendDefault(s_guid,className, "minSpeedForMineActivation", "float", s_Instance.minSpeedForMineActivation)
	self:SendDefault(s_guid,className, "motionBlurMask", "bool", s_Instance.motionBlurMask)
	self:SendDefault(s_guid,className, "mPMode", "MPModeData", s_Instance.mPMode)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
	self:SendDefault(s_guid,className, "nametagHeightOffset", "float", s_Instance.nametagHeightOffset)
	self:SendDefault(s_guid,className, "nametagHeightScale", "float", s_Instance.nametagHeightScale)
	self:SendDefault(s_guid,className, "neverReportVehicleAsEmpty", "bool", s_Instance.neverReportVehicleAsEmpty)
	self:SendDefault(s_guid,className, "preDestructionDamageThreshold", "float", s_Instance.preDestructionDamageThreshold)
	self:SendDefault(s_guid,className, "preExplosionEffect", "CtrRef", s_Instance.preExplosionEffect)
	self:SendDefault(s_guid,className, "preExplosionEffectPosition", "Vec3", s_Instance.preExplosionEffectPosition)
	self:SendDefault(s_guid,className, "preExplosionTime", "float", s_Instance.preExplosionTime)
	self:SendDefault(s_guid,className, "rearHealthZone", "VehicleHealthZoneData", s_Instance.rearHealthZone)
	self:SendDefault(s_guid,className, "regenerationDelay", "float", s_Instance.regenerationDelay)
	self:SendDefault(s_guid,className, "regenerationDelayMultiplier", "float", s_Instance.regenerationDelayMultiplier)
	self:SendDefault(s_guid,className, "regenerationRate", "float", s_Instance.regenerationRate)
	self:SendDefault(s_guid,className, "regenerationRateMultiplier", "float", s_Instance.regenerationRateMultiplier)
	self:SendDefault(s_guid,className, "renderVehicleMesh", "bool", s_Instance.renderVehicleMesh)
	self:SendDefault(s_guid,className, "rightHealthZone", "VehicleHealthZoneData", s_Instance.rightHealthZone)
	self:SendDefault(s_guid,className, "showPlayerHealth", "bool", s_Instance.showPlayerHealth)
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
	self:SendDefault(s_guid,className, "throwOutSoldierInsideOnWaterDamage", "bool", s_Instance.throwOutSoldierInsideOnWaterDamage)
	self:SendDefault(s_guid,className, "upsideDownAngle", "float", s_Instance.upsideDownAngle)
	self:SendDefault(s_guid,className, "upsideDownDamage", "float", s_Instance.upsideDownDamage)
	self:SendDefault(s_guid,className, "upsideDownDamageDelay", "float", s_Instance.upsideDownDamageDelay)
	self:SendDefault(s_guid,className, "useAsTeamSpawner", "bool", s_Instance.useAsTeamSpawner)
	self:SendDefault(s_guid,className, "useDriverEyePosForNametagPos", "bool", s_Instance.useDriverEyePosForNametagPos)
	self:SendDefault(s_guid,className, "useLowAltitudeHeatSignature", "bool", s_Instance.useLowAltitudeHeatSignature)
	self:SendDefault(s_guid,className, "useProtectedShields", "bool", s_Instance.useProtectedShields)
	self:SendDefault(s_guid,className, "vehicleLockableInfo", "VehicleLockableInfoData", s_Instance.vehicleLockableInfo)
	self:SendDefault(s_guid,className, "velocityDamageMagnifier", "float", s_Instance.velocityDamageMagnifier)
	self:SendDefault(s_guid,className, "velocityDamageThreshold", "float", s_Instance.velocityDamageThreshold)
	self:SendDefault(s_guid,className, "voiceOverInfo", "CtrRef", s_Instance.voiceOverInfo)
	self:SendDefault(s_guid,className, "waterDamage", "float", s_Instance.waterDamage)
	self:SendDefault(s_guid,className, "waterDamageOffset", "float", s_Instance.waterDamageOffset)
end

function Type:VehicleEntryListenerBinding (p_class, p_guid)
	local s_Instance = VehicleEntryListenerBinding(p_class) 
 	local className = "VehicleEntryListenerBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inOpenEntry", "AntRef", s_Instance.inOpenEntry)
	self:SendDefault(s_guid,className, "inVehicle", "AntRef", s_Instance.inVehicle)
	self:SendDefault(s_guid,className, "inVehicleRetrigger", "AntRef", s_Instance.inVehicleRetrigger)
	self:SendDefault(s_guid,className, "vehicleEntryChooserIndex", "AntRef", s_Instance.vehicleEntryChooserIndex)
	self:SendDefault(s_guid,className, "vehicleEntryFire", "AntRef", s_Instance.vehicleEntryFire)
	self:SendDefault(s_guid,className, "vehicleEntryForceX", "AntRef", s_Instance.vehicleEntryForceX)
	self:SendDefault(s_guid,className, "vehicleEntryForceY", "AntRef", s_Instance.vehicleEntryForceY)
	self:SendDefault(s_guid,className, "vehicleEntryForceZ", "AntRef", s_Instance.vehicleEntryForceZ)
	self:SendDefault(s_guid,className, "vehicleEntryIndex", "AntRef", s_Instance.vehicleEntryIndex)
	self:SendDefault(s_guid,className, "vehicleEntryIndexUpdated", "AntRef", s_Instance.vehicleEntryIndexUpdated)
	self:SendDefault(s_guid,className, "vehicleEntryPitch", "AntRef", s_Instance.vehicleEntryPitch)
	self:SendDefault(s_guid,className, "vehicleEntryRoll", "AntRef", s_Instance.vehicleEntryRoll)
	self:SendDefault(s_guid,className, "vehicleEntryRotation", "AntRef", s_Instance.vehicleEntryRotation)
	self:SendDefault(s_guid,className, "vehicleEntryYaw", "AntRef", s_Instance.vehicleEntryYaw)
	self:SendDefault(s_guid,className, "vehicleOpenEntryIndex", "AntRef", s_Instance.vehicleOpenEntryIndex)
end

function Type:VehicleEntryListenerComponentData (p_class, p_guid)
	local s_Instance = VehicleEntryListenerComponentData(p_class) 
 	local className = "VehicleEntryListenerComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "animationWheelTransformDelay", "float", s_Instance.animationWheelTransformDelay)
	self:SendDefault(s_guid,className, "vehicleCameraControl", "VehicleCameraControlBinding", s_Instance.vehicleCameraControl)
	self:SendDefault(s_guid,className, "vehicleEntryListener", "VehicleEntryListenerBinding", s_Instance.vehicleEntryListener)
end

function Type:VehicleExitPointComponentData (p_class, p_guid)
	local s_Instance = VehicleExitPointComponentData(p_class) 
 	local className = "VehicleExitPointComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkForVehicleOverrun", "bool", s_Instance.checkForVehicleOverrun)
	self:SendDefault(s_guid,className, "impulse", "Vec3", s_Instance.impulse)
	self:SendDefault(s_guid,className, "inheritCameraDirection", "bool", s_Instance.inheritCameraDirection)
	self:SendDefault(s_guid,className, "ordinal", "int", s_Instance.ordinal)
	self:SendDefault(s_guid,className, "terrainHeight", "float", s_Instance.terrainHeight)
	self:SendDefault(s_guid,className, "velocity", "float", s_Instance.velocity)
end

function Type:VehicleHealthZoneData (p_class, p_guid)
	local s_Instance = VehicleHealthZoneData(p_class) 
 	local className = "VehicleHealthZoneData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "damageAngleMultiplier", "float", s_Instance.damageAngleMultiplier)
	self:SendDefault(s_guid,className, "maxHealth", "float", s_Instance.maxHealth)
	self:SendDefault(s_guid,className, "maxShieldHealth", "float", s_Instance.maxShieldHealth)
	self:SendDefault(s_guid,className, "minDamageAngle", "float", s_Instance.minDamageAngle)
	self:SendDefault(s_guid,className, "useDamageAngleCalculation", "bool", s_Instance.useDamageAngleCalculation)
end

function Type:VehicleHudData (p_class, p_guid)
	local s_Instance = VehicleHudData(p_class) 
 	local className = "VehicleHudData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "customization", "CtrRef", s_Instance.customization)
	self:SendDefault(s_guid,className, "customizationOffset", "Vec3", s_Instance.customizationOffset)
	self:SendDefault(s_guid,className, "minimapIcon", "UIHudIcon", s_Instance.minimapIcon)
	self:SendDefault(s_guid,className, "texture", "CtrRef", s_Instance.texture)
	self:SendDefault(s_guid,className, "vehicleItemHash", "uint", s_Instance.vehicleItemHash)
end

function Type:VehicleInputData (p_class, p_guid)
	local s_Instance = VehicleInputData(p_class) 
 	local className = "VehicleInputData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "brakeDeadzone", "float", s_Instance.brakeDeadzone)
	self:SendDefault(s_guid,className, "brakeInertiaInDuration", "float", s_Instance.brakeInertiaInDuration)
	self:SendDefault(s_guid,className, "brakeInertiaMinRatio", "float", s_Instance.brakeInertiaMinRatio)
	self:SendDefault(s_guid,className, "brakeInertiaOutDuration", "float", s_Instance.brakeInertiaOutDuration)
	self:SendDefault(s_guid,className, "pitchDeadzone", "float", s_Instance.pitchDeadzone)
	self:SendDefault(s_guid,className, "pitchInertiaInDuration", "float", s_Instance.pitchInertiaInDuration)
	self:SendDefault(s_guid,className, "pitchInertiaMinRatio", "float", s_Instance.pitchInertiaMinRatio)
	self:SendDefault(s_guid,className, "pitchInertiaOutDuration", "float", s_Instance.pitchInertiaOutDuration)
	self:SendDefault(s_guid,className, "rollDeadzone", "float", s_Instance.rollDeadzone)
	self:SendDefault(s_guid,className, "rollInertiaInDuration", "float", s_Instance.rollInertiaInDuration)
	self:SendDefault(s_guid,className, "rollInertiaMinRatio", "float", s_Instance.rollInertiaMinRatio)
	self:SendDefault(s_guid,className, "rollInertiaOutDuration", "float", s_Instance.rollInertiaOutDuration)
	self:SendDefault(s_guid,className, "throttleDeadzone", "float", s_Instance.throttleDeadzone)
	self:SendDefault(s_guid,className, "throttleInertiaInDuration", "float", s_Instance.throttleInertiaInDuration)
	self:SendDefault(s_guid,className, "throttleInertiaMinRatio", "float", s_Instance.throttleInertiaMinRatio)
	self:SendDefault(s_guid,className, "throttleInertiaOutDuration", "float", s_Instance.throttleInertiaOutDuration)
	self:SendDefault(s_guid,className, "yawDeadzone", "float", s_Instance.yawDeadzone)
	self:SendDefault(s_guid,className, "yawInertiaInDuration", "float", s_Instance.yawInertiaInDuration)
	self:SendDefault(s_guid,className, "yawInertiaMinRatio", "float", s_Instance.yawInertiaMinRatio)
	self:SendDefault(s_guid,className, "yawInertiaOutDuration", "float", s_Instance.yawInertiaOutDuration)
end

function Type:VehicleInputTweakData (p_class, p_guid)
	local s_Instance = VehicleInputTweakData(p_class) 
 	local className = "VehicleInputTweakData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "inputTweakType", "VehicleInputTweakType", s_Instance.inputTweakType)
	self:SendDefault(s_guid,className, "maxSpeed", "float", s_Instance.maxSpeed)
	self:SendDefault(s_guid,className, "maxSpeedScale", "float", s_Instance.maxSpeedScale)
	self:SendDefault(s_guid,className, "minSpeed", "float", s_Instance.minSpeed)
	self:SendDefault(s_guid,className, "minSpeedScale", "float", s_Instance.minSpeedScale)
end

function Type:VehicleLockableInfoData (p_class, p_guid)
	local s_Instance = VehicleLockableInfoData(p_class) 
 	local className = "VehicleLockableInfoData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "heatSignature", "float", s_Instance.heatSignature)
	self:SendDefault(s_guid,className, "lowAltitudeHeatSignature", "float", s_Instance.lowAltitudeHeatSignature)
	self:SendDefault(s_guid,className, "lowAltitudeHeight", "float", s_Instance.lowAltitudeHeight)
	self:SendDefault(s_guid,className, "radarSignature", "float", s_Instance.radarSignature)
end

function Type:VehicleParachuteBinding (p_class, p_guid)
	local s_Instance = VehicleParachuteBinding(p_class) 
 	local className = "VehicleParachuteBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "AntRef", s_Instance.enabled)
	self:SendDefault(s_guid,className, "vehicleType", "AntRef", s_Instance.vehicleType)
end

function Type:VehicleParachuteComponentData (p_class, p_guid)
	local s_Instance = VehicleParachuteComponentData(p_class) 
 	local className = "VehicleParachuteComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "VehicleParachuteBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "dropParachuteOnUndeploy", "bool", s_Instance.dropParachuteOnUndeploy)
	self:SendDefault(s_guid,className, "timeInvisibleAfterSpawn", "float", s_Instance.timeInvisibleAfterSpawn)
	self:SendDefault(s_guid,className, "undeployTime", "float", s_Instance.undeployTime)
	self:SendDefault(s_guid,className, "vehicleType", "int", s_Instance.vehicleType)
end

function Type:VehicleParachuteData (p_class, p_guid)
	local s_Instance = VehicleParachuteData(p_class) 
 	local className = "VehicleParachuteData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularDeployDamping", "float", s_Instance.angularDeployDamping)
	self:SendDefault(s_guid,className, "angularDescentDamping", "float", s_Instance.angularDescentDamping)
	self:SendDefault(s_guid,className, "deployInitialDragStart", "float", s_Instance.deployInitialDragStart)
	self:SendDefault(s_guid,className, "deployPhysicsStart", "float", s_Instance.deployPhysicsStart)
	self:SendDefault(s_guid,className, "deployTime", "float", s_Instance.deployTime)
	self:SendDefault(s_guid,className, "dragCoefficient", "float", s_Instance.dragCoefficient)
	self:SendDefault(s_guid,className, "freefallGravityMultiplier", "float", s_Instance.freefallGravityMultiplier)
	self:SendDefault(s_guid,className, "initialDragAngularVelocityPitch", "float", s_Instance.initialDragAngularVelocityPitch)
	self:SendDefault(s_guid,className, "initialDragRandomAngularVelocityRollMax", "float", s_Instance.initialDragRandomAngularVelocityRollMax)
	self:SendDefault(s_guid,className, "initialDragStartVelocityScale", "float", s_Instance.initialDragStartVelocityScale)
	self:SendDefault(s_guid,className, "maxPitchVelocity", "float", s_Instance.maxPitchVelocity)
	self:SendDefault(s_guid,className, "maxRollVelocity", "float", s_Instance.maxRollVelocity)
	self:SendDefault(s_guid,className, "maxYawVelocity", "float", s_Instance.maxYawVelocity)
	self:SendDefault(s_guid,className, "rampLength", "float", s_Instance.rampLength)
	self:SendDefault(s_guid,className, "terminalVelocity", "float", s_Instance.terminalVelocity)
	self:SendDefault(s_guid,className, "undeployGroundHeight", "float", s_Instance.undeployGroundHeight)
end

function Type:VehicleProjectileEntityData (p_class, p_guid)
	local s_Instance = VehicleProjectileEntityData(p_class) 
 	local className = "VehicleProjectileEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alignWithGround", "bool", s_Instance.alignWithGround)
	self:SendDefault(s_guid,className, "alignWithGroundRayLength", "float", s_Instance.alignWithGroundRayLength)
	self:SendDefault(s_guid,className, "autoEnter", "bool", s_Instance.autoEnter)
	self:SendDefault(s_guid,className, "checkGroundWhenSpawned", "bool", s_Instance.checkGroundWhenSpawned)
	self:SendDefault(s_guid,className, "deployInsideNeutralCombatAreaOnly", "bool", s_Instance.deployInsideNeutralCombatAreaOnly)
	self:SendDefault(s_guid,className, "enterDelay", "float", s_Instance.enterDelay)
	self:SendDefault(s_guid,className, "noVehicleCollisionTime", "float", s_Instance.noVehicleCollisionTime)
	self:SendDefault(s_guid,className, "vehicle", "CtrRef", s_Instance.vehicle)
end

function Type:VehicleSoundData (p_class, p_guid)
	local s_Instance = VehicleSoundData(p_class) 
 	local className = "VehicleSoundData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "bulletImpact", "CtrRef", s_Instance.bulletImpact)
end

function Type:VehicleSpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = VehicleSpawnReferenceObjectData(p_class) 
 	local className = "VehicleSpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "activeStance", "int", s_Instance.activeStance)
	self:SendDefault(s_guid,className, "activeStanceEntryIndex", "int", s_Instance.activeStanceEntryIndex)
	self:SendDefault(s_guid,className, "affectedByImpulse", "bool", s_Instance.affectedByImpulse)
	self:SendDefault(s_guid,className, "airDropCarrierTransform", "LinearTransform", s_Instance.airDropCarrierTransform)
	self:SendDefault(s_guid,className, "applyDamageToAbandonedVehicles", "bool", s_Instance.applyDamageToAbandonedVehicles)
	self:SendDefault(s_guid,className, "botBailOutDelay", "float", s_Instance.botBailOutDelay)
	self:SendDefault(s_guid,className, "botBailWhenHealthBelow", "float", s_Instance.botBailWhenHealthBelow)
	self:SendDefault(s_guid,className, "disregardSpawnAllowedSetting", "bool", s_Instance.disregardSpawnAllowedSetting)
	self:SendDefault(s_guid,className, "enableAvailableSeatOutput", "bool", s_Instance.enableAvailableSeatOutput)
	self:SendDefault(s_guid,className, "enterRestriction", "EntryEnterRestriction", s_Instance.enterRestriction)
	self:SendDefault(s_guid,className, "keepAliveRadius", "float", s_Instance.keepAliveRadius)
	self:SendDefault(s_guid,className, "respawnRange", "float", s_Instance.respawnRange)
	self:SendDefault(s_guid,className, "setTeamOnSpawn", "bool", s_Instance.setTeamOnSpawn)
	self:SendDefault(s_guid,className, "timeUntilAbandoned", "float", s_Instance.timeUntilAbandoned)
	self:SendDefault(s_guid,className, "timeUntilAbandonedIsDestroyed", "float", s_Instance.timeUntilAbandonedIsDestroyed)
	self:SendDefault(s_guid,className, "vehicleIsNearDistance", "float", s_Instance.vehicleIsNearDistance)
	self:SendDefault(s_guid,className, "wreckDuration", "float", s_Instance.wreckDuration)
end

function Type:VehicleSpawnStateEntityData (p_class, p_guid)
	local s_Instance = VehicleSpawnStateEntityData(p_class) 
 	local className = "VehicleSpawnStateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "engineIndex", "uint", s_Instance.engineIndex)
	self:SendDefault(s_guid,className, "heightOffset", "float", s_Instance.heightOffset)
	self:SendDefault(s_guid,className, "initialRpmModifier", "float", s_Instance.initialRpmModifier)
	self:SendDefault(s_guid,className, "initialThrottle", "float", s_Instance.initialThrottle)
	self:SendDefault(s_guid,className, "initialVelocity", "Vec3", s_Instance.initialVelocity)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "startupDelayModifier", "float", s_Instance.startupDelayModifier)
end

function Type:VehicleState (p_class, p_guid)
	local s_Instance = VehicleState(p_class) 
 	local className = "VehicleState"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "vehicleName", "string", s_Instance.vehicleName)
end

function Type:VehicleStateTriggerEntityData (p_class, p_guid)
	local s_Instance = VehicleStateTriggerEntityData(p_class) 
 	local className = "VehicleStateTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowAiToEnterAllSeats", "bool", s_Instance.allowAiToEnterAllSeats)
	self:SendDefault(s_guid,className, "allowHumanToEnterAllSeats", "bool", s_Instance.allowHumanToEnterAllSeats)
	self:SendDefault(s_guid,className, "banAiFromSpecificSeat", "bool", s_Instance.banAiFromSpecificSeat)
	self:SendDefault(s_guid,className, "bulletCount", "uint", s_Instance.bulletCount)
	self:SendDefault(s_guid,className, "checkHealthGreaterOrEqual", "bool", s_Instance.checkHealthGreaterOrEqual)
	self:SendDefault(s_guid,className, "destructionRadius", "float", s_Instance.destructionRadius)
	self:SendDefault(s_guid,className, "healthToCheck", "uint", s_Instance.healthToCheck)
	self:SendDefault(s_guid,className, "healthToSet", "uint", s_Instance.healthToSet)
	self:SendDefault(s_guid,className, "lockAmount", "float", s_Instance.lockAmount)
	self:SendDefault(s_guid,className, "restrictHumanToSpecificSeat", "bool", s_Instance.restrictHumanToSpecificSeat)
	self:SendDefault(s_guid,className, "seatSpecificIndexForAi", "uint", s_Instance.seatSpecificIndexForAi)
	self:SendDefault(s_guid,className, "seatSpecificIndexForHuman", "uint", s_Instance.seatSpecificIndexForHuman)
	self:SendDefault(s_guid,className, "shouldDestroyBangers", "bool", s_Instance.shouldDestroyBangers)
	self:SendDefault(s_guid,className, "shouldDestroyVehicles", "bool", s_Instance.shouldDestroyVehicles)
	self:SendDefault(s_guid,className, "triggerCriticalOnHealthSet", "bool", s_Instance.triggerCriticalOnHealthSet)
end

function Type:VehicleTrackerRenderTargetData (p_class, p_guid)
	local s_Instance = VehicleTrackerRenderTargetData(p_class) 
 	local className = "VehicleTrackerRenderTargetData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "positionOffset", "Vec2", s_Instance.positionOffset)
	self:SendDefault(s_guid,className, "renderTargetApectRatio", "float", s_Instance.renderTargetApectRatio)
	self:SendDefault(s_guid,className, "renderTargetIndex", "int", s_Instance.renderTargetIndex)
	self:SendDefault(s_guid,className, "scaleSize", "float", s_Instance.scaleSize)
	self:SendDefault(s_guid,className, "useRenderTarget", "bool", s_Instance.useRenderTarget)
end

function Type:VehicleVisualCustomizationAsset (p_class, p_guid)
	local s_Instance = VehicleVisualCustomizationAsset(p_class) 
 	local className = "VehicleVisualCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "textUnlockParts", "List<CtrRef)>", s_Instance.textUnlockParts)
	self:SendDefault(s_guid,className, "textureUnlockPartCollections", "List<CtrRef)>", s_Instance.textureUnlockPartCollections)
end

function Type:VehicleWaterEffectData (p_class, p_guid)
	local s_Instance = VehicleWaterEffectData(p_class) 
 	local className = "VehicleWaterEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "effect", "CtrRef", s_Instance.effect)
	self:SendDefault(s_guid,className, "position", "Vec3", s_Instance.position)
end

function Type:VehicleWaypointData (p_class, p_guid)
	local s_Instance = VehicleWaypointData(p_class) 
 	local className = "VehicleWaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angleoffset", "float", s_Instance.angleoffset)
	self:SendDefault(s_guid,className, "minSlowdownSpeed", "float", s_Instance.minSlowdownSpeed)
	self:SendDefault(s_guid,className, "speed", "float", s_Instance.speed)
	self:SendDefault(s_guid,className, "speedOverrideMovingTowards", "float", s_Instance.speedOverrideMovingTowards)
	self:SendDefault(s_guid,className, "stopHere", "bool", s_Instance.stopHere)
	self:SendDefault(s_guid,className, "stopHereRadius", "float", s_Instance.stopHereRadius)
	self:SendDefault(s_guid,className, "stoppingDeceleration", "float", s_Instance.stoppingDeceleration)
end

function Type:VeniceExplosionEntityData (p_class, p_guid)
	local s_Instance = VeniceExplosionEntityData(p_class) 
 	local className = "VeniceExplosionEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "isCausingSuppression", "bool", s_Instance.isCausingSuppression)
	self:SendDefault(s_guid,className, "spotsOnExplode", "bool", s_Instance.spotsOnExplode)
	self:SendDefault(s_guid,className, "unspotsOnExplode", "bool", s_Instance.unspotsOnExplode)
	self:SendDefault(s_guid,className, "unspottableTime", "float", s_Instance.unspottableTime)
end

function Type:VeniceFPSCameraData (p_class, p_guid)
	local s_Instance = VeniceFPSCameraData(p_class) 
 	local className = "VeniceFPSCameraData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "suppressionBlurAmountMultiplier", "float", s_Instance.suppressionBlurAmountMultiplier)
	self:SendDefault(s_guid,className, "suppressionBlurSizeMultiplier", "float", s_Instance.suppressionBlurSizeMultiplier)
end

function Type:VeniceGameplayLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceGameplayLevelDescriptionComponent(p_class) 
 	local className = "VeniceGameplayLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowParachuteFromMobileSpawnpoint", "bool", s_Instance.allowParachuteFromMobileSpawnpoint)
end

function Type:VeniceHudConfigAsset (p_class, p_guid)
	local s_Instance = VeniceHudConfigAsset(p_class) 
 	local className = "VeniceHudConfigAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ammoPickupSound", "CtrRef", s_Instance.ammoPickupSound)
	self:SendDefault(s_guid,className, "artilleryAiming", "CtrRef", s_Instance.artilleryAiming)
	self:SendDefault(s_guid,className, "artilleryAimingOOA", "CtrRef", s_Instance.artilleryAimingOOA)
	self:SendDefault(s_guid,className, "criticalHealthThreshold", "float", s_Instance.criticalHealthThreshold)
	self:SendDefault(s_guid,className, "innerNametagRadius", "float", s_Instance.innerNametagRadius)
	self:SendDefault(s_guid,className, "laserDesignatorLocked", "CtrRef", s_Instance.laserDesignatorLocked)
	self:SendDefault(s_guid,className, "laserDesignatorLocking", "CtrRef", s_Instance.laserDesignatorLocking)
	self:SendDefault(s_guid,className, "maxOrderIconDistance", "float", s_Instance.maxOrderIconDistance)
	self:SendDefault(s_guid,className, "minimap", "UIMinimapConfig", s_Instance.minimap)
	self:SendDefault(s_guid,className, "mortarStrikeLocking", "CtrRef", s_Instance.mortarStrikeLocking)
	self:SendDefault(s_guid,className, "mPDefeatSoundMec", "CtrRef", s_Instance.mPDefeatSoundMec)
	self:SendDefault(s_guid,className, "mPDefeatSoundRu", "CtrRef", s_Instance.mPDefeatSoundRu)
	self:SendDefault(s_guid,className, "mPDefeatSoundUs", "CtrRef", s_Instance.mPDefeatSoundUs)
	self:SendDefault(s_guid,className, "mPVictorySoundMec", "CtrRef", s_Instance.mPVictorySoundMec)
	self:SendDefault(s_guid,className, "mPVictorySoundRu", "CtrRef", s_Instance.mPVictorySoundRu)
	self:SendDefault(s_guid,className, "mPVictorySoundUs", "CtrRef", s_Instance.mPVictorySoundUs)
	self:SendDefault(s_guid,className, "nametagHealthVisibleForAll", "bool", s_Instance.nametagHealthVisibleForAll)
	self:SendDefault(s_guid,className, "nametags", "List<CtrRef)>", s_Instance.nametags)
	self:SendDefault(s_guid,className, "newObjectiveSound", "CtrRef", s_Instance.newObjectiveSound)
	self:SendDefault(s_guid,className, "objectiveCompletedSound", "CtrRef", s_Instance.objectiveCompletedSound)
	self:SendDefault(s_guid,className, "objectiveUpdatedSound", "CtrRef", s_Instance.objectiveUpdatedSound)
	self:SendDefault(s_guid,className, "outerNametagRadius", "float", s_Instance.outerNametagRadius)
	self:SendDefault(s_guid,className, "showSpawnPointsOnMinimap", "bool", s_Instance.showSpawnPointsOnMinimap)
	self:SendDefault(s_guid,className, "spawnScreenWeapons", "List<SpawnScreenWeaponData)>", s_Instance.spawnScreenWeapons)
	self:SendDefault(s_guid,className, "taggedVehicleCrosshair", "UITaggedVehicleCrosshair", s_Instance.taggedVehicleCrosshair)
	self:SendDefault(s_guid,className, "weaponPickupSound", "CtrRef", s_Instance.weaponPickupSound)
end

function Type:VeniceMapMarkerHudData (p_class, p_guid)
	local s_Instance = VeniceMapMarkerHudData(p_class) 
 	local className = "VeniceMapMarkerHudData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "icon", "UIHudIcon", s_Instance.icon)
end

function Type:VeniceMatchmakingLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceMatchmakingLevelDescriptionComponent(p_class) 
 	local className = "VeniceMatchmakingLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "licenses", "List<string)>", s_Instance.licenses)
	self:SendDefault(s_guid,className, "mod", "string", s_Instance.mod)
end

function Type:VeniceOnlineConfiguration (p_class, p_guid)
	local s_Instance = VeniceOnlineConfiguration(p_class) 
 	local className = "VeniceOnlineConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entitlementQueries", "List<CtrRef)>", s_Instance.entitlementQueries)
	self:SendDefault(s_guid,className, "platforms", "List<OnlinePlatformConfiguration)>", s_Instance.platforms)
	self:SendDefault(s_guid,className, "useFallback", "bool", s_Instance.useFallback)
end

function Type:VeniceOnlineSettings (p_class, p_guid)
	local s_Instance = VeniceOnlineSettings(p_class) 
 	local className = "VeniceOnlineSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "battlelogReport", "bool", s_Instance.battlelogReport)
	self:SendDefault(s_guid,className, "battlelogReportURL", "string", s_Instance.battlelogReportURL)
	self:SendDefault(s_guid,className, "blazeLogLevel", "int", s_Instance.blazeLogLevel)
	self:SendDefault(s_guid,className, "clientGameConfigurationOverride", "string", s_Instance.clientGameConfigurationOverride)
	self:SendDefault(s_guid,className, "dirtySockLogLevel", "int", s_Instance.dirtySockLogLevel)
	self:SendDefault(s_guid,className, "dogTagUploadPolicy", "DTagUploadPolicy", s_Instance.dogTagUploadPolicy)
	self:SendDefault(s_guid,className, "enableQoS", "bool", s_Instance.enableQoS)
	self:SendDefault(s_guid,className, "enableSnowroller", "bool", s_Instance.enableSnowroller)
	self:SendDefault(s_guid,className, "entitlementQueries", "List<CtrRef)>", s_Instance.entitlementQueries)
	self:SendDefault(s_guid,className, "matchFeedDetailsUrlPrefix", "string", s_Instance.matchFeedDetailsUrlPrefix)
	self:SendDefault(s_guid,className, "matchFeedListUrlPrefix", "string", s_Instance.matchFeedListUrlPrefix)
	self:SendDefault(s_guid,className, "matchFeedMaxFetchAttempts", "uint", s_Instance.matchFeedMaxFetchAttempts)
	self:SendDefault(s_guid,className, "matchFeedMinimumMillisecondsBetweenMatchReloads", "uint", s_Instance.matchFeedMinimumMillisecondsBetweenMatchReloads)
	self:SendDefault(s_guid,className, "matchFeedMinimumMillisecondsBetweenMatchRequests", "uint", s_Instance.matchFeedMinimumMillisecondsBetweenMatchRequests)
	self:SendDefault(s_guid,className, "matchFeedMinimumMillisecondsBetweenNewRequestAttempt", "uint", s_Instance.matchFeedMinimumMillisecondsBetweenNewRequestAttempt)
	self:SendDefault(s_guid,className, "matchFeedMinimumMillisecondsBetweenRequests", "uint", s_Instance.matchFeedMinimumMillisecondsBetweenRequests)
	self:SendDefault(s_guid,className, "matchImagesUrlPrefix", "string", s_Instance.matchImagesUrlPrefix)
	self:SendDefault(s_guid,className, "pingPeriod", "uint", s_Instance.pingPeriod)
	self:SendDefault(s_guid,className, "platforms", "List<OnlinePlatformConfiguration)>", s_Instance.platforms)
	self:SendDefault(s_guid,className, "punkBusterActivateClient", "bool", s_Instance.punkBusterActivateClient)
	self:SendDefault(s_guid,className, "punkBusterActivateServer", "bool", s_Instance.punkBusterActivateServer)
	self:SendDefault(s_guid,className, "queueCapacityOverride", "int", s_Instance.queueCapacityOverride)
	self:SendDefault(s_guid,className, "serviceNameOverride", "string", s_Instance.serviceNameOverride)
	self:SendDefault(s_guid,className, "snowrollerOrphanTimeout", "float", s_Instance.snowrollerOrphanTimeout)
	self:SendDefault(s_guid,className, "useFallback", "bool", s_Instance.useFallback)
	self:SendDefault(s_guid,className, "webFeedCountUrlPrefix", "string", s_Instance.webFeedCountUrlPrefix)
	self:SendDefault(s_guid,className, "webFeedMaxFetchAttempts", "uint", s_Instance.webFeedMaxFetchAttempts)
	self:SendDefault(s_guid,className, "webFeedMaxItems", "uint", s_Instance.webFeedMaxItems)
	self:SendDefault(s_guid,className, "webFeedMillisecondsBetweenNewRequestAttempt", "uint", s_Instance.webFeedMillisecondsBetweenNewRequestAttempt)
	self:SendDefault(s_guid,className, "webFeedMinimumMillisecondsBetweenRequests", "uint", s_Instance.webFeedMinimumMillisecondsBetweenRequests)
	self:SendDefault(s_guid,className, "webFeedUnreadCountFetchPeriod", "uint", s_Instance.webFeedUnreadCountFetchPeriod)
	self:SendDefault(s_guid,className, "webFeedUrlPrefix", "string", s_Instance.webFeedUrlPrefix)
end

function Type:VeniceRichPresenceLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceRichPresenceLevelDescriptionComponent(p_class) 
 	local className = "VeniceRichPresenceLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "contextValues", "List<RichPresenceContextSetting)>", s_Instance.contextValues)
	self:SendDefault(s_guid,className, "presenceMode", "CtrRef", s_Instance.presenceMode)
end

function Type:VeniceSoldierHealthModuleData (p_class, p_guid)
	local s_Instance = VeniceSoldierHealthModuleData(p_class) 
 	local className = "VeniceSoldierHealthModuleData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "abortSpawnImmortalityInputs", "List<EntryInputActionEnum)>", s_Instance.abortSpawnImmortalityInputs)
	self:SendDefault(s_guid,className, "binding", "SoldierHealthModuleBinding", s_Instance.binding)
	self:SendDefault(s_guid,className, "criticalFakeImmortalTime", "float", s_Instance.criticalFakeImmortalTime)
	self:SendDefault(s_guid,className, "immortalTimeAfterSpawn", "float", s_Instance.immortalTimeAfterSpawn)
	self:SendDefault(s_guid,className, "interactiveManDown", "bool", s_Instance.interactiveManDown)
	self:SendDefault(s_guid,className, "interactiveManDownPoseConstraints", "PoseConstraintsData", s_Instance.interactiveManDownPoseConstraints)
	self:SendDefault(s_guid,className, "interactiveManDownThreshold", "float", s_Instance.interactiveManDownThreshold)
	self:SendDefault(s_guid,className, "manDownRotate", "RotateToHitData", s_Instance.manDownRotate)
	self:SendDefault(s_guid,className, "manDownStateHealthPoints", "float", s_Instance.manDownStateHealthPoints)
	self:SendDefault(s_guid,className, "manDownStateTime", "float", s_Instance.manDownStateTime)
	self:SendDefault(s_guid,className, "postReviveHealth", "float", s_Instance.postReviveHealth)
	self:SendDefault(s_guid,className, "postReviveResponseTime", "float", s_Instance.postReviveResponseTime)
	self:SendDefault(s_guid,className, "regenerationDelay", "float", s_Instance.regenerationDelay)
	self:SendDefault(s_guid,className, "regenerationRate", "float", s_Instance.regenerationRate)
	self:SendDefault(s_guid,className, "sprintDisabledDamageThreshold", "float", s_Instance.sprintDisabledDamageThreshold)
	self:SendDefault(s_guid,className, "sprintDisabledWhenDamagedTime", "float", s_Instance.sprintDisabledWhenDamagedTime)
	self:SendDefault(s_guid,className, "timeForCorpse", "float", s_Instance.timeForCorpse)
	self:SendDefault(s_guid,className, "veniceSoldierHealthModuleData",  "readonly", s_Instance.veniceSoldierHealthModuleData)
	self:SendDefault(s_guid,className, "entryInputActionEnum",  "uint", s_Instance.entryInputActionEnum)
end

function Type:VeniceUICombatAreaAsset (p_class, p_guid)
	local s_Instance = VeniceUICombatAreaAsset(p_class) 
 	local className = "VeniceUICombatAreaAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "distanceField", "CtrRef", s_Instance.distanceField)
	self:SendDefault(s_guid,className, "surroundingDistanceField", "CtrRef", s_Instance.surroundingDistanceField)
end

function Type:VeniceUIConfiguration (p_class, p_guid)
	local s_Instance = VeniceUIConfiguration(p_class) 
 	local className = "VeniceUIConfiguration"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "metaDataAssetPath", "string", s_Instance.metaDataAssetPath)
end

function Type:VeniceUISettings (p_class, p_guid)
	local s_Instance = VeniceUISettings(p_class) 
 	local className = "VeniceUISettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "getStatsInOnlineFlow", "bool", s_Instance.getStatsInOnlineFlow)
	self:SendDefault(s_guid,className, "metaDataAssetPath", "string", s_Instance.metaDataAssetPath)
end

function Type:VeniceUnlockUserData (p_class, p_guid)
	local s_Instance = VeniceUnlockUserData(p_class) 
 	local className = "VeniceUnlockUserData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "checkSquad", "bool", s_Instance.checkSquad)
end

function Type:VeniceVehicleCustomizationAsset (p_class, p_guid)
	local s_Instance = VeniceVehicleCustomizationAsset(p_class) 
 	local className = "VeniceVehicleCustomizationAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "category", "VehicleCategory", s_Instance.category)
	self:SendDefault(s_guid,className, "nameSid", "string", s_Instance.nameSid)
end

function Type:VersionData (p_class, p_guid)
	local s_Instance = VersionData(p_class) 
 	local className = "VersionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "branchId", "string", s_Instance.branchId)
	self:SendDefault(s_guid,className, "dateTime", "string", s_Instance.dateTime)
	self:SendDefault(s_guid,className, "disclaimer", "string", s_Instance.disclaimer)
	self:SendDefault(s_guid,className, "gameName", "string", s_Instance.gameName)
	self:SendDefault(s_guid,className, "version", "int", s_Instance.version)
end

function Type:ViewFxData (p_class, p_guid)
	local s_Instance = ViewFxData(p_class) 
 	local className = "ViewFxData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blurAdd", "float", s_Instance.blurAdd)
	self:SendDefault(s_guid,className, "colorTint", "ColorTintData", s_Instance.colorTint)
	self:SendDefault(s_guid,className, "colorTintEnable", "bool", s_Instance.colorTintEnable)
	self:SendDefault(s_guid,className, "poissonRadialBlur", "PoissonRadialBlurData", s_Instance.poissonRadialBlur)
	self:SendDefault(s_guid,className, "poissonRadialBlurEnable", "bool", s_Instance.poissonRadialBlurEnable)
end

function Type:VignetteComponentData (p_class, p_guid)
	local s_Instance = VignetteComponentData(p_class) 
 	local className = "VignetteComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "color", "Vec3", s_Instance.color)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "exponent", "float", s_Instance.exponent)
	self:SendDefault(s_guid,className, "opacity", "float", s_Instance.opacity)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "scale", "Vec2", s_Instance.scale)
end

function Type:VisionBoxSettings (p_class, p_guid)
	local s_Instance = VisionBoxSettings(p_class) 
 	local className = "VisionBoxSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "decreaseXz", "float", s_Instance.decreaseXz)
	self:SendDefault(s_guid,className, "lowerTop", "float", s_Instance.lowerTop)
	self:SendDefault(s_guid,className, "raiseBottom", "float", s_Instance.raiseBottom)
	self:SendDefault(s_guid,className, "raiseBottomHuman", "float", s_Instance.raiseBottomHuman)
end

function Type:VisualEnvironmentEffectEntityData (p_class, p_guid)
	local s_Instance = VisualEnvironmentEffectEntityData(p_class) 
 	local className = "VisualEnvironmentEffectEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "cullAngleCurve", "Vec4", s_Instance.cullAngleCurve)
	self:SendDefault(s_guid,className, "cullDistanceCurve", "Vec4", s_Instance.cullDistanceCurve)
	self:SendDefault(s_guid,className, "lifetime", "float", s_Instance.lifetime)
	self:SendDefault(s_guid,className, "lifetimeCurve", "Vec4", s_Instance.lifetimeCurve)
	self:SendDefault(s_guid,className, "sampleOnStartOnly", "bool", s_Instance.sampleOnStartOnly)
	self:SendDefault(s_guid,className, "visualEnvironment", "CtrRef", s_Instance.visualEnvironment)
end

function Type:VisualEnvironmentEntityData (p_class, p_guid)
	local s_Instance = VisualEnvironmentEntityData(p_class) 
 	local className = "VisualEnvironmentEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
	self:SendDefault(s_guid,className, "visibility", "float", s_Instance.visibility)
end

function Type:VisualEnvironmentReferenceObjectData (p_class, p_guid)
	local s_Instance = VisualEnvironmentReferenceObjectData(p_class) 
 	local className = "VisualEnvironmentReferenceObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "overrideVisibility", "bool", s_Instance.overrideVisibility)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
end

function Type:VisualEnvironmentSettings (p_class, p_guid)
	local s_Instance = VisualEnvironmentSettings(p_class) 
 	local className = "VisualEnvironmentSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawStats", "bool", s_Instance.drawStats)
	self:SendDefault(s_guid,className, "sunRotationX", "float", s_Instance.sunRotationX)
	self:SendDefault(s_guid,className, "sunRotationY", "float", s_Instance.sunRotationY)
end

function Type:VisualTerrainEntityData (p_class, p_guid)
	local s_Instance = VisualTerrainEntityData(p_class) 
 	local className = "VisualTerrainEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "settings", "CtrRef", s_Instance.settings)
	self:SendDefault(s_guid,className, "terrain", "CtrRef", s_Instance.terrain)
end

function Type:VisualTerrainSettings (p_class, p_guid)
	local s_Instance = VisualTerrainSettings(p_class) 
 	local className = "VisualTerrainSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "buildJobCount", "uint", s_Instance.buildJobCount)
	self:SendDefault(s_guid,className, "buildSpuJobEnable", "bool", s_Instance.buildSpuJobEnable)
	self:SendDefault(s_guid,className, "castShadowsEnable", "bool", s_Instance.castShadowsEnable)
	self:SendDefault(s_guid,className, "cullSampleBoundingBoxHeightEnable", "bool", s_Instance.cullSampleBoundingBoxHeightEnable)
	self:SendDefault(s_guid,className, "cullSpuJobEnable", "bool", s_Instance.cullSpuJobEnable)
	self:SendDefault(s_guid,className, "debugOverlayBrushCoverageMin", "Vec2", s_Instance.debugOverlayBrushCoverageMin)
	self:SendDefault(s_guid,className, "debugOverlayBrushEnable", "bool", s_Instance.debugOverlayBrushEnable)
	self:SendDefault(s_guid,className, "debugOverlayBrushSize", "float", s_Instance.debugOverlayBrushSize)
	self:SendDefault(s_guid,className, "debugOverlayGridEnable", "bool", s_Instance.debugOverlayGridEnable)
	self:SendDefault(s_guid,className, "debugOverlayGridSize", "float", s_Instance.debugOverlayGridSize)
	self:SendDefault(s_guid,className, "debugOverlayIsolinesEnable", "bool", s_Instance.debugOverlayIsolinesEnable)
	self:SendDefault(s_guid,className, "debugOverlayIsolineSpacing", "float", s_Instance.debugOverlayIsolineSpacing)
	self:SendDefault(s_guid,className, "debugOverlaySketchTextureEnable", "bool", s_Instance.debugOverlaySketchTextureEnable)
	self:SendDefault(s_guid,className, "debugOverlayWireframeEnable", "bool", s_Instance.debugOverlayWireframeEnable)
	self:SendDefault(s_guid,className, "decal3dFarDrawDistanceScaleFactor", "float", s_Instance.decal3dFarDrawDistanceScaleFactor)
	self:SendDefault(s_guid,className, "decalEnable", "bool", s_Instance.decalEnable)
	self:SendDefault(s_guid,className, "decalOffsetY", "float", s_Instance.decalOffsetY)
	self:SendDefault(s_guid,className, "decalZPassDrawDistance", "float", s_Instance.decalZPassDrawDistance)
	self:SendDefault(s_guid,className, "destroyAll", "bool", s_Instance.destroyAll)
	self:SendDefault(s_guid,className, "detailOverlayEnable", "bool", s_Instance.detailOverlayEnable)
	self:SendDefault(s_guid,className, "drawDebugTextEnable", "bool", s_Instance.drawDebugTextEnable)
	self:SendDefault(s_guid,className, "drawDebugTexturesEnable", "bool", s_Instance.drawDebugTexturesEnable)
	self:SendDefault(s_guid,className, "drawDecal2dEnable", "bool", s_Instance.drawDecal2dEnable)
	self:SendDefault(s_guid,className, "drawDecal3dEnable", "bool", s_Instance.drawDecal3dEnable)
	self:SendDefault(s_guid,className, "drawDecalZPassEnable", "bool", s_Instance.drawDecalZPassEnable)
	self:SendDefault(s_guid,className, "drawEnable", "bool", s_Instance.drawEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringCellBoxesEnable", "bool", s_Instance.drawMeshScatteringCellBoxesEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringCulledCellBoxesEnable", "bool", s_Instance.drawMeshScatteringCulledCellBoxesEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringDebugMaskScaleTexturesEnable", "bool", s_Instance.drawMeshScatteringDebugMaskScaleTexturesEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringEnable", "bool", s_Instance.drawMeshScatteringEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringInstanceBoxesEnable", "bool", s_Instance.drawMeshScatteringInstanceBoxesEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringNodeBoxesEnable", "bool", s_Instance.drawMeshScatteringNodeBoxesEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringQuadtreeEnable", "bool", s_Instance.drawMeshScatteringQuadtreeEnable)
	self:SendDefault(s_guid,className, "drawMeshScatteringStatsEnable", "bool", s_Instance.drawMeshScatteringStatsEnable)
	self:SendDefault(s_guid,className, "drawOnlyDecalZPassEnable", "bool", s_Instance.drawOnlyDecalZPassEnable)
	self:SendDefault(s_guid,className, "drawPatchBoxesEnable", "bool", s_Instance.drawPatchBoxesEnable)
	self:SendDefault(s_guid,className, "drawPatchesEnable", "bool", s_Instance.drawPatchesEnable)
	self:SendDefault(s_guid,className, "drawQuadtreeAtlasTexturesEnable", "bool", s_Instance.drawQuadtreeAtlasTexturesEnable)
	self:SendDefault(s_guid,className, "drawQuadtreesEnable", "bool", s_Instance.drawQuadtreesEnable)
	self:SendDefault(s_guid,className, "drawQuadtreeStatsEnable", "bool", s_Instance.drawQuadtreeStatsEnable)
	self:SendDefault(s_guid,className, "drawQuadtreeZoomIndex", "int", s_Instance.drawQuadtreeZoomIndex)
	self:SendDefault(s_guid,className, "drawTextureDebugColors", "bool", s_Instance.drawTextureDebugColors)
	self:SendDefault(s_guid,className, "drawTextureDebugDepthComplexity", "bool", s_Instance.drawTextureDebugDepthComplexity)
	self:SendDefault(s_guid,className, "drawTextureTileBoxesEnable", "bool", s_Instance.drawTextureTileBoxesEnable)
	self:SendDefault(s_guid,className, "drawVertexYTextureEnable", "bool", s_Instance.drawVertexYTextureEnable)
	self:SendDefault(s_guid,className, "drawWaterEnable", "bool", s_Instance.drawWaterEnable)
	self:SendDefault(s_guid,className, "dxDisplacementMappingEnable", "bool", s_Instance.dxDisplacementMappingEnable)
	self:SendDefault(s_guid,className, "dxTessellatedTriWidth", "float", s_Instance.dxTessellatedTriWidth)
	self:SendDefault(s_guid,className, "dxTessellationPatchFacesPerSide", "uint", s_Instance.dxTessellationPatchFacesPerSide)
	self:SendDefault(s_guid,className, "dxTessellationPatchShrink", "float", s_Instance.dxTessellationPatchShrink)
	self:SendDefault(s_guid,className, "dynamicMaskDecalWidthScale", "float", s_Instance.dynamicMaskDecalWidthScale)
	self:SendDefault(s_guid,className, "dynamicMaskEnable", "bool", s_Instance.dynamicMaskEnable)
	self:SendDefault(s_guid,className, "editServiceEnable", "bool", s_Instance.editServiceEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "forceDecalReducedQuality", "bool", s_Instance.forceDecalReducedQuality)
	self:SendDefault(s_guid,className, "forceGraphicsDriverCrash", "bool", s_Instance.forceGraphicsDriverCrash)
	self:SendDefault(s_guid,className, "forcePatchRebuildEnable", "bool", s_Instance.forcePatchRebuildEnable)
	self:SendDefault(s_guid,className, "globalColormapEnable", "bool", s_Instance.globalColormapEnable)
	self:SendDefault(s_guid,className, "gpuTextureCompressionEnable", "bool", s_Instance.gpuTextureCompressionEnable)
	self:SendDefault(s_guid,className, "lodCenterExtrapolationDistanceMax", "float", s_Instance.lodCenterExtrapolationDistanceMax)
	self:SendDefault(s_guid,className, "lodCenterExtrapolationTime", "float", s_Instance.lodCenterExtrapolationTime)
	self:SendDefault(s_guid,className, "lodScale", "float", s_Instance.lodScale)
	self:SendDefault(s_guid,className, "maxNonVisibleTextureUpdateCount", "uint", s_Instance.maxNonVisibleTextureUpdateCount)
	self:SendDefault(s_guid,className, "meshScatteringBuildChannelCount", "uint", s_Instance.meshScatteringBuildChannelCount)
	self:SendDefault(s_guid,className, "meshScatteringBuildChannelsLaunchedPerFrameCountMax", "uint", s_Instance.meshScatteringBuildChannelsLaunchedPerFrameCountMax)
	self:SendDefault(s_guid,className, "meshScatteringBuildVisibleFirst", "bool", s_Instance.meshScatteringBuildVisibleFirst)
	self:SendDefault(s_guid,className, "meshScatteringCastShadowsEnable", "bool", s_Instance.meshScatteringCastShadowsEnable)
	self:SendDefault(s_guid,className, "meshScatteringCellPoolCapacity", "uint", s_Instance.meshScatteringCellPoolCapacity)
	self:SendDefault(s_guid,className, "meshScatteringClodFrameCount", "uint", s_Instance.meshScatteringClodFrameCount)
	self:SendDefault(s_guid,className, "meshScatteringCullRecordCount", "uint", s_Instance.meshScatteringCullRecordCount)
	self:SendDefault(s_guid,className, "meshScatteringCullSpuJobEnable", "bool", s_Instance.meshScatteringCullSpuJobEnable)
	self:SendDefault(s_guid,className, "meshScatteringDensityMarginFactor", "float", s_Instance.meshScatteringDensityMarginFactor)
	self:SendDefault(s_guid,className, "meshScatteringDensityScaleFactor", "float", s_Instance.meshScatteringDensityScaleFactor)
	self:SendDefault(s_guid,className, "meshScatteringDistanceScaleFactor", "float", s_Instance.meshScatteringDistanceScaleFactor)
	self:SendDefault(s_guid,className, "meshScatteringEnable", "bool", s_Instance.meshScatteringEnable)
	self:SendDefault(s_guid,className, "meshScatteringForceUpdateEnable", "bool", s_Instance.meshScatteringForceUpdateEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceAdditionalCullEnable", "bool", s_Instance.meshScatteringInstanceAdditionalCullEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCountLodEnable", "bool", s_Instance.meshScatteringInstanceCountLodEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullBoxTestEnable", "bool", s_Instance.meshScatteringInstanceCullBoxTestEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullDynamicAllocEnable", "bool", s_Instance.meshScatteringInstanceCullDynamicAllocEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullEnable", "bool", s_Instance.meshScatteringInstanceCullEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullJobCount", "uint", s_Instance.meshScatteringInstanceCullJobCount)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullListCount", "uint", s_Instance.meshScatteringInstanceCullListCount)
	self:SendDefault(s_guid,className, "meshScatteringInstanceCullSpuJobEnable", "bool", s_Instance.meshScatteringInstanceCullSpuJobEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceFrustumCullEnable", "bool", s_Instance.meshScatteringInstanceFrustumCullEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstanceOcclusionCullEnable", "bool", s_Instance.meshScatteringInstanceOcclusionCullEnable)
	self:SendDefault(s_guid,className, "meshScatteringInstancesPerCellMax", "uint", s_Instance.meshScatteringInstancesPerCellMax)
	self:SendDefault(s_guid,className, "meshScatteringInvisibleCellFovFactor", "float", s_Instance.meshScatteringInvisibleCellFovFactor)
	self:SendDefault(s_guid,className, "meshScatteringJobsEnable", "bool", s_Instance.meshScatteringJobsEnable)
	self:SendDefault(s_guid,className, "meshScatteringPregenerationDistanceRatio", "float", s_Instance.meshScatteringPregenerationDistanceRatio)
	self:SendDefault(s_guid,className, "meshScatteringPrioritizationSpuJobEnable", "bool", s_Instance.meshScatteringPrioritizationSpuJobEnable)
	self:SendDefault(s_guid,className, "meshScatteringSpuJobEnable", "bool", s_Instance.meshScatteringSpuJobEnable)
	self:SendDefault(s_guid,className, "meshScatteringTreeNodePoolCapacity", "uint", s_Instance.meshScatteringTreeNodePoolCapacity)
	self:SendDefault(s_guid,className, "meshScatteringWindSpeed", "float", s_Instance.meshScatteringWindSpeed)
	self:SendDefault(s_guid,className, "occludedEnable", "bool", s_Instance.occludedEnable)
	self:SendDefault(s_guid,className, "occludedMinDistance", "float", s_Instance.occludedMinDistance)
	self:SendDefault(s_guid,className, "occluderEnable", "bool", s_Instance.occluderEnable)
	self:SendDefault(s_guid,className, "occluderJobEnable", "bool", s_Instance.occluderJobEnable)
	self:SendDefault(s_guid,className, "occluderLodBoostLevelCount", "uint", s_Instance.occluderLodBoostLevelCount)
	self:SendDefault(s_guid,className, "occluderSpuJobEnable", "bool", s_Instance.occluderSpuJobEnable)
	self:SendDefault(s_guid,className, "patchErrorFov", "float", s_Instance.patchErrorFov)
	self:SendDefault(s_guid,className, "patchErrorFovEnable", "bool", s_Instance.patchErrorFovEnable)
	self:SendDefault(s_guid,className, "patchFacesPerSide", "uint", s_Instance.patchFacesPerSide)
	self:SendDefault(s_guid,className, "patchLodTransitionsEnable", "bool", s_Instance.patchLodTransitionsEnable)
	self:SendDefault(s_guid,className, "patchMaterialSortingEnable", "bool", s_Instance.patchMaterialSortingEnable)
	self:SendDefault(s_guid,className, "patchSlotCount", "uint", s_Instance.patchSlotCount)
	self:SendDefault(s_guid,className, "prepareBuildSpuJobEnable", "bool", s_Instance.prepareBuildSpuJobEnable)
	self:SendDefault(s_guid,className, "prioritizationOcclusionEnable", "bool", s_Instance.prioritizationOcclusionEnable)
	self:SendDefault(s_guid,className, "prioritizationSpuJobEnable", "bool", s_Instance.prioritizationSpuJobEnable)
	self:SendDefault(s_guid,className, "ps3MeshScatteringInstanceCellMemoryEnable", "bool", s_Instance.ps3MeshScatteringInstanceCellMemoryEnable)
	self:SendDefault(s_guid,className, "regenerateTexturesEnable", "bool", s_Instance.regenerateTexturesEnable)
	self:SendDefault(s_guid,className, "renderMode", "TerrainRenderMode", s_Instance.renderMode)
	self:SendDefault(s_guid,className, "slotDebugOutputEnable", "bool", s_Instance.slotDebugOutputEnable)
	self:SendDefault(s_guid,className, "slotReuseWaitCount", "uint", s_Instance.slotReuseWaitCount)
	self:SendDefault(s_guid,className, "tessellationFacesPerSideMin", "uint", s_Instance.tessellationFacesPerSideMin)
	self:SendDefault(s_guid,className, "textureAtlasSampleCountXFactor", "uint", s_Instance.textureAtlasSampleCountXFactor)
	self:SendDefault(s_guid,className, "textureAtlasSampleCountYFactor", "uint", s_Instance.textureAtlasSampleCountYFactor)
	self:SendDefault(s_guid,className, "textureBlockOnStreamingEnable", "bool", s_Instance.textureBlockOnStreamingEnable)
	self:SendDefault(s_guid,className, "textureClodCutoffPriority", "float", s_Instance.textureClodCutoffPriority)
	self:SendDefault(s_guid,className, "textureClodEnable", "bool", s_Instance.textureClodEnable)
	self:SendDefault(s_guid,className, "textureClodFrameCount", "uint", s_Instance.textureClodFrameCount)
	self:SendDefault(s_guid,className, "textureCompressFastAlgorithmEnable", "bool", s_Instance.textureCompressFastAlgorithmEnable)
	self:SendDefault(s_guid,className, "textureCompressionQuality", "int", s_Instance.textureCompressionQuality)
	self:SendDefault(s_guid,className, "textureCompressJobCount", "uint", s_Instance.textureCompressJobCount)
	self:SendDefault(s_guid,className, "textureCompressSpuJobsEnable", "bool", s_Instance.textureCompressSpuJobsEnable)
	self:SendDefault(s_guid,className, "textureDetailFalloffCurve", "float", s_Instance.textureDetailFalloffCurve)
	self:SendDefault(s_guid,className, "textureDetailFalloffDistance", "float", s_Instance.textureDetailFalloffDistance)
	self:SendDefault(s_guid,className, "textureDetailFalloffFactor", "float", s_Instance.textureDetailFalloffFactor)
	self:SendDefault(s_guid,className, "textureDetailSlopeBoost", "float", s_Instance.textureDetailSlopeBoost)
	self:SendDefault(s_guid,className, "textureDrawTerrainLayersEnable", "bool", s_Instance.textureDrawTerrainLayersEnable)
	self:SendDefault(s_guid,className, "textureForceUpdateEnable", "bool", s_Instance.textureForceUpdateEnable)
	self:SendDefault(s_guid,className, "textureGenerationMipBias", "float", s_Instance.textureGenerationMipBias)
	self:SendDefault(s_guid,className, "textureInvisibleDetailReductionFactor", "float", s_Instance.textureInvisibleDetailReductionFactor)
	self:SendDefault(s_guid,className, "textureKeepPoolFullEnable", "bool", s_Instance.textureKeepPoolFullEnable)
	self:SendDefault(s_guid,className, "textureLayerCullingEnable", "bool", s_Instance.textureLayerCullingEnable)
	self:SendDefault(s_guid,className, "textureLevelOffset", "int", s_Instance.textureLevelOffset)
	self:SendDefault(s_guid,className, "textureOccludedDetailReductionFactor", "float", s_Instance.textureOccludedDetailReductionFactor)
	self:SendDefault(s_guid,className, "textureQuadsPerTileLevel", "uint", s_Instance.textureQuadsPerTileLevel)
	self:SendDefault(s_guid,className, "textureRenderJobCount", "uint", s_Instance.textureRenderJobCount)
	self:SendDefault(s_guid,className, "textureRenderJobsLaunchedPerFrameCountMax", "uint", s_Instance.textureRenderJobsLaunchedPerFrameCountMax)
	self:SendDefault(s_guid,className, "textureSamplesPerMeterMax", "float", s_Instance.textureSamplesPerMeterMax)
	self:SendDefault(s_guid,className, "textureTileBorderWidth", "uint", s_Instance.textureTileBorderWidth)
	self:SendDefault(s_guid,className, "textureTileSamplesPerSide", "uint", s_Instance.textureTileSamplesPerSide)
	self:SendDefault(s_guid,className, "textureVtIndirectionJobEnable", "bool", s_Instance.textureVtIndirectionJobEnable)
	self:SendDefault(s_guid,className, "textureVtIndirectionSpuJobEnable", "bool", s_Instance.textureVtIndirectionSpuJobEnable)
	self:SendDefault(s_guid,className, "triangleSizeMin", "float", s_Instance.triangleSizeMin)
	self:SendDefault(s_guid,className, "updateJobsEnable", "bool", s_Instance.updateJobsEnable)
	self:SendDefault(s_guid,className, "vertexBufferHeightsEnable", "bool", s_Instance.vertexBufferHeightsEnable)
	self:SendDefault(s_guid,className, "waterDepthMetersPerSample", "float", s_Instance.waterDepthMetersPerSample)
	self:SendDefault(s_guid,className, "wireframeEnable", "bool", s_Instance.wireframeEnable)
	self:SendDefault(s_guid,className, "zeroViewportEnable", "bool", s_Instance.zeroViewportEnable)
	self:SendDefault(s_guid,className, "zPassDistance", "float", s_Instance.zPassDistance)
end

function Type:VisualVectorShapeData (p_class, p_guid)
	local s_Instance = VisualVectorShapeData(p_class) 
 	local className = "VisualVectorShapeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "drawOrderIndex", "uint", s_Instance.drawOrderIndex)
	self:SendDefault(s_guid,className, "errorTolerance", "float", s_Instance.errorTolerance)
	self:SendDefault(s_guid,className, "shader3d", "CtrRef", s_Instance.shader3d)
	self:SendDefault(s_guid,className, "tessellationTriangleSize", "float", s_Instance.tessellationTriangleSize)
end

function Type:VoiceOverArithmeticNode (p_class, p_guid)
	local s_Instance = VoiceOverArithmeticNode(p_class) 
 	local className = "VoiceOverArithmeticNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "CtrRef", s_Instance.a)
	self:SendDefault(s_guid,className, "b", "CtrRef", s_Instance.b)
	self:SendDefault(s_guid,className, "operation", "VoiceOverArithmeticExpressionType", s_Instance.operation)
	self:SendDefault(s_guid,className, "result", "CtrRef", s_Instance.result)
end

function Type:VoiceOverCompareNode (p_class, p_guid)
	local s_Instance = VoiceOverCompareNode(p_class) 
 	local className = "VoiceOverCompareNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "CtrRef", s_Instance.a)
	self:SendDefault(s_guid,className, "b", "CtrRef", s_Instance.b)
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "operation", "VoiceOverCompareExpressionType", s_Instance.operation)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:VoiceOverConstantBooleanValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantBooleanValue(p_class) 
 	local className = "VoiceOverConstantBooleanValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "bool", s_Instance.value)
end

function Type:VoiceOverConstantFloatValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantFloatValue(p_class) 
 	local className = "VoiceOverConstantFloatValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
end

function Type:VoiceOverConstantGlobalValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantGlobalValue(p_class) 
 	local className = "VoiceOverConstantGlobalValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:VoiceOverConstantIntegerValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantIntegerValue(p_class) 
 	local className = "VoiceOverConstantIntegerValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "int", s_Instance.value)
end

function Type:VoiceOverConstantNode (p_class, p_guid)
	local s_Instance = VoiceOverConstantNode(p_class) 
 	local className = "VoiceOverConstantNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:VoiceOverConstantVectorValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantVectorValue(p_class) 
 	local className = "VoiceOverConstantVectorValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "Vec4", s_Instance.value)
end

function Type:VoiceOverContainerNode (p_class, p_guid)
	local s_Instance = VoiceOverContainerNode(p_class) 
 	local className = "VoiceOverContainerNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "condition", "List<CtrRef)>", s_Instance.condition)
	self:SendDefault(s_guid,className, "conditionMode", "VoiceOverContainerConditionMode", s_Instance.conditionMode)
	self:SendDefault(s_guid,className, "falseRelationship", "List<CtrRef)>", s_Instance.falseRelationship)
	self:SendDefault(s_guid,className, "interval", "CtrRef", s_Instance.interval)
	self:SendDefault(s_guid,className, "probability", "float", s_Instance.probability)
	self:SendDefault(s_guid,className, "trueRelationship", "List<CtrRef)>", s_Instance.trueRelationship)
end

function Type:VoiceOverConversationGroupEntityData (p_class, p_guid)
	local s_Instance = VoiceOverConversationGroupEntityData(p_class) 
 	local className = "VoiceOverConversationGroupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "queueGroup", "CtrRef", s_Instance.queueGroup)
end

function Type:VoiceOverConversationNode (p_class, p_guid)
	local s_Instance = VoiceOverConversationNode(p_class) 
 	local className = "VoiceOverConversationNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "blockedRelationship", "List<CtrRef)>", s_Instance.blockedRelationship)
	self:SendDefault(s_guid,className, "condition", "List<CtrRef)>", s_Instance.condition)
	self:SendDefault(s_guid,className, "conditionMode", "VoiceOverContainerConditionMode", s_Instance.conditionMode)
	self:SendDefault(s_guid,className, "finishedRelationship", "List<CtrRef)>", s_Instance.finishedRelationship)
	self:SendDefault(s_guid,className, "groups", "List<CtrRef)>", s_Instance.groups)
	self:SendDefault(s_guid,className, "interruptMode", "VoiceOverConversationInterruptMode", s_Instance.interruptMode)
	self:SendDefault(s_guid,className, "interval", "CtrRef", s_Instance.interval)
	self:SendDefault(s_guid,className, "lastSequenceIndex", "sbyte", s_Instance.lastSequenceIndex)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
	self:SendDefault(s_guid,className, "probability", "float", s_Instance.probability)
	self:SendDefault(s_guid,className, "pronunciation", "CtrRef", s_Instance.pronunciation)
	self:SendDefault(s_guid,className, "queueMode", "VoiceOverConversationQueueMode", s_Instance.queueMode)
	self:SendDefault(s_guid,className, "relevancy", "float", s_Instance.relevancy)
	self:SendDefault(s_guid,className, "trackCount", "sbyte", s_Instance.trackCount)
end

function Type:VoiceOverConversationQueueGroup (p_class, p_guid)
	local s_Instance = VoiceOverConversationQueueGroup(p_class) 
 	local className = "VoiceOverConversationQueueGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "polyphony", "uint", s_Instance.polyphony)
	self:SendDefault(s_guid,className, "polyphonyMode", "VoiceOverConversationQueueGroupPolyphony", s_Instance.polyphonyMode)
end

function Type:VoiceOverDialogClip (p_class, p_guid)
	local s_Instance = VoiceOverDialogClip(p_class) 
 	local className = "VoiceOverDialogClip"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "CtrRef", s_Instance.events)
	self:SendDefault(s_guid,className, "offset", "float", s_Instance.offset)
	self:SendDefault(s_guid,className, "offsetReferences", "List<CtrRef)>", s_Instance.offsetReferences)
	self:SendDefault(s_guid,className, "sequenceIndex", "sbyte", s_Instance.sequenceIndex)
	self:SendDefault(s_guid,className, "takes", "List<VoiceOverDialogTake)>", s_Instance.takes)
end

function Type:VoiceOverDialogClipEvents (p_class, p_guid)
	local s_Instance = VoiceOverDialogClipEvents(p_class) 
 	local className = "VoiceOverDialogClipEvents"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "finishedNameHash", "uint", s_Instance.finishedNameHash)
	self:SendDefault(s_guid,className, "startedNameHash", "uint", s_Instance.startedNameHash)
end

function Type:VoiceOverDialogGroup (p_class, p_guid)
	local s_Instance = VoiceOverDialogGroup(p_class) 
 	local className = "VoiceOverDialogGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
	self:SendDefault(s_guid,className, "tracks", "List<CtrRef)>", s_Instance.tracks)
end

function Type:VoiceOverDialogTake (p_class, p_guid)
	local s_Instance = VoiceOverDialogTake(p_class) 
 	local className = "VoiceOverDialogTake"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "wave", "CtrRef", s_Instance.wave)
end

function Type:VoiceOverDialogTakeMapping (p_class, p_guid)
	local s_Instance = VoiceOverDialogTakeMapping(p_class) 
 	local className = "VoiceOverDialogTakeMapping"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "takeControlMax", "float", s_Instance.takeControlMax)
	self:SendDefault(s_guid,className, "takeControlMin", "float", s_Instance.takeControlMin)
	self:SendDefault(s_guid,className, "takeIndex", "sbyte", s_Instance.takeIndex)
end

function Type:VoiceOverDialogTrack (p_class, p_guid)
	local s_Instance = VoiceOverDialogTrack(p_class) 
 	local className = "VoiceOverDialogTrack"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "clips", "List<CtrRef)>", s_Instance.clips)
	self:SendDefault(s_guid,className, "output", "CtrRef", s_Instance.output)
	self:SendDefault(s_guid,className, "parentTrackIndex", "sbyte", s_Instance.parentTrackIndex)
	self:SendDefault(s_guid,className, "queueGroup", "CtrRef", s_Instance.queueGroup)
	self:SendDefault(s_guid,className, "samplerNode", "CtrRef", s_Instance.samplerNode)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "takeControl", "CtrRef", s_Instance.takeControl)
	self:SendDefault(s_guid,className, "takeIndexMapping", "List<VoiceOverDialogTakeMapping)>", s_Instance.takeIndexMapping)
	self:SendDefault(s_guid,className, "takeSwitching", "VoiceOverDialogTakeBehavior", s_Instance.takeSwitching)
	self:SendDefault(s_guid,className, "takeSwitchingOnResume", "bool", s_Instance.takeSwitchingOnResume)
end

function Type:VoiceOverDistanceNode (p_class, p_guid)
	local s_Instance = VoiceOverDistanceNode(p_class) 
 	local className = "VoiceOverDistanceNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "a", "CtrRef", s_Instance.a)
	self:SendDefault(s_guid,className, "b", "CtrRef", s_Instance.b)
	self:SendDefault(s_guid,className, "distance", "CtrRef", s_Instance.distance)
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "operation", "VoiceOverCompareExpressionType", s_Instance.operation)
	self:SendDefault(s_guid,className, "threshold", "CtrRef", s_Instance.threshold)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:VoiceOverEvent (p_class, p_guid)
	local s_Instance = VoiceOverEvent(p_class) 
 	local className = "VoiceOverEvent"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "owner", "CtrRef", s_Instance.owner)
	self:SendDefault(s_guid,className, "parameters", "List<CtrRef)>", s_Instance.parameters)
end

function Type:VoiceOverEventEntityData (p_class, p_guid)
	local s_Instance = VoiceOverEventEntityData(p_class) 
 	local className = "VoiceOverEventEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventPlayer", "CtrRef", s_Instance.eventPlayer)
	self:SendDefault(s_guid,className, "extraEventPlayer", "CtrRef", s_Instance.extraEventPlayer)
	self:SendDefault(s_guid,className, "finishedDelay", "float", s_Instance.finishedDelay)
	self:SendDefault(s_guid,className, "runOnce", "bool", s_Instance.runOnce)
	self:SendDefault(s_guid,className, "triggerDelay", "float", s_Instance.triggerDelay)
	self:SendDefault(s_guid,className, "voEvent", "CtrRef", s_Instance.voEvent)
end

function Type:VoiceOverEventNode (p_class, p_guid)
	local s_Instance = VoiceOverEventNode(p_class) 
 	local className = "VoiceOverEventNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "event", "CtrRef", s_Instance.event)
	self:SendDefault(s_guid,className, "interval", "CtrRef", s_Instance.interval)
	self:SendDefault(s_guid,className, "redirects", "List<CtrRef)>", s_Instance.redirects)
	self:SendDefault(s_guid,className, "relationship", "List<CtrRef)>", s_Instance.relationship)
end

function Type:VoiceOverGlobalConstantValue (p_class, p_guid)
	local s_Instance = VoiceOverGlobalConstantValue(p_class) 
 	local className = "VoiceOverGlobalConstantValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:VoiceOverGlobalNode (p_class, p_guid)
	local s_Instance = VoiceOverGlobalNode(p_class) 
 	local className = "VoiceOverGlobalNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "field", "CtrRef", s_Instance.field)
	self:SendDefault(s_guid,className, "object", "CtrRef", s_Instance.object)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:VoiceOverGroup (p_class, p_guid)
	local s_Instance = VoiceOverGroup(p_class) 
 	local className = "VoiceOverGroup"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "priority", "int", s_Instance.priority)
end

function Type:VoiceOverInfoNode (p_class, p_guid)
	local s_Instance = VoiceOverInfoNode(p_class) 
 	local className = "VoiceOverInfoNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "expectedType", "CtrRef", s_Instance.expectedType)
	self:SendDefault(s_guid,className, "field", "CtrRef", s_Instance.field)
	self:SendDefault(s_guid,className, "object", "CtrRef", s_Instance.object)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:VoiceOverInterval (p_class, p_guid)
	local s_Instance = VoiceOverInterval(p_class) 
 	local className = "VoiceOverInterval"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:VoiceOverIntervalNode (p_class, p_guid)
	local s_Instance = VoiceOverIntervalNode(p_class) 
 	local className = "VoiceOverIntervalNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "interval", "CtrRef", s_Instance.interval)
	self:SendDefault(s_guid,className, "threshold", "CtrRef", s_Instance.threshold)
	self:SendDefault(s_guid,className, "time", "CtrRef", s_Instance.time)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:VoiceOverLabel (p_class, p_guid)
	local s_Instance = VoiceOverLabel(p_class) 
 	local className = "VoiceOverLabel"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:VoiceOverLabelNode (p_class, p_guid)
	local s_Instance = VoiceOverLabelNode(p_class) 
 	local className = "VoiceOverLabelNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "sourceMode", "VoiceOverLabelSourceMode", s_Instance.sourceMode)
	self:SendDefault(s_guid,className, "sources", "List<CtrRef)>", s_Instance.sources)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
	self:SendDefault(s_guid,className, "unwantedCompareMode", "VoiceOverLabelCompareMode", s_Instance.unwantedCompareMode)
	self:SendDefault(s_guid,className, "unwantedLabels", "List<CtrRef)>", s_Instance.unwantedLabels)
	self:SendDefault(s_guid,className, "wantedCompareMode", "VoiceOverLabelCompareMode", s_Instance.wantedCompareMode)
	self:SendDefault(s_guid,className, "wantedLabels", "List<CtrRef)>", s_Instance.wantedLabels)
end

function Type:VoiceOverLabelSource (p_class, p_guid)
	local s_Instance = VoiceOverLabelSource(p_class) 
 	local className = "VoiceOverLabelSource"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:VoiceOverLanguageRoot (p_class, p_guid)
	local s_Instance = VoiceOverLanguageRoot(p_class) 
 	local className = "VoiceOverLanguageRoot"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "language", "CtrRef", s_Instance.language)
	self:SendDefault(s_guid,className, "path", "string", s_Instance.path)
end

function Type:VoiceOverLogicAsset (p_class, p_guid)
	local s_Instance = VoiceOverLogicAsset(p_class) 
 	local className = "VoiceOverLogicAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "events", "List<CtrRef)>", s_Instance.events)
	self:SendDefault(s_guid,className, "flows", "List<CtrRef)>", s_Instance.flows)
	self:SendDefault(s_guid,className, "groups", "List<CtrRef)>", s_Instance.groups)
	self:SendDefault(s_guid,className, "system", "CtrRef", s_Instance.system)
end

function Type:VoiceOverLogicFlow (p_class, p_guid)
	local s_Instance = VoiceOverLogicFlow(p_class) 
 	local className = "VoiceOverLogicFlow"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "group", "CtrRef", s_Instance.group)
	self:SendDefault(s_guid,className, "locals", "List<CtrRef)>", s_Instance.locals)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "roots", "List<CtrRef)>", s_Instance.roots)
end

function Type:VoiceOverManuscriptAsset (p_class, p_guid)
	local s_Instance = VoiceOverManuscriptAsset(p_class) 
 	local className = "VoiceOverManuscriptAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowDelete", "bool", s_Instance.allowDelete)
	self:SendDefault(s_guid,className, "characterColumn", "string", s_Instance.characterColumn)
	self:SendDefault(s_guid,className, "fileNameColumn", "string", s_Instance.fileNameColumn)
	self:SendDefault(s_guid,className, "firstContentRow", "int", s_Instance.firstContentRow)
	self:SendDefault(s_guid,className, "keepPath", "bool", s_Instance.keepPath)
	self:SendDefault(s_guid,className, "languageColumns", "List<VoiceOverManuscriptLanguageColumns)>", s_Instance.languageColumns)
	self:SendDefault(s_guid,className, "languages", "List<CtrRef)>", s_Instance.languages)
	self:SendDefault(s_guid,className, "masterLanguage", "CtrRef", s_Instance.masterLanguage)
	self:SendDefault(s_guid,className, "nameTranslation", "VoiceOverWaveNameTranslation", s_Instance.nameTranslation)
	self:SendDefault(s_guid,className, "outputPath", "string", s_Instance.outputPath)
	self:SendDefault(s_guid,className, "pathColumn", "string", s_Instance.pathColumn)
	self:SendDefault(s_guid,className, "sheetName", "string", s_Instance.sheetName)
	self:SendDefault(s_guid,className, "streamPool", "CtrRef", s_Instance.streamPool)
	self:SendDefault(s_guid,className, "stringIdColumn", "string", s_Instance.stringIdColumn)
	self:SendDefault(s_guid,className, "stringIdPrefix", "string", s_Instance.stringIdPrefix)
	self:SendDefault(s_guid,className, "stringIdUpperCase", "bool", s_Instance.stringIdUpperCase)
	self:SendDefault(s_guid,className, "voiceColumn", "string", s_Instance.voiceColumn)
	self:SendDefault(s_guid,className, "waveAssetStatusColumn", "string", s_Instance.waveAssetStatusColumn)
end

function Type:VoiceOverManuscriptLanguageColumns (p_class, p_guid)
	local s_Instance = VoiceOverManuscriptLanguageColumns(p_class) 
 	local className = "VoiceOverManuscriptLanguageColumns"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "language", "CtrRef", s_Instance.language)
	self:SendDefault(s_guid,className, "subtitleOffsetColumn", "string", s_Instance.subtitleOffsetColumn)
	self:SendDefault(s_guid,className, "textColumn", "string", s_Instance.textColumn)
end

function Type:VoiceOverNamedValue (p_class, p_guid)
	local s_Instance = VoiceOverNamedValue(p_class) 
 	local className = "VoiceOverNamedValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
end

function Type:VoiceOverObject (p_class, p_guid)
	local s_Instance = VoiceOverObject(p_class) 
 	local className = "VoiceOverObject"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "properties", "List<CtrRef)>", s_Instance.properties)
end

function Type:VoiceOverProbabilityNode (p_class, p_guid)
	local s_Instance = VoiceOverProbabilityNode(p_class) 
 	local className = "VoiceOverProbabilityNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "false", "CtrRef", s_Instance.falseValue)
	self:SendDefault(s_guid,className, "probability", "float", s_Instance.probability)
	self:SendDefault(s_guid,className, "true", "CtrRef", s_Instance.trueValue)
end

function Type:VoiceOverPronunciation (p_class, p_guid)
	local s_Instance = VoiceOverPronunciation(p_class) 
 	local className = "VoiceOverPronunciation"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "primaryLanguage", "CtrRef", s_Instance.primaryLanguage)
	self:SendDefault(s_guid,className, "secondaryFallback", "VoiceOverPronunciationFallback", s_Instance.secondaryFallback)
	self:SendDefault(s_guid,className, "secondaryLanguage", "CtrRef", s_Instance.secondaryLanguage)
end

function Type:VoiceOverStructureConnection (p_class, p_guid)
	local s_Instance = VoiceOverStructureConnection(p_class) 
 	local className = "VoiceOverStructureConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "targetInput", "CtrRef", s_Instance.targetInput)
	self:SendDefault(s_guid,className, "targetNode", "CtrRef", s_Instance.targetNode)
end

function Type:VoiceOverStructureNode (p_class, p_guid)
	local s_Instance = VoiceOverStructureNode(p_class) 
 	local className = "VoiceOverStructureNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "flowMode", "VoiceOverLogicFlowMode", s_Instance.flowMode)
end

function Type:VoiceOverSystemAsset (p_class, p_guid)
	local s_Instance = VoiceOverSystemAsset(p_class) 
 	local className = "VoiceOverSystemAsset"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "constants", "List<CtrRef)>", s_Instance.constants)
	self:SendDefault(s_guid,className, "defaultPositionedQueueGroup", "CtrRef", s_Instance.defaultPositionedQueueGroup)
	self:SendDefault(s_guid,className, "defaultPronunciation", "CtrRef", s_Instance.defaultPronunciation)
	self:SendDefault(s_guid,className, "defaultUnpositionedQueueGroup", "CtrRef", s_Instance.defaultUnpositionedQueueGroup)
	self:SendDefault(s_guid,className, "intervals", "List<CtrRef)>", s_Instance.intervals)
	self:SendDefault(s_guid,className, "labels", "List<CtrRef)>", s_Instance.labels)
	self:SendDefault(s_guid,className, "masterLanguage", "CtrRef", s_Instance.masterLanguage)
	self:SendDefault(s_guid,className, "objects", "List<CtrRef)>", s_Instance.objects)
	self:SendDefault(s_guid,className, "pronunciations", "List<CtrRef)>", s_Instance.pronunciations)
	self:SendDefault(s_guid,className, "queueGroups", "List<CtrRef)>", s_Instance.queueGroups)
	self:SendDefault(s_guid,className, "types", "List<CtrRef)>", s_Instance.types)
end

function Type:VoiceOverTriggerNode (p_class, p_guid)
	local s_Instance = VoiceOverTriggerNode(p_class) 
 	local className = "VoiceOverTriggerNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "delay", "float", s_Instance.delay)
	self:SendDefault(s_guid,className, "event", "CtrRef", s_Instance.event)
	self:SendDefault(s_guid,className, "parameters", "List<CtrRef)>", s_Instance.parameters)
end

function Type:VoiceOverTriggerParameter (p_class, p_guid)
	local s_Instance = VoiceOverTriggerParameter(p_class) 
 	local className = "VoiceOverTriggerParameter"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "eventParameter", "CtrRef", s_Instance.eventParameter)
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
end

function Type:VoiceOverValue (p_class, p_guid)
	local s_Instance = VoiceOverValue(p_class) 
 	local className = "VoiceOverValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "valueType", "VoiceOverValueType", s_Instance.valueType)
end

function Type:VoiceOverValueConnection (p_class, p_guid)
	local s_Instance = VoiceOverValueConnection(p_class) 
 	local className = "VoiceOverValueConnection"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "targetNode", "CtrRef", s_Instance.targetNode)
	self:SendDefault(s_guid,className, "targetValue", "CtrRef", s_Instance.targetValue)
end

function Type:VoiceOverValueRedirect (p_class, p_guid)
	local s_Instance = VoiceOverValueRedirect(p_class) 
 	local className = "VoiceOverValueRedirect"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "target", "CtrRef", s_Instance.target)
end

function Type:VoiceOverVariableNode (p_class, p_guid)
	local s_Instance = VoiceOverVariableNode(p_class) 
 	local className = "VoiceOverVariableNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "source", "CtrRef", s_Instance.source)
	self:SendDefault(s_guid,className, "value", "CtrRef", s_Instance.value)
end

function Type:VolumeVectorShapeData (p_class, p_guid)
	local s_Instance = VolumeVectorShapeData(p_class) 
 	local className = "VolumeVectorShapeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "height", "float", s_Instance.height)
end

function Type:WarningSystemComponentData (p_class, p_guid)
	local s_Instance = WarningSystemComponentData(p_class) 
 	local className = "WarningSystemComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimWarnSoundEffect", "CtrRef", s_Instance.aimWarnSoundEffect)
	self:SendDefault(s_guid,className, "lockedWarnSoundEffect", "CtrRef", s_Instance.lockedWarnSoundEffect)
	self:SendDefault(s_guid,className, "lockingWarnSoundEffect", "CtrRef", s_Instance.lockingWarnSoundEffect)
	self:SendDefault(s_guid,className, "lowHealthWarnSoundEffect", "CtrRef", s_Instance.lowHealthWarnSoundEffect)
	self:SendDefault(s_guid,className, "missileWarnSoundEffect", "CtrRef", s_Instance.missileWarnSoundEffect)
	self:SendDefault(s_guid,className, "playerType", "WarningPlayerType", s_Instance.playerType)
end

function Type:WarpAnimationBinding (p_class, p_guid)
	local s_Instance = WarpAnimationBinding(p_class) 
 	local className = "WarpAnimationBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "connectJointGroup", "AntRef", s_Instance.connectJointGroup)
	self:SendDefault(s_guid,className, "connectJointWeight", "AntRef", s_Instance.connectJointWeight)
	self:SendDefault(s_guid,className, "disableCulling", "AntRef", s_Instance.disableCulling)
	self:SendDefault(s_guid,className, "enableAlign", "AntRef", s_Instance.enableAlign)
	self:SendDefault(s_guid,className, "translationYWarpTolerance", "AntRef", s_Instance.translationYWarpTolerance)
end

function Type:WarpAnimationComponentData (p_class, p_guid)
	local s_Instance = WarpAnimationComponentData(p_class) 
 	local className = "WarpAnimationComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "boneToAlign", "GameplayBones", s_Instance.boneToAlign)
	self:SendDefault(s_guid,className, "cannedAnimBinding", "CannedAnimationBinding", s_Instance.cannedAnimBinding)
	self:SendDefault(s_guid,className, "connectTransform", "LinearTransform", s_Instance.connectTransform)
	self:SendDefault(s_guid,className, "externalConnectTransform", "bool", s_Instance.externalConnectTransform)
	self:SendDefault(s_guid,className, "forceAnimationTransform", "bool", s_Instance.forceAnimationTransform)
	self:SendDefault(s_guid,className, "requireAnimationWeight", "bool", s_Instance.requireAnimationWeight)
	self:SendDefault(s_guid,className, "warpBinding", "WarpAnimationBinding", s_Instance.warpBinding)
end

function Type:WarpAnimationEntityData (p_class, p_guid)
	local s_Instance = WarpAnimationEntityData(p_class) 
 	local className = "WarpAnimationEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animationEntitySpacePriority", "int", s_Instance.animationEntitySpacePriority)
	self:SendDefault(s_guid,className, "boneToAlign", "GameplayBones", s_Instance.boneToAlign)
	self:SendDefault(s_guid,className, "connectTransform", "LinearTransform", s_Instance.connectTransform)
	self:SendDefault(s_guid,className, "externalConnectTransform", "bool", s_Instance.externalConnectTransform)
	self:SendDefault(s_guid,className, "forceAnimationTransform", "bool", s_Instance.forceAnimationTransform)
	self:SendDefault(s_guid,className, "requireAnimationWeight", "bool", s_Instance.requireAnimationWeight)
	self:SendDefault(s_guid,className, "warpBinding", "WarpAnimationBinding", s_Instance.warpBinding)
end

function Type:WaterEntityData (p_class, p_guid)
	local s_Instance = WaterEntityData(p_class) 
 	local className = "WaterEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset", "CtrRef", s_Instance.asset)
end

function Type:WaveSwitcherNodeData (p_class, p_guid)
	local s_Instance = WaveSwitcherNodeData(p_class) 
 	local className = "WaveSwitcherNodeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "advance", "AudioGraphNodePort", s_Instance.advance)
	self:SendDefault(s_guid,className, "defaultIndex", "float", s_Instance.defaultIndex)
	self:SendDefault(s_guid,className, "index", "AudioGraphNodePort", s_Instance.index)
	self:SendDefault(s_guid,className, "indexChanged", "AudioGraphNodePort", s_Instance.indexChanged)
	self:SendDefault(s_guid,className, "isRandom", "bool", s_Instance.isRandom)
	self:SendDefault(s_guid,className, "randomStartIndex", "bool", s_Instance.randomStartIndex)
	self:SendDefault(s_guid,className, "wave", "AudioGraphNodePort", s_Instance.wave)
	self:SendDefault(s_guid,className, "waves", "List<CtrRef)>", s_Instance.waves)
end

function Type:WaypointComponentData (p_class, p_guid)
	local s_Instance = WaypointComponentData(p_class) 
 	local className = "WaypointComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "looping", "bool", s_Instance.looping)
end

function Type:WaypointData (p_class, p_guid)
	local s_Instance = WaypointData(p_class) 
 	local className = "WaypointData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "schematicsNameHash", "int", s_Instance.schematicsNameHash)
	self:SendDefault(s_guid,className, "useClientsPosition", "bool", s_Instance.useClientsPosition)
	self:SendDefault(s_guid,className, "waypointId", "ushort", s_Instance.waypointId)
end

function Type:WaypointsShapeData (p_class, p_guid)
	local s_Instance = WaypointsShapeData(p_class) 
 	local className = "WaypointsShapeData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "waypoints", "List<CtrRef)>", s_Instance.waypoints)
end

function Type:WaypointTriggerEntityData (p_class, p_guid)
	local s_Instance = WaypointTriggerEntityData(p_class) 
 	local className = "WaypointTriggerEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:WeaponAimingSimulationModifier (p_class, p_guid)
	local s_Instance = WeaponAimingSimulationModifier(p_class) 
 	local className = "WeaponAimingSimulationModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aimingController", "CtrRef", s_Instance.aimingController)
end

function Type:WeaponAnimatedFireTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimatedFireTypeModifier(p_class) 
 	local className = "WeaponAnimatedFireTypeModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatedFireType", "AnimatedFireEnum", s_Instance.animatedFireType)
end

function Type:WeaponAnimationConfigurationModifier (p_class, p_guid)
	local s_Instance = WeaponAnimationConfigurationModifier(p_class) 
 	local className = "WeaponAnimationConfigurationModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatedFireType", "AnimatedFireEnum", s_Instance.animatedFireType)
	self:SendDefault(s_guid,className, "animationConfiguration", "AnimationConfigurationData", s_Instance.animationConfiguration)
	self:SendDefault(s_guid,className, "zoomInOutMeshTransitionFactors", "List<float)>", s_Instance.zoomInOutMeshTransitionFactors)
end

function Type:WeaponAnimatedFireTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimatedFireTypeModifier(p_class) 
 	local className = "WeaponAnimatedFireTypeModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "animatedFireType", "AnimatedFireEnum", s_Instance.animatedFireType)
end

function Type:WeaponAnimTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimTypeModifier(p_class) 
 	local className = "WeaponAnimTypeModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponAnimType", "fb.WeaponAnimType)", s_Instance.weaponAnimType)
end

function Type:WeaponClassModifier (p_class, p_guid)
	local s_Instance = WeaponClassModifier(p_class) 
 	local className = "WeaponClassModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponClass", "WeaponClassEnum", s_Instance.weaponClass)
end

function Type:WeaponComponentData (p_class, p_guid)
	local s_Instance = WeaponComponentData(p_class) 
 	local className = "WeaponComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aIData", "CtrRef", s_Instance.aIData)
	self:SendDefault(s_guid,className, "classification", "WeaponClassification", s_Instance.classification)
	self:SendDefault(s_guid,className, "customWeaponType", "CtrRef", s_Instance.customWeaponType)
	self:SendDefault(s_guid,className, "damageGiverName", "string", s_Instance.damageGiverName)
	self:SendDefault(s_guid,className, "damageMultiplier", "float", s_Instance.damageMultiplier)
	self:SendDefault(s_guid,className, "explosionDamageMultiplier", "float", s_Instance.explosionDamageMultiplier)
	self:SendDefault(s_guid,className, "impulseStrength", "float", s_Instance.impulseStrength)
	self:SendDefault(s_guid,className, "lockingAcceptanceAngleMultiplier", "float", s_Instance.lockingAcceptanceAngleMultiplier)
	self:SendDefault(s_guid,className, "lockTimeMultiplier", "float", s_Instance.lockTimeMultiplier)
	self:SendDefault(s_guid,className, "overheatDropPerSecondMultiplier", "float", s_Instance.overheatDropPerSecondMultiplier)
	self:SendDefault(s_guid,className, "projectileSpawnOffset", "Vec3", s_Instance.projectileSpawnOffset)
	self:SendDefault(s_guid,className, "reloadTimeMultiplier", "float", s_Instance.reloadTimeMultiplier)
	self:SendDefault(s_guid,className, "sequentialFiring", "bool", s_Instance.sequentialFiring)
	self:SendDefault(s_guid,className, "weaponFiring", "CtrRef", s_Instance.weaponFiring)
	self:SendDefault(s_guid,className, "weaponItemHash", "uint", s_Instance.weaponItemHash)
	self:SendDefault(s_guid,className, "weaponMesh", "CtrRef", s_Instance.weaponMesh)
end

function Type:WeaponData (p_class, p_guid)
	local s_Instance = WeaponData(p_class) 
 	local className = "WeaponData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "showLaserPaintedVehicles", "bool", s_Instance.showLaserPaintedVehicles)
end

function Type:WeaponDeployTimeModifier (p_class, p_guid)
	local s_Instance = WeaponDeployTimeModifier(p_class) 
 	local className = "WeaponDeployTimeModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altDeployId", "int", s_Instance.altDeployId)
	self:SendDefault(s_guid,className, "altDeployTime", "float", s_Instance.altDeployTime)
	self:SendDefault(s_guid,className, "deployTime", "float", s_Instance.deployTime)
	self:SendDefault(s_guid,className, "disableZoomOnDeployTime", "float", s_Instance.disableZoomOnDeployTime)
end

function Type:WeaponEntityData (p_class, p_guid)
	local s_Instance = WeaponEntityData(p_class) 
 	local className = "WeaponEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "aIData", "CtrRef", s_Instance.aIData)
	self:SendDefault(s_guid,className, "customWeaponType", "CtrRef", s_Instance.customWeaponType)
	self:SendDefault(s_guid,className, "weaponClass", "WeaponClassEnum", s_Instance.weaponClass)
	self:SendDefault(s_guid,className, "weaponFiring", "CtrRef", s_Instance.weaponFiring)
	self:SendDefault(s_guid,className, "weaponStates", "List<WeaponStateData)>", s_Instance.weaponStates)
end

function Type:WeaponFiringData (p_class, p_guid)
	local s_Instance = WeaponFiringData(p_class) 
 	local className = "WeaponFiringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "abortReloadOnSprint", "bool", s_Instance.abortReloadOnSprint)
	self:SendDefault(s_guid,className, "altDeployId", "int", s_Instance.altDeployId)
	self:SendDefault(s_guid,className, "altDeployTime", "float", s_Instance.altDeployTime)
	self:SendDefault(s_guid,className, "deployTime", "float", s_Instance.deployTime)
	self:SendDefault(s_guid,className, "disableReloadWhileSprinting", "bool", s_Instance.disableReloadWhileSprinting)
	self:SendDefault(s_guid,className, "disableZoomOnDeployTime", "float", s_Instance.disableZoomOnDeployTime)
	self:SendDefault(s_guid,className, "inflictSelfDamage", "bool", s_Instance.inflictSelfDamage)
	self:SendDefault(s_guid,className, "primaryFire", "CtrRef", s_Instance.primaryFire)
	self:SendDefault(s_guid,className, "reactivateCooldownTime", "float", s_Instance.reactivateCooldownTime)
	self:SendDefault(s_guid,className, "reloadWholeMags", "bool", s_Instance.reloadWholeMags)
	self:SendDefault(s_guid,className, "rumble", "RumbleFiringData", s_Instance.rumble)
	self:SendDefault(s_guid,className, "showEnemyNametagOnAim", "bool", s_Instance.showEnemyNametagOnAim)
	self:SendDefault(s_guid,className, "supportDelayProne", "float", s_Instance.supportDelayProne)
	self:SendDefault(s_guid,className, "supportDelayStand", "float", s_Instance.supportDelayStand)
	self:SendDefault(s_guid,className, "useAutoAiming", "bool", s_Instance.useAutoAiming)
	self:SendDefault(s_guid,className, "weaponSway", "CtrRef", s_Instance.weaponSway)
end

function Type:WeaponFiringDataModifier (p_class, p_guid)
	local s_Instance = WeaponFiringDataModifier(p_class) 
 	local className = "WeaponFiringDataModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponFiring", "CtrRef", s_Instance.weaponFiring)
end

function Type:WeaponFiringEffectsModifier (p_class, p_guid)
	local s_Instance = WeaponFiringEffectsModifier(p_class) 
 	local className = "WeaponFiringEffectsModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "fireEffects1p", "List<FireEffectData)>", s_Instance.fireEffects1p)
	self:SendDefault(s_guid,className, "fireEffects3p", "List<FireEffectData)>", s_Instance.fireEffects3p)
end

function Type:WeaponInputRouterComponentData (p_class, p_guid)
	local s_Instance = WeaponInputRouterComponentData(p_class) 
 	local className = "WeaponInputRouterComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxFireRate", "float", s_Instance.maxFireRate)
	self:SendDefault(s_guid,className, "rotationCount", "uint", s_Instance.rotationCount)
end

function Type:WeaponLagBinding (p_class, p_guid)
	local s_Instance = WeaponLagBinding(p_class) 
 	local className = "WeaponLagBinding"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "entityPitch", "AntRef", s_Instance.entityPitch)
	self:SendDefault(s_guid,className, "entityYaw", "AntRef", s_Instance.entityYaw)
	self:SendDefault(s_guid,className, "pitchResult", "AntRef", s_Instance.pitchResult)
	self:SendDefault(s_guid,className, "rollResult", "AntRef", s_Instance.rollResult)
	self:SendDefault(s_guid,className, "yawResult", "AntRef", s_Instance.yawResult)
end

function Type:WeaponLagEffectForceData (p_class, p_guid)
	local s_Instance = WeaponLagEffectForceData(p_class) 
 	local className = "WeaponLagEffectForceData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "offsetForce", "Vec3", s_Instance.offsetForce)
	self:SendDefault(s_guid,className, "rotationForce", "Vec3", s_Instance.rotationForce)
end

function Type:WeaponLagEffectSpringData (p_class, p_guid)
	local s_Instance = WeaponLagEffectSpringData(p_class) 
 	local className = "WeaponLagEffectSpringData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "constant", "float", s_Instance.constant)
	self:SendDefault(s_guid,className, "damping", "float", s_Instance.damping)
end

function Type:WeaponLagEffectSpringVector (p_class, p_guid)
	local s_Instance = WeaponLagEffectSpringVector(p_class) 
 	local className = "WeaponLagEffectSpringVector"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "springX", "WeaponLagEffectSpringData", s_Instance.springX)
	self:SendDefault(s_guid,className, "springY", "WeaponLagEffectSpringData", s_Instance.springY)
	self:SendDefault(s_guid,className, "springZ", "WeaponLagEffectSpringData", s_Instance.springZ)
end

function Type:WeaponLagEntityData (p_class, p_guid)
	local s_Instance = WeaponLagEntityData(p_class) 
 	local className = "WeaponLagEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "binding", "WeaponLagBinding", s_Instance.binding)
end

function Type:WeaponLagSpringEffectData (p_class, p_guid)
	local s_Instance = WeaponLagSpringEffectData(p_class) 
 	local className = "WeaponLagSpringEffectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "jumpForces", "WeaponLagEffectForceData", s_Instance.jumpForces)
	self:SendDefault(s_guid,className, "landForces", "WeaponLagEffectForceData", s_Instance.landForces)
	self:SendDefault(s_guid,className, "offsetSprings", "WeaponLagEffectSpringVector", s_Instance.offsetSprings)
	self:SendDefault(s_guid,className, "poseDownForces", "WeaponLagEffectForceData", s_Instance.poseDownForces)
	self:SendDefault(s_guid,className, "poseUpForces", "WeaponLagEffectForceData", s_Instance.poseUpForces)
	self:SendDefault(s_guid,className, "rotationSprings", "WeaponLagEffectSpringVector", s_Instance.rotationSprings)
	self:SendDefault(s_guid,className, "zoomForceModifier", "float", s_Instance.zoomForceModifier)
end

function Type:WeaponMagazineModifier (p_class, p_guid)
	local s_Instance = WeaponMagazineModifier(p_class) 
 	local className = "WeaponMagazineModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "magazineCapacity", "int", s_Instance.magazineCapacity)
	self:SendDefault(s_guid,className, "numberOfMagazines", "int", s_Instance.numberOfMagazines)
end

function Type:WeaponMiscModifier (p_class, p_guid)
	local s_Instance = WeaponMiscModifier(p_class) 
 	local className = "WeaponMiscModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "canBeInSupportedShooting", "bool", s_Instance.canBeInSupportedShooting)
	self:SendDefault(s_guid,className, "enableBreathControl", "bool", s_Instance.enableBreathControl)
	self:SendDefault(s_guid,className, "holdBoltActionUntilZoomRelease", "bool", s_Instance.holdBoltActionUntilZoomRelease)
	self:SendDefault(s_guid,className, "isSilenced", "bool", s_Instance.isSilenced)
	self:SendDefault(s_guid,className, "unZoomOnBoltAction", "bool", s_Instance.unZoomOnBoltAction)
end

function Type:WeaponMiscModifierSettings (p_class, p_guid)
	local s_Instance = WeaponMiscModifierSettings(p_class) 
 	local className = "WeaponMiscModifierSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "canBeInSupportedShooting", "bool", s_Instance.canBeInSupportedShooting)
	self:SendDefault(s_guid,className, "enableBreathControl", "bool", s_Instance.enableBreathControl)
	self:SendDefault(s_guid,className, "holdBoltActionUntilZoomRelease", "bool", s_Instance.holdBoltActionUntilZoomRelease)
	self:SendDefault(s_guid,className, "isSilenced", "bool", s_Instance.isSilenced)
	self:SendDefault(s_guid,className, "unZoomOnBoltAction", "bool", s_Instance.unZoomOnBoltAction)
end

function Type:WeaponModifier (p_class, p_guid)
	local s_Instance = WeaponModifier(p_class) 
 	local className = "WeaponModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "dummyToMakeFrostEDcompile", "int", s_Instance.dummyToMakeFrostEDcompile)
end

function Type:WeaponModifierData (p_class, p_guid)
	local s_Instance = WeaponModifierData(p_class) 
 	local className = "WeaponModifierData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "modifiers", "List<CtrRef)>", s_Instance.modifiers)
	self:SendDefault(s_guid,className, "unlockAsset", "CtrRef", s_Instance.unlockAsset)
end

function Type:WeaponOffsetData (p_class, p_guid)
	local s_Instance = WeaponOffsetData(p_class) 
 	local className = "WeaponOffsetData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "weaponOffsetX", "float", s_Instance.weaponOffsetX)
	self:SendDefault(s_guid,className, "weaponOffsetY", "float", s_Instance.weaponOffsetY)
	self:SendDefault(s_guid,className, "weaponOffsetZ", "float", s_Instance.weaponOffsetZ)
	self:SendDefault(s_guid,className, "weaponZoomedOffsetX", "float", s_Instance.weaponZoomedOffsetX)
	self:SendDefault(s_guid,className, "weaponZoomedOffsetY", "float", s_Instance.weaponZoomedOffsetY)
	self:SendDefault(s_guid,className, "weaponZoomedOffsetZ", "float", s_Instance.weaponZoomedOffsetZ)
end

function Type:WeaponOverrideData (p_class, p_guid)
	local s_Instance = WeaponOverrideData(p_class) 
 	local className = "WeaponOverrideData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "data", "CtrRef", s_Instance.data)
	self:SendDefault(s_guid,className, "values", "List<WeaponOverrideValue)>", s_Instance.values)
end

function Type:WeaponOverrideValue (p_class, p_guid)
	local s_Instance = WeaponOverrideValue(p_class) 
 	local className = "WeaponOverrideValue"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "value", "float", s_Instance.value)
	self:SendDefault(s_guid,className, "valueType", "WeaponOverrideValueType", s_Instance.valueType)
end

function Type:WeaponPickupData (p_class, p_guid)
	local s_Instance = WeaponPickupData(p_class) 
 	local className = "WeaponPickupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altWeaponSlot", "int", s_Instance.altWeaponSlot)
	self:SendDefault(s_guid,className, "linkedToWeaponSlot", "int", s_Instance.linkedToWeaponSlot)
	self:SendDefault(s_guid,className, "maxAmmo", "uint", s_Instance.maxAmmo)
	self:SendDefault(s_guid,className, "minAmmo", "uint", s_Instance.minAmmo)
	self:SendDefault(s_guid,className, "weapon", "CtrRef", s_Instance.weapon)
	self:SendDefault(s_guid,className, "weaponSlot", "uint", s_Instance.weaponSlot)
end

function Type:WeaponPickupEntityData (p_class, p_guid)
	local s_Instance = WeaponPickupEntityData(p_class) 
 	local className = "WeaponPickupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "useForPersistence", "bool", s_Instance.useForPersistence)
	self:SendDefault(s_guid,className, "weapons", "List<WeaponPickupData)>", s_Instance.weapons)
end

function Type:WeaponProjectileModifier (p_class, p_guid)
	local s_Instance = WeaponProjectileModifier(p_class) 
 	local className = "WeaponProjectileModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "projectileData", "CtrRef", s_Instance.projectileData)
end

function Type:WeaponRegularSocketObjectData (p_class, p_guid)
	local s_Instance = WeaponRegularSocketObjectData(p_class) 
 	local className = "WeaponRegularSocketObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "mesh3pTransforms", "List<LinearTransform)>", s_Instance.mesh3pTransforms)
	self:SendDefault(s_guid,className, "transform", "LinearTransform", s_Instance.transform)
end

function Type:WeaponShotModifier (p_class, p_guid)
	local s_Instance = WeaponShotModifier(p_class) 
 	local className = "WeaponShotModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "initialSpeed", "Vec3", s_Instance.initialSpeed)
	self:SendDefault(s_guid,className, "numberOfBulletsPerShell", "int", s_Instance.numberOfBulletsPerShell)
end

function Type:WeaponSocketObjectData (p_class, p_guid)
	local s_Instance = WeaponSocketObjectData(p_class) 
 	local className = "WeaponSocketObjectData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "asset1p", "CtrRef", s_Instance.asset1p)
	self:SendDefault(s_guid,className, "asset1pzoom", "CtrRef", s_Instance.asset1pzoom)
	self:SendDefault(s_guid,className, "asset3p", "CtrRef", s_Instance.asset3p)
	self:SendDefault(s_guid,className, "referencedAssetHashes", "List<uint)>", s_Instance.referencedAssetHashes)
end

function Type:WeaponSoundModifier (p_class, p_guid)
	local s_Instance = WeaponSoundModifier(p_class) 
 	local className = "WeaponSoundModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "sound", "CtrRef", s_Instance.sound)
end

function Type:WeaponSpeedData (p_class, p_guid)
	local s_Instance = WeaponSpeedData(p_class) 
 	local className = "WeaponSpeedData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "deploySpeed", "float", s_Instance.deploySpeed)
	self:SendDefault(s_guid,className, "unDeploySpeed", "float", s_Instance.unDeploySpeed)
	self:SendDefault(s_guid,className, "zoomInSpeed", "float", s_Instance.zoomInSpeed)
	self:SendDefault(s_guid,className, "zoomOutSpeed", "float", s_Instance.zoomOutSpeed)
end

function Type:WeaponStateData (p_class, p_guid)
	local s_Instance = WeaponStateData(p_class) 
 	local className = "WeaponStateData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alwaysAimHead", "bool", s_Instance.alwaysAimHead)
	self:SendDefault(s_guid,className, "animatedAimingType", "AnimatedAimingEnum", s_Instance.animatedAimingType)
	self:SendDefault(s_guid,className, "animatedFireType", "AnimatedFireEnum", s_Instance.animatedFireType)
	self:SendDefault(s_guid,className, "animationConfiguration", "AnimationConfigurationData", s_Instance.animationConfiguration)
	self:SendDefault(s_guid,className, "boneFakePhysics", "List<CtrRef)>", s_Instance.boneFakePhysics)
	self:SendDefault(s_guid,className, "hideProjectileAfterFireTime", "float", s_Instance.hideProjectileAfterFireTime)
	self:SendDefault(s_guid,className, "isOneHanded", "bool", s_Instance.isOneHanded)
	self:SendDefault(s_guid,className, "keepAimingTime", "float", s_Instance.keepAimingTime)
	self:SendDefault(s_guid,className, "mesh1p", "CtrRef", s_Instance.mesh1p)
	self:SendDefault(s_guid,className, "mesh3p", "CtrRef", s_Instance.mesh3p)
	self:SendDefault(s_guid,className, "mesh3pRigidMeshSocketObjectTransforms", "List<RigidMeshSocketTransform)>", s_Instance.mesh3pRigidMeshSocketObjectTransforms)
	self:SendDefault(s_guid,className, "mesh3pTransforms", "List<LinearTransform)>", s_Instance.mesh3pTransforms)
	self:SendDefault(s_guid,className, "meshZoom1p", "CtrRef", s_Instance.meshZoom1p)
	self:SendDefault(s_guid,className, "nonZoomedScopeFilter", "CtrRef", s_Instance.nonZoomedScopeFilter)
	self:SendDefault(s_guid,className, "playDeployAfterFire", "bool", s_Instance.playDeployAfterFire)
	self:SendDefault(s_guid,className, "projectileBoneName", "string", s_Instance.projectileBoneName)
	self:SendDefault(s_guid,className, "referencedAssetHashes", "List<uint)>", s_Instance.referencedAssetHashes)
	self:SendDefault(s_guid,className, "skipDeployAnimation", "bool", s_Instance.skipDeployAnimation)
	self:SendDefault(s_guid,className, "skipFireAnimation", "bool", s_Instance.skipFireAnimation)
	self:SendDefault(s_guid,className, "skipReloadAnimation", "bool", s_Instance.skipReloadAnimation)
	self:SendDefault(s_guid,className, "weapon", "AntRef", s_Instance.weapon)
	self:SendDefault(s_guid,className, "zoomedScopeFilter", "CtrRef", s_Instance.zoomedScopeFilter)
	self:SendDefault(s_guid,className, "zoomInOutMeshTransitionFactors", "List<float)>", s_Instance.zoomInOutMeshTransitionFactors)
	self:SendDefault(s_guid,className, "zoomMeshTransitionFactor", "float", s_Instance.zoomMeshTransitionFactor)
	self:SendDefault(s_guid,className, "zoomScaleFactor", "float", s_Instance.zoomScaleFactor)
end

function Type:WeaponStateEntityData (p_class, p_guid)
	local s_Instance = WeaponStateEntityData(p_class) 
 	local className = "WeaponStateEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "weaponSlot", "int", s_Instance.weaponSlot)
end

function Type:WeaponSuppressionData (p_class, p_guid)
	local s_Instance = WeaponSuppressionData(p_class) 
 	local className = "WeaponSuppressionData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "maxDistance", "float", s_Instance.maxDistance)
	self:SendDefault(s_guid,className, "maxMultiplier", "float", s_Instance.maxMultiplier)
	self:SendDefault(s_guid,className, "minDistance", "float", s_Instance.minDistance)
	self:SendDefault(s_guid,className, "minMultiplier", "float", s_Instance.minMultiplier)
end

function Type:WeaponSwitchingMapData (p_class, p_guid)
	local s_Instance = WeaponSwitchingMapData(p_class) 
 	local className = "WeaponSwitchingMapData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "action", "EntryInputActionEnum", s_Instance.action)
	self:SendDefault(s_guid,className, "fireAndSwitchBackToPrev", "bool", s_Instance.fireAndSwitchBackToPrev)
	self:SendDefault(s_guid,className, "fromWeapon", "WeaponSwitchingEnum", s_Instance.fromWeapon)
	self:SendDefault(s_guid,className, "toWeapon", "List<WeaponSwitchingEnum)>", s_Instance.toWeapon)
	self:SendDefault(s_guid,className, "weaponSwitchingMapData",  "readonly", s_Instance.weaponSwitchingMapData)
	self:SendDefault(s_guid,className, "weaponSwitchingEnum",  "uint", s_Instance.weaponSwitchingEnum)
end

function Type:WeaponUnlockPickupData (p_class, p_guid)
	local s_Instance = WeaponUnlockPickupData(p_class) 
 	local className = "WeaponUnlockPickupData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "altWeaponSlot", "int", s_Instance.altWeaponSlot)
	self:SendDefault(s_guid,className, "defaultToFullAmmo", "bool", s_Instance.defaultToFullAmmo)
	self:SendDefault(s_guid,className, "linkedToWeaponSlot", "int", s_Instance.linkedToWeaponSlot)
	self:SendDefault(s_guid,className, "maxAmmo", "uint", s_Instance.maxAmmo)
	self:SendDefault(s_guid,className, "minAmmo", "uint", s_Instance.minAmmo)
	self:SendDefault(s_guid,className, "unlockWeaponAndSlot", "fb.UnlockWeaponAndSlot)", s_Instance.unlockWeaponAndSlot)
end

function Type:WeaponUnlockPickupEntityData (p_class, p_guid)
	local s_Instance = WeaponUnlockPickupEntityData(p_class) 
 	local className = "WeaponUnlockPickupEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "randomlySelectOneWeapon", "bool", s_Instance.randomlySelectOneWeapon)
	self:SendDefault(s_guid,className, "useForPersistence", "bool", s_Instance.useForPersistence)
	self:SendDefault(s_guid,className, "weapons", "List<WeaponUnlockPickupData)>", s_Instance.weapons)
end

function Type:WeaponZoomModifier (p_class, p_guid)
	local s_Instance = WeaponZoomModifier(p_class) 
 	local className = "WeaponZoomModifier"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "zoomRenderFov", "float", s_Instance.zoomRenderFov)
end

function Type:WheelComponentData (p_class, p_guid)
	local s_Instance = WheelComponentData(p_class) 
 	local className = "WheelComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "config", "CtrRef", s_Instance.config)
	self:SendDefault(s_guid,className, "effectClampVelocity", "float", s_Instance.effectClampVelocity)
	self:SendDefault(s_guid,className, "physicsType", "WheelPhysicsType", s_Instance.physicsType)
end

function Type:WheelConfigData (p_class, p_guid)
	local s_Instance = WheelConfigData(p_class) 
 	local className = "WheelConfigData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "ackermanDeviceType", "int", s_Instance.ackermanDeviceType)
	self:SendDefault(s_guid,className, "adjustWheelRotation", "bool", s_Instance.adjustWheelRotation)
	self:SendDefault(s_guid,className, "alignMomScale", "float", s_Instance.alignMomScale)
	self:SendDefault(s_guid,className, "alwaysGrip", "bool", s_Instance.alwaysGrip)
	self:SendDefault(s_guid,className, "angularVelocityMinSlipCondition", "float", s_Instance.angularVelocityMinSlipCondition)
	self:SendDefault(s_guid,className, "brakeFactor", "float", s_Instance.brakeFactor)
	self:SendDefault(s_guid,className, "brakeForce", "float", s_Instance.brakeForce)
	self:SendDefault(s_guid,className, "collisionMaterialPair", "CtrRef", s_Instance.collisionMaterialPair)
	self:SendDefault(s_guid,className, "collisionYawDampening", "float", s_Instance.collisionYawDampening)
	self:SendDefault(s_guid,className, "collisionYawDampeningDuration", "float", s_Instance.collisionYawDampeningDuration)
	self:SendDefault(s_guid,className, "constantSpringForceFrictionScale", "float", s_Instance.constantSpringForceFrictionScale)
	self:SendDefault(s_guid,className, "diffGearRatio", "float", s_Instance.diffGearRatio)
	self:SendDefault(s_guid,className, "drivingType", "int", s_Instance.drivingType)
	self:SendDefault(s_guid,className, "engineBrakeMaxFactor", "float", s_Instance.engineBrakeMaxFactor)
	self:SendDefault(s_guid,className, "engineBrakeMinFactor", "float", s_Instance.engineBrakeMinFactor)
	self:SendDefault(s_guid,className, "engineBrakeVelocityFactor", "float", s_Instance.engineBrakeVelocityFactor)
	self:SendDefault(s_guid,className, "engineIndex", "int", s_Instance.engineIndex)
	self:SendDefault(s_guid,className, "frictionMethod", "int", s_Instance.frictionMethod)
	self:SendDefault(s_guid,className, "frictionMomentMaxFactor", "float", s_Instance.frictionMomentMaxFactor)
	self:SendDefault(s_guid,className, "frictionMomentMultiplier", "float", s_Instance.frictionMomentMultiplier)
	self:SendDefault(s_guid,className, "frictionMomentVelocityMax", "float", s_Instance.frictionMomentVelocityMax)
	self:SendDefault(s_guid,className, "frictionMomentVelocityMin", "float", s_Instance.frictionMomentVelocityMin)
	self:SendDefault(s_guid,className, "fxTorqueRadiusMultiplier", "float", s_Instance.fxTorqueRadiusMultiplier)
	self:SendDefault(s_guid,className, "handBrakeFactor", "float", s_Instance.handBrakeFactor)
	self:SendDefault(s_guid,className, "handBrakeForce", "float", s_Instance.handBrakeForce)
	self:SendDefault(s_guid,className, "hasSteeringInverted", "bool", s_Instance.hasSteeringInverted)
	self:SendDefault(s_guid,className, "highSpeedSteeringSensitivity", "float", s_Instance.highSpeedSteeringSensitivity)
	self:SendDefault(s_guid,className, "highSpeedSteeringSensitivityLimit", "float", s_Instance.highSpeedSteeringSensitivityLimit)
	self:SendDefault(s_guid,className, "inertia", "Vec3", s_Instance.inertia)
	self:SendDefault(s_guid,className, "isAllowedToSpin", "bool", s_Instance.isAllowedToSpin)
	self:SendDefault(s_guid,className, "lateralFrictionForceMaxFactor", "float", s_Instance.lateralFrictionForceMaxFactor)
	self:SendDefault(s_guid,className, "lateralNegK", "float", s_Instance.lateralNegK)
	self:SendDefault(s_guid,className, "lateralPosK", "float", s_Instance.lateralPosK)
	self:SendDefault(s_guid,className, "lattitudeFrictionScale", "List<FrictionScaleAtVelocity)>", s_Instance.lattitudeFrictionScale)
	self:SendDefault(s_guid,className, "longitudeFrictionScale", "List<FrictionScaleAtVelocity)>", s_Instance.longitudeFrictionScale)
	self:SendDefault(s_guid,className, "longitudinalFrictionForceMaxFactor", "float", s_Instance.longitudinalFrictionForceMaxFactor)
	self:SendDefault(s_guid,className, "longitudinalNegK", "float", s_Instance.longitudinalNegK)
	self:SendDefault(s_guid,className, "longitudinalPosK", "float", s_Instance.longitudinalPosK)
	self:SendDefault(s_guid,className, "lowSpeedSteeringSensitivity", "float", s_Instance.lowSpeedSteeringSensitivity)
	self:SendDefault(s_guid,className, "lowSpeedSteeringSensitivityLimit", "float", s_Instance.lowSpeedSteeringSensitivityLimit)
	self:SendDefault(s_guid,className, "mass", "float", s_Instance.mass)
	self:SendDefault(s_guid,className, "maxSlipRatio", "float", s_Instance.maxSlipRatio)
	self:SendDefault(s_guid,className, "midSpeedSteeringSensitivity", "float", s_Instance.midSpeedSteeringSensitivity)
	self:SendDefault(s_guid,className, "midSpeedSteeringSensitivityLimit", "float", s_Instance.midSpeedSteeringSensitivityLimit)
	self:SendDefault(s_guid,className, "offGroundGravityModifier", "float", s_Instance.offGroundGravityModifier)
	self:SendDefault(s_guid,className, "offset", "Vec3", s_Instance.offset)
	self:SendDefault(s_guid,className, "pacejkaConfigIndex", "int", s_Instance.pacejkaConfigIndex)
	self:SendDefault(s_guid,className, "radius", "float", s_Instance.radius)
	self:SendDefault(s_guid,className, "resistance", "float", s_Instance.resistance)
	self:SendDefault(s_guid,className, "rollingResistanceBaseFactor", "float", s_Instance.rollingResistanceBaseFactor)
	self:SendDefault(s_guid,className, "rollingResistanceInternalBaseFactor", "float", s_Instance.rollingResistanceInternalBaseFactor)
	self:SendDefault(s_guid,className, "rollingResistanceVelocityFactor", "float", s_Instance.rollingResistanceVelocityFactor)
	self:SendDefault(s_guid,className, "rotationBody", "CtrRef", s_Instance.rotationBody)
	self:SendDefault(s_guid,className, "rotationDirectionIndex", "int", s_Instance.rotationDirectionIndex)
	self:SendDefault(s_guid,className, "sensitivityRangeScale", "float", s_Instance.sensitivityRangeScale)
	self:SendDefault(s_guid,className, "sideSlipAngleMaxSlipCondition", "float", s_Instance.sideSlipAngleMaxSlipCondition)
	self:SendDefault(s_guid,className, "slopeGripExponent", "int", s_Instance.slopeGripExponent)
	self:SendDefault(s_guid,className, "slopeGripMaxAngle", "float", s_Instance.slopeGripMaxAngle)
	self:SendDefault(s_guid,className, "slopeGripMinAngle", "float", s_Instance.slopeGripMinAngle)
	self:SendDefault(s_guid,className, "sphereCollision", "SphereCollisionData", s_Instance.sphereCollision)
	self:SendDefault(s_guid,className, "spring", "SpringData", s_Instance.spring)
	self:SendDefault(s_guid,className, "steerInertia", "CtrRef", s_Instance.steerInertia)
	self:SendDefault(s_guid,className, "steeringAngleIndex", "int", s_Instance.steeringAngleIndex)
	self:SendDefault(s_guid,className, "steeringSensitivity", "List<SensitivityAtVelocity)>", s_Instance.steeringSensitivity)
	self:SendDefault(s_guid,className, "steeringType", "int", s_Instance.steeringType)
	self:SendDefault(s_guid,className, "trackedForwardSpeedLimit", "float", s_Instance.trackedForwardSpeedLimit)
	self:SendDefault(s_guid,className, "trackedTurnSpeedLimit", "float", s_Instance.trackedTurnSpeedLimit)
	self:SendDefault(s_guid,className, "transmissionLoss", "List<Vec2)>", s_Instance.transmissionLoss)
	self:SendDefault(s_guid,className, "useEngineBrake", "bool", s_Instance.useEngineBrake)
	self:SendDefault(s_guid,className, "useFrictionMoment", "bool", s_Instance.useFrictionMoment)
	self:SendDefault(s_guid,className, "useLowSpeedAutoBrake", "bool", s_Instance.useLowSpeedAutoBrake)
	self:SendDefault(s_guid,className, "useRollingResistanceBaseFactor", "bool", s_Instance.useRollingResistanceBaseFactor)
	self:SendDefault(s_guid,className, "useRollingResistanceVelocityFactor", "bool", s_Instance.useRollingResistanceVelocityFactor)
	self:SendDefault(s_guid,className, "wheelBaseLateral", "float", s_Instance.wheelBaseLateral)
	self:SendDefault(s_guid,className, "wheelBaseLongitudinal", "float", s_Instance.wheelBaseLongitudinal)
	self:SendDefault(s_guid,className, "wheelFrictionLattitudeBrakeScale", "float", s_Instance.wheelFrictionLattitudeBrakeScale)
	self:SendDefault(s_guid,className, "wheelSlipRatioMaxSlipCondition", "float", s_Instance.wheelSlipRatioMaxSlipCondition)
	self:SendDefault(s_guid,className, "wheelVelocityXMinSlipCondition", "float", s_Instance.wheelVelocityXMinSlipCondition)
	self:SendDefault(s_guid,className, "width", "float", s_Instance.width)
end

function Type:WidgetEventQueryPair (p_class, p_guid)
	local s_Instance = WidgetEventQueryPair(p_class) 
 	local className = "WidgetEventQueryPair"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "instanceName", "string", s_Instance.instanceName)
	self:SendDefault(s_guid,className, "isOutput", "bool", s_Instance.isOutput)
	self:SendDefault(s_guid,className, "name", "string", s_Instance.name)
	self:SendDefault(s_guid,className, "query", "UIWidgetEventID", s_Instance.query)
end

function Type:WidgetNode (p_class, p_guid)
	local s_Instance = WidgetNode(p_class) 
 	local className = "WidgetNode"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "alwaysInFocus", "bool", s_Instance.alwaysInFocus)
	self:SendDefault(s_guid,className, "dataBinding", "CtrRef", s_Instance.dataBinding)
	self:SendDefault(s_guid,className, "focusIndex", "int", s_Instance.focusIndex)
	self:SendDefault(s_guid,className, "horisontalAlign", "WidgetHorisontalAlignment", s_Instance.horisontalAlign)
	self:SendDefault(s_guid,className, "inputs", "List<CtrRef)>", s_Instance.inputs)
	self:SendDefault(s_guid,className, "instanceName", "string", s_Instance.instanceName)
	self:SendDefault(s_guid,className, "outputs", "List<CtrRef)>", s_Instance.outputs)
	self:SendDefault(s_guid,className, "verticalAlign", "WidgetVerticalAlignment", s_Instance.verticalAlign)
	self:SendDefault(s_guid,className, "widgetAsset", "CtrRef", s_Instance.widgetAsset)
	self:SendDefault(s_guid,className, "widgetProperties", "List<UIWidgetProperty)>", s_Instance.widgetProperties)
	self:SendDefault(s_guid,className, "zDepthLevel", "int", s_Instance.zDepthLevel)
end

function Type:WindComponentData (p_class, p_guid)
	local s_Instance = WindComponentData(p_class) 
 	local className = "WindComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
	self:SendDefault(s_guid,className, "windDirection", "float", s_Instance.windDirection)
	self:SendDefault(s_guid,className, "windStrength", "float", s_Instance.windStrength)
end

function Type:WindowSettings (p_class, p_guid)
	local s_Instance = WindowSettings(p_class) 
 	local className = "WindowSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "autoSize", "bool", s_Instance.autoSize)
	self:SendDefault(s_guid,className, "bordersEnable", "bool", s_Instance.bordersEnable)
	self:SendDefault(s_guid,className, "enableEscape", "bool", s_Instance.enableEscape)
	self:SendDefault(s_guid,className, "enableInputOnActivate", "bool", s_Instance.enableInputOnActivate)
	self:SendDefault(s_guid,className, "fullscreenAutoSize", "bool", s_Instance.fullscreenAutoSize)
	self:SendDefault(s_guid,className, "fullscreenWhenJoiningServer", "bool", s_Instance.fullscreenWhenJoiningServer)
	self:SendDefault(s_guid,className, "height", "uint", s_Instance.height)
	self:SendDefault(s_guid,className, "hibernateOnClose", "bool", s_Instance.hibernateOnClose)
	self:SendDefault(s_guid,className, "hidden", "bool", s_Instance.hidden)
	self:SendDefault(s_guid,className, "minimized", "bool", s_Instance.minimized)
	self:SendDefault(s_guid,className, "posX", "int", s_Instance.posX)
	self:SendDefault(s_guid,className, "posY", "int", s_Instance.posY)
	self:SendDefault(s_guid,className, "width", "uint", s_Instance.width)
end

function Type:WingComponentData (p_class, p_guid)
	local s_Instance = WingComponentData(p_class) 
 	local className = "WingComponentData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "config", "CtrRef", s_Instance.config)
end

function Type:WingPhysicsData (p_class, p_guid)
	local s_Instance = WingPhysicsData(p_class) 
 	local className = "WingPhysicsData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "angularVelocityLiftModifier", "float", s_Instance.angularVelocityLiftModifier)
	self:SendDefault(s_guid,className, "baseAngleOfAttack", "float", s_Instance.baseAngleOfAttack)
	self:SendDefault(s_guid,className, "drag", "float", s_Instance.drag)
	self:SendDefault(s_guid,className, "dragCoefficient", "CtrRef", s_Instance.dragCoefficient)
	self:SendDefault(s_guid,className, "dragRotationModifier", "float", s_Instance.dragRotationModifier)
	self:SendDefault(s_guid,className, "flapDrag", "float", s_Instance.flapDrag)
	self:SendDefault(s_guid,className, "flapLift", "float", s_Instance.flapLift)
	self:SendDefault(s_guid,className, "flapTurnSpeed", "float", s_Instance.flapTurnSpeed)
	self:SendDefault(s_guid,className, "inputForFlap", "int", s_Instance.inputForFlap)
	self:SendDefault(s_guid,className, "landingFlapLift", "float", s_Instance.landingFlapLift)
	self:SendDefault(s_guid,className, "landingFlapLogic", "CtrRef", s_Instance.landingFlapLogic)
	self:SendDefault(s_guid,className, "lift", "float", s_Instance.lift)
	self:SendDefault(s_guid,className, "liftCoefficient", "CtrRef", s_Instance.liftCoefficient)
	self:SendDefault(s_guid,className, "maxFlapAngleScaleFactor", "CtrRef", s_Instance.maxFlapAngleScaleFactor)
	self:SendDefault(s_guid,className, "visualFlapAngleLimit", "float", s_Instance.visualFlapAngleLimit)
	self:SendDefault(s_guid,className, "visualFlapTurnSpeed", "float", s_Instance.visualFlapTurnSpeed)
end

function Type:WorldData (p_class, p_guid)
	local s_Instance = WorldData(p_class) 
 	local className = "WorldData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "runtimeMaterialGrid", "CtrRef", s_Instance.runtimeMaterialGrid)
end

function Type:WorldPartData (p_class, p_guid)
	local s_Instance = WorldPartData(p_class) 
 	local className = "WorldPartData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "enabled", "bool", s_Instance.enabled)
	self:SendDefault(s_guid,className, "hackToSolveRealTimeTweakingIssue", "GUID", s_Instance.hackToSolveRealTimeTweakingIssue)
	self:SendDefault(s_guid,className, "useDeferredEntityCreation", "bool", s_Instance.useDeferredEntityCreation)
end

function Type:WorldRenderSettings (p_class, p_guid)
	local s_Instance = WorldRenderSettings(p_class) 
 	local className = "WorldRenderSettings"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "applyShadowmapsEnable", "bool", s_Instance.applyShadowmapsEnable)
	self:SendDefault(s_guid,className, "bilateralHalfResCompositeEnable", "bool", s_Instance.bilateralHalfResCompositeEnable)
	self:SendDefault(s_guid,className, "cloudShadowEnable", "bool", s_Instance.cloudShadowEnable)
	self:SendDefault(s_guid,className, "coloredShadowmapSlicesEnable", "bool", s_Instance.coloredShadowmapSlicesEnable)
	self:SendDefault(s_guid,className, "coneLightsEnable", "bool", s_Instance.coneLightsEnable)
	self:SendDefault(s_guid,className, "consoleRenderTargetPoolSharingEnable", "bool", s_Instance.consoleRenderTargetPoolSharingEnable)
	self:SendDefault(s_guid,className, "cullScreenAreaScale", "float", s_Instance.cullScreenAreaScale)
	self:SendDefault(s_guid,className, "customEnvmapEnable", "bool", s_Instance.customEnvmapEnable)
	self:SendDefault(s_guid,className, "decalVolumeEnable", "bool", s_Instance.decalVolumeEnable)
	self:SendDefault(s_guid,className, "decalVolumeScale", "float", s_Instance.decalVolumeScale)
	self:SendDefault(s_guid,className, "drawBoundingSpheres", "bool", s_Instance.drawBoundingSpheres)
	self:SendDefault(s_guid,className, "drawDebugDecalVolumes", "bool", s_Instance.drawDebugDecalVolumes)
	self:SendDefault(s_guid,className, "drawDebugDestructionVolumes", "bool", s_Instance.drawDebugDestructionVolumes)
	self:SendDefault(s_guid,className, "drawDebugDynamicAO", "bool", s_Instance.drawDebugDynamicAO)
	self:SendDefault(s_guid,className, "drawDebugDynamicEnvmap", "bool", s_Instance.drawDebugDynamicEnvmap)
	self:SendDefault(s_guid,className, "drawDebugDynamicEnvmapMipLevel", "int", s_Instance.drawDebugDynamicEnvmapMipLevel)
	self:SendDefault(s_guid,className, "drawDebugGBuffer", "bool", s_Instance.drawDebugGBuffer)
	self:SendDefault(s_guid,className, "drawDebugHalfResEnvironment", "bool", s_Instance.drawDebugHalfResEnvironment)
	self:SendDefault(s_guid,className, "drawDebugLensFlareOccluders", "bool", s_Instance.drawDebugLensFlareOccluders)
	self:SendDefault(s_guid,className, "drawDebugLensFlares", "bool", s_Instance.drawDebugLensFlares)
	self:SendDefault(s_guid,className, "drawDebugLightShadowSources", "bool", s_Instance.drawDebugLightShadowSources)
	self:SendDefault(s_guid,className, "drawDebugLightSources", "bool", s_Instance.drawDebugLightSources)
	self:SendDefault(s_guid,className, "drawDebugLightStats", "bool", s_Instance.drawDebugLightStats)
	self:SendDefault(s_guid,className, "drawDebugLightTileFbGrid", "bool", s_Instance.drawDebugLightTileFbGrid)
	self:SendDefault(s_guid,className, "drawDebugLightTileGrid", "bool", s_Instance.drawDebugLightTileGrid)
	self:SendDefault(s_guid,className, "drawDebugLightTiles", "bool", s_Instance.drawDebugLightTiles)
	self:SendDefault(s_guid,className, "drawDebugLightTileSources", "bool", s_Instance.drawDebugLightTileSources)
	self:SendDefault(s_guid,className, "drawDebugLightTileVolumes", "bool", s_Instance.drawDebugLightTileVolumes)
	self:SendDefault(s_guid,className, "drawDebugMultisampleClassify", "bool", s_Instance.drawDebugMultisampleClassify)
	self:SendDefault(s_guid,className, "drawDebugPlanarReflection", "bool", s_Instance.drawDebugPlanarReflection)
	self:SendDefault(s_guid,className, "drawDebugPlanarReflectionCullFrustum", "bool", s_Instance.drawDebugPlanarReflectionCullFrustum)
	self:SendDefault(s_guid,className, "drawDebugQuarterShadowmaps", "bool", s_Instance.drawDebugQuarterShadowmaps)
	self:SendDefault(s_guid,className, "drawDebugShadowmaps", "bool", s_Instance.drawDebugShadowmaps)
	self:SendDefault(s_guid,className, "drawDebugSkyEnvmap", "bool", s_Instance.drawDebugSkyEnvmap)
	self:SendDefault(s_guid,className, "drawDebugSkyEnvmapMipLevel", "int", s_Instance.drawDebugSkyEnvmapMipLevel)
	self:SendDefault(s_guid,className, "drawDebugSpotLightShadowmaps", "bool", s_Instance.drawDebugSpotLightShadowmaps)
	self:SendDefault(s_guid,className, "drawDebugTransShadowmap", "bool", s_Instance.drawDebugTransShadowmap)
	self:SendDefault(s_guid,className, "drawDebugVelocityBuffer", "bool", s_Instance.drawDebugVelocityBuffer)
	self:SendDefault(s_guid,className, "drawDebugVisibleEntityTypes", "bool", s_Instance.drawDebugVisibleEntityTypes)
	self:SendDefault(s_guid,className, "drawDebugWorldOcclusions", "bool", s_Instance.drawDebugWorldOcclusions)
	self:SendDefault(s_guid,className, "drawDebugZBufferEnable", "bool", s_Instance.drawDebugZBufferEnable)
	self:SendDefault(s_guid,className, "drawFrustums", "bool", s_Instance.drawFrustums)
	self:SendDefault(s_guid,className, "drawLightSources", "bool", s_Instance.drawLightSources)
	self:SendDefault(s_guid,className, "drawLineBoundingBoxes", "bool", s_Instance.drawLineBoundingBoxes)
	self:SendDefault(s_guid,className, "drawShadowFrustums", "bool", s_Instance.drawShadowFrustums)
	self:SendDefault(s_guid,className, "drawSolidBoundingBoxes", "bool", s_Instance.drawSolidBoundingBoxes)
	self:SendDefault(s_guid,className, "drawTransparent", "bool", s_Instance.drawTransparent)
	self:SendDefault(s_guid,className, "drawTransparentDecal", "bool", s_Instance.drawTransparentDecal)
	self:SendDefault(s_guid,className, "dxDeferredCsPathEnable", "bool", s_Instance.dxDeferredCsPathEnable)
	self:SendDefault(s_guid,className, "dxGBufferLight16BitEnable", "bool", s_Instance.dxGBufferLight16BitEnable)
	self:SendDefault(s_guid,className, "dxGBufferNormal16BitEnable", "bool", s_Instance.dxGBufferNormal16BitEnable)
	self:SendDefault(s_guid,className, "dxLinearDepth32BitFormatEnable", "bool", s_Instance.dxLinearDepth32BitFormatEnable)
	self:SendDefault(s_guid,className, "dxShadowmap16BitEnable", "bool", s_Instance.dxShadowmap16BitEnable)
	self:SendDefault(s_guid,className, "dxSpotLightShadowmap16BitEnable", "bool", s_Instance.dxSpotLightShadowmap16BitEnable)
	self:SendDefault(s_guid,className, "dynamicCullDrawOccludedBoxesEnable", "bool", s_Instance.dynamicCullDrawOccludedBoxesEnable)
	self:SendDefault(s_guid,className, "dynamicCullSpuJobEnable", "bool", s_Instance.dynamicCullSpuJobEnable)
	self:SendDefault(s_guid,className, "dynamicCullZBufferTestEnable", "bool", s_Instance.dynamicCullZBufferTestEnable)
	self:SendDefault(s_guid,className, "dynamicEnvmapDefaultPosition", "Vec3", s_Instance.dynamicEnvmapDefaultPosition)
	self:SendDefault(s_guid,className, "dynamicEnvmapEnable", "bool", s_Instance.dynamicEnvmapEnable)
	self:SendDefault(s_guid,className, "dynamicEnvmapFilterMode", "MipmapFilterMode", s_Instance.dynamicEnvmapFilterMode)
	self:SendDefault(s_guid,className, "dynamicEnvmapFilterWidth", "float", s_Instance.dynamicEnvmapFilterWidth)
	self:SendDefault(s_guid,className, "dynamicEnvmapLightingEnable", "bool", s_Instance.dynamicEnvmapLightingEnable)
	self:SendDefault(s_guid,className, "dynamicEnvmapMipmapGenEnable", "bool", s_Instance.dynamicEnvmapMipmapGenEnable)
	self:SendDefault(s_guid,className, "dynamicEnvmapResolution", "uint", s_Instance.dynamicEnvmapResolution)
	self:SendDefault(s_guid,className, "emissiveEnable", "bool", s_Instance.emissiveEnable)
	self:SendDefault(s_guid,className, "enable", "bool", s_Instance.enable)
	self:SendDefault(s_guid,className, "finalPostEnable", "bool", s_Instance.finalPostEnable)
	self:SendDefault(s_guid,className, "forceMotionBlurCutoffGradientScale", "float", s_Instance.forceMotionBlurCutoffGradientScale)
	self:SendDefault(s_guid,className, "forceMotionBlurDepthCutoff", "float", s_Instance.forceMotionBlurDepthCutoff)
	self:SendDefault(s_guid,className, "foregroundAsMainEnable", "bool", s_Instance.foregroundAsMainEnable)
	self:SendDefault(s_guid,className, "foregroundDepthClearEnable", "bool", s_Instance.foregroundDepthClearEnable)
	self:SendDefault(s_guid,className, "foregroundEnable", "bool", s_Instance.foregroundEnable)
	self:SendDefault(s_guid,className, "foregroundTransparentEnable", "bool", s_Instance.foregroundTransparentEnable)
	self:SendDefault(s_guid,className, "foregroundZPassEnable", "bool", s_Instance.foregroundZPassEnable)
	self:SendDefault(s_guid,className, "freezePlanarReflectionCullFrustum", "bool", s_Instance.freezePlanarReflectionCullFrustum)
	self:SendDefault(s_guid,className, "fxaaEnable", "bool", s_Instance.fxaaEnable)
	self:SendDefault(s_guid,className, "fxaaForceVendor", "int", s_Instance.fxaaForceVendor)
	self:SendDefault(s_guid,className, "fxaaQuality", "uint", s_Instance.fxaaQuality)
	self:SendDefault(s_guid,className, "gBufferAlphaTestSimpleEnable", "bool", s_Instance.gBufferAlphaTestSimpleEnable)
	self:SendDefault(s_guid,className, "gBufferClearEnable", "bool", s_Instance.gBufferClearEnable)
	self:SendDefault(s_guid,className, "gBufferLayout", "ShaderGBufferLayout", s_Instance.gBufferLayout)
	self:SendDefault(s_guid,className, "gBufferTestCount", "uint", s_Instance.gBufferTestCount)
	self:SendDefault(s_guid,className, "generateShadowmapsEnable", "bool", s_Instance.generateShadowmapsEnable)
	self:SendDefault(s_guid,className, "genericEntityMaxVisibleEntityCount", "uint", s_Instance.genericEntityMaxVisibleEntityCount)
	self:SendDefault(s_guid,className, "genericEntityRendererEnable", "bool", s_Instance.genericEntityRendererEnable)
	self:SendDefault(s_guid,className, "halfResEnable", "bool", s_Instance.halfResEnable)
	self:SendDefault(s_guid,className, "halfResLensFlaresEnable", "bool", s_Instance.halfResLensFlaresEnable)
	self:SendDefault(s_guid,className, "hdrEnable", "bool", s_Instance.hdrEnable)
	self:SendDefault(s_guid,className, "lensFlareOcclusionEnable", "bool", s_Instance.lensFlareOcclusionEnable)
	self:SendDefault(s_guid,className, "lensFlaresEnable", "bool", s_Instance.lensFlaresEnable)
	self:SendDefault(s_guid,className, "lightAttenuationThreshold", "float", s_Instance.lightAttenuationThreshold)
	self:SendDefault(s_guid,className, "lightAttenuationThresholdEnable", "bool", s_Instance.lightAttenuationThresholdEnable)
	self:SendDefault(s_guid,className, "lightConeCullEnable", "bool", s_Instance.lightConeCullEnable)
	self:SendDefault(s_guid,className, "lightCullEnable", "bool", s_Instance.lightCullEnable)
	self:SendDefault(s_guid,className, "lightDepthCullEnable", "bool", s_Instance.lightDepthCullEnable)
	self:SendDefault(s_guid,className, "lightForceIntensity", "float", s_Instance.lightForceIntensity)
	self:SendDefault(s_guid,className, "lightIntensityNormalizationEnable", "bool", s_Instance.lightIntensityNormalizationEnable)
	self:SendDefault(s_guid,className, "lightIntensityScale", "float", s_Instance.lightIntensityScale)
	self:SendDefault(s_guid,className, "lightLodFadeArea", "float", s_Instance.lightLodFadeArea)
	self:SendDefault(s_guid,className, "lightLodMinArea", "float", s_Instance.lightLodMinArea)
	self:SendDefault(s_guid,className, "lightLodRadiusFactor", "float", s_Instance.lightLodRadiusFactor)
	self:SendDefault(s_guid,className, "lightLodSpecularFadeAreaEnd", "float", s_Instance.lightLodSpecularFadeAreaEnd)
	self:SendDefault(s_guid,className, "lightLodSpecularFadeAreaStart", "float", s_Instance.lightLodSpecularFadeAreaStart)
	self:SendDefault(s_guid,className, "lightNormalCullEnable", "bool", s_Instance.lightNormalCullEnable)
	self:SendDefault(s_guid,className, "lightOverdrawMaxLayerCount", "uint", s_Instance.lightOverdrawMaxLayerCount)
	self:SendDefault(s_guid,className, "lightProbesEnable", "bool", s_Instance.lightProbesEnable)
	self:SendDefault(s_guid,className, "lightRadiusScale", "float", s_Instance.lightRadiusScale)
	self:SendDefault(s_guid,className, "lightStencilMethodEnable", "bool", s_Instance.lightStencilMethodEnable)
	self:SendDefault(s_guid,className, "lightStencilMinArea", "float", s_Instance.lightStencilMinArea)
	self:SendDefault(s_guid,className, "lightTileMinArea", "float", s_Instance.lightTileMinArea)
	self:SendDefault(s_guid,className, "lightTileOverlayEnable", "bool", s_Instance.lightTileOverlayEnable)
	self:SendDefault(s_guid,className, "lightVolumeDepthTestEnable", "bool", s_Instance.lightVolumeDepthTestEnable)
	self:SendDefault(s_guid,className, "lightVolumeMethodEnable", "bool", s_Instance.lightVolumeMethodEnable)
	self:SendDefault(s_guid,className, "lightWidthEnable", "bool", s_Instance.lightWidthEnable)
	self:SendDefault(s_guid,className, "lineLightsEnable", "bool", s_Instance.lineLightsEnable)
	self:SendDefault(s_guid,className, "mainOpaqueZPassEnable", "bool", s_Instance.mainOpaqueZPassEnable)
	self:SendDefault(s_guid,className, "maxDecalVolumeCount", "uint", s_Instance.maxDecalVolumeCount)
	self:SendDefault(s_guid,className, "maxDestructionVolumeCount", "uint", s_Instance.maxDestructionVolumeCount)
	self:SendDefault(s_guid,className, "maxPointLightCount", "uint", s_Instance.maxPointLightCount)
	self:SendDefault(s_guid,className, "maxSpotLightCount", "uint", s_Instance.maxSpotLightCount)
	self:SendDefault(s_guid,className, "maxSpotLightShadowCount", "uint", s_Instance.maxSpotLightShadowCount)
	self:SendDefault(s_guid,className, "motionBlurEnable", "bool", s_Instance.motionBlurEnable)
	self:SendDefault(s_guid,className, "motionBlurFrameAverageCount", "uint", s_Instance.motionBlurFrameAverageCount)
	self:SendDefault(s_guid,className, "motionBlurGeometryPassEnable", "bool", s_Instance.motionBlurGeometryPassEnable)
	self:SendDefault(s_guid,className, "motionBlurMax", "float", s_Instance.motionBlurMax)
	self:SendDefault(s_guid,className, "motionBlurMaxFrameTime", "float", s_Instance.motionBlurMaxFrameTime)
	self:SendDefault(s_guid,className, "motionBlurMaxSampleCount", "uint", s_Instance.motionBlurMaxSampleCount)
	self:SendDefault(s_guid,className, "motionBlurNoiseScale", "float", s_Instance.motionBlurNoiseScale)
	self:SendDefault(s_guid,className, "motionBlurQuality", "uint", s_Instance.motionBlurQuality)
	self:SendDefault(s_guid,className, "motionBlurScale", "float", s_Instance.motionBlurScale)
	self:SendDefault(s_guid,className, "motionBlurStencilPassEnable", "bool", s_Instance.motionBlurStencilPassEnable)
	self:SendDefault(s_guid,className, "multisampleCount", "uint", s_Instance.multisampleCount)
	self:SendDefault(s_guid,className, "multisampleThreshold", "float", s_Instance.multisampleThreshold)
	self:SendDefault(s_guid,className, "occluderMeshZPrepassDebugEnable", "bool", s_Instance.occluderMeshZPrepassDebugEnable)
	self:SendDefault(s_guid,className, "occluderMeshZPrepassEnable", "bool", s_Instance.occluderMeshZPrepassEnable)
	self:SendDefault(s_guid,className, "onlyLightTileIndex", "int", s_Instance.onlyLightTileIndex)
	self:SendDefault(s_guid,className, "onlyLightTileX", "int", s_Instance.onlyLightTileX)
	self:SendDefault(s_guid,className, "onlyLightTileY", "int", s_Instance.onlyLightTileY)
	self:SendDefault(s_guid,className, "onlyShadowmapSlice", "int", s_Instance.onlyShadowmapSlice)
	self:SendDefault(s_guid,className, "onlyTileIndex", "int", s_Instance.onlyTileIndex)
	self:SendDefault(s_guid,className, "opaqueSortBySolutionEnable", "bool", s_Instance.opaqueSortBySolutionEnable)
	self:SendDefault(s_guid,className, "outdoorKeyLightEnable", "bool", s_Instance.outdoorKeyLightEnable)
	self:SendDefault(s_guid,className, "outdoorLightEnable", "bool", s_Instance.outdoorLightEnable)
	self:SendDefault(s_guid,className, "outdoorLightSpecularEnable", "bool", s_Instance.outdoorLightSpecularEnable)
	self:SendDefault(s_guid,className, "outdoorLightTileBatchCount", "uint", s_Instance.outdoorLightTileBatchCount)
	self:SendDefault(s_guid,className, "outdoorLightTileBlendEnable", "bool", s_Instance.outdoorLightTileBlendEnable)
	self:SendDefault(s_guid,className, "outdoorLightTileRenderEnable", "bool", s_Instance.outdoorLightTileRenderEnable)
	self:SendDefault(s_guid,className, "outdoorLightTileSimpleShaderEnable", "bool", s_Instance.outdoorLightTileSimpleShaderEnable)
	self:SendDefault(s_guid,className, "outdoorLightTilingEnable", "bool", s_Instance.outdoorLightTilingEnable)
	self:SendDefault(s_guid,className, "outdoorSkyLightEnable", "bool", s_Instance.outdoorSkyLightEnable)
	self:SendDefault(s_guid,className, "outputGammaCorrectionEnable", "bool", s_Instance.outputGammaCorrectionEnable)
	self:SendDefault(s_guid,className, "overrideDynamicAO", "bool", s_Instance.overrideDynamicAO)
	self:SendDefault(s_guid,className, "planarReflectionBlur", "bool", s_Instance.planarReflectionBlur)
	self:SendDefault(s_guid,className, "planarReflectionCullFOV", "float", s_Instance.planarReflectionCullFOV)
	self:SendDefault(s_guid,className, "planarReflectionDebugCullMode", "bool", s_Instance.planarReflectionDebugCullMode)
	self:SendDefault(s_guid,className, "planarReflectionEnable", "bool", s_Instance.planarReflectionEnable)
	self:SendDefault(s_guid,className, "planarReflectionHeight", "uint", s_Instance.planarReflectionHeight)
	self:SendDefault(s_guid,className, "planarReflectionWidth", "uint", s_Instance.planarReflectionWidth)
	self:SendDefault(s_guid,className, "pointLightsEnable", "bool", s_Instance.pointLightsEnable)
	self:SendDefault(s_guid,className, "ps3ColorCompressionEnable", "bool", s_Instance.ps3ColorCompressionEnable)
	self:SendDefault(s_guid,className, "ps3DepthBoundsLightCullingEnable", "bool", s_Instance.ps3DepthBoundsLightCullingEnable)
	self:SendDefault(s_guid,className, "ps3HdrClearEnable", "bool", s_Instance.ps3HdrClearEnable)
	self:SendDefault(s_guid,className, "ps3LightTileJobCount", "uint", s_Instance.ps3LightTileJobCount)
	self:SendDefault(s_guid,className, "ps3LightTileJobMaxFbTileCount", "uint", s_Instance.ps3LightTileJobMaxFbTileCount)
	self:SendDefault(s_guid,className, "ps3LightTileJobPriority", "uint", s_Instance.ps3LightTileJobPriority)
	self:SendDefault(s_guid,className, "ps3LightTileJobYieldEnable", "bool", s_Instance.ps3LightTileJobYieldEnable)
	self:SendDefault(s_guid,className, "ps3LightTileJobYieldGranularity", "float", s_Instance.ps3LightTileJobYieldGranularity)
	self:SendDefault(s_guid,className, "ps3LightTileMethod", "uint", s_Instance.ps3LightTileMethod)
	self:SendDefault(s_guid,className, "ps3RenderTargetPoolGBufferOffsetEnable", "bool", s_Instance.ps3RenderTargetPoolGBufferOffsetEnable)
	self:SendDefault(s_guid,className, "ps3SCullEnable", "bool", s_Instance.ps3SCullEnable)
	self:SendDefault(s_guid,className, "ps3Shadowmap16BitEnable", "bool", s_Instance.ps3Shadowmap16BitEnable)
	self:SendDefault(s_guid,className, "ps3ShadowmapTilingEnable", "bool", s_Instance.ps3ShadowmapTilingEnable)
	self:SendDefault(s_guid,className, "ps3SpotLightShadowmap16BitEnable", "bool", s_Instance.ps3SpotLightShadowmap16BitEnable)
	self:SendDefault(s_guid,className, "ps3TiledHalfTargetEnable", "bool", s_Instance.ps3TiledHalfTargetEnable)
	self:SendDefault(s_guid,className, "ps3TiledSSAOTargetsEnable", "bool", s_Instance.ps3TiledSSAOTargetsEnable)
	self:SendDefault(s_guid,className, "ps3TilingEnable", "bool", s_Instance.ps3TilingEnable)
	self:SendDefault(s_guid,className, "ps3ZCullEnable", "bool", s_Instance.ps3ZCullEnable)
	self:SendDefault(s_guid,className, "reflectionEnvmapSize", "uint", s_Instance.reflectionEnvmapSize)
	self:SendDefault(s_guid,className, "screenEffectEnable", "bool", s_Instance.screenEffectEnable)
	self:SendDefault(s_guid,className, "setupJobEnable", "bool", s_Instance.setupJobEnable)
	self:SendDefault(s_guid,className, "shadowmapAccumBilinearEnable", "bool", s_Instance.shadowmapAccumBilinearEnable)
	self:SendDefault(s_guid,className, "shadowmapAccumEnable", "bool", s_Instance.shadowmapAccumEnable)
	self:SendDefault(s_guid,className, "shadowmapCullVolumeEnable", "bool", s_Instance.shadowmapCullVolumeEnable)
	self:SendDefault(s_guid,className, "shadowmapExtrusionLength", "float", s_Instance.shadowmapExtrusionLength)
	self:SendDefault(s_guid,className, "shadowmapFirstSliceScale", "float", s_Instance.shadowmapFirstSliceScale)
	self:SendDefault(s_guid,className, "shadowmapFixedDepthEnable", "bool", s_Instance.shadowmapFixedDepthEnable)
	self:SendDefault(s_guid,className, "shadowmapFixedMovementEnable", "bool", s_Instance.shadowmapFixedMovementEnable)
	self:SendDefault(s_guid,className, "shadowmapMinFov", "float", s_Instance.shadowmapMinFov)
	self:SendDefault(s_guid,className, "shadowmapMinScreenArea", "float", s_Instance.shadowmapMinScreenArea)
	self:SendDefault(s_guid,className, "shadowmapPoissonFilterScale", "float", s_Instance.shadowmapPoissonFilterScale)
	self:SendDefault(s_guid,className, "shadowmapQuality", "uint", s_Instance.shadowmapQuality)
	self:SendDefault(s_guid,className, "shadowmapResolution", "uint", s_Instance.shadowmapResolution)
	self:SendDefault(s_guid,className, "shadowmapsEnable", "bool", s_Instance.shadowmapsEnable)
	self:SendDefault(s_guid,className, "shadowmapSizeZScale", "float", s_Instance.shadowmapSizeZScale)
	self:SendDefault(s_guid,className, "shadowmapSliceCount", "uint", s_Instance.shadowmapSliceCount)
	self:SendDefault(s_guid,className, "shadowmapSliceSchemeWeight", "float", s_Instance.shadowmapSliceSchemeWeight)
	self:SendDefault(s_guid,className, "shadowmapViewDistance", "float", s_Instance.shadowmapViewDistance)
	self:SendDefault(s_guid,className, "shadowmapViewDistanceScaleEnable", "bool", s_Instance.shadowmapViewDistanceScaleEnable)
	self:SendDefault(s_guid,className, "shadowMinScreenArea", "float", s_Instance.shadowMinScreenArea)
	self:SendDefault(s_guid,className, "shadowViewportScale", "float", s_Instance.shadowViewportScale)
	self:SendDefault(s_guid,className, "simpleShadowmapsEnable", "bool", s_Instance.simpleShadowmapsEnable)
	self:SendDefault(s_guid,className, "skinLightingEnable", "bool", s_Instance.skinLightingEnable)
	self:SendDefault(s_guid,className, "skyEnable", "bool", s_Instance.skyEnable)
	self:SendDefault(s_guid,className, "skyEnvmapEnable", "bool", s_Instance.skyEnvmapEnable)
	self:SendDefault(s_guid,className, "skyEnvmapFilterMode", "MipmapFilterMode", s_Instance.skyEnvmapFilterMode)
	self:SendDefault(s_guid,className, "skyEnvmapFilterWidth", "float", s_Instance.skyEnvmapFilterWidth)
	self:SendDefault(s_guid,className, "skyEnvmapForceUpdateEnable", "bool", s_Instance.skyEnvmapForceUpdateEnable)
	self:SendDefault(s_guid,className, "skyEnvmapMipmapGenEnable", "bool", s_Instance.skyEnvmapMipmapGenEnable)
	self:SendDefault(s_guid,className, "skyEnvmapResolution", "uint", s_Instance.skyEnvmapResolution)
	self:SendDefault(s_guid,className, "skyEnvmapSidesPerFrameCount", "uint", s_Instance.skyEnvmapSidesPerFrameCount)
	self:SendDefault(s_guid,className, "skyEnvmapUpdateEnable", "bool", s_Instance.skyEnvmapUpdateEnable)
	self:SendDefault(s_guid,className, "skyEnvmapUse8BitTexture", "bool", s_Instance.skyEnvmapUse8BitTexture)
	self:SendDefault(s_guid,className, "skyFogEnable", "bool", s_Instance.skyFogEnable)
	self:SendDefault(s_guid,className, "skyVisibilityEnvmapScalingEnable", "bool", s_Instance.skyVisibilityEnvmapScalingEnable)
	self:SendDefault(s_guid,className, "specularLightingEnable", "bool", s_Instance.specularLightingEnable)
	self:SendDefault(s_guid,className, "spotLightNearPlane", "float", s_Instance.spotLightNearPlane)
	self:SendDefault(s_guid,className, "spotLightsEnable", "bool", s_Instance.spotLightsEnable)
	self:SendDefault(s_guid,className, "spotLightShadomapLevel", "QualityLevel", s_Instance.spotLightShadomapLevel)
	self:SendDefault(s_guid,className, "spotLightShadowmapEnable", "bool", s_Instance.spotLightShadowmapEnable)
	self:SendDefault(s_guid,className, "spotLightShadowmapPoissonFilterScale", "float", s_Instance.spotLightShadowmapPoissonFilterScale)
	self:SendDefault(s_guid,className, "spotLightShadowmapQuality", "uint", s_Instance.spotLightShadowmapQuality)
	self:SendDefault(s_guid,className, "spotLightShadowmapResolution", "uint", s_Instance.spotLightShadowmapResolution)
	self:SendDefault(s_guid,className, "staticEnvmapEnable", "bool", s_Instance.staticEnvmapEnable)
	self:SendDefault(s_guid,className, "subSurfaceColor", "Vec3", s_Instance.subSurfaceColor)
	self:SendDefault(s_guid,className, "subSurfaceRolloffKeyLight", "float", s_Instance.subSurfaceRolloffKeyLight)
	self:SendDefault(s_guid,className, "subSurfaceRolloffLocalLight", "float", s_Instance.subSurfaceRolloffLocalLight)
	self:SendDefault(s_guid,className, "tempPlanarReflectionY", "float", s_Instance.tempPlanarReflectionY)
	self:SendDefault(s_guid,className, "tiledHalfResCompositeEnable", "bool", s_Instance.tiledHalfResCompositeEnable)
	self:SendDefault(s_guid,className, "tiledHalfResStencilOccludersEnable", "bool", s_Instance.tiledHalfResStencilOccludersEnable)
	self:SendDefault(s_guid,className, "translucencyLightingEnable", "bool", s_Instance.translucencyLightingEnable)
	self:SendDefault(s_guid,className, "transparencyShadowmapsEnable", "bool", s_Instance.transparencyShadowmapsEnable)
	self:SendDefault(s_guid,className, "unlitEnable", "bool", s_Instance.unlitEnable)
	self:SendDefault(s_guid,className, "viewFxEnable", "bool", s_Instance.viewFxEnable)
	self:SendDefault(s_guid,className, "viewMode", "WorldViewMode", s_Instance.viewMode)
	self:SendDefault(s_guid,className, "viewportScale", "float", s_Instance.viewportScale)
	self:SendDefault(s_guid,className, "wireframeEnable", "bool", s_Instance.wireframeEnable)
	self:SendDefault(s_guid,className, "xenonAsyncLightJobsEnable", "bool", s_Instance.xenonAsyncLightJobsEnable)
	self:SendDefault(s_guid,className, "xenonDrawDebugLightTileGridMode", "uint", s_Instance.xenonDrawDebugLightTileGridMode)
	self:SendDefault(s_guid,className, "xenonFastHdrEnable", "bool", s_Instance.xenonFastHdrEnable)
	self:SendDefault(s_guid,className, "xenonFloatDepthBufferEnable", "bool", s_Instance.xenonFloatDepthBufferEnable)
	self:SendDefault(s_guid,className, "xenonHdrColorScale", "float", s_Instance.xenonHdrColorScale)
	self:SendDefault(s_guid,className, "xenonHdrColorScaleFactor", "float", s_Instance.xenonHdrColorScaleFactor)
	self:SendDefault(s_guid,className, "xenonLightTileConstantBufferSize", "uint", s_Instance.xenonLightTileConstantBufferSize)
	self:SendDefault(s_guid,className, "xenonLightTileCpuPointLightCullingEnable", "bool", s_Instance.xenonLightTileCpuPointLightCullingEnable)
	self:SendDefault(s_guid,className, "xenonLightTileDownsampleSpecularCheckEnable", "bool", s_Instance.xenonLightTileDownsampleSpecularCheckEnable)
	self:SendDefault(s_guid,className, "xenonLightTileMaxLineLightCount", "uint", s_Instance.xenonLightTileMaxLineLightCount)
	self:SendDefault(s_guid,className, "xenonLightTileMaxPointLightCount", "uint", s_Instance.xenonLightTileMaxPointLightCount)
	self:SendDefault(s_guid,className, "xenonLightTileMaxSpotLightCount", "uint", s_Instance.xenonLightTileMaxSpotLightCount)
	self:SendDefault(s_guid,className, "xenonLineLightsTilingEnable", "bool", s_Instance.xenonLineLightsTilingEnable)
	self:SendDefault(s_guid,className, "xenonOutdoorLightTilingEnable", "bool", s_Instance.xenonOutdoorLightTilingEnable)
	self:SendDefault(s_guid,className, "xenonPointLightsTilingEnable", "bool", s_Instance.xenonPointLightsTilingEnable)
	self:SendDefault(s_guid,className, "xenonSpotLightsTilingEnable", "bool", s_Instance.xenonSpotLightsTilingEnable)
	self:SendDefault(s_guid,className, "zBufferShadowTestEnable", "bool", s_Instance.zBufferShadowTestEnable)
	self:SendDefault(s_guid,className, "zPassEnable", "bool", s_Instance.zPassEnable)
end

function Type:XenonPresenceBackendData (p_class, p_guid)
	local s_Instance = XenonPresenceBackendData(p_class) 
 	local className = "XenonPresenceBackendData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "titleId", "uint", s_Instance.titleId)
end

function Type:XorEntityData (p_class, p_guid)
	local s_Instance = XorEntityData(p_class) 
 	local className = "XorEntityData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "in1", "bool", s_Instance.in1)
	self:SendDefault(s_guid,className, "in2", "bool", s_Instance.in2)
	self:SendDefault(s_guid,className, "realm", "fb.Realm)", s_Instance.realm)
end

function Type:ZoomLevelData (p_class, p_guid)
	local s_Instance = ZoomLevelData(p_class) 
 	local className = "ZoomLevelData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "allowFieldOfViewScaling", "bool", s_Instance.allowFieldOfViewScaling)
	self:SendDefault(s_guid,className, "cameraImpulseMultiplier", "float", s_Instance.cameraImpulseMultiplier)
	self:SendDefault(s_guid,className, "dispersionMultiplier", "float", s_Instance.dispersionMultiplier)
	self:SendDefault(s_guid,className, "fadeFromBlackDuration", "float", s_Instance.fadeFromBlackDuration)
	self:SendDefault(s_guid,className, "fadeToBlackDuration", "float", s_Instance.fadeToBlackDuration)
	self:SendDefault(s_guid,className, "fadeToBlackInZoomTransition", "bool", s_Instance.fadeToBlackInZoomTransition)
	self:SendDefault(s_guid,className, "fieldOfView", "float", s_Instance.fieldOfView)
	self:SendDefault(s_guid,className, "lookSpeedMultiplier", "float", s_Instance.lookSpeedMultiplier)
	self:SendDefault(s_guid,className, "moveSpeedMultiplier", "float", s_Instance.moveSpeedMultiplier)
	self:SendDefault(s_guid,className, "onActivateEventType", "ZoomLevelActivateEventType", s_Instance.onActivateEventType)
	self:SendDefault(s_guid,className, "recoilFovMultiplier", "float", s_Instance.recoilFovMultiplier)
	self:SendDefault(s_guid,className, "recoilMultiplier", "float", s_Instance.recoilMultiplier)
	self:SendDefault(s_guid,className, "screenExposureAreaScale", "float", s_Instance.screenExposureAreaScale)
	self:SendDefault(s_guid,className, "sprintLookSpeedMultiplier", "float", s_Instance.sprintLookSpeedMultiplier)
	self:SendDefault(s_guid,className, "startFadeFromBlackAtTime", "float", s_Instance.startFadeFromBlackAtTime)
	self:SendDefault(s_guid,className, "startFadeToBlackAtTime", "float", s_Instance.startFadeToBlackAtTime)
	self:SendDefault(s_guid,className, "supportedSwayPitchMultiplier", "float", s_Instance.supportedSwayPitchMultiplier)
	self:SendDefault(s_guid,className, "supportedSwayYawMultiplier", "float", s_Instance.supportedSwayYawMultiplier)
	self:SendDefault(s_guid,className, "swayPitchMultiplier", "float", s_Instance.swayPitchMultiplier)
	self:SendDefault(s_guid,className, "swayYawMultiplier", "float", s_Instance.swayYawMultiplier)
	self:SendDefault(s_guid,className, "timePitchMultiplier", "float", s_Instance.timePitchMultiplier)
	self:SendDefault(s_guid,className, "timeYawMultiplier", "float", s_Instance.timeYawMultiplier)
	self:SendDefault(s_guid,className, "useFovSpecialisation", "bool", s_Instance.useFovSpecialisation)
end

function Type:ZoomLevelLockData (p_class, p_guid)
	local s_Instance = ZoomLevelLockData(p_class) 
 	local className = "ZoomLevelLockData"
	local s_guid = p_guid:ToString()
	self:SendDefault(s_guid,className, "lockType", "fb.LockType)", s_Instance.lockType)
	self:SendDefault(s_guid,className, "outlineTaggedDistance", "float", s_Instance.outlineTaggedDistance)
end


function Type:SendDefault(p_guid, p_class, p_key, p_type, p_val, p_min, p_max)
	--WebUI:ExecuteJS(string.format('Debug(%s, %s %s %s)',p_class, p_key, p_type, tostring(p_val)))
	local s_newVal = p_val
	if (p_type == "float") then
		s_newVal = p_val;
	end
	if(p_type == "bool") then
		s_newVal = tostring(p_val)
	end
	if(p_type == "Vec2") then
		s_newVal = string.format('%s:%s', p_val.x, p_val.y)
	end
	if(p_type == "Vec3") then
		s_newVal = string.format('%s:%s:%s', p_val.x, p_val.y,p_val.z)
	end
	if(p_type == "Vec4") then
		s_newVal = string.format('%s:%s:%s:%s', p_val.x, p_val.y,p_val.z,p_val.w)
	end
	local combined = string.format("AddOption(\"%s\", \"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\")", p_guid, p_class,p_key,p_type,tostring(s_newVal), p_min, p_max)
	WebUI:ExecuteJS(combined)
end

g_Type = Type()
return Type;