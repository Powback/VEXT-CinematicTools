class 'type'

function Type:AABBData (p_class, p_guid)
	local s_Instance = AABBData(p_class) 
 	local className = "AABBData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "halfExtents", s_Instance.halfExtents, "Vec3")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
end

function Type:AbstractLeaderboardData (p_class, p_guid)
	local s_Instance = AbstractLeaderboardData(p_class) 
 	local className = "AbstractLeaderboardData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "leaderboardName", s_Instance.leaderboardName, "string")
end

function Type:AbstractLocoWaypointData (p_class, p_guid)
	local s_Instance = AbstractLocoWaypointData(p_class) 
 	local className = "AbstractLocoWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseTask", s_Instance.baseTask, "AILocoBaseTaskData")
end

function Type:ActionNode (p_class, p_guid)
	local s_Instance = ActionNode(p_class) 
 	local className = "ActionNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionAsset", s_Instance.actionAsset, "CtrRef")
	Something(className, s_guid, "actionKey", s_Instance.actionKey, "int")
	Something(className, s_guid, "appendIncomingParams", s_Instance.appendIncomingParams, "bool")
	Something(className, s_guid, "dataInputs", s_Instance.dataInputs, "List<CtrRef)>")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
	Something(className, s_guid, "params", s_Instance.params, "List<string)>")
end

function Type:ActionSuppressor (p_class, p_guid)
	local s_Instance = ActionSuppressor(p_class) 
 	local className = "ActionSuppressor"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionToSuppress", s_Instance.actionToSuppress, "EntryInputActionEnum")
	Something(className, s_guid, "suppressingValue", s_Instance.suppressingValue, "float")
end

function Type:AdsrNodeData (p_class, p_guid)
	local s_Instance = AdsrNodeData(p_class) 
 	local className = "AdsrNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "AudioGraphNodePort")
	Something(className, s_guid, "d", s_Instance.d, "AudioGraphNodePort")
	Something(className, s_guid, "finished", s_Instance.finished, "AudioGraphNodePort")
	Something(className, s_guid, "r", s_Instance.r, "AudioGraphNodePort")
	Something(className, s_guid, "release", s_Instance.release, "AudioGraphNodePort")
	Something(className, s_guid, "s", s_Instance.s, "AudioGraphNodePort")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
end

function Type:AdvancedDogTagData (p_class, p_guid)
	local s_Instance = AdvancedDogTagData(p_class) 
 	local className = "AdvancedDogTagData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isStatMeasuredInTime", s_Instance.isStatMeasuredInTime, "bool")
	Something(className, s_guid, "statCode", s_Instance.statCode, "string")
	Something(className, s_guid, "statSID", s_Instance.statSID, "string")
end

function Type:AdvertisementComponentData (p_class, p_guid)
	local s_Instance = AdvertisementComponentData(p_class) 
 	local className = "AdvertisementComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "adTexture", s_Instance.adTexture, "string")
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
end

function Type:AdvertisementLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = AdvertisementLevelDescriptionComponent(p_class) 
 	local className = "AdvertisementLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "members", s_Instance.members, "List<AdvertisementZoneMember)>")
end

function Type:AdvertisementZoneMember (p_class, p_guid)
	local s_Instance = AdvertisementZoneMember(p_class) 
 	local className = "AdvertisementZoneMember"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "filename", s_Instance.filename, "string")
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
end

function Type:AeroDynamicPhysicsData (p_class, p_guid)
	local s_Instance = AeroDynamicPhysicsData(p_class) 
 	local className = "AeroDynamicPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bodyDrag", s_Instance.bodyDrag, "Vec3")
	Something(className, s_guid, "bodyDragOffsetXY", s_Instance.bodyDragOffsetXY, "Vec3")
	Something(className, s_guid, "bodyDragOffsetXZ", s_Instance.bodyDragOffsetXZ, "Vec3")
	Something(className, s_guid, "bodyDragOffsetYZ", s_Instance.bodyDragOffsetYZ, "Vec3")
end

function Type:AIAimingConstraintsData (p_class, p_guid)
	local s_Instance = AIAimingConstraintsData(p_class) 
 	local className = "AIAimingConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxPitch", s_Instance.maxPitch, "float")
	Something(className, s_guid, "maxYaw", s_Instance.maxYaw, "float")
	Something(className, s_guid, "minPitch", s_Instance.minPitch, "float")
	Something(className, s_guid, "minYaw", s_Instance.minYaw, "float")
end

function Type:AIDifficultyData (p_class, p_guid)
	local s_Instance = AIDifficultyData(p_class) 
 	local className = "AIDifficultyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accuracyIncreaseTimeModifier", s_Instance.accuracyIncreaseTimeModifier, "float")
	Something(className, s_guid, "finalAccuracyModifierCrouching", s_Instance.finalAccuracyModifierCrouching, "float")
	Something(className, s_guid, "finalAccuracyModifierStanding", s_Instance.finalAccuracyModifierStanding, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "readinessReactionTimeMultiplier", s_Instance.readinessReactionTimeMultiplier, "float")
	Something(className, s_guid, "startAccuracyModifierCrouching", s_Instance.startAccuracyModifierCrouching, "float")
	Something(className, s_guid, "startAccuracyModifierStanding", s_Instance.startAccuracyModifierStanding, "float")
end

function Type:AIEntryData (p_class, p_guid)
	local s_Instance = AIEntryData(p_class) 
 	local className = "AIEntryData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "armament", s_Instance.armament, "CtrRef")
	Something(className, s_guid, "equipmentType", s_Instance.equipmentType, "CtrRef")
	Something(className, s_guid, "forbidden", s_Instance.forbidden, "bool")
	Something(className, s_guid, "hasExposedSoldier", s_Instance.hasExposedSoldier, "bool")
	Something(className, s_guid, "interludeOnly", s_Instance.interludeOnly, "bool")
	Something(className, s_guid, "invalidForAI", s_Instance.invalidForAI, "bool")
	Something(className, s_guid, "mobility", s_Instance.mobility, "CtrRef")
	Something(className, s_guid, "reuseTime", s_Instance.reuseTime, "float")
	Something(className, s_guid, "strengthType", s_Instance.strengthType, "fb.StrengthType)")
end

function Type:AiffWriterNodeData (p_class, p_guid)
	local s_Instance = AiffWriterNodeData(p_class) 
 	local className = "AiffWriterNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fileName", s_Instance.fileName, "string")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "stop", s_Instance.stop, "AudioGraphNodePort")
end

function Type:AILocoBaseTaskData (p_class, p_guid)
	local s_Instance = AILocoBaseTaskData(p_class) 
 	local className = "AILocoBaseTaskData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attentionChangeMovingTowards", s_Instance.attentionChangeMovingTowards, "AntAttentionStateEnum")
	Something(className, s_guid, "attentionStateChange", s_Instance.attentionStateChange, "AntAttentionStateEnum")
	Something(className, s_guid, "isScripted", s_Instance.isScripted, "bool")
	Something(className, s_guid, "poseChange", s_Instance.poseChange, "AntPoseEnum")
	Something(className, s_guid, "poseChangeMovingTowards", s_Instance.poseChangeMovingTowards, "AntPoseEnum")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "speedChangeMovingTowards", s_Instance.speedChangeMovingTowards, "AntSpeedLevel")
	Something(className, s_guid, "speedLevelChange", s_Instance.speedLevelChange, "AntSpeedLevel")
end

function Type:AILocoBinding (p_class, p_guid)
	local s_Instance = AILocoBinding(p_class) 
 	local className = "AILocoBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attentionState", s_Instance.attentionState, "AntRef")
	Something(className, s_guid, "currentPoseEnum", s_Instance.currentPoseEnum, "AntRef")
	Something(className, s_guid, "enableProceduralHeadAim", s_Instance.enableProceduralHeadAim, "AntRef")
	Something(className, s_guid, "endPoseEnum", s_Instance.endPoseEnum, "AntRef")
	Something(className, s_guid, "enterExitPoseEnum", s_Instance.enterExitPoseEnum, "AntRef")
	Something(className, s_guid, "locoTarget", s_Instance.locoTarget, "AntRef")
	Something(className, s_guid, "runStyle", s_Instance.runStyle, "AntRef")
	Something(className, s_guid, "targetSpeedLevel", s_Instance.targetSpeedLevel, "AntRef")
	Something(className, s_guid, "targetWaypointPosition", s_Instance.targetWaypointPosition, "AntRef")
end

function Type:AILocoComponentData (p_class, p_guid)
	local s_Instance = AILocoComponentData(p_class) 
 	local className = "AILocoComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "binding", s_Instance.binding, "AILocoBinding")
	Something(className, s_guid, "coverBinding", s_Instance.coverBinding, "AILocoCoverBinding")
	Something(className, s_guid, "vaultBinding", s_Instance.vaultBinding, "AILocoVaultBinding")
	Something(className, s_guid, "wantedYaw", s_Instance.wantedYaw, "float")
end

function Type:AILocoCoverBinding (p_class, p_guid)
	local s_Instance = AILocoCoverBinding(p_class) 
 	local className = "AILocoCoverBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "absoluteDistance", s_Instance.absoluteDistance, "AntRef")
	Something(className, s_guid, "angleToNormal", s_Instance.angleToNormal, "AntRef")
	Something(className, s_guid, "coverFireStyle", s_Instance.coverFireStyle, "AntRef")
	Something(className, s_guid, "coverTypeEnum", s_Instance.coverTypeEnum, "AntRef")
	Something(className, s_guid, "distanceScale", s_Instance.distanceScale, "AntRef")
	Something(className, s_guid, "enterCover", s_Instance.enterCover, "AntRef")
	Something(className, s_guid, "enterStrategy", s_Instance.enterStrategy, "AntRef")
	Something(className, s_guid, "exitCover", s_Instance.exitCover, "AntRef")
	Something(className, s_guid, "exitStyle", s_Instance.exitStyle, "AntRef")
	Something(className, s_guid, "idleBehindCover", s_Instance.idleBehindCover, "AntRef")
	Something(className, s_guid, "isCloseCover", s_Instance.isCloseCover, "AntRef")
	Something(className, s_guid, "outAngle", s_Instance.outAngle, "AntRef")
	Something(className, s_guid, "peekOut", s_Instance.peekOut, "AntRef")
	Something(className, s_guid, "peekType", s_Instance.peekType, "AntRef")
	Something(className, s_guid, "prepareFire", s_Instance.prepareFire, "AntRef")
	Something(className, s_guid, "stopExitCoverOutAround", s_Instance.stopExitCoverOutAround, "AntRef")
	Something(className, s_guid, "threatAngle", s_Instance.threatAngle, "AntRef")
	Something(className, s_guid, "throwGrenade", s_Instance.throwGrenade, "AntRef")
end

function Type:AILocoCoverTaskData (p_class, p_guid)
	local s_Instance = AILocoCoverTaskData(p_class) 
 	local className = "AILocoCoverTaskData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coverPose", s_Instance.coverPose, "AntPoseEnum")
	Something(className, s_guid, "coverType", s_Instance.coverType, "AntCoverEnum")
	Something(className, s_guid, "distanceToNextWaypoint", s_Instance.distanceToNextWaypoint, "float")
	Something(className, s_guid, "enterStrategy", s_Instance.enterStrategy, "CoverEnterStrategy")
	Something(className, s_guid, "exitAngle", s_Instance.exitAngle, "float")
	Something(className, s_guid, "exitPose", s_Instance.exitPose, "AntPoseEnum")
	Something(className, s_guid, "exitStyle", s_Instance.exitStyle, "CoverExitStyle")
	Something(className, s_guid, "forceExitCover", s_Instance.forceExitCover, "bool")
	Something(className, s_guid, "offsetLength", s_Instance.offsetLength, "float")
	Something(className, s_guid, "peekOut", s_Instance.peekOut, "CoverPeekType")
	Something(className, s_guid, "prepareFireType", s_Instance.prepareFireType, "CoverFireType")
	Something(className, s_guid, "threatPosition", s_Instance.threatPosition, "Vec3")
	Something(className, s_guid, "useClientPosition", s_Instance.useClientPosition, "bool")
	Something(className, s_guid, "waitTime", s_Instance.waitTime, "float")
	Something(className, s_guid, "wantedPos", s_Instance.wantedPos, "Vec3")
	Something(className, s_guid, "worldAngle", s_Instance.worldAngle, "float")
end

function Type:AILocoMoveTaskData (p_class, p_guid)
	local s_Instance = AILocoMoveTaskData(p_class) 
 	local className = "AILocoMoveTaskData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enterPose", s_Instance.enterPose, "AntPoseEnum")
	Something(className, s_guid, "exitPose", s_Instance.exitPose, "AntPoseEnum")
	Something(className, s_guid, "overrideAngle", s_Instance.overrideAngle, "bool")
	Something(className, s_guid, "useClientPosition", s_Instance.useClientPosition, "bool")
	Something(className, s_guid, "waitTime", s_Instance.waitTime, "float")
	Something(className, s_guid, "wantedPos", s_Instance.wantedPos, "Vec3")
	Something(className, s_guid, "worldAngle", s_Instance.worldAngle, "float")
end

function Type:AILocoVaultBinding (p_class, p_guid)
	local s_Instance = AILocoVaultBinding(p_class) 
 	local className = "AILocoVaultBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceAfterVault", s_Instance.distanceAfterVault, "AntRef")
	Something(className, s_guid, "distanceBeforeVault", s_Instance.distanceBeforeVault, "AntRef")
	Something(className, s_guid, "heightAfterVault", s_Instance.heightAfterVault, "AntRef")
	Something(className, s_guid, "heightBeforeVault", s_Instance.heightBeforeVault, "AntRef")
	Something(className, s_guid, "lengthOfVaultableObject", s_Instance.lengthOfVaultableObject, "AntRef")
	Something(className, s_guid, "vault", s_Instance.vault, "AntRef")
	Something(className, s_guid, "vaultType", s_Instance.vaultType, "AntRef")
end

function Type:AILocoVaultTaskData (p_class, p_guid)
	local s_Instance = AILocoVaultTaskData(p_class) 
 	local className = "AILocoVaultTaskData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceAfterVault", s_Instance.distanceAfterVault, "float")
	Something(className, s_guid, "distanceBeforeVault", s_Instance.distanceBeforeVault, "float")
	Something(className, s_guid, "heightAfterVault", s_Instance.heightAfterVault, "float")
	Something(className, s_guid, "heightBeforeVault", s_Instance.heightBeforeVault, "float")
	Something(className, s_guid, "lengthOfVaultableObject", s_Instance.lengthOfVaultableObject, "float")
	Something(className, s_guid, "startPoint", s_Instance.startPoint, "Vec3")
	Something(className, s_guid, "useClientPosition", s_Instance.useClientPosition, "bool")
	Something(className, s_guid, "vaultType", s_Instance.vaultType, "WaypointVaultType")
	Something(className, s_guid, "worldAngle", s_Instance.worldAngle, "float")
end

function Type:AimerModifierData (p_class, p_guid)
	local s_Instance = AimerModifierData(p_class) 
 	local className = "AimerModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lookSpeedMultiplier", s_Instance.lookSpeedMultiplier, "float")
	Something(className, s_guid, "onlyInSupportedShooting", s_Instance.onlyInSupportedShooting, "bool")
end

function Type:AimingConstraintEntityBinding (p_class, p_guid)
	local s_Instance = AimingConstraintEntityBinding(p_class) 
 	local className = "AimingConstraintEntityBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "proneAimDistance", s_Instance.proneAimDistance, "AntRef")
	Something(className, s_guid, "proneAimLimit", s_Instance.proneAimLimit, "AntRef")
end

function Type:AimingConstraintEntityCommonData (p_class, p_guid)
	local s_Instance = AimingConstraintEntityCommonData(p_class) 
 	local className = "AimingConstraintEntityCommonData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "AimingConstraintsData")
	Something(className, s_guid, "aimingConstraintsBinding", s_Instance.aimingConstraintsBinding, "AimingConstraintEntityBinding")
	Something(className, s_guid, "constraintMoveSpeedMultiplier", s_Instance.constraintMoveSpeedMultiplier, "float")
	Something(className, s_guid, "disableAimingConstraintsDelay", s_Instance.disableAimingConstraintsDelay, "float")
	Something(className, s_guid, "shuffleAnimationDelay", s_Instance.shuffleAnimationDelay, "float")
	Something(className, s_guid, "shuffleAnimationThreshold", s_Instance.shuffleAnimationThreshold, "float")
end

function Type:AimingConstraintEntityData (p_class, p_guid)
	local s_Instance = AimingConstraintEntityData(p_class) 
 	local className = "AimingConstraintEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "commonData", s_Instance.commonData, "CtrRef")
	Something(className, s_guid, "enabledInProne", s_Instance.enabledInProne, "bool")
end

function Type:AimingConstraintsData (p_class, p_guid)
	local s_Instance = AimingConstraintsData(p_class) 
 	local className = "AimingConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxPitch", s_Instance.maxPitch, "float")
	Something(className, s_guid, "maxYaw", s_Instance.maxYaw, "float")
	Something(className, s_guid, "minPitch", s_Instance.minPitch, "float")
	Something(className, s_guid, "minYaw", s_Instance.minYaw, "float")
end

function Type:AimingPoseData (p_class, p_guid)
	local s_Instance = AimingPoseData(p_class) 
 	local className = "AimingPoseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimSteadiness", s_Instance.aimSteadiness, "float")
	Something(className, s_guid, "maximumPitch", s_Instance.maximumPitch, "float")
	Something(className, s_guid, "minimumPitch", s_Instance.minimumPitch, "float")
	Something(className, s_guid, "recoilMultiplier", s_Instance.recoilMultiplier, "float")
	Something(className, s_guid, "speedMultiplier", s_Instance.speedMultiplier, "float")
	Something(className, s_guid, "targetingFov", s_Instance.targetingFov, "float")
end

function Type:AIProximityReactionsBinding (p_class, p_guid)
	local s_Instance = AIProximityReactionsBinding(p_class) 
 	local className = "AIProximityReactionsBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aIExplosionForce", s_Instance.aIExplosionForce, "AntRef")
	Something(className, s_guid, "aIExplosionReaction", s_Instance.aIExplosionReaction, "AntRef")
	Something(className, s_guid, "aimUpAndDown", s_Instance.aimUpAndDown, "AntRef")
	Something(className, s_guid, "aIReaction", s_Instance.aIReaction, "AntRef")
	Something(className, s_guid, "aIReactionDirection", s_Instance.aIReactionDirection, "AntRef")
	Something(className, s_guid, "aIStunReaction", s_Instance.aIStunReaction, "AntRef")
	Something(className, s_guid, "aIStunReactionRandomFactor", s_Instance.aIStunReactionRandomFactor, "AntRef")
	Something(className, s_guid, "enableProceduralHeadAim", s_Instance.enableProceduralHeadAim, "AntRef")
	Something(className, s_guid, "fireNearby", s_Instance.fireNearby, "AntRef")
	Something(className, s_guid, "focusAiming", s_Instance.focusAiming, "AntRef")
	Something(className, s_guid, "focusAimScale", s_Instance.focusAimScale, "AntRef")
	Something(className, s_guid, "killFromAnimation", s_Instance.killFromAnimation, "AntRef")
	Something(className, s_guid, "playerAnimationKill", s_Instance.playerAnimationKill, "AntRef")
	Something(className, s_guid, "playerInitiatedRagdoll", s_Instance.playerInitiatedRagdoll, "AntRef")
end

function Type:AIProximityReactionsComponentData (p_class, p_guid)
	local s_Instance = AIProximityReactionsComponentData(p_class) 
 	local className = "AIProximityReactionsComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "AIProximityReactionsBinding")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "fireReactionDistance", s_Instance.fireReactionDistance, "float")
	Something(className, s_guid, "maxExplosionLookDistance", s_Instance.maxExplosionLookDistance, "float")
	Something(className, s_guid, "minExplosionImpulseForce", s_Instance.minExplosionImpulseForce, "float")
end

function Type:AirMissileJammingData (p_class, p_guid)
	local s_Instance = AirMissileJammingData(p_class) 
 	local className = "AirMissileJammingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enableAirMissileJamming", s_Instance.enableAirMissileJamming, "bool")
	Something(className, s_guid, "jammingTime", s_Instance.jammingTime, "float")
	Something(className, s_guid, "maxRadius", s_Instance.maxRadius, "float")
	Something(className, s_guid, "maxTurnSpeed", s_Instance.maxTurnSpeed, "float")
	Something(className, s_guid, "minRadius", s_Instance.minRadius, "float")
	Something(className, s_guid, "minTurnSpeed", s_Instance.minTurnSpeed, "float")
	Something(className, s_guid, "phi", s_Instance.phi, "float")
	Something(className, s_guid, "quietModeProbability", s_Instance.quietModeProbability, "float")
	Something(className, s_guid, "quietModeTime", s_Instance.quietModeTime, "float")
	Something(className, s_guid, "theta", s_Instance.theta, "float")
	Something(className, s_guid, "turnCalculationTime", s_Instance.turnCalculationTime, "float")
	Something(className, s_guid, "updateJammingPositionTime", s_Instance.updateJammingPositionTime, "float")
end

function Type:AirRadarData (p_class, p_guid)
	local s_Instance = AirRadarData(p_class) 
 	local className = "AirRadarData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "centerIcon", s_Instance.centerIcon, "UIHudIcon")
	Something(className, s_guid, "eastIcon", s_Instance.eastIcon, "UIHudIcon")
	Something(className, s_guid, "enemyIcon", s_Instance.enemyIcon, "UIHudIcon")
	Something(className, s_guid, "friendlyIcon", s_Instance.friendlyIcon, "UIHudIcon")
	Something(className, s_guid, "heatSensitivity", s_Instance.heatSensitivity, "float")
	Something(className, s_guid, "laserPaintedIcon", s_Instance.laserPaintedIcon, "UIHudIcon")
	Something(className, s_guid, "missileIcon", s_Instance.missileIcon, "UIHudIcon")
	Something(className, s_guid, "northIcon", s_Instance.northIcon, "UIHudIcon")
	Something(className, s_guid, "radarRange", s_Instance.radarRange, "float")
	Something(className, s_guid, "radarSensitivity", s_Instance.radarSensitivity, "float")
	Something(className, s_guid, "southIcon", s_Instance.southIcon, "UIHudIcon")
	Something(className, s_guid, "subScreen", s_Instance.subScreen, "SubScreenData")
	Something(className, s_guid, "trackLaserPaintedObjects", s_Instance.trackLaserPaintedObjects, "bool")
	Something(className, s_guid, "trackOnlyUsedVehicles", s_Instance.trackOnlyUsedVehicles, "bool")
	Something(className, s_guid, "useCameraComponentTransform", s_Instance.useCameraComponentTransform, "bool")
	Something(className, s_guid, "westIcon", s_Instance.westIcon, "UIHudIcon")
end

function Type:AirResistanceData (p_class, p_guid)
	local s_Instance = AirResistanceData(p_class) 
 	local className = "AirResistanceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dragFactor", s_Instance.dragFactor, "float")
end

function Type:AISettingsData (p_class, p_guid)
	local s_Instance = AISettingsData(p_class) 
 	local className = "AISettingsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coverConstants", s_Instance.coverConstants, "CtrRef")
	Something(className, s_guid, "debugConstants", s_Instance.debugConstants, "CtrRef")
	Something(className, s_guid, "decisionConstants", s_Instance.decisionConstants, "CtrRef")
	Something(className, s_guid, "defaultBehaviourTemplate", s_Instance.defaultBehaviourTemplate, "CtrRef")
	Something(className, s_guid, "defaultVehicleType", s_Instance.defaultVehicleType, "CtrRef")
	Something(className, s_guid, "positionEvaluationConstants", s_Instance.positionEvaluationConstants, "CtrRef")
	Something(className, s_guid, "readinessLevels", s_Instance.readinessLevels, "fb.ReadinessLevels)")
	Something(className, s_guid, "soundEnvironmentConstants", s_Instance.soundEnvironmentConstants, "CtrRef")
	Something(className, s_guid, "timingConstants", s_Instance.timingConstants, "CtrRef")
end

function Type:AISystemAsset (p_class, p_guid)
	local s_Instance = AISystemAsset(p_class) 
 	local className = "AISystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "behaviours", s_Instance.behaviours, "CtrRef")
	Something(className, s_guid, "orders", s_Instance.orders, "CtrRef")
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
end

function Type:AIVehicleBehaviourData (p_class, p_guid)
	local s_Instance = AIVehicleBehaviourData(p_class) 
 	local className = "AIVehicleBehaviourData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "behaviours", s_Instance.behaviours, "List<string)>")
	Something(className, s_guid, "controls", s_Instance.controls, "List<string)>")
	Something(className, s_guid, "goals", s_Instance.goals, "List<string)>")
	Something(className, s_guid, "intents", s_Instance.intents, "List<IntentData)>")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:AIVehicleTypes (p_class, p_guid)
	local s_Instance = AIVehicleTypes(p_class) 
 	local className = "AIVehicleTypes"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "goals", s_Instance.goals, "List<CtrRef)>")
	Something(className, s_guid, "intents", s_Instance.intents, "List<CtrRef)>")
	Something(className, s_guid, "vehicleTypes", s_Instance.vehicleTypes, "List<CtrRef)>")
end

function Type:AIWeaponData (p_class, p_guid)
	local s_Instance = AIWeaponData(p_class) 
 	local className = "AIWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalMinimumAccuracyAtMinRange", s_Instance.additionalMinimumAccuracyAtMinRange, "float")
	Something(className, s_guid, "aimAngularVelocity", s_Instance.aimAngularVelocity, "float")
	Something(className, s_guid, "aimHighIndirectPath", s_Instance.aimHighIndirectPath, "bool")
	Something(className, s_guid, "aimOrigin", s_Instance.aimOrigin, "fb.AimOrigin)")
	Something(className, s_guid, "aimTransitionFireDelay", s_Instance.aimTransitionFireDelay, "float")
	Something(className, s_guid, "aimWhileReloading", s_Instance.aimWhileReloading, "bool")
	Something(className, s_guid, "allowedAgainstImmortals", s_Instance.allowedAgainstImmortals, "bool")
	Something(className, s_guid, "angleToTargetSnap", s_Instance.angleToTargetSnap, "float")
	Something(className, s_guid, "burstLimitFar", s_Instance.burstLimitFar, "BurstLimit")
	Something(className, s_guid, "burstLimitNear", s_Instance.burstLimitNear, "BurstLimit")
	Something(className, s_guid, "canAltAttack", s_Instance.canAltAttack, "bool")
	Something(className, s_guid, "canSuppress", s_Instance.canSuppress, "bool")
	Something(className, s_guid, "disableWeaponSway", s_Instance.disableWeaponSway, "bool")
	Something(className, s_guid, "finalAccuracyPercentage", s_Instance.finalAccuracyPercentage, "float")
	Something(className, s_guid, "gravityModifier", s_Instance.gravityModifier, "float")
	Something(className, s_guid, "inaccuracyFollowsTarget", s_Instance.inaccuracyFollowsTarget, "bool")
	Something(className, s_guid, "indirect", s_Instance.indirect, "bool")
	Something(className, s_guid, "innerInaccurateDistance", s_Instance.innerInaccurateDistance, "float")
	Something(className, s_guid, "isAiAllowed", s_Instance.isAiAllowed, "bool")
	Something(className, s_guid, "isBlindFireAllowed", s_Instance.isBlindFireAllowed, "bool")
	Something(className, s_guid, "isMelee", s_Instance.isMelee, "bool")
	Something(className, s_guid, "isStandStill", s_Instance.isStandStill, "bool")
	Something(className, s_guid, "lostTargetBurstCoolDownModifier", s_Instance.lostTargetBurstCoolDownModifier, "float")
	Something(className, s_guid, "maxBurstCoolDownTime", s_Instance.maxBurstCoolDownTime, "float")
	Something(className, s_guid, "maxExtraReloadTime", s_Instance.maxExtraReloadTime, "float")
	Something(className, s_guid, "maxRange", s_Instance.maxRange, "float")
	Something(className, s_guid, "minBurstCoolDownTime", s_Instance.minBurstCoolDownTime, "float")
	Something(className, s_guid, "minExtraReloadTime", s_Instance.minExtraReloadTime, "float")
	Something(className, s_guid, "minimumAccuracyBeforeFiring", s_Instance.minimumAccuracyBeforeFiring, "float")
	Something(className, s_guid, "minRange", s_Instance.minRange, "float")
	Something(className, s_guid, "optimalRangePercentage", s_Instance.optimalRangePercentage, "float")
	Something(className, s_guid, "outerInaccurateDistance", s_Instance.outerInaccurateDistance, "float")
	Something(className, s_guid, "reloadBehavior", s_Instance.reloadBehavior, "fb.ReloadBehavior)")
	Something(className, s_guid, "startAccuracyPercentage", s_Instance.startAccuracyPercentage, "float")
	Something(className, s_guid, "strengths", s_Instance.strengths, "fb.Strengths)")
	Something(className, s_guid, "sweepDistance", s_Instance.sweepDistance, "float")
	Something(className, s_guid, "sweepFirstAttack", s_Instance.sweepFirstAttack, "bool")
	Something(className, s_guid, "sweepTime", s_Instance.sweepTime, "float")
	Something(className, s_guid, "sweepType", s_Instance.sweepType, "SweepSelectionType")
	Something(className, s_guid, "useFromCover", s_Instance.useFromCover, "bool")
	Something(className, s_guid, "useInaccuracyAtCloseRange", s_Instance.useInaccuracyAtCloseRange, "bool")
	Something(className, s_guid, "useZoom", s_Instance.useZoom, "bool")
	Something(className, s_guid, "waitTimeBeforeFire", s_Instance.waitTimeBeforeFire, "float")
end

function Type:AlignmentData (p_class, p_guid)
	local s_Instance = AlignmentData(p_class) 
 	local className = "AlignmentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alignAction", s_Instance.alignAction, "EntryInputActionEnum")
	Something(className, s_guid, "speed", s_Instance.speed, "float")
	Something(className, s_guid, "stopTolerance", s_Instance.stopTolerance, "float")
end

function Type:AlternateCameraViewData (p_class, p_guid)
	local s_Instance = AlternateCameraViewData(p_class) 
 	local className = "AlternateCameraViewData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowFieldOfViewScaling", s_Instance.allowFieldOfViewScaling, "bool")
	Something(className, s_guid, "blackDuration", s_Instance.blackDuration, "float")
	Something(className, s_guid, "fadeInDuration", s_Instance.fadeInDuration, "float")
	Something(className, s_guid, "fadeOutDuration", s_Instance.fadeOutDuration, "float")
	Something(className, s_guid, "fadeToBlack", s_Instance.fadeToBlack, "bool")
	Something(className, s_guid, "fieldOfView", s_Instance.fieldOfView, "float")
	Something(className, s_guid, "fLIREnabled", s_Instance.fLIREnabled, "bool")
	Something(className, s_guid, "fovTransitionTime", s_Instance.fovTransitionTime, "float")
	Something(className, s_guid, "hud", s_Instance.hud, "HudData")
	Something(className, s_guid, "inputSuppression", s_Instance.inputSuppression, "InputSuppressionData")
	Something(className, s_guid, "lockMeshToRenderView", s_Instance.lockMeshToRenderView, "bool")
	Something(className, s_guid, "maskMeshBlueprint", s_Instance.maskMeshBlueprint, "CtrRef")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "meshOffset", s_Instance.meshOffset, "Vec3")
	Something(className, s_guid, "screenExposureAreaScale", s_Instance.screenExposureAreaScale, "float")
	Something(className, s_guid, "toggleViewChange", s_Instance.toggleViewChange, "bool")
	Something(className, s_guid, "useProfileOptionForToggleViewChange", s_Instance.useProfileOptionForToggleViewChange, "bool")
	Something(className, s_guid, "worldSpaceLockEfficiency", s_Instance.worldSpaceLockEfficiency, "float")
end

function Type:AlternateSpawnEntityData (p_class, p_guid)
	local s_Instance = AlternateSpawnEntityData(p_class) 
 	local className = "AlternateSpawnEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "priority", s_Instance.priority, "float")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
end

function Type:AmmoConfigData (p_class, p_guid)
	local s_Instance = AmmoConfigData(p_class) 
 	local className = "AmmoConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammoBagPickupAmount", s_Instance.ammoBagPickupAmount, "int")
	Something(className, s_guid, "ammoBagPickupDelayMultiplier", s_Instance.ammoBagPickupDelayMultiplier, "float")
	Something(className, s_guid, "ammoPickupMaxAmount", s_Instance.ammoPickupMaxAmount, "uint")
	Something(className, s_guid, "ammoPickupMinAmount", s_Instance.ammoPickupMinAmount, "uint")
	Something(className, s_guid, "autoReplenishDelay", s_Instance.autoReplenishDelay, "float")
	Something(className, s_guid, "autoReplenishMagazine", s_Instance.autoReplenishMagazine, "bool")
	Something(className, s_guid, "magazineCapacity", s_Instance.magazineCapacity, "int")
	Something(className, s_guid, "numberOfMagazines", s_Instance.numberOfMagazines, "int")
	Something(className, s_guid, "traceFrequency", s_Instance.traceFrequency, "uint")
end

function Type:AmmoCrateEntityData (p_class, p_guid)
	local s_Instance = AmmoCrateEntityData(p_class) 
 	local className = "AmmoCrateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enableReplenish", s_Instance.enableReplenish, "bool")
	Something(className, s_guid, "marker", s_Instance.marker, "CtrRef")
	Something(className, s_guid, "model", s_Instance.model, "CtrRef")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "refillDelay", s_Instance.refillDelay, "float")
end

function Type:AndEntityData (p_class, p_guid)
	local s_Instance = AndEntityData(p_class) 
 	local className = "AndEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "bool")
	Something(className, s_guid, "in2", s_Instance.in2, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:AngleOfImpactData (p_class, p_guid)
	local s_Instance = AngleOfImpactData(p_class) 
 	local className = "AngleOfImpactData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "zone12Delimiter", s_Instance.zone12Delimiter, "float")
	Something(className, s_guid, "zone1Multiplier", s_Instance.zone1Multiplier, "float")
	Something(className, s_guid, "zone23Delimiter", s_Instance.zone23Delimiter, "float")
	Something(className, s_guid, "zone2Multiplier", s_Instance.zone2Multiplier, "float")
	Something(className, s_guid, "zone3Multiplier", s_Instance.zone3Multiplier, "float")
end

function Type:Animated1pOnlyWeaponBinding (p_class, p_guid)
	local s_Instance = Animated1pOnlyWeaponBinding(p_class) 
 	local className = "Animated1pOnlyWeaponBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraFreeWeight", s_Instance.cameraFreeWeight, "AntRef")
	Something(className, s_guid, "deploy1P", s_Instance.deploy1P, "AntRef")
	Something(className, s_guid, "hideWeapon1p", s_Instance.hideWeapon1p, "AntRef")
	Something(className, s_guid, "undeployFinished", s_Instance.undeployFinished, "AntRef")
end

function Type:Animated3pOnlyWeaponBinding (p_class, p_guid)
	local s_Instance = Animated3pOnlyWeaponBinding(p_class) 
 	local className = "Animated3pOnlyWeaponBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deploy3P", s_Instance.deploy3P, "AntRef")
	Something(className, s_guid, "hideWeapon3p", s_Instance.hideWeapon3p, "AntRef")
end

function Type:AnimatedCameraData (p_class, p_guid)
	local s_Instance = AnimatedCameraData(p_class) 
 	local className = "AnimatedCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraBone", s_Instance.cameraBone, "string")
	Something(className, s_guid, "fovBone", s_Instance.fovBone, "string")
	Something(className, s_guid, "skeleton", s_Instance.skeleton, "CtrRef")
end

function Type:AnimatedDriverEntityData (p_class, p_guid)
	local s_Instance = AnimatedDriverEntityData(p_class) 
 	local className = "AnimatedDriverEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delayAnimationWheelTransform", s_Instance.delayAnimationWheelTransform, "bool")
	Something(className, s_guid, "inputTransform", s_Instance.inputTransform, "LinearTransform")
	Something(className, s_guid, "movementStateStandThreshold", s_Instance.movementStateStandThreshold, "float")
	Something(className, s_guid, "pitch", s_Instance.pitch, "NormalizeSettings")
	Something(className, s_guid, "roll", s_Instance.roll, "NormalizeSettings")
	Something(className, s_guid, "vehicleBoost", s_Instance.vehicleBoost, "AntRef")
	Something(className, s_guid, "vehicleBrake", s_Instance.vehicleBrake, "AntRef")
	Something(className, s_guid, "vehicleClutch", s_Instance.vehicleClutch, "AntRef")
	Something(className, s_guid, "vehicleMovementState", s_Instance.vehicleMovementState, "AntRef")
	Something(className, s_guid, "vehicleSpeed", s_Instance.vehicleSpeed, "AntRef")
	Something(className, s_guid, "yaw", s_Instance.yaw, "NormalizeSettings")
end

function Type:AnimatedPointCloudAttributeDesc (p_class, p_guid)
	local s_Instance = AnimatedPointCloudAttributeDesc(p_class) 
 	local className = "AnimatedPointCloudAttributeDesc"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dFrameQuantization", s_Instance.dFrameQuantization, "PointCloudAttributeQuantization")
	Something(className, s_guid, "iFrameQuantization", s_Instance.iFrameQuantization, "PointCloudAttributeQuantization")
	Something(className, s_guid, "usage", s_Instance.usage, "PointCloudAttributeUsage")
end

function Type:AnimatedPointCloudComponentData (p_class, p_guid)
	local s_Instance = AnimatedPointCloudComponentData(p_class) 
 	local className = "AnimatedPointCloudComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "pointCloud", s_Instance.pointCloud, "CtrRef")
	Something(className, s_guid, "startPaused", s_Instance.startPaused, "bool")
end

function Type:AnimatedPointCloudEntityData (p_class, p_guid)
	local s_Instance = AnimatedPointCloudEntityData(p_class) 
 	local className = "AnimatedPointCloudEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "pointCloud", s_Instance.pointCloud, "CtrRef")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "startPaused", s_Instance.startPaused, "bool")
end

function Type:AnimatedSkeletonDatabase (p_class, p_guid)
	local s_Instance = AnimatedSkeletonDatabase(p_class) 
 	local className = "AnimatedSkeletonDatabase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "items", s_Instance.items, "List<AnimatedSkeletonDatabaseItem)>")
	Something(className, s_guid, "ragdolls", s_Instance.ragdolls, "List<CtrRef)>")
end

function Type:AnimatedSkeletonDatabaseItem (p_class, p_guid)
	local s_Instance = AnimatedSkeletonDatabaseItem(p_class) 
 	local className = "AnimatedSkeletonDatabaseItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
	Something(className, s_guid, "headBone", s_Instance.headBone, "string")
	Something(className, s_guid, "hipBone", s_Instance.hipBone, "string")
	Something(className, s_guid, "names", s_Instance.names, "List<int)>")
	Something(className, s_guid, "ragdoll", s_Instance.ragdoll, "CtrRef")
	Something(className, s_guid, "ragdollCollision", s_Instance.ragdollCollision, "CtrRef")
	Something(className, s_guid, "soldierCollision", s_Instance.soldierCollision, "CtrRef")
	Something(className, s_guid, "specialBones", s_Instance.specialBones, "List<string)>")
end

function Type:AnimatedTransformEntityData (p_class, p_guid)
	local s_Instance = AnimatedTransformEntityData(p_class) 
 	local className = "AnimatedTransformEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatable", s_Instance.animatable, "AntRef")
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
	Something(className, s_guid, "controller", s_Instance.controller, "AntRef")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
end

function Type:AnimatedWeaponBinding (p_class, p_guid)
	local s_Instance = AnimatedWeaponBinding(p_class) 
 	local className = "AnimatedWeaponBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "abortVehicleDeploy", s_Instance.abortVehicleDeploy, "AntRef")
	Something(className, s_guid, "aIAllowFire", s_Instance.aIAllowFire, "AntRef")
	Something(className, s_guid, "aIAltFireFromAnt", s_Instance.aIAltFireFromAnt, "AntRef")
	Something(className, s_guid, "aimBody", s_Instance.aimBody, "AntRef")
	Something(className, s_guid, "aimBodyWeight", s_Instance.aimBodyWeight, "AntRef")
	Something(className, s_guid, "aimingEnabled", s_Instance.aimingEnabled, "AntRef")
	Something(className, s_guid, "aimTargetPosBody", s_Instance.aimTargetPosBody, "AntRef")
	Something(className, s_guid, "altDeploy", s_Instance.altDeploy, "AntRef")
	Something(className, s_guid, "alwaysAimHead", s_Instance.alwaysAimHead, "AntRef")
	Something(className, s_guid, "animType", s_Instance.animType, "AntRef")
	Something(className, s_guid, "aTType", s_Instance.aTType, "AntRef")
	Something(className, s_guid, "bagType", s_Instance.bagType, "AntRef")
	Something(className, s_guid, "boltAction", s_Instance.boltAction, "AntRef")
	Something(className, s_guid, "breathControl", s_Instance.breathControl, "AntRef")
	Something(className, s_guid, "bulletsLeftInGun", s_Instance.bulletsLeftInGun, "AntRef")
	Something(className, s_guid, "currentProjectileIndex", s_Instance.currentProjectileIndex, "AntRef")
	Something(className, s_guid, "deploy", s_Instance.deploy, "AntRef")
	Something(className, s_guid, "deploySpeed", s_Instance.deploySpeed, "AntRef")
	Something(className, s_guid, "disableZoomToggleWeight", s_Instance.disableZoomToggleWeight, "AntRef")
	Something(className, s_guid, "dispersion", s_Instance.dispersion, "AntRef")
	Something(className, s_guid, "fire", s_Instance.fire, "AntRef")
	Something(className, s_guid, "fireHoldAndRelease", s_Instance.fireHoldAndRelease, "AntRef")
	Something(className, s_guid, "fireModeChanged", s_Instance.fireModeChanged, "AntRef")
	Something(className, s_guid, "fireSimple", s_Instance.fireSimple, "AntRef")
	Something(className, s_guid, "fireSingle", s_Instance.fireSingle, "AntRef")
	Something(className, s_guid, "firstShotSpawned", s_Instance.firstShotSpawned, "AntRef")
	Something(className, s_guid, "gunDown", s_Instance.gunDown, "AntRef")
	Something(className, s_guid, "hgrType", s_Instance.hgrType, "AntRef")
	Something(className, s_guid, "isSprinting", s_Instance.isSprinting, "AntRef")
	Something(className, s_guid, "justStartedSprinting", s_Instance.justStartedSprinting, "AntRef")
	Something(className, s_guid, "kickBackInIronSight", s_Instance.kickBackInIronSight, "AntRef")
	Something(className, s_guid, "lightEnabled", s_Instance.lightEnabled, "AntRef")
	Something(className, s_guid, "lMGType", s_Instance.lMGType, "AntRef")
	Something(className, s_guid, "lowerGun", s_Instance.lowerGun, "AntRef")
	Something(className, s_guid, "meleeAttack", s_Instance.meleeAttack, "AntRef")
	Something(className, s_guid, "numberOfBulletsLeftInGun", s_Instance.numberOfBulletsLeftInGun, "AntRef")
	Something(className, s_guid, "offsetX", s_Instance.offsetX, "AntRef")
	Something(className, s_guid, "offsetY", s_Instance.offsetY, "AntRef")
	Something(className, s_guid, "offsetZ", s_Instance.offsetZ, "AntRef")
	Something(className, s_guid, "oneHanded", s_Instance.oneHanded, "AntRef")
	Something(className, s_guid, "oneHandedAiming", s_Instance.oneHandedAiming, "AntRef")
	Something(className, s_guid, "preparingToBash", s_Instance.preparingToBash, "AntRef")
	Something(className, s_guid, "pstlType", s_Instance.pstlType, "AntRef")
	Something(className, s_guid, "pumpAction", s_Instance.pumpAction, "AntRef")
	Something(className, s_guid, "quickSwitch", s_Instance.quickSwitch, "AntRef")
	Something(className, s_guid, "quickThrow", s_Instance.quickThrow, "AntRef")
	Something(className, s_guid, "quickThrowType", s_Instance.quickThrowType, "AntRef")
	Something(className, s_guid, "reload", s_Instance.reload, "AntRef")
	Something(className, s_guid, "reloadShotgun", s_Instance.reloadShotgun, "AntRef")
	Something(className, s_guid, "rflType", s_Instance.rflType, "AntRef")
	Something(className, s_guid, "shgType", s_Instance.shgType, "AntRef")
	Something(className, s_guid, "snpType", s_Instance.snpType, "AntRef")
	Something(className, s_guid, "triggerZoomGunTwitch", s_Instance.triggerZoomGunTwitch, "AntRef")
	Something(className, s_guid, "undeploy", s_Instance.undeploy, "AntRef")
	Something(className, s_guid, "unDeploySpeed", s_Instance.unDeploySpeed, "AntRef")
	Something(className, s_guid, "weaponActionESIG", s_Instance.weaponActionESIG, "AntRef")
	Something(className, s_guid, "weaponChooserSignal", s_Instance.weaponChooserSignal, "AntRef")
	Something(className, s_guid, "weaponClassSignal", s_Instance.weaponClassSignal, "AntRef")
	Something(className, s_guid, "zoom", s_Instance.zoom, "AntRef")
	Something(className, s_guid, "zoomingTime", s_Instance.zoomingTime, "AntRef")
	Something(className, s_guid, "zoomInSpeed", s_Instance.zoomInSpeed, "AntRef")
	Something(className, s_guid, "zoomOutSpeed", s_Instance.zoomOutSpeed, "AntRef")
	Something(className, s_guid, "zoomParameter", s_Instance.zoomParameter, "AntRef")
	Something(className, s_guid, "zoomScaleFactor", s_Instance.zoomScaleFactor, "AntRef")
end

function Type:AnimationConfigurationData (p_class, p_guid)
	local s_Instance = AnimationConfigurationData(p_class) 
 	local className = "AnimationConfigurationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shootModuleData", s_Instance.shootModuleData, "AnimationConfigurationShootModuleData")
	Something(className, s_guid, "weaponOffsetModuleData", s_Instance.weaponOffsetModuleData, "CtrRef")
	Something(className, s_guid, "weaponSpeedModuleData", s_Instance.weaponSpeedModuleData, "CtrRef")
end

function Type:AnimationConfigurationShootModuleData (p_class, p_guid)
	local s_Instance = AnimationConfigurationShootModuleData(p_class) 
 	local className = "AnimationConfigurationShootModuleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "zoomedKickbackFactor", s_Instance.zoomedKickbackFactor, "float")
end

function Type:AnimationControlledStateData (p_class, p_guid)
	local s_Instance = AnimationControlledStateData(p_class) 
 	local className = "AnimationControlledStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "upNormalTolerance", s_Instance.upNormalTolerance, "float")
end

function Type:AnimationDrivenBinding (p_class, p_guid)
	local s_Instance = AnimationDrivenBinding(p_class) 
 	local className = "AnimationDrivenBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enableCollision", s_Instance.enableCollision, "AntRef")
	Something(className, s_guid, "velocity", s_Instance.velocity, "AntRef")
end

function Type:AnimationEnumerationChoiceEntityData (p_class, p_guid)
	local s_Instance = AnimationEnumerationChoiceEntityData(p_class) 
 	local className = "AnimationEnumerationChoiceEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:AnimationEnumerationEntityData (p_class, p_guid)
	local s_Instance = AnimationEnumerationEntityData(p_class) 
 	local className = "AnimationEnumerationEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antEnum", s_Instance.antEnum, "CtrRef")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:AnimationSignalEntityData (p_class, p_guid)
	local s_Instance = AnimationSignalEntityData(p_class) 
 	local className = "AnimationSignalEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "continuous", s_Instance.continuous, "bool")
	Something(className, s_guid, "floatGameState", s_Instance.floatGameState, "AntRef")
	Something(className, s_guid, "intGameState", s_Instance.intGameState, "AntRef")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "reset", s_Instance.reset, "bool")
	Something(className, s_guid, "signal", s_Instance.signal, "AntRef")
	Something(className, s_guid, "valueFloat", s_Instance.valueFloat, "float")
	Something(className, s_guid, "valueInt", s_Instance.valueInt, "int")
end

function Type:AnimationSpawnTemplate (p_class, p_guid)
	local s_Instance = AnimationSpawnTemplate(p_class) 
 	local className = "AnimationSpawnTemplate"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "runStyle", s_Instance.runStyle, "CtrRef")
end

function Type:AnimationTurretRotationComponentData (p_class, p_guid)
	local s_Instance = AnimationTurretRotationComponentData(p_class) 
 	local className = "AnimationTurretRotationComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outputWorldTransform", s_Instance.outputWorldTransform, "bool")
	Something(className, s_guid, "rotations", s_Instance.rotations, "List<TurretRotationInfo)>")
	Something(className, s_guid, "soldierBaseIndex", s_Instance.soldierBaseIndex, "int")
	Something(className, s_guid, "useVehicleWorldTransform", s_Instance.useVehicleWorldTransform, "bool")
end

function Type:AntAnimatableComponentData (p_class, p_guid)
	local s_Instance = AntAnimatableComponentData(p_class) 
 	local className = "AntAnimatableComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationControlledFromStart", s_Instance.animationControlledFromStart, "bool")
	Something(className, s_guid, "animationData", s_Instance.animationData, "AntAnimationHandlerData")
	Something(className, s_guid, "autoActivate", s_Instance.autoActivate, "bool")
	Something(className, s_guid, "forceDisableCulling", s_Instance.forceDisableCulling, "bool")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "subRealm", s_Instance.subRealm, "fb.SubRealm)")
end

function Type:AntAnimatableData (p_class, p_guid)
	local s_Instance = AntAnimatableData(p_class) 
 	local className = "AntAnimatableData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actor", s_Instance.actor, "AntRef")
	Something(className, s_guid, "leftHandEffectorDisableOverride", s_Instance.leftHandEffectorDisableOverride, "AntRef")
	Something(className, s_guid, "masterSkeletonAsset", s_Instance.masterSkeletonAsset, "CtrRef")
	Something(className, s_guid, "proceduralAwareness", s_Instance.proceduralAwareness, "CtrRef")
	Something(className, s_guid, "rightHandEffectorDisableOverride", s_Instance.rightHandEffectorDisableOverride, "AntRef")
end

function Type:AntAnimationHandlerData (p_class, p_guid)
	local s_Instance = AntAnimationHandlerData(p_class) 
 	local className = "AntAnimationHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatable", s_Instance.animatable, "AntAnimatableData")
	Something(className, s_guid, "antPackageData", s_Instance.antPackageData, "List<CtrRef)>")
	Something(className, s_guid, "bonesToMirror", s_Instance.bonesToMirror, "List<GameplayBone)>")
	Something(className, s_guid, "enableMasterSlaveCopy", s_Instance.enableMasterSlaveCopy, "bool")
	Something(className, s_guid, "isProp", s_Instance.isProp, "bool")
	Something(className, s_guid, "lodBinding", s_Instance.lodBinding, "fb.LodBinding)")
	Something(className, s_guid, "reportBackFromAnt", s_Instance.reportBackFromAnt, "bool")
	Something(className, s_guid, "rootController", s_Instance.rootController, "AntRef")
end

function Type:AntAnimationSetAsset (p_class, p_guid)
	local s_Instance = AntAnimationSetAsset(p_class) 
 	local className = "AntAnimationSetAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actorAssetIndex", s_Instance.actorAssetIndex, "int")
	Something(className, s_guid, "allowAnimationCulling", s_Instance.allowAnimationCulling, "bool")
	Something(className, s_guid, "clipAssetIndices", s_Instance.clipAssetIndices, "List<int)>")
	Something(className, s_guid, "loopingClipAssetIndices", s_Instance.loopingClipAssetIndices, "List<int)>")
	Something(className, s_guid, "sceneOpMatrixAssetIndex", s_Instance.sceneOpMatrixAssetIndex, "int")
	Something(className, s_guid, "skeletonAsset", s_Instance.skeletonAsset, "CtrRef")
	Something(className, s_guid, "useTraj2Ref", s_Instance.useTraj2Ref, "bool")
end

function Type:AntDrivenComponentData (p_class, p_guid)
	local s_Instance = AntDrivenComponentData(p_class) 
 	local className = "AntDrivenComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "characterGameState", s_Instance.characterGameState, "AnimationDrivenBinding")
end

function Type:AntDynamicAvoidanceBinding (p_class, p_guid)
	local s_Instance = AntDynamicAvoidanceBinding(p_class) 
 	local className = "AntDynamicAvoidanceBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceUntilCollision", s_Instance.distanceUntilCollision, "AntRef")
	Something(className, s_guid, "normalizedVelocity", s_Instance.normalizedVelocity, "AntRef")
	Something(className, s_guid, "speed", s_Instance.speed, "AntRef")
	Something(className, s_guid, "timeUntilCollision", s_Instance.timeUntilCollision, "AntRef")
end

function Type:AntEnumeration (p_class, p_guid)
	local s_Instance = AntEnumeration(p_class) 
 	local className = "AntEnumeration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antAsset", s_Instance.antAsset, "AntRef")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:AntEventData (p_class, p_guid)
	local s_Instance = AntEventData(p_class) 
 	local className = "AntEventData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "event", s_Instance.event, "EventSpec")
	Something(className, s_guid, "tagId", s_Instance.tagId, "int")
end

function Type:AntEventEntityData (p_class, p_guid)
	local s_Instance = AntEventEntityData(p_class) 
 	local className = "AntEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoActivate", s_Instance.autoActivate, "bool")
	Something(className, s_guid, "onEnterEvents", s_Instance.onEnterEvents, "List<AntEventData)>")
	Something(className, s_guid, "onLeaveEvents", s_Instance.onLeaveEvents, "List<AntEventData)>")
	Something(className, s_guid, "onUpdateEvents", s_Instance.onUpdateEvents, "List<AntEventData)>")
	Something(className, s_guid, "sendAsPlayerEvent", s_Instance.sendAsPlayerEvent, "bool")
end

function Type:AntInteractionBinding (p_class, p_guid)
	local s_Instance = AntInteractionBinding(p_class) 
 	local className = "AntInteractionBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "otherAnimatableID", s_Instance.otherAnimatableID, "AntRef")
end

function Type:AntInteractionData (p_class, p_guid)
	local s_Instance = AntInteractionData(p_class) 
 	local className = "AntInteractionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antBindings", s_Instance.antBindings, "AntInteractionBinding")
end

function Type:AntiRollBar (p_class, p_guid)
	local s_Instance = AntiRollBar(p_class) 
 	local className = "AntiRollBar"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "stiffness", s_Instance.stiffness, "float")
	Something(className, s_guid, "torqueActivationLimit", s_Instance.torqueActivationLimit, "float")
end

function Type:AntiRollBars (p_class, p_guid)
	local s_Instance = AntiRollBars(p_class) 
 	local className = "AntiRollBars"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "front", s_Instance.front, "CtrRef")
	Something(className, s_guid, "rear", s_Instance.rear, "CtrRef")
end

function Type:AntiSpamConfig (p_class, p_guid)
	local s_Instance = AntiSpamConfig(p_class) 
 	local className = "AntiSpamConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "detectionInterval", s_Instance.detectionInterval, "float")
	Something(className, s_guid, "detectionIntervalMaxMessageCount", s_Instance.detectionIntervalMaxMessageCount, "uint")
	Something(className, s_guid, "notificationSid", s_Instance.notificationSid, "string")
	Something(className, s_guid, "secondsBlocked", s_Instance.secondsBlocked, "uint")
	Something(className, s_guid, "serverSideMessageCountTolerance", s_Instance.serverSideMessageCountTolerance, "uint")
	Something(className, s_guid, "serverSideSecondsBlockedTolerance", s_Instance.serverSideSecondsBlockedTolerance, "uint")
	Something(className, s_guid, "stillBlockedSid", s_Instance.stillBlockedSid, "string")
	Something(className, s_guid, "warningSound", s_Instance.warningSound, "CtrRef")
end

function Type:AntMemorySettings (p_class, p_guid)
	local s_Instance = AntMemorySettings(p_class) 
 	local className = "AntMemorySettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rTPoolChooserControllers", s_Instance.rTPoolChooserControllers, "int")
	Something(className, s_guid, "rTPoolClipControllers", s_Instance.rTPoolClipControllers, "int")
	Something(className, s_guid, "rTPoolLayersControllers", s_Instance.rTPoolLayersControllers, "int")
	Something(className, s_guid, "rTPoolLoopingControllers", s_Instance.rTPoolLoopingControllers, "int")
	Something(className, s_guid, "rTPoolStateflowControllers", s_Instance.rTPoolStateflowControllers, "int")
	Something(className, s_guid, "rTPoolStateflowNodeControllers", s_Instance.rTPoolStateflowNodeControllers, "int")
	Something(className, s_guid, "rTPoolTransitionControllers", s_Instance.rTPoolTransitionControllers, "int")
	Something(className, s_guid, "rTPoolTransparentControllers", s_Instance.rTPoolTransparentControllers, "int")
end

function Type:AntPackageAsset (p_class, p_guid)
	local s_Instance = AntPackageAsset(p_class) 
 	local className = "AntPackageAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chunkSize", s_Instance.chunkSize, "uint")
	Something(className, s_guid, "packagingType", s_Instance.packagingType, "AntPackagingType")
	Something(className, s_guid, "streamingGuid", s_Instance.streamingGuid, "GUID")
	Something(className, s_guid, "win32FileName", s_Instance.win32FileName, "string")
	Something(className, s_guid, "xePs3FileName", s_Instance.xePs3FileName, "string")
end

function Type:AntProjectAsset (p_class, p_guid)
	local s_Instance = AntProjectAsset(p_class) 
 	local className = "AntProjectAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antNativeProjectName", s_Instance.antNativeProjectName, "string")
	Something(className, s_guid, "packageAssets", s_Instance.packageAssets, "List<CtrRef)>")
	Something(className, s_guid, "projectId", s_Instance.projectId, "int")
	Something(className, s_guid, "sceneOp", s_Instance.sceneOp, "AntRef")
end

function Type:AntRef (p_class, p_guid)
	local s_Instance = AntRef(p_class) 
 	local className = "AntRef"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assetId", s_Instance.assetId, "int")
end

function Type:AntSettings (p_class, p_guid)
	local s_Instance = AntSettings(p_class) 
 	local className = "AntSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowVariableTickLength", s_Instance.allowVariableTickLength, "bool")
	Something(className, s_guid, "blockOnJobs", s_Instance.blockOnJobs, "bool")
	Something(className, s_guid, "checkGiantSoldiers", s_Instance.checkGiantSoldiers, "float")
	Something(className, s_guid, "clientEmulatesServer", s_Instance.clientEmulatesServer, "bool")
	Something(className, s_guid, "detailedCollisionSpeedLimit", s_Instance.detailedCollisionSpeedLimit, "float")
	Something(className, s_guid, "disableAILodFeature", s_Instance.disableAILodFeature, "bool")
	Something(className, s_guid, "disableAnimManagerSceneOps", s_Instance.disableAnimManagerSceneOps, "bool")
	Something(className, s_guid, "disableModelAnimationCulling", s_Instance.disableModelAnimationCulling, "bool")
	Something(className, s_guid, "enableDebugLogFile", s_Instance.enableDebugLogFile, "bool")
	Something(className, s_guid, "enableJobs", s_Instance.enableJobs, "bool")
	Something(className, s_guid, "enablePA", s_Instance.enablePA, "bool")
	Something(className, s_guid, "enablePackageCache", s_Instance.enablePackageCache, "bool")
	Something(className, s_guid, "enablePoseJobs", s_Instance.enablePoseJobs, "bool")
	Something(className, s_guid, "forceLodDistance", s_Instance.forceLodDistance, "float")
	Something(className, s_guid, "forcePoseUpdate", s_Instance.forcePoseUpdate, "bool")
	Something(className, s_guid, "interpolatePoses", s_Instance.interpolatePoses, "bool")
	Something(className, s_guid, "leanSignalClamp", s_Instance.leanSignalClamp, "float")
	Something(className, s_guid, "leanSignalScale", s_Instance.leanSignalScale, "float")
	Something(className, s_guid, "maxAnimatablesPerPoseJob", s_Instance.maxAnimatablesPerPoseJob, "int")
	Something(className, s_guid, "maxInterpolationSlots", s_Instance.maxInterpolationSlots, "int")
	Something(className, s_guid, "maxSingleBoneInterpolationSlots", s_Instance.maxSingleBoneInterpolationSlots, "int")
	Something(className, s_guid, "reducedInterpolationDistance", s_Instance.reducedInterpolationDistance, "float")
	Something(className, s_guid, "runAsHighPriority", s_Instance.runAsHighPriority, "bool")
	Something(className, s_guid, "trajectoryInterpolationDistance", s_Instance.trajectoryInterpolationDistance, "float")
	Something(className, s_guid, "updateEnable", s_Instance.updateEnable, "bool")
	Something(className, s_guid, "updateLoddingEnable", s_Instance.updateLoddingEnable, "bool")
	Something(className, s_guid, "useCameraFov", s_Instance.useCameraFov, "bool")
	Something(className, s_guid, "useHIK", s_Instance.useHIK, "bool")
	Something(className, s_guid, "usePA", s_Instance.usePA, "bool")
	Something(className, s_guid, "useWeaponFov", s_Instance.useWeaponFov, "bool")
end

function Type:AntTrackData (p_class, p_guid)
	local s_Instance = AntTrackData(p_class) 
 	local className = "AntTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antTrackItemDatas", s_Instance.antTrackItemDatas, "List<CtrRef)>")
end

function Type:AntTrackItemData (p_class, p_guid)
	local s_Instance = AntTrackItemData(p_class) 
 	local className = "AntTrackItemData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "controller", s_Instance.controller, "AntRef")
	Something(className, s_guid, "numTicks", s_Instance.numTicks, "uint")
	Something(className, s_guid, "resumeAtEnd", s_Instance.resumeAtEnd, "bool")
	Something(className, s_guid, "sequenceTrackIndex", s_Instance.sequenceTrackIndex, "int")
	Something(className, s_guid, "startTime", s_Instance.startTime, "int")
end

function Type:AreaProximityEntityData (p_class, p_guid)
	local s_Instance = AreaProximityEntityData(p_class) 
 	local className = "AreaProximityEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "proximityDistance", s_Instance.proximityDistance, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "updatePass", s_Instance.updatePass, "fb.UpdatePass)")
end

function Type:AreaTriggerEntityData (p_class, p_guid)
	local s_Instance = AreaTriggerEntityData(p_class) 
 	local className = "AreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "geometryTransform", s_Instance.geometryTransform, "LinearTransform")
	Something(className, s_guid, "include", s_Instance.include, "AreaTriggerInclude")
	Something(className, s_guid, "insideAreaEventRepeatTime", s_Instance.insideAreaEventRepeatTime, "float")
	Something(className, s_guid, "oneInsideAreaEventPerSoldier", s_Instance.oneInsideAreaEventPerSoldier, "bool")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "resetOnEnable", s_Instance.resetOnEnable, "bool")
	Something(className, s_guid, "triggerOnLeaveOnDeath", s_Instance.triggerOnLeaveOnDeath, "bool")
	Something(className, s_guid, "triggerOnLeaveOnDisable", s_Instance.triggerOnLeaveOnDisable, "bool")
	Something(className, s_guid, "triggerOnlyOnLeave", s_Instance.triggerOnlyOnLeave, "bool")
	Something(className, s_guid, "useCharacterEntity", s_Instance.useCharacterEntity, "bool")
end

function Type:AreaValueTeam (p_class, p_guid)
	local s_Instance = AreaValueTeam(p_class) 
 	local className = "AreaValueTeam"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "areaValue", s_Instance.areaValue, "int")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
end

function Type:ArmamentData (p_class, p_guid)
	local s_Instance = ArmamentData(p_class) 
 	local className = "ArmamentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isAntiAircraft", s_Instance.isAntiAircraft, "bool")
	Something(className, s_guid, "threatLength", s_Instance.threatLength, "int")
	Something(className, s_guid, "turretData", s_Instance.turretData, "CtrRef")
end

function Type:ArtilleryStrikeEntityData (p_class, p_guid)
	local s_Instance = ArtilleryStrikeEntityData(p_class) 
 	local className = "ArtilleryStrikeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "durationOfArtilleryStrike", s_Instance.durationOfArtilleryStrike, "float")
	Something(className, s_guid, "followSoldier", s_Instance.followSoldier, "bool")
	Something(className, s_guid, "heightOffsetWhenFollowingSoldier", s_Instance.heightOffsetWhenFollowingSoldier, "float")
	Something(className, s_guid, "maxDelayBetweenProjectiles", s_Instance.maxDelayBetweenProjectiles, "float")
	Something(className, s_guid, "maxDelayBetweenStrikes", s_Instance.maxDelayBetweenStrikes, "float")
	Something(className, s_guid, "maxProjectilesPerStrike", s_Instance.maxProjectilesPerStrike, "uint")
	Something(className, s_guid, "minDelayBetweenProjectiles", s_Instance.minDelayBetweenProjectiles, "float")
	Something(className, s_guid, "minDelayBetweenStrikes", s_Instance.minDelayBetweenStrikes, "float")
	Something(className, s_guid, "minProjectilesPerStrike", s_Instance.minProjectilesPerStrike, "uint")
	Something(className, s_guid, "minRadiusToSoldier", s_Instance.minRadiusToSoldier, "float")
	Something(className, s_guid, "missileData", s_Instance.missileData, "CtrRef")
	Something(className, s_guid, "missileSpawnRadius", s_Instance.missileSpawnRadius, "float")
	Something(className, s_guid, "numberOfStrikes", s_Instance.numberOfStrikes, "uint")
	Something(className, s_guid, "radiusWhenFollowingSoldier", s_Instance.radiusWhenFollowingSoldier, "float")
end

function Type:ArtilleryStrikeWeaponData (p_class, p_guid)
	local s_Instance = ArtilleryStrikeWeaponData(p_class) 
 	local className = "ArtilleryStrikeWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingCameraFov", s_Instance.aimingCameraFov, "float")
	Something(className, s_guid, "aimingCameraHeight", s_Instance.aimingCameraHeight, "float")
	Something(className, s_guid, "aimingCameraOffset", s_Instance.aimingCameraOffset, "float")
	Something(className, s_guid, "camera", s_Instance.camera, "CtrRef")
	Something(className, s_guid, "delayBeforeAimingCamera", s_Instance.delayBeforeAimingCamera, "float")
	Something(className, s_guid, "enableCameraRotation", s_Instance.enableCameraRotation, "bool")
	Something(className, s_guid, "enableProjectileTrails", s_Instance.enableProjectileTrails, "bool")
	Something(className, s_guid, "fireCameraTime", s_Instance.fireCameraTime, "float")
	Something(className, s_guid, "fireProjectileFromWeapon", s_Instance.fireProjectileFromWeapon, "bool")
	Something(className, s_guid, "increaseSpawnHeightWithDistance", s_Instance.increaseSpawnHeightWithDistance, "bool")
	Something(className, s_guid, "maxRandomSpawnHeight", s_Instance.maxRandomSpawnHeight, "float")
	Something(className, s_guid, "maxStrikeDistance", s_Instance.maxStrikeDistance, "float")
	Something(className, s_guid, "spawnHeight", s_Instance.spawnHeight, "float")
	Something(className, s_guid, "spawnHeightMultiplier", s_Instance.spawnHeightMultiplier, "float")
	Something(className, s_guid, "strikeCameraFov", s_Instance.strikeCameraFov, "float")
	Something(className, s_guid, "strikeCameraHeight", s_Instance.strikeCameraHeight, "float")
	Something(className, s_guid, "strikeCameraOffset", s_Instance.strikeCameraOffset, "float")
	Something(className, s_guid, "strikeCameraTime", s_Instance.strikeCameraTime, "float")
	Something(className, s_guid, "strikeRadius", s_Instance.strikeRadius, "float")
	Something(className, s_guid, "validMaxAngle", s_Instance.validMaxAngle, "float")
	Something(className, s_guid, "validMaxDistance", s_Instance.validMaxDistance, "float")
	Something(className, s_guid, "validMinDistance", s_Instance.validMinDistance, "float")
end

function Type:Asset (p_class, p_guid)
	local s_Instance = Asset(p_class) 
 	local className = "Asset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:AssetAabbs (p_class, p_guid)
	local s_Instance = AssetAabbs(p_class) 
 	local className = "AssetAabbs"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "partAabb", s_Instance.partAabb, "List<AxisAlignedBox)>")
end

function Type:AudioCurve (p_class, p_guid)
	local s_Instance = AudioCurve(p_class) 
 	local className = "AudioCurve"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "curveType", s_Instance.curveType, "AudioCurveType")
	Something(className, s_guid, "points", s_Instance.points, "List<AudioCurvePoint)>")
end

function Type:AudioCurvePoint (p_class, p_guid)
	local s_Instance = AudioCurvePoint(p_class) 
 	local className = "AudioCurvePoint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "k", s_Instance.k, "float")
	Something(className, s_guid, "x", s_Instance.x, "float")
	Something(className, s_guid, "y", s_Instance.y, "float")
end

function Type:AudioGraphData (p_class, p_guid)
	local s_Instance = AudioGraphData(p_class) 
 	local className = "AudioGraphData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nodes", s_Instance.nodes, "List<CtrRef)>")
	Something(className, s_guid, "publicAssetParameters", s_Instance.publicAssetParameters, "List<CtrRef)>")
	Something(className, s_guid, "publicEvents", s_Instance.publicEvents, "List<CtrRef)>")
	Something(className, s_guid, "publicParameters", s_Instance.publicParameters, "List<CtrRef)>")
	Something(className, s_guid, "publicValueCount", s_Instance.publicValueCount, "ushort")
	Something(className, s_guid, "valueCount", s_Instance.valueCount, "ushort")
end

function Type:AudioGraphNodePort (p_class, p_guid)
	local s_Instance = AudioGraphNodePort(p_class) 
 	local className = "AudioGraphNodePort"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isConnected", s_Instance.isConnected, "bool")
	Something(className, s_guid, "unconnectedValue", s_Instance.unconnectedValue, "float")
	Something(className, s_guid, "valueIndex", s_Instance.valueIndex, "ushort")
end

function Type:AudioGraphParameter (p_class, p_guid)
	local s_Instance = AudioGraphParameter(p_class) 
 	local className = "AudioGraphParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "float")
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
	Something(className, s_guid, "valueIndex", s_Instance.valueIndex, "ushort")
end

function Type:AudioLanguage (p_class, p_guid)
	local s_Instance = AudioLanguage(p_class) 
 	local className = "AudioLanguage"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "languageMapping", s_Instance.languageMapping, "LanguageFormat")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:AudioLanguageMapping (p_class, p_guid)
	local s_Instance = AudioLanguageMapping(p_class) 
 	local className = "AudioLanguageMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
end

function Type:AudioLanguagesDependancyObject (p_class, p_guid)
	local s_Instance = AudioLanguagesDependancyObject(p_class) 
 	local className = "AudioLanguagesDependancyObject"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "audioLanguages", s_Instance.audioLanguages, "List<CtrRef)>")
end

function Type:AudioLanguageSetting (p_class, p_guid)
	local s_Instance = AudioLanguageSetting(p_class) 
 	local className = "AudioLanguageSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "displayName", s_Instance.displayName, "string")
	Something(className, s_guid, "isDefault", s_Instance.isDefault, "bool")
	Something(className, s_guid, "mappings", s_Instance.mappings, "List<AudioLanguageMapping)>")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
end

function Type:AudioObstructionMaterialInfo (p_class, p_guid)
	local s_Instance = AudioObstructionMaterialInfo(p_class) 
 	local className = "AudioObstructionMaterialInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gainReduction", s_Instance.gainReduction, "float")
	Something(className, s_guid, "material", s_Instance.material, "CtrRef")
	Something(className, s_guid, "obstructionFrequency", s_Instance.obstructionFrequency, "float")
end

function Type:AudioSettings (p_class, p_guid)
	local s_Instance = AudioSettings(p_class) 
 	local className = "AudioSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "audioCoreCpuLoadLimit", s_Instance.audioCoreCpuLoadLimit, "float")
	Something(className, s_guid, "audioCoreCpuLoadRecovery", s_Instance.audioCoreCpuLoadRecovery, "float")
	Something(className, s_guid, "audioCoreMaxMixJobThreadCount", s_Instance.audioCoreMaxMixJobThreadCount, "int")
	Something(className, s_guid, "audioCoreMinProcStageVoicesToGoWide", s_Instance.audioCoreMinProcStageVoicesToGoWide, "int")
	Something(className, s_guid, "audioCoreMixJobThreadCount", s_Instance.audioCoreMixJobThreadCount, "int")
	Something(className, s_guid, "audioCoreMultipleMixJobsEnabled", s_Instance.audioCoreMultipleMixJobsEnabled, "bool")
	Something(className, s_guid, "audioCoreThread", s_Instance.audioCoreThread, "int")
	Something(className, s_guid, "delayLineAllocSize", s_Instance.delayLineAllocSize, "uint")
	Something(className, s_guid, "maxAudibleSoundCount", s_Instance.maxAudibleSoundCount, "uint")
	Something(className, s_guid, "reverbAllocSize", s_Instance.reverbAllocSize, "uint")
	Something(className, s_guid, "waveCacheHeadroom", s_Instance.waveCacheHeadroom, "uint")
	Something(className, s_guid, "waveCacheMaxReadActiveCount", s_Instance.waveCacheMaxReadActiveCount, "uint")
	Something(className, s_guid, "waveCacheMaxReadIssueCount", s_Instance.waveCacheMaxReadIssueCount, "uint")
	Something(className, s_guid, "waveCachePruneTimeLimit", s_Instance.waveCachePruneTimeLimit, "float")
	Something(className, s_guid, "waveCacheRsxPruneTimeLimit", s_Instance.waveCacheRsxPruneTimeLimit, "float")
	Something(className, s_guid, "waveCacheRsxSize", s_Instance.waveCacheRsxSize, "uint")
	Something(className, s_guid, "waveCacheSize", s_Instance.waveCacheSize, "uint")
end

function Type:AudioSystemAsset (p_class, p_guid)
	local s_Instance = AudioSystemAsset(p_class) 
 	local className = "AudioSystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultLanguage", s_Instance.defaultLanguage, "CtrRef")
	Something(className, s_guid, "defaultWave", s_Instance.defaultWave, "CtrRef")
	Something(className, s_guid, "dopplerFactor", s_Instance.dopplerFactor, "float")
	Something(className, s_guid, "languages", s_Instance.languages, "List<CtrRef)>")
	Something(className, s_guid, "languageSettings", s_Instance.languageSettings, "List<CtrRef)>")
	Something(className, s_guid, "masterPatch", s_Instance.masterPatch, "CtrRef")
	Something(className, s_guid, "mixerSystem", s_Instance.mixerSystem, "CtrRef")
	Something(className, s_guid, "sampleRate", s_Instance.sampleRate, "uint")
	Something(className, s_guid, "scopes", s_Instance.scopes, "List<CtrRef)>")
	Something(className, s_guid, "scopeSetups", s_Instance.scopeSetups, "List<CtrRef)>")
	Something(className, s_guid, "scopeStrategies", s_Instance.scopeStrategies, "List<CtrRef)>")
	Something(className, s_guid, "soundSpeed", s_Instance.soundSpeed, "float")
	Something(className, s_guid, "streamPools", s_Instance.streamPools, "List<CtrRef)>")
	Something(className, s_guid, "tests", s_Instance.tests, "CtrRef")
end

function Type:AutoAimData (p_class, p_guid)
	local s_Instance = AutoAimData(p_class) 
 	local className = "AutoAimData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoAimInnerBoxExtends", s_Instance.autoAimInnerBoxExtends, "Vec3")
	Something(className, s_guid, "autoAimInnerBoxOffset", s_Instance.autoAimInnerBoxOffset, "Vec3")
	Something(className, s_guid, "autoAimOuterBoxExtends", s_Instance.autoAimOuterBoxExtends, "Vec3")
	Something(className, s_guid, "autoAimOuterBoxOffset", s_Instance.autoAimOuterBoxOffset, "Vec3")
	Something(className, s_guid, "poseType", s_Instance.poseType, "CharacterPoseType")
end

function Type:AutoSquadEntityData (p_class, p_guid)
	local s_Instance = AutoSquadEntityData(p_class) 
 	local className = "AutoSquadEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "squadId", s_Instance.squadId, "fb.SquadId)")
end

function Type:AutoTeamEntityData (p_class, p_guid)
	local s_Instance = AutoTeamEntityData(p_class) 
 	local className = "AutoTeamEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoBalance", s_Instance.autoBalance, "bool")
	Something(className, s_guid, "forceIntoSquad", s_Instance.forceIntoSquad, "bool")
	Something(className, s_guid, "playerCountNeededToAutoBalance", s_Instance.playerCountNeededToAutoBalance, "uint")
	Something(className, s_guid, "rotateTeamOnNewRound", s_Instance.rotateTeamOnNewRound, "bool")
	Something(className, s_guid, "teamAssignMode", s_Instance.teamAssignMode, "fb.TeamAssignMode)")
	Something(className, s_guid, "teamDifferenceToAutoBalance", s_Instance.teamDifferenceToAutoBalance, "uint")
end

function Type:AvengerScoringHandlerData (p_class, p_guid)
	local s_Instance = AvengerScoringHandlerData(p_class) 
 	local className = "AvengerScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "avengerKillTimeout", s_Instance.avengerKillTimeout, "float")
end

function Type:AwardableTreeBase (p_class, p_guid)
	local s_Instance = AwardableTreeBase(p_class) 
 	local className = "AwardableTreeBase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "generalCriteria", s_Instance.generalCriteria, "List<CtrRef)>")
	Something(className, s_guid, "generalStatistics", s_Instance.generalStatistics, "bool")
	Something(className, s_guid, "statCategoryTreeCollection", s_Instance.statCategoryTreeCollection, "CtrRef")
end

function Type:AwardData (p_class, p_guid)
	local s_Instance = AwardData(p_class) 
 	local className = "AwardData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeOnCreation", s_Instance.activeOnCreation, "bool")
	Something(className, s_guid, "bucket", s_Instance.bucket, "ScoringBucket")
	Something(className, s_guid, "code", s_Instance.code, "string")
	Something(className, s_guid, "criteria", s_Instance.criteria, "List<CtrRef)>")
	Something(className, s_guid, "dependencies", s_Instance.dependencies, "List<CriteriaAward)>")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "filteredChildAwards", s_Instance.filteredChildAwards, "List<CtrRef)>")
	Something(className, s_guid, "group", s_Instance.group, "AwardGroup")
	Something(className, s_guid, "imageFancyName", s_Instance.imageFancyName, "string")
	Something(className, s_guid, "imageName", s_Instance.imageName, "string")
	Something(className, s_guid, "imageSmallName", s_Instance.imageSmallName, "string")
	Something(className, s_guid, "kitAssociation", s_Instance.kitAssociation, "AwardKitAssociation")
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<string)>")
	Something(className, s_guid, "maxRepetitions", s_Instance.maxRepetitions, "uint")
	Something(className, s_guid, "multiplicity", s_Instance.multiplicity, "StatsMultiplicity")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "parentAward", s_Instance.parentAward, "CtrRef")
	Something(className, s_guid, "repeat", s_Instance.repeatValue, "AwardType")
	Something(className, s_guid, "score", s_Instance.score, "float")
	Something(className, s_guid, "soundName", s_Instance.soundName, "string")
	Something(className, s_guid, "unlockGates", s_Instance.unlockGates, "CtrRef")
	Something(className, s_guid, "unlockInfos", s_Instance.unlockInfos, "List<BasicUnlockInfo)>")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:AwardDataTree (p_class, p_guid)
	local s_Instance = AwardDataTree(p_class) 
 	local className = "AwardDataTree"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "filteredAwards", s_Instance.filteredAwards, "List<CtrRef)>")
end

function Type:AwardHeaderData (p_class, p_guid)
	local s_Instance = AwardHeaderData(p_class) 
 	local className = "AwardHeaderData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "group", s_Instance.group, "AwardGroup")
	Something(className, s_guid, "multiplicity", s_Instance.multiplicity, "StatsMultiplicity")
end

function Type:AwardStarData (p_class, p_guid)
	local s_Instance = AwardStarData(p_class) 
 	local className = "AwardStarData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "starTemplate", s_Instance.starTemplate, "CtrRef")
end

function Type:AwardStarNameData (p_class, p_guid)
	local s_Instance = AwardStarNameData(p_class) 
 	local className = "AwardStarNameData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameInstances", s_Instance.nameInstances, "List<AwardStarNameInstance)>")
end

function Type:AwardStarNameInstance (p_class, p_guid)
	local s_Instance = AwardStarNameInstance(p_class) 
 	local className = "AwardStarNameInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "CtrRef")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:AwardStatus (p_class, p_guid)
	local s_Instance = AwardStatus(p_class) 
 	local className = "AwardStatus"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "code", s_Instance.code, "string")
	Something(className, s_guid, "counters", s_Instance.counters, "List<CounterStatus)>")
	Something(className, s_guid, "currentValue", s_Instance.currentValue, "uint")
	Something(className, s_guid, "isCounting", s_Instance.isCounting, "bool")
	Something(className, s_guid, "originalValue", s_Instance.originalValue, "uint")
end

function Type:AxesInputActionData (p_class, p_guid)
	local s_Instance = AxesInputActionData(p_class) 
 	local className = "AxesInputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "axis", s_Instance.axis, "InputDeviceAxes")
	Something(className, s_guid, "normalizeInput", s_Instance.normalizeInput, "bool")
end

function Type:BandPassFir64NodeData (p_class, p_guid)
	local s_Instance = BandPassFir64NodeData(p_class) 
 	local className = "BandPassFir64NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bandwidth", s_Instance.bandwidth, "AudioGraphNodePort")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:BandPassIir2NodeData (p_class, p_guid)
	local s_Instance = BandPassIir2NodeData(p_class) 
 	local className = "BandPassIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bandwidth", s_Instance.bandwidth, "AudioGraphNodePort")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:BangerEntityData (p_class, p_guid)
	local s_Instance = BangerEntityData(p_class) 
 	local className = "BangerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "destructiblePartCount", s_Instance.destructiblePartCount, "uint")
	Something(className, s_guid, "explosion", s_Instance.explosion, "CtrRef")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "scales", s_Instance.scales, "List<float)>")
	Something(className, s_guid, "timeToLive", s_Instance.timeToLive, "float")
	Something(className, s_guid, "useVariableNetworkFrequency", s_Instance.useVariableNetworkFrequency, "bool")
end

function Type:BangerSpawnImpulseParams (p_class, p_guid)
	local s_Instance = BangerSpawnImpulseParams(p_class) 
 	local className = "BangerSpawnImpulseParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularDamping", s_Instance.angularDamping, "float")
	Something(className, s_guid, "linearDamping", s_Instance.linearDamping, "float")
	Something(className, s_guid, "maxHorizontalAngle", s_Instance.maxHorizontalAngle, "float")
	Something(className, s_guid, "maxStrength", s_Instance.maxStrength, "float")
	Something(className, s_guid, "maxVerticalAngle", s_Instance.maxVerticalAngle, "float")
	Something(className, s_guid, "minHorizontalAngle", s_Instance.minHorizontalAngle, "float")
	Something(className, s_guid, "minStrength", s_Instance.minStrength, "float")
	Something(className, s_guid, "minVerticalAngle", s_Instance.minVerticalAngle, "float")
	Something(className, s_guid, "waterStrengthModifier", s_Instance.waterStrengthModifier, "float")
end

function Type:BaseEmitterData (p_class, p_guid)
	local s_Instance = BaseEmitterData(p_class) 
 	local className = "BaseEmitterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emitterAsset", s_Instance.emitterAsset, "CtrRef")
end

function Type:BasicUnlockInfo (p_class, p_guid)
	local s_Instance = BasicUnlockInfo(p_class) 
 	local className = "BasicUnlockInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalLicenses", s_Instance.additionalLicenses, "List<string)>")
	Something(className, s_guid, "identifier", s_Instance.identifier, "uint")
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<string)>")
	Something(className, s_guid, "stringId", s_Instance.stringId, "string")
	Something(className, s_guid, "unlockGuid", s_Instance.unlockGuid, "GUID")
	Something(className, s_guid, "unlockScore", s_Instance.unlockScore, "uint")
end

function Type:BehaviourData (p_class, p_guid)
	local s_Instance = BehaviourData(p_class) 
 	local className = "BehaviourData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:BehaviourTemplateData (p_class, p_guid)
	local s_Instance = BehaviourTemplateData(p_class) 
 	local className = "BehaviourTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accuracyIncreaseTime", s_Instance.accuracyIncreaseTime, "float")
	Something(className, s_guid, "accuracyModifier", s_Instance.accuracyModifier, "float")
	Something(className, s_guid, "accuracyModifierVsNonHumans", s_Instance.accuracyModifierVsNonHumans, "float")
	Something(className, s_guid, "altAttackProbability", s_Instance.altAttackProbability, "float")
	Something(className, s_guid, "alwaysInFirePose", s_Instance.alwaysInFirePose, "CoverFireType")
	Something(className, s_guid, "alwaysStrafeToCoversBehindMe", s_Instance.alwaysStrafeToCoversBehindMe, "bool")
	Something(className, s_guid, "alwaysStrafeToCoversWithinDistance", s_Instance.alwaysStrafeToCoversWithinDistance, "float")
	Something(className, s_guid, "alwaysStrafeToFirstCover", s_Instance.alwaysStrafeToFirstCover, "bool")
	Something(className, s_guid, "alwaysUpdate", s_Instance.alwaysUpdate, "bool")
	Something(className, s_guid, "attackUrgencyModifier", s_Instance.attackUrgencyModifier, "float")
	Something(className, s_guid, "canMeleeFromScriptedCover", s_Instance.canMeleeFromScriptedCover, "bool")
	Something(className, s_guid, "chargeSurpriseFlankedDistance", s_Instance.chargeSurpriseFlankedDistance, "float")
	Something(className, s_guid, "chargeSurpriseNearDistance", s_Instance.chargeSurpriseNearDistance, "float")
	Something(className, s_guid, "chargeSurpriseVelocity", s_Instance.chargeSurpriseVelocity, "float")
	Something(className, s_guid, "closeRangeAccuracyDistanceOverride", s_Instance.closeRangeAccuracyDistanceOverride, "float")
	Something(className, s_guid, "coverSwitchTime", s_Instance.coverSwitchTime, "FloatRangeDefaultZero")
	Something(className, s_guid, "coverWaitTime", s_Instance.coverWaitTime, "FloatRange")
	Something(className, s_guid, "crouchProbability", s_Instance.crouchProbability, "float")
	Something(className, s_guid, "disableMissileGravity", s_Instance.disableMissileGravity, "bool")
	Something(className, s_guid, "explosiveObjectChance", s_Instance.explosiveObjectChance, "float")
	Something(className, s_guid, "fireBlindOutBurstCount", s_Instance.fireBlindOutBurstCount, "UIntRange")
	Something(className, s_guid, "fireBlindOutChance", s_Instance.fireBlindOutChance, "float")
	Something(className, s_guid, "fireBlindOverBurstCount", s_Instance.fireBlindOverBurstCount, "UIntRange")
	Something(className, s_guid, "fireBlindOverChance", s_Instance.fireBlindOverChance, "float")
	Something(className, s_guid, "fireGrenadeBlindOverBurstCount", s_Instance.fireGrenadeBlindOverBurstCount, "UIntRange")
	Something(className, s_guid, "fireGrenadeBlindOverChance", s_Instance.fireGrenadeBlindOverChance, "float")
	Something(className, s_guid, "fireGrenadeStepOutBurstCount", s_Instance.fireGrenadeStepOutBurstCount, "UIntRange")
	Something(className, s_guid, "fireGrenadeStepOutChance", s_Instance.fireGrenadeStepOutChance, "float")
	Something(className, s_guid, "fireLeanBurstCount", s_Instance.fireLeanBurstCount, "UIntRange")
	Something(className, s_guid, "fireLeanChance", s_Instance.fireLeanChance, "float")
	Something(className, s_guid, "fireLmgBurstCount", s_Instance.fireLmgBurstCount, "UIntRange")
	Something(className, s_guid, "fireLmgChance", s_Instance.fireLmgChance, "float")
	Something(className, s_guid, "fireOverBurstCount", s_Instance.fireOverBurstCount, "UIntRange")
	Something(className, s_guid, "fireOverChance", s_Instance.fireOverChance, "float")
	Something(className, s_guid, "fireStepOutBurstCount", s_Instance.fireStepOutBurstCount, "UIntRange")
	Something(className, s_guid, "fireStepOutChance", s_Instance.fireStepOutChance, "float")
	Something(className, s_guid, "fireStepOutFireFromHipBurstCount", s_Instance.fireStepOutFireFromHipBurstCount, "UIntRange")
	Something(className, s_guid, "fireStepOutFireFromHipChance", s_Instance.fireStepOutFireFromHipChance, "float")
	Something(className, s_guid, "fireStepOutSlowBurstCount", s_Instance.fireStepOutSlowBurstCount, "UIntRange")
	Something(className, s_guid, "fireStepOutSlowChance", s_Instance.fireStepOutSlowChance, "float")
	Something(className, s_guid, "fireStepOutStandToCrouchBurstCount", s_Instance.fireStepOutStandToCrouchBurstCount, "UIntRange")
	Something(className, s_guid, "fireStepOutStandToCrouchChance", s_Instance.fireStepOutStandToCrouchChance, "float")
	Something(className, s_guid, "fireStepOutUrgentBurstCount", s_Instance.fireStepOutUrgentBurstCount, "UIntRange")
	Something(className, s_guid, "fireStepOutUrgentChance", s_Instance.fireStepOutUrgentChance, "float")
	Something(className, s_guid, "fireStyleTimeout", s_Instance.fireStyleTimeout, "float")
	Something(className, s_guid, "investigateStopDelay", s_Instance.investigateStopDelay, "float")
	Something(className, s_guid, "investigateVisualTestDist", s_Instance.investigateVisualTestDist, "float")
	Something(className, s_guid, "leaveVehicleOnSearchAndDestroyOrder", s_Instance.leaveVehicleOnSearchAndDestroyOrder, "bool")
	Something(className, s_guid, "maxAngleDiffForBlindFire", s_Instance.maxAngleDiffForBlindFire, "float")
	Something(className, s_guid, "maxAttackBursts", s_Instance.maxAttackBursts, "uint")
	Something(className, s_guid, "maxSuppressTime", s_Instance.maxSuppressTime, "float")
	Something(className, s_guid, "meleeMaxTime", s_Instance.meleeMaxTime, "float")
	Something(className, s_guid, "meleeProbability", s_Instance.meleeProbability, "float")
	Something(className, s_guid, "meleeRange", s_Instance.meleeRange, "float")
	Something(className, s_guid, "minAttackBursts", s_Instance.minAttackBursts, "uint")
	Something(className, s_guid, "readinessReactionTimeMultiplier", s_Instance.readinessReactionTimeMultiplier, "float")
	Something(className, s_guid, "reloadBelowPercent", s_Instance.reloadBelowPercent, "float")
	Something(className, s_guid, "shotAtFireBlindOutChance", s_Instance.shotAtFireBlindOutChance, "float")
	Something(className, s_guid, "shotAtFireBlindOverChance", s_Instance.shotAtFireBlindOverChance, "float")
	Something(className, s_guid, "shotAtFireGrenadeBlindOverChance", s_Instance.shotAtFireGrenadeBlindOverChance, "float")
	Something(className, s_guid, "shouldFireThroughSmoke", s_Instance.shouldFireThroughSmoke, "bool")
	Something(className, s_guid, "soldierMovementVolumeOverride", s_Instance.soldierMovementVolumeOverride, "float")
	Something(className, s_guid, "standProbability", s_Instance.standProbability, "float")
	Something(className, s_guid, "stepBackIfBeingShot", s_Instance.stepBackIfBeingShot, "bool")
	Something(className, s_guid, "strafeToCoverProbablity", s_Instance.strafeToCoverProbablity, "float")
	Something(className, s_guid, "suppressIndirectProbability", s_Instance.suppressIndirectProbability, "float")
	Something(className, s_guid, "suppressingBurstCount", s_Instance.suppressingBurstCount, "int")
	Something(className, s_guid, "suppressingBurstCountMax", s_Instance.suppressingBurstCountMax, "int")
	Something(className, s_guid, "suppressingBurstCountMin", s_Instance.suppressingBurstCountMin, "int")
	Something(className, s_guid, "targetDangerFactor", s_Instance.targetDangerFactor, "float")
	Something(className, s_guid, "targetDistanceFactor", s_Instance.targetDistanceFactor, "float")
	Something(className, s_guid, "targetIsAttackingFactor", s_Instance.targetIsAttackingFactor, "float")
	Something(className, s_guid, "targetStrengthFactor", s_Instance.targetStrengthFactor, "float")
	Something(className, s_guid, "turnAgainstTargetDistance", s_Instance.turnAgainstTargetDistance, "float")
	Something(className, s_guid, "useShotAtSettings", s_Instance.useShotAtSettings, "bool")
end

function Type:BFAISettingsData (p_class, p_guid)
	local s_Instance = BFAISettingsData(p_class) 
 	local className = "BFAISettingsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "combatConstants", s_Instance.combatConstants, "CtrRef")
	Something(className, s_guid, "followConstants", s_Instance.followConstants, "CtrRef")
	Something(className, s_guid, "movementConstants", s_Instance.movementConstants, "CtrRef")
	Something(className, s_guid, "searchAndDestroyConstants", s_Instance.searchAndDestroyConstants, "CtrRef")
	Something(className, s_guid, "turretControlConstants", s_Instance.turretControlConstants, "CtrRef")
end

function Type:BFOrderEntityData (p_class, p_guid)
	local s_Instance = BFOrderEntityData(p_class) 
 	local className = "BFOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forbiddenToFire", s_Instance.forbiddenToFire, "bool")
end

function Type:BFServerConfiguration (p_class, p_guid)
	local s_Instance = BFServerConfiguration(p_class) 
 	local className = "BFServerConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "schedules", s_Instance.schedules, "List<BFServerConfigurationSchedule)>")
end

function Type:BFServerConfigurationData (p_class, p_guid)
	local s_Instance = BFServerConfigurationData(p_class) 
 	local className = "BFServerConfigurationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "licenses", s_Instance.licenses, "string")
	Something(className, s_guid, "scoreMultiplier", s_Instance.scoreMultiplier, "uint")
end

function Type:BFServerConfigurationSchedule (p_class, p_guid)
	local s_Instance = BFServerConfigurationSchedule(p_class) 
 	local className = "BFServerConfigurationSchedule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "BFServerConfigurationData")
	Something(className, s_guid, "levels", s_Instance.levels, "List<string)>")
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<string)>")
end

function Type:BFServerSettings (p_class, p_guid)
	local s_Instance = BFServerSettings(p_class) 
 	local className = "BFServerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoBalance", s_Instance.autoBalance, "bool")
	Something(className, s_guid, "bannerUrl", s_Instance.bannerUrl, "string")
	Something(className, s_guid, "cTFRoundTimeModifier", s_Instance.cTFRoundTimeModifier, "float")
	Something(className, s_guid, "deathmatchFriendZoneFallbackCount", s_Instance.deathmatchFriendZoneFallbackCount, "int")
	Something(className, s_guid, "defaultVoiceChannel", s_Instance.defaultVoiceChannel, "VoiceChannel")
	Something(className, s_guid, "forceTeamForPlayerTag", s_Instance.forceTeamForPlayerTag, "string")
	Something(className, s_guid, "forceTeamForPlayerTagTeam", s_Instance.forceTeamForPlayerTagTeam, "int")
	Something(className, s_guid, "gameMod", s_Instance.gameMod, "string")
	Something(className, s_guid, "gameSize", s_Instance.gameSize, "uint")
	Something(className, s_guid, "gunMasterWeaponsPresetIndex", s_Instance.gunMasterWeaponsPresetIndex, "uint")
	Something(className, s_guid, "isKillerCameraEnabled", s_Instance.isKillerCameraEnabled, "bool")
	Something(className, s_guid, "isManDownRotationEnabled", s_Instance.isManDownRotationEnabled, "bool")
	Something(className, s_guid, "kickAPlayerOnVIPJoin", s_Instance.kickAPlayerOnVIPJoin, "bool")
	Something(className, s_guid, "mapSequencerEnabled", s_Instance.mapSequencerEnabled, "bool")
	Something(className, s_guid, "noInteractivityBanRoundCount", s_Instance.noInteractivityBanRoundCount, "uint")
	Something(className, s_guid, "noInteractivityThresholdLimit", s_Instance.noInteractivityThresholdLimit, "float")
	Something(className, s_guid, "noInteractivityTimeoutTime", s_Instance.noInteractivityTimeoutTime, "float")
	Something(className, s_guid, "overrideAutoBalance", s_Instance.overrideAutoBalance, "bool")
	Something(className, s_guid, "overrideServerConfigurationStartTime", s_Instance.overrideServerConfigurationStartTime, "string")
	Something(className, s_guid, "pingSite", s_Instance.pingSite, "string")
	Something(className, s_guid, "premiumStatus", s_Instance.premiumStatus, "bool")
	Something(className, s_guid, "punkBusterVersion", s_Instance.punkBusterVersion, "string")
	Something(className, s_guid, "roundLockdownCountdown", s_Instance.roundLockdownCountdown, "int")
	Something(className, s_guid, "roundMaxPlayerCount", s_Instance.roundMaxPlayerCount, "int")
	Something(className, s_guid, "roundMinPlayerCount", s_Instance.roundMinPlayerCount, "int")
	Something(className, s_guid, "roundRestartCountdown", s_Instance.roundRestartCountdown, "int")
	Something(className, s_guid, "roundWarmupTimeout", s_Instance.roundWarmupTimeout, "int")
	Something(className, s_guid, "serverAdministrationMapRotation", s_Instance.serverAdministrationMapRotation, "string")
	Something(className, s_guid, "serverAdministrationMapRotationInformation", s_Instance.serverAdministrationMapRotationInformation, "string")
	Something(className, s_guid, "serverAdministrationRoundsPerMap", s_Instance.serverAdministrationRoundsPerMap, "uint")
	Something(className, s_guid, "serverAdministrationSettings", s_Instance.serverAdministrationSettings, "string")
	Something(className, s_guid, "serverConfigurationRefreshInterval", s_Instance.serverConfigurationRefreshInterval, "int")
	Something(className, s_guid, "serverDescription", s_Instance.serverDescription, "string")
	Something(className, s_guid, "serverMessage", s_Instance.serverMessage, "string")
	Something(className, s_guid, "serverPreset", s_Instance.serverPreset, "string")
	Something(className, s_guid, "spectators", s_Instance.spectators, "string")
	Something(className, s_guid, "teamKillCountForKick", s_Instance.teamKillCountForKick, "uint")
	Something(className, s_guid, "teamKillKickForBan", s_Instance.teamKillKickForBan, "uint")
	Something(className, s_guid, "teamKillValueDecreasePerSecond", s_Instance.teamKillValueDecreasePerSecond, "float")
	Something(className, s_guid, "teamKillValueForKick", s_Instance.teamKillValueForKick, "float")
	Something(className, s_guid, "teamKillValueIncrease", s_Instance.teamKillValueIncrease, "float")
	Something(className, s_guid, "teamSwitchImbalanceLimit", s_Instance.teamSwitchImbalanceLimit, "uint")
end

function Type:BFTargetEvaluatorComponentData (p_class, p_guid)
	local s_Instance = BFTargetEvaluatorComponentData(p_class) 
 	local className = "BFTargetEvaluatorComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
end

function Type:BigWorldSetting (p_class, p_guid)
	local s_Instance = BigWorldSetting(p_class) 
 	local className = "BigWorldSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxDelayTimeInMinutes", s_Instance.maxDelayTimeInMinutes, "float")
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "int")
	Something(className, s_guid, "minDelayTimeInMinutes", s_Instance.minDelayTimeInMinutes, "float")
	Something(className, s_guid, "minDistance", s_Instance.minDistance, "int")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:BigWorldSettingsAsset (p_class, p_guid)
	local s_Instance = BigWorldSettingsAsset(p_class) 
 	local className = "BigWorldSettingsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "List<CtrRef)>")
end

function Type:BinaryLogicNode (p_class, p_guid)
	local s_Instance = BinaryLogicNode(p_class) 
 	local className = "BinaryLogicNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSourceInfo", s_Instance.dataSourceInfo, "UIDataSourceInfo")
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:BinaryOption (p_class, p_guid)
	local s_Instance = BinaryOption(p_class) 
 	local className = "BinaryOption"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:BlazeCreateGameParameters (p_class, p_guid)
	local s_Instance = BlazeCreateGameParameters(p_class) 
 	local className = "BlazeCreateGameParameters"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "base", s_Instance.base, "MatchmakingCreateGameParameters")
end

function Type:BlazePresenceBackendData (p_class, p_guid)
	local s_Instance = BlazePresenceBackendData(p_class) 
 	local className = "BlazePresenceBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "matchmakingSessions", s_Instance.matchmakingSessions, "List<CtrRef)>")
	Something(className, s_guid, "useDemanglerService", s_Instance.useDemanglerService, "bool")
end

function Type:BlazeServerBackendData (p_class, p_guid)
	local s_Instance = BlazeServerBackendData(p_class) 
 	local className = "BlazeServerBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "configUrl", s_Instance.configUrl, "OnlineEnvironmentConsoleUrl")
	Something(className, s_guid, "createParameters", s_Instance.createParameters, "BlazeCreateGameParameters")
end

function Type:BlueprintAndVariationPair (p_class, p_guid)
	local s_Instance = BlueprintAndVariationPair(p_class) 
 	local className = "BlueprintAndVariationPair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseAsset", s_Instance.baseAsset, "CtrRef")
	Something(className, s_guid, "variation", s_Instance.variation, "CtrRef")
end

function Type:BlueprintBundle (p_class, p_guid)
	local s_Instance = BlueprintBundle(p_class) 
 	local className = "BlueprintBundle"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blueprint", s_Instance.blueprint, "CtrRef")
	Something(className, s_guid, "registryContainer", s_Instance.registryContainer, "CtrRef")
end

function Type:BlueprintBundleMetadata (p_class, p_guid)
	local s_Instance = BlueprintBundleMetadata(p_class) 
 	local className = "BlueprintBundleMetadata"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blueprintName", s_Instance.blueprintName, "string")
	Something(className, s_guid, "bundleName", s_Instance.bundleName, "string")
	Something(className, s_guid, "bundlePathName", s_Instance.bundlePathName, "string")
end

function Type:BlueprintBundleMetadataContainer (p_class, p_guid)
	local s_Instance = BlueprintBundleMetadataContainer(p_class) 
 	local className = "BlueprintBundleMetadataContainer"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "items", s_Instance.items, "List<CtrRef)>")
end

function Type:BlueprintBundleSelectorEntityData (p_class, p_guid)
	local s_Instance = BlueprintBundleSelectorEntityData(p_class) 
 	local className = "BlueprintBundleSelectorEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blueprintSelector", s_Instance.blueprintSelector, "CtrRef")
end

function Type:BlueprintBundleStateLogicEntityData (p_class, p_guid)
	local s_Instance = BlueprintBundleStateLogicEntityData(p_class) 
 	local className = "BlueprintBundleStateLogicEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bundleNames", s_Instance.bundleNames, "List<string)>")
end

function Type:BlueprintContainerItem (p_class, p_guid)
	local s_Instance = BlueprintContainerItem(p_class) 
 	local className = "BlueprintContainerItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "metadata", s_Instance.metadata, "CtrRef")
end

function Type:BlurEffectData (p_class, p_guid)
	local s_Instance = BlurEffectData(p_class) 
 	local className = "BlurEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bulletFalloffSpeed", s_Instance.bulletFalloffSpeed, "float")
	Something(className, s_guid, "bulletStrength", s_Instance.bulletStrength, "float")
	Something(className, s_guid, "dispersionStrength", s_Instance.dispersionStrength, "float")
	Something(className, s_guid, "dispersionThreshhold", s_Instance.dispersionThreshhold, "float")
	Something(className, s_guid, "explosionFalloffSpeed", s_Instance.explosionFalloffSpeed, "float")
	Something(className, s_guid, "explosionStrength", s_Instance.explosionStrength, "float")
end

function Type:BoatFloatPhysicsData (p_class, p_guid)
	local s_Instance = BoatFloatPhysicsData(p_class) 
 	local className = "BoatFloatPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frontRatio", s_Instance.frontRatio, "float")
end

function Type:BoltActionData (p_class, p_guid)
	local s_Instance = BoltActionData(p_class) 
 	local className = "BoltActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boltActionDelay", s_Instance.boltActionDelay, "float")
	Something(className, s_guid, "boltActionTime", s_Instance.boltActionTime, "float")
	Something(className, s_guid, "forceBoltActionOnFireTrigger", s_Instance.forceBoltActionOnFireTrigger, "bool")
	Something(className, s_guid, "holdBoltActionUntilFireRelease", s_Instance.holdBoltActionUntilFireRelease, "bool")
	Something(className, s_guid, "holdBoltActionUntilZoomRelease", s_Instance.holdBoltActionUntilZoomRelease, "bool")
	Something(className, s_guid, "returnToZoomAfterBoltAction", s_Instance.returnToZoomAfterBoltAction, "bool")
	Something(className, s_guid, "unZoomOnBoltAction", s_Instance.unZoomOnBoltAction, "bool")
end

function Type:BoneCollisionComponentData (p_class, p_guid)
	local s_Instance = BoneCollisionComponentData(p_class) 
 	local className = "BoneCollisionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "skeletonCollisionData", s_Instance.skeletonCollisionData, "CtrRef")
end

function Type:BoneCollisionData (p_class, p_guid)
	local s_Instance = BoneCollisionData(p_class) 
 	local className = "BoneCollisionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationHitReactionType", s_Instance.animationHitReactionType, "HitReactionType")
	Something(className, s_guid, "boneAxis", s_Instance.boneAxis, "int")
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
	Something(className, s_guid, "capsuleLength", s_Instance.capsuleLength, "float")
	Something(className, s_guid, "capsuleOffset", s_Instance.capsuleOffset, "Vec3")
	Something(className, s_guid, "capsuleRadius", s_Instance.capsuleRadius, "float")
	Something(className, s_guid, "deactivateIfBehindWall", s_Instance.deactivateIfBehindWall, "bool")
	Something(className, s_guid, "debugDrawColor", s_Instance.debugDrawColor, "Vec4")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "maxPitch", s_Instance.maxPitch, "PitchModifier")
	Something(className, s_guid, "minPitch", s_Instance.minPitch, "PitchModifier")
	Something(className, s_guid, "usePhysicsRotation", s_Instance.usePhysicsRotation, "bool")
	Something(className, s_guid, "validInHiLod", s_Instance.validInHiLod, "bool")
	Something(className, s_guid, "validInLowLod", s_Instance.validInLowLod, "bool")
end

function Type:BoneFakePhysicsData (p_class, p_guid)
	local s_Instance = BoneFakePhysicsData(p_class) 
 	local className = "BoneFakePhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneId", s_Instance.boneId, "int")
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
	Something(className, s_guid, "fakePhysics", s_Instance.fakePhysics, "CtrRef")
end

function Type:BoolEntityData (p_class, p_guid)
	local s_Instance = BoolEntityData(p_class) 
 	local className = "BoolEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:BoolHubEntityData (p_class, p_guid)
	local s_Instance = BoolHubEntityData(p_class) 
 	local className = "BoolHubEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputCount", s_Instance.inputCount, "int")
	Something(className, s_guid, "inputSelect", s_Instance.inputSelect, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:BoolPropertyTrackData (p_class, p_guid)
	local s_Instance = BoolPropertyTrackData(p_class) 
 	local className = "BoolPropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<bool)>")
end

function Type:BoolRecordingData (p_class, p_guid)
	local s_Instance = BoolRecordingData(p_class) 
 	local className = "BoolRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<bool)>")
end

function Type:BoolShaderParameter (p_class, p_guid)
	local s_Instance = BoolShaderParameter(p_class) 
 	local className = "BoolShaderParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "value", s_Instance.value, "bool")
end

function Type:BoolToEventEntityData (p_class, p_guid)
	local s_Instance = BoolToEventEntityData(p_class) 
 	local className = "BoolToEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "initalEvent", s_Instance.initalEvent, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "value", s_Instance.value, "bool")
end

function Type:BoolUnlockValuePair (p_class, p_guid)
	local s_Instance = BoolUnlockValuePair(p_class) 
 	local className = "BoolUnlockValuePair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "bool")
	Something(className, s_guid, "unlockedValue", s_Instance.unlockedValue, "bool")
end

function Type:Boost (p_class, p_guid)
	local s_Instance = Boost(p_class) 
 	local className = "Boost"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accelerationScale", s_Instance.accelerationScale, "float")
	Something(className, s_guid, "crawlStrength", s_Instance.crawlStrength, "float")
	Something(className, s_guid, "dissipationTime", s_Instance.dissipationTime, "float")
	Something(className, s_guid, "forwardStrength", s_Instance.forwardStrength, "float")
	Something(className, s_guid, "recoveryTime", s_Instance.recoveryTime, "float")
	Something(className, s_guid, "reverseStrength", s_Instance.reverseStrength, "float")
end

function Type:BotPriorityConfigData (p_class, p_guid)
	local s_Instance = BotPriorityConfigData(p_class) 
 	local className = "BotPriorityConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angleOffset", s_Instance.angleOffset, "float")
	Something(className, s_guid, "appliesToDecisions", s_Instance.appliesToDecisions, "bool")
	Something(className, s_guid, "appliesToExecution", s_Instance.appliesToExecution, "bool")
	Something(className, s_guid, "debugColor", s_Instance.debugColor, "Vec3")
	Something(className, s_guid, "distance", s_Instance.distance, "float")
	Something(className, s_guid, "period", s_Instance.period, "int")
end

function Type:BoxEvaluatorData (p_class, p_guid)
	local s_Instance = BoxEvaluatorData(p_class) 
 	local className = "BoxEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dimensions", s_Instance.dimensions, "Vec3")
	Something(className, s_guid, "pivot", s_Instance.pivot, "Vec3")
end

function Type:BreakableControllerComponentData (p_class, p_guid)
	local s_Instance = BreakableControllerComponentData(p_class) 
 	local className = "BreakableControllerComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "breakablePartCount", s_Instance.breakablePartCount, "uint")
	Something(className, s_guid, "networkIdCount", s_Instance.networkIdCount, "uint")
end

function Type:BreakableModelEntityData (p_class, p_guid)
	local s_Instance = BreakableModelEntityData(p_class) 
 	local className = "BreakableModelEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneCount", s_Instance.boneCount, "uint")
	Something(className, s_guid, "decalVolumeScaleFactor", s_Instance.decalVolumeScaleFactor, "float")
	Something(className, s_guid, "decalVolumeShader", s_Instance.decalVolumeShader, "CtrRef")
	Something(className, s_guid, "edgeModelLightMapData", s_Instance.edgeModelLightMapData, "CtrRef")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
end

function Type:BreakablePartComponentData (p_class, p_guid)
	local s_Instance = BreakablePartComponentData(p_class) 
 	local className = "BreakablePartComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collapsable", s_Instance.collapsable, "bool")
	Something(className, s_guid, "destroyNearbyStaticEntities", s_Instance.destroyNearbyStaticEntities, "bool")
	Something(className, s_guid, "healthPercentage", s_Instance.healthPercentage, "uint")
end

function Type:BreakableRuinComponentData (p_class, p_guid)
	local s_Instance = BreakableRuinComponentData(p_class) 
 	local className = "BreakableRuinComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ruinModel", s_Instance.ruinModel, "CtrRef")
end

function Type:BreathControlData (p_class, p_guid)
	local s_Instance = BreathControlData(p_class) 
 	local className = "BreathControlData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "breathControlPenaltyMultiplier", s_Instance.breathControlPenaltyMultiplier, "float")
	Something(className, s_guid, "breathControlPenaltyTimeout", s_Instance.breathControlPenaltyTimeout, "float")
	Something(className, s_guid, "breathControlReleaseTime", s_Instance.breathControlReleaseTime, "float")
	Something(className, s_guid, "breathControlTime", s_Instance.breathControlTime, "float")
end

function Type:BulletEntityData (p_class, p_guid)
	local s_Instance = BulletEntityData(p_class) 
 	local className = "BulletEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageFalloffEndDistance", s_Instance.damageFalloffEndDistance, "float")
	Something(className, s_guid, "damageFalloffStartDistance", s_Instance.damageFalloffStartDistance, "float")
	Something(className, s_guid, "detonationTimeVariation", s_Instance.detonationTimeVariation, "float")
	Something(className, s_guid, "distributeDamageOverTime", s_Instance.distributeDamageOverTime, "float")
	Something(className, s_guid, "dudExplosion", s_Instance.dudExplosion, "CtrRef")
	Something(className, s_guid, "endDamage", s_Instance.endDamage, "float")
	Something(className, s_guid, "firstFrameTravelDistance", s_Instance.firstFrameTravelDistance, "float")
	Something(className, s_guid, "flyBySound", s_Instance.flyBySound, "CtrRef")
	Something(className, s_guid, "flyBySoundRadius", s_Instance.flyBySoundRadius, "float")
	Something(className, s_guid, "flyBySoundSpeed", s_Instance.flyBySoundSpeed, "float")
	Something(className, s_guid, "gravity", s_Instance.gravity, "float")
	Something(className, s_guid, "hasVehicleDetonation", s_Instance.hasVehicleDetonation, "bool")
	Something(className, s_guid, "impactImpulse", s_Instance.impactImpulse, "float")
	Something(className, s_guid, "instantHit", s_Instance.instantHit, "bool")
	Something(className, s_guid, "stamina", s_Instance.stamina, "float")
	Something(className, s_guid, "startDamage", s_Instance.startDamage, "float")
	Something(className, s_guid, "stopTrailEffectOnUnspawn", s_Instance.stopTrailEffectOnUnspawn, "bool")
	Something(className, s_guid, "timeToArmExplosion", s_Instance.timeToArmExplosion, "float")
	Something(className, s_guid, "vehicleDetonationActivationDelay", s_Instance.vehicleDetonationActivationDelay, "float")
	Something(className, s_guid, "vehicleDetonationRadius", s_Instance.vehicleDetonationRadius, "float")
end

function Type:BulletHitInfo (p_class, p_guid)
	local s_Instance = BulletHitInfo(p_class) 
 	local className = "BulletHitInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneType", s_Instance.boneType, "int")
	Something(className, s_guid, "direction", s_Instance.direction, "Vec3")
	Something(className, s_guid, "shooterPlayerId", s_Instance.shooterPlayerId, "int")
	Something(className, s_guid, "spawnPosition", s_Instance.spawnPosition, "Vec3")
	Something(className, s_guid, "weaponType", s_Instance.weaponType, "AntHitReactionWeaponType")
	Something(className, s_guid, "weaponUnlockAsset", s_Instance.weaponUnlockAsset, "CtrRef")
end

function Type:BurstLimit (p_class, p_guid)
	local s_Instance = BurstLimit(p_class) 
 	local className = "BurstLimit"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "int")
	Something(className, s_guid, "min", s_Instance.min, "int")
end

function Type:BusNodeData (p_class, p_guid)
	local s_Instance = BusNodeData(p_class) 
 	local className = "BusNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "vuPlugin", s_Instance.vuPlugin, "SoundGraphPluginRef")
end

function Type:CameraActionData (p_class, p_guid)
	local s_Instance = CameraActionData(p_class) 
 	local className = "CameraActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionMode", s_Instance.actionMode, "CameraMovementActionMode")
end

function Type:CameraBinding (p_class, p_guid)
	local s_Instance = CameraBinding(p_class) 
 	local className = "CameraBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forceRender1pInForeground", s_Instance.forceRender1pInForeground, "AntRef")
	Something(className, s_guid, "render1pInBackground", s_Instance.render1pInBackground, "AntRef")
end

function Type:CameraComponentData (p_class, p_guid)
	local s_Instance = CameraComponentData(p_class) 
 	local className = "CameraComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alternateView", s_Instance.alternateView, "CtrRef")
	Something(className, s_guid, "alternateViewEnabled", s_Instance.alternateViewEnabled, "bool")
	Something(className, s_guid, "camera", s_Instance.camera, "CtrRef")
	Something(className, s_guid, "cameraSoundData", s_Instance.cameraSoundData, "CtrRef")
	Something(className, s_guid, "cameraTransitionPos", s_Instance.cameraTransitionPos, "Vec3")
	Something(className, s_guid, "cameraTransitionTime", s_Instance.cameraTransitionTime, "float")
	Something(className, s_guid, "enableCameraMesh", s_Instance.enableCameraMesh, "bool")
	Something(className, s_guid, "fieldOfView", s_Instance.fieldOfView, "float")
	Something(className, s_guid, "forceFieldOfView", s_Instance.forceFieldOfView, "float")
	Something(className, s_guid, "freezeHeight", s_Instance.freezeHeight, "float")
	Something(className, s_guid, "ignoreOwnerOrientation", s_Instance.ignoreOwnerOrientation, "bool")
	Something(className, s_guid, "isFirstPerson", s_Instance.isFirstPerson, "bool")
	Something(className, s_guid, "meshParentComponentNumber", s_Instance.meshParentComponentNumber, "uint")
	Something(className, s_guid, "receiveImpulsesAsThirdPerson", s_Instance.receiveImpulsesAsThirdPerson, "bool")
	Something(className, s_guid, "regularView", s_Instance.regularView, "RegularCameraViewData")
	Something(className, s_guid, "soldierAnimatedCamera", s_Instance.soldierAnimatedCamera, "SoldierAnimatedCameraData")
	Something(className, s_guid, "stanceData", s_Instance.stanceData, "StanceCameraData")
	Something(className, s_guid, "useCameraTransition", s_Instance.useCameraTransition, "bool")
end

function Type:CameraComponentSoundData (p_class, p_guid)
	local s_Instance = CameraComponentSoundData(p_class) 
 	local className = "CameraComponentSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "switchToAlternateViewSound", s_Instance.switchToAlternateViewSound, "CtrRef")
	Something(className, s_guid, "switchToNormalViewSound", s_Instance.switchToNormalViewSound, "CtrRef")
end

function Type:CameraData (p_class, p_guid)
	local s_Instance = CameraData(p_class) 
 	local className = "CameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fadeTime", s_Instance.fadeTime, "float")
	Something(className, s_guid, "fadeWaitTime", s_Instance.fadeWaitTime, "float")
	Something(className, s_guid, "nearPlane", s_Instance.nearPlane, "float")
	Something(className, s_guid, "occlusionRayOffset", s_Instance.occlusionRayOffset, "Vec3")
	Something(className, s_guid, "preFadeTime", s_Instance.preFadeTime, "float")
	Something(className, s_guid, "shadowViewDistanceScale", s_Instance.shadowViewDistanceScale, "float")
	Something(className, s_guid, "shakeFactor", s_Instance.shakeFactor, "float")
	Something(className, s_guid, "soundListenerRadius", s_Instance.soundListenerRadius, "float")
	Something(className, s_guid, "soundOcclusion", s_Instance.soundOcclusion, "float")
	Something(className, s_guid, "stayFadedWhileStreaming", s_Instance.stayFadedWhileStreaming, "bool")
	Something(className, s_guid, "viewFx", s_Instance.viewFx, "CtrRef")
end

function Type:CameraEnterAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = CameraEnterAreaTriggerEntityData(p_class) 
 	local className = "CameraEnterAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "timeTreshold", s_Instance.timeTreshold, "float")
	Something(className, s_guid, "updatePass", s_Instance.updatePass, "fb.UpdatePass)")
end

function Type:CameraEntityBaseData (p_class, p_guid)
	local s_Instance = CameraEntityBaseData(p_class) 
 	local className = "CameraEntityBaseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "nameId", s_Instance.nameId, "string")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
end

function Type:CameraEntityData (p_class, p_guid)
	local s_Instance = CameraEntityData(p_class) 
 	local className = "CameraEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fov", s_Instance.fov, "float")
end

function Type:CameraLeapData (p_class, p_guid)
	local s_Instance = CameraLeapData(p_class) 
 	local className = "CameraLeapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fovModifier", s_Instance.fovModifier, "float")
	Something(className, s_guid, "time", s_Instance.time, "float")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:CameraLoosePartPhysicsData (p_class, p_guid)
	local s_Instance = CameraLoosePartPhysicsData(p_class) 
 	local className = "CameraLoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:CameraParamsComponentData (p_class, p_guid)
	local s_Instance = CameraParamsComponentData(p_class) 
 	local className = "CameraParamsComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nearPlane", s_Instance.nearPlane, "float")
	Something(className, s_guid, "sunShadowmapViewDistance", s_Instance.sunShadowmapViewDistance, "float")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
end

function Type:CameraProximityEvaluatorData (p_class, p_guid)
	local s_Instance = CameraProximityEvaluatorData(p_class) 
 	local className = "CameraProximityEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forwardOffset", s_Instance.forwardOffset, "float")
	Something(className, s_guid, "innerRadius", s_Instance.innerRadius, "float")
	Something(className, s_guid, "innerRadiusDirection", s_Instance.innerRadiusDirection, "Vec3")
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "size", s_Instance.size, "Vec3")
end

function Type:CameraRecoilData (p_class, p_guid)
	local s_Instance = CameraRecoilData(p_class) 
 	local className = "CameraRecoilData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "springConstant", s_Instance.springConstant, "float")
	Something(className, s_guid, "springDamping", s_Instance.springDamping, "float")
	Something(className, s_guid, "springMinThresholdAngle", s_Instance.springMinThresholdAngle, "float")
end

function Type:CameraShakeNodeData (p_class, p_guid)
	local s_Instance = CameraShakeNodeData(p_class) 
 	local className = "CameraShakeNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pitch", s_Instance.pitch, "AudioGraphNodePort")
	Something(className, s_guid, "roll", s_Instance.roll, "AudioGraphNodePort")
	Something(className, s_guid, "yaw", s_Instance.yaw, "AudioGraphNodePort")
end

function Type:CameraSineCurveData (p_class, p_guid)
	local s_Instance = CameraSineCurveData(p_class) 
 	local className = "CameraSineCurveData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "float")
	Something(className, s_guid, "frequency", s_Instance.frequency, "float")
	Something(className, s_guid, "phaseShift", s_Instance.phaseShift, "float")
end

function Type:CannedAnimationBinding (p_class, p_guid)
	local s_Instance = CannedAnimationBinding(p_class) 
 	local className = "CannedAnimationBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actorIndex", s_Instance.actorIndex, "AntRef")
	Something(className, s_guid, "advanceScenario", s_Instance.advanceScenario, "AntRef")
	Something(className, s_guid, "blendValue", s_Instance.blendValue, "AntRef")
	Something(className, s_guid, "enteredLoop", s_Instance.enteredLoop, "AntRef")
	Something(className, s_guid, "exitCannedAnimation", s_Instance.exitCannedAnimation, "AntRef")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "AntRef")
	Something(className, s_guid, "levelIndex", s_Instance.levelIndex, "AntRef")
	Something(className, s_guid, "partIndex", s_Instance.partIndex, "AntRef")
	Something(className, s_guid, "scenarioIndex", s_Instance.scenarioIndex, "AntRef")
	Something(className, s_guid, "triggerCannedAnimation", s_Instance.triggerCannedAnimation, "AntRef")
end

function Type:CannedScenarioEntityData (p_class, p_guid)
	local s_Instance = CannedScenarioEntityData(p_class) 
 	local className = "CannedScenarioEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alwaysClearEntitySpaceWhenInScenario", s_Instance.alwaysClearEntitySpaceWhenInScenario, "bool")
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "cannedAnimBinding", s_Instance.cannedAnimBinding, "CannedAnimationBinding")
end

function Type:CapturePointEntityData (p_class, p_guid)
	local s_Instance = CapturePointEntityData(p_class) 
 	local className = "CapturePointEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "addedMultiplierPerPlayer", s_Instance.addedMultiplierPerPlayer, "float")
	Something(className, s_guid, "areaValue", s_Instance.areaValue, "int")
	Something(className, s_guid, "areaValues", s_Instance.areaValues, "List<AreaValueTeam)>")
	Something(className, s_guid, "capturableType", s_Instance.capturableType, "fb.CapturableType)")
	Something(className, s_guid, "capturePoint", s_Instance.capturePoint, "CtrRef")
	Something(className, s_guid, "captureRadius", s_Instance.captureRadius, "float")
	Something(className, s_guid, "disableIfEnemyInside", s_Instance.disableIfEnemyInside, "bool")
	Something(className, s_guid, "disableWhenLosingControl", s_Instance.disableWhenLosingControl, "bool")
	Something(className, s_guid, "enemyTicketLossWhenCaptured", s_Instance.enemyTicketLossWhenCaptured, "int")
	Something(className, s_guid, "flagTemplates", s_Instance.flagTemplates, "List<CtrRef)>")
	Something(className, s_guid, "forceSnap", s_Instance.forceSnap, "bool")
	Something(className, s_guid, "hideRadius", s_Instance.hideRadius, "float")
	Something(className, s_guid, "hoistFlag", s_Instance.hoistFlag, "bool")
	Something(className, s_guid, "initialOwnerTeam", s_Instance.initialOwnerTeam, "TeamId")
	Something(className, s_guid, "intruderWarning", s_Instance.intruderWarning, "bool")
	Something(className, s_guid, "intruderWarningSID", s_Instance.intruderWarningSID, "string")
	Something(className, s_guid, "isCapturedInUpperSphere", s_Instance.isCapturedInUpperSphere, "bool")
	Something(className, s_guid, "isVisible", s_Instance.isVisible, "bool")
	Something(className, s_guid, "loseControlWhenNotClose", s_Instance.loseControlWhenNotClose, "bool")
	Something(className, s_guid, "maxCaptureMultiplier", s_Instance.maxCaptureMultiplier, "int")
	Something(className, s_guid, "minNrToTakeControl", s_Instance.minNrToTakeControl, "int")
	Something(className, s_guid, "modify3DIconVerticalOffset", s_Instance.modify3DIconVerticalOffset, "float")
	Something(className, s_guid, "onlyTakeableByTeam", s_Instance.onlyTakeableByTeam, "int")
	Something(className, s_guid, "removeWhenCaptured", s_Instance.removeWhenCaptured, "bool")
	Something(className, s_guid, "returnMultiplier", s_Instance.returnMultiplier, "float")
	Something(className, s_guid, "seesawCapturing", s_Instance.seesawCapturing, "bool")
	Something(className, s_guid, "showOnMinimap", s_Instance.showOnMinimap, "bool")
	Something(className, s_guid, "showRadius", s_Instance.showRadius, "float")
	Something(className, s_guid, "spawnMenuListOrdinal", s_Instance.spawnMenuListOrdinal, "uint")
	Something(className, s_guid, "startAtBottom", s_Instance.startAtBottom, "bool")
	Something(className, s_guid, "timeToGetControl", s_Instance.timeToGetControl, "int")
	Something(className, s_guid, "timeToLoseControl", s_Instance.timeToLoseControl, "int")
	Something(className, s_guid, "useAreaValuesPerTeam", s_Instance.useAreaValuesPerTeam, "bool")
end

function Type:CapturePointScoringHandlerData (p_class, p_guid)
	local s_Instance = CapturePointScoringHandlerData(p_class) 
 	local className = "CapturePointScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "squadCappingBonus", s_Instance.squadCappingBonus, "float")
end

function Type:CellDetailSelectionRule (p_class, p_guid)
	local s_Instance = CellDetailSelectionRule(p_class) 
 	local className = "CellDetailSelectionRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "detail", s_Instance.detail, "PackagingDetailLevel")
end

function Type:ChangeReadinessOrderEntityData (p_class, p_guid)
	local s_Instance = ChangeReadinessOrderEntityData(p_class) 
 	local className = "ChangeReadinessOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowDecrease", s_Instance.allowDecrease, "bool")
	Something(className, s_guid, "minimum", s_Instance.minimum, "ReadinessLevel")
	Something(className, s_guid, "pulse", s_Instance.pulse, "ReadinessLevel")
end

function Type:CharacterAnimationEntityData (p_class, p_guid)
	local s_Instance = CharacterAnimationEntityData(p_class) 
 	local className = "CharacterAnimationEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "controller", s_Instance.controller, "AntRef")
	Something(className, s_guid, "entitySpaceTransform", s_Instance.entitySpaceTransform, "LinearTransform")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "restoreControllerOnFinish", s_Instance.restoreControllerOnFinish, "bool")
	Something(className, s_guid, "trackLength", s_Instance.trackLength, "float")
	Something(className, s_guid, "warpAnimationBlendTime", s_Instance.warpAnimationBlendTime, "float")
end

function Type:CharacterAnimationSpaceEntityData (p_class, p_guid)
	local s_Instance = CharacterAnimationSpaceEntityData(p_class) 
 	local className = "CharacterAnimationSpaceEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "spacePositionGS", s_Instance.spacePositionGS, "AntRef")
	Something(className, s_guid, "spaceRotationGS", s_Instance.spaceRotationGS, "AntRef")
	Something(className, s_guid, "warpAnimationBlendTime", s_Instance.warpAnimationBlendTime, "float")
end

function Type:CharacterCameraComponentData (p_class, p_guid)
	local s_Instance = CharacterCameraComponentData(p_class) 
 	local className = "CharacterCameraComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraBoneName", s_Instance.cameraBoneName, "string")
	Something(className, s_guid, "cameras", s_Instance.cameras, "List<CtrRef)>")
end

function Type:CharacterCustomizationAsset (p_class, p_guid)
	local s_Instance = CharacterCustomizationAsset(p_class) 
 	local className = "CharacterCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "labelSid", s_Instance.labelSid, "string")
	Something(className, s_guid, "specializationTable", s_Instance.specializationTable, "CtrRef")
	Something(className, s_guid, "uIHudIcon", s_Instance.uIHudIcon, "fb.UIHudIcon)")
	Something(className, s_guid, "visualTable", s_Instance.visualTable, "CtrRef")
	Something(className, s_guid, "voiceOverLabels", s_Instance.voiceOverLabels, "List<CtrRef)>")
end

function Type:CharacterCustomizationComponentData (p_class, p_guid)
	local s_Instance = CharacterCustomizationComponentData(p_class) 
 	local className = "CharacterCustomizationComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sharedLodGroup", s_Instance.sharedLodGroup, "CtrRef")
	Something(className, s_guid, "socketList", s_Instance.socketList, "CtrRef")
end

function Type:CharacterEntityData (p_class, p_guid)
	local s_Instance = CharacterEntityData(p_class) 
 	local className = "CharacterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "characterLightingEnable", s_Instance.characterLightingEnable, "bool")
	Something(className, s_guid, "defaultViewMode", s_Instance.defaultViewMode, "PersonViewMode")
	Something(className, s_guid, "playerSpawnType", s_Instance.playerSpawnType, "fb.PlayerSpawnType)")
end

function Type:CharacterHealthComponentData (p_class, p_guid)
	local s_Instance = CharacterHealthComponentData(p_class) 
 	local className = "CharacterHealthComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isImmortal", s_Instance.isImmortal, "bool")
	Something(className, s_guid, "maxHealth", s_Instance.maxHealth, "float")
	Something(className, s_guid, "regenerateHealth", s_Instance.regenerateHealth, "bool")
	Something(className, s_guid, "regenerateHealthPerSecond", s_Instance.regenerateHealthPerSecond, "float")
end

function Type:CharacterInVehicleScenarioEntityData (p_class, p_guid)
	local s_Instance = CharacterInVehicleScenarioEntityData(p_class) 
 	local className = "CharacterInVehicleScenarioEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actorId", s_Instance.actorId, "int")
	Something(className, s_guid, "levelId", s_Instance.levelId, "int")
	Something(className, s_guid, "partId", s_Instance.partId, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scenarioAntRef", s_Instance.scenarioAntRef, "AntRef")
	Something(className, s_guid, "scenarioId", s_Instance.scenarioId, "int")
end

function Type:CharacterLightingComponentData (p_class, p_guid)
	local s_Instance = CharacterLightingComponentData(p_class) 
 	local className = "CharacterLightingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blendFactor", s_Instance.blendFactor, "float")
	Something(className, s_guid, "bottomLight", s_Instance.bottomLight, "Vec3")
	Something(className, s_guid, "cameraUpRotation", s_Instance.cameraUpRotation, "float")
	Something(className, s_guid, "characterLightEnable", s_Instance.characterLightEnable, "bool")
	Something(className, s_guid, "characterLightingMode", s_Instance.characterLightingMode, "fb.CharacterLightingMode)")
	Something(className, s_guid, "firstPersonEnable", s_Instance.firstPersonEnable, "bool")
	Something(className, s_guid, "lockToCameraDirection", s_Instance.lockToCameraDirection, "bool")
	Something(className, s_guid, "topLight", s_Instance.topLight, "Vec3")
	Something(className, s_guid, "topLightDirX", s_Instance.topLightDirX, "float")
	Something(className, s_guid, "topLightDirY", s_Instance.topLightDirY, "float")
end

function Type:CharacterMeleeBinding (p_class, p_guid)
	local s_Instance = CharacterMeleeBinding(p_class) 
 	local className = "CharacterMeleeBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meleeActive", s_Instance.meleeActive, "AntRef")
	Something(className, s_guid, "otherActor", s_Instance.otherActor, "AntRef")
	Something(className, s_guid, "selfActor", s_Instance.selfActor, "AntRef")
	Something(className, s_guid, "triggerMelee", s_Instance.triggerMelee, "AntRef")
end

function Type:CharacterMeleeCommonBinding (p_class, p_guid)
	local s_Instance = CharacterMeleeCommonBinding(p_class) 
 	local className = "CharacterMeleeCommonBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "closeToTarget", s_Instance.closeToTarget, "AntRef")
	Something(className, s_guid, "meleeAborted", s_Instance.meleeAborted, "AntRef")
	Something(className, s_guid, "meleeAngle", s_Instance.meleeAngle, "AntRef")
	Something(className, s_guid, "meleeDefenceTime", s_Instance.meleeDefenceTime, "AntRef")
	Something(className, s_guid, "meleeDistance", s_Instance.meleeDistance, "AntRef")
	Something(className, s_guid, "meleeSequenceTime", s_Instance.meleeSequenceTime, "AntRef")
	Something(className, s_guid, "meleeType", s_Instance.meleeType, "AntRef")
end

function Type:CharacterPhysicsComponentData (p_class, p_guid)
	local s_Instance = CharacterPhysicsComponentData(p_class) 
 	local className = "CharacterPhysicsComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "characterPhysics", s_Instance.characterPhysics, "CtrRef")
	Something(className, s_guid, "enableCollisionOnSpawn", s_Instance.enableCollisionOnSpawn, "bool")
end

function Type:CharacterPhysicsData (p_class, p_guid)
	local s_Instance = CharacterPhysicsData(p_class) 
 	local className = "CharacterPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowPoseChangeDuringTransition", s_Instance.allowPoseChangeDuringTransition, "bool")
	Something(className, s_guid, "defaultState", s_Instance.defaultState, "CharacterStateType")
	Something(className, s_guid, "inputAcceleration", s_Instance.inputAcceleration, "float")
	Something(className, s_guid, "jumpPenaltyFactor", s_Instance.jumpPenaltyFactor, "float")
	Something(className, s_guid, "jumpPenaltyTime", s_Instance.jumpPenaltyTime, "float")
	Something(className, s_guid, "ladderAcceptAngle", s_Instance.ladderAcceptAngle, "float")
	Something(className, s_guid, "ladderAcceptAnglePitch", s_Instance.ladderAcceptAnglePitch, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "maxAscendAngle", s_Instance.maxAscendAngle, "float")
	Something(className, s_guid, "physicalRadius", s_Instance.physicalRadius, "float")
	Something(className, s_guid, "poses", s_Instance.poses, "List<CtrRef)>")
	Something(className, s_guid, "pushableObjectWeight", s_Instance.pushableObjectWeight, "int")
	Something(className, s_guid, "radiusToPredictCollisionOnCharacters", s_Instance.radiusToPredictCollisionOnCharacters, "float")
	Something(className, s_guid, "sprint", s_Instance.sprint, "CtrRef")
	Something(className, s_guid, "states", s_Instance.states, "List<CtrRef)>")
	Something(className, s_guid, "waterDepthLimit", s_Instance.waterDepthLimit, "float")
end

function Type:CharacterPoseConstraintsData (p_class, p_guid)
	local s_Instance = CharacterPoseConstraintsData(p_class) 
 	local className = "CharacterPoseConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchPose", s_Instance.crouchPose, "bool")
	Something(className, s_guid, "pronePose", s_Instance.pronePose, "bool")
	Something(className, s_guid, "standPose", s_Instance.standPose, "bool")
end

function Type:CharacterPoseData (p_class, p_guid)
	local s_Instance = CharacterPoseData(p_class) 
 	local className = "CharacterPoseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collisionBoxMaxExpand", s_Instance.collisionBoxMaxExpand, "Vec3")
	Something(className, s_guid, "collisionBoxMinExpand", s_Instance.collisionBoxMinExpand, "Vec3")
	Something(className, s_guid, "collisionType", s_Instance.collisionType, "CharacterPoseCollisionType")
	Something(className, s_guid, "eyePosition", s_Instance.eyePosition, "Vec3")
	Something(className, s_guid, "height", s_Instance.height, "float")
	Something(className, s_guid, "lookConstraints", s_Instance.lookConstraints, "LookConstraintsData")
	Something(className, s_guid, "poseType", s_Instance.poseType, "CharacterPoseType")
	Something(className, s_guid, "stepHeight", s_Instance.stepHeight, "float")
	Something(className, s_guid, "throttleModifierCurve", s_Instance.throttleModifierCurve, "List<Vec2)>")
	Something(className, s_guid, "transitionTimes", s_Instance.transitionTimes, "List<PoseTransitionTime)>")
end

function Type:CharacterSocketListAsset (p_class, p_guid)
	local s_Instance = CharacterSocketListAsset(p_class) 
 	local className = "CharacterSocketListAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gameplaySockets", s_Instance.gameplaySockets, "List<CtrRef)>")
	Something(className, s_guid, "rigidVisualSockets", s_Instance.rigidVisualSockets, "List<CtrRef)>")
	Something(className, s_guid, "skinnedVisualSockets", s_Instance.skinnedVisualSockets, "List<CtrRef)>")
end

function Type:CharacterSpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = CharacterSpawnReferenceObjectData(p_class) 
 	local className = "CharacterSpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "affectMinimapPosition", s_Instance.affectMinimapPosition, "bool")
	Something(className, s_guid, "allowFallbackOnNextAvailabeVehicleEntry", s_Instance.allowFallbackOnNextAvailabeVehicleEntry, "bool")
	Something(className, s_guid, "checkMaxPlayersInVehicle", s_Instance.checkMaxPlayersInVehicle, "bool")
	Something(className, s_guid, "humanTargetPreference", s_Instance.humanTargetPreference, "float")
	Something(className, s_guid, "ignoreVehicleIcon", s_Instance.ignoreVehicleIcon, "bool")
	Something(className, s_guid, "isTarget", s_Instance.isTarget, "bool")
	Something(className, s_guid, "minimapIcon", s_Instance.minimapIcon, "UIHudIcon")
	Something(className, s_guid, "playerType", s_Instance.playerType, "PlayerSpawnType")
	Something(className, s_guid, "template", s_Instance.template, "CtrRef")
	Something(className, s_guid, "vehicleEntryIndex", s_Instance.vehicleEntryIndex, "uint")
end

function Type:CharacterSprintData (p_class, p_guid)
	local s_Instance = CharacterSprintData(p_class) 
 	local className = "CharacterSprintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowContinousSprinting", s_Instance.allowContinousSprinting, "bool")
	Something(className, s_guid, "sprintMinimumPower", s_Instance.sprintMinimumPower, "float")
	Something(className, s_guid, "sprintPowerDecreasePerSecond", s_Instance.sprintPowerDecreasePerSecond, "float")
	Something(className, s_guid, "sprintPowerIncreasePerSecond", s_Instance.sprintPowerIncreasePerSecond, "float")
end

function Type:CharacterStateData (p_class, p_guid)
	local s_Instance = CharacterStateData(p_class) 
 	local className = "CharacterStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "poseInfo", s_Instance.poseInfo, "List<CtrRef)>")
end

function Type:CharacterStatePoseInfo (p_class, p_guid)
	local s_Instance = CharacterStatePoseInfo(p_class) 
 	local className = "CharacterStatePoseInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accelerationGain", s_Instance.accelerationGain, "float")
	Something(className, s_guid, "decelerationGain", s_Instance.decelerationGain, "float")
	Something(className, s_guid, "poseType", s_Instance.poseType, "CharacterPoseType")
	Something(className, s_guid, "speedModifier", s_Instance.speedModifier, "SpeedModifierData")
	Something(className, s_guid, "sprintGain", s_Instance.sprintGain, "float")
	Something(className, s_guid, "sprintMultiplier", s_Instance.sprintMultiplier, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:CharacterStateTriggerEntityData (p_class, p_guid)
	local s_Instance = CharacterStateTriggerEntityData(p_class) 
 	local className = "CharacterStateTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeWeaponSlot", s_Instance.activeWeaponSlot, "uint")
	Something(className, s_guid, "ammoToSet", s_Instance.ammoToSet, "uint")
	Something(className, s_guid, "characterPose", s_Instance.characterPose, "CharacterPoseAction")
	Something(className, s_guid, "checkAllWeapons", s_Instance.checkAllWeapons, "bool")
	Something(className, s_guid, "checkHealthGreaterOrEqual", s_Instance.checkHealthGreaterOrEqual, "bool")
	Something(className, s_guid, "continueToCheckIfHoldingWrongWeapon", s_Instance.continueToCheckIfHoldingWrongWeapon, "bool")
	Something(className, s_guid, "disablePhysicsWhenLeavingVehicle", s_Instance.disablePhysicsWhenLeavingVehicle, "bool")
	Something(className, s_guid, "excludeConnectedVehicles", s_Instance.excludeConnectedVehicles, "bool")
	Something(className, s_guid, "healthToCheck", s_Instance.healthToCheck, "uint")
	Something(className, s_guid, "healthToSet", s_Instance.healthToSet, "uint")
	Something(className, s_guid, "pitch", s_Instance.pitch, "float")
	Something(className, s_guid, "poseToCheck", s_Instance.poseToCheck, "CharacterPoseAction")
	Something(className, s_guid, "seatIndex", s_Instance.seatIndex, "uint")
	Something(className, s_guid, "shouldCheckSeatIndex", s_Instance.shouldCheckSeatIndex, "bool")
	Something(className, s_guid, "stayInVehicleOnMove", s_Instance.stayInVehicleOnMove, "bool")
	Something(className, s_guid, "useExitPointWhenLeavingVehicle", s_Instance.useExitPointWhenLeavingVehicle, "bool")
	Something(className, s_guid, "usePitch", s_Instance.usePitch, "bool")
	Something(className, s_guid, "weapon", s_Instance.weapon, "CtrRef")
end

function Type:CharacterWeaponBinding (p_class, p_guid)
	local s_Instance = CharacterWeaponBinding(p_class) 
 	local className = "CharacterWeaponBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponId", s_Instance.weaponId, "AntRef")
end

function Type:CharacterWeaponComponentData (p_class, p_guid)
	local s_Instance = CharacterWeaponComponentData(p_class) 
 	local className = "CharacterWeaponComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimBoneName", s_Instance.aimBoneName, "string")
	Something(className, s_guid, "defaultWeaponBlueprint", s_Instance.defaultWeaponBlueprint, "CtrRef")
	Something(className, s_guid, "weaponSkeleton", s_Instance.weaponSkeleton, "CtrRef")
end

function Type:ChaseCameraData (p_class, p_guid)
	local s_Instance = ChaseCameraData(p_class) 
 	local className = "ChaseCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "awayFromTargetForceScale", s_Instance.awayFromTargetForceScale, "float")
	Something(className, s_guid, "collisionRadius", s_Instance.collisionRadius, "float")
	Something(className, s_guid, "forceFieldForceScale", s_Instance.forceFieldForceScale, "float")
	Something(className, s_guid, "forceFieldRadius", s_Instance.forceFieldRadius, "float")
	Something(className, s_guid, "hasCollision", s_Instance.hasCollision, "bool")
	Something(className, s_guid, "inheritTargetVelocity", s_Instance.inheritTargetVelocity, "bool")
	Something(className, s_guid, "keepTargetPitch", s_Instance.keepTargetPitch, "bool")
	Something(className, s_guid, "lookDistanceInFrontOfTarget", s_Instance.lookDistanceInFrontOfTarget, "float")
	Something(className, s_guid, "lookDistanceScale", s_Instance.lookDistanceScale, "float")
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "maxVelocity", s_Instance.maxVelocity, "float")
	Something(className, s_guid, "maxViewRotationAngleDeg", s_Instance.maxViewRotationAngleDeg, "float")
	Something(className, s_guid, "pillExpandSizeSpeedAcceleration", s_Instance.pillExpandSizeSpeedAcceleration, "float")
	Something(className, s_guid, "pillMaximumCollisionRadius", s_Instance.pillMaximumCollisionRadius, "float")
	Something(className, s_guid, "pillMinimumCollisionLength", s_Instance.pillMinimumCollisionLength, "float")
	Something(className, s_guid, "pillMinimumCollisionRadius", s_Instance.pillMinimumCollisionRadius, "float")
	Something(className, s_guid, "shouldRollWithTarget", s_Instance.shouldRollWithTarget, "bool")
	Something(className, s_guid, "snapDistance", s_Instance.snapDistance, "float")
	Something(className, s_guid, "targetOffset", s_Instance.targetOffset, "Vec3")
	Something(className, s_guid, "targetRotationOffset", s_Instance.targetRotationOffset, "float")
	Something(className, s_guid, "toWantedPositionScale", s_Instance.toWantedPositionScale, "Vec3")
	Something(className, s_guid, "updateRate", s_Instance.updateRate, "uint")
	Something(className, s_guid, "velocityDrag", s_Instance.velocityDrag, "float")
	Something(className, s_guid, "wantedAngleDeg", s_Instance.wantedAngleDeg, "float")
	Something(className, s_guid, "wantedDistance", s_Instance.wantedDistance, "float")
end

function Type:ChassisComponentData (p_class, p_guid)
	local s_Instance = ChassisComponentData(p_class) 
 	local className = "ChassisComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowNegativeThrottle", s_Instance.allowNegativeThrottle, "bool")
	Something(className, s_guid, "alwaysFullThrottle", s_Instance.alwaysFullThrottle, "bool")
	Something(className, s_guid, "forceLandingGearsRetract", s_Instance.forceLandingGearsRetract, "bool")
	Something(className, s_guid, "gearboxConfig", s_Instance.gearboxConfig, "CtrRef")
	Something(className, s_guid, "landingGearLogic", s_Instance.landingGearLogic, "CtrRef")
	Something(className, s_guid, "triggerGroundEffectImpulse", s_Instance.triggerGroundEffectImpulse, "float")
	Something(className, s_guid, "vehicleConfig", s_Instance.vehicleConfig, "CtrRef")
	Something(className, s_guid, "waterEffects", s_Instance.waterEffects, "List<CtrRef)>")
	Something(className, s_guid, "waterStreakEffects", s_Instance.waterStreakEffects, "List<CtrRef)>")
end

function Type:ChatSettings (p_class, p_guid)
	local s_Instance = ChatSettings(p_class) 
 	local className = "ChatSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antiSpam", s_Instance.antiSpam, "AntiSpamConfig")
	Something(className, s_guid, "channels", s_Instance.channels, "List<ChatChannelType)>")
	Something(className, s_guid, "chatSettings", s_Instance.chatSettings,  "readonly")
	Something(className, s_guid, "chatChannelType", s_Instance.chatChannelType,  "uint")
end

function Type:ChildComponentData (p_class, p_guid)
	local s_Instance = ChildComponentData(p_class) 
 	local className = "ChildComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alignmentSettings", s_Instance.alignmentSettings, "CtrRef")
	Something(className, s_guid, "alignTransform", s_Instance.alignTransform, "LinearTransform")
	Something(className, s_guid, "enableAlignToCamera", s_Instance.enableAlignToCamera, "bool")
	Something(className, s_guid, "healthZone", s_Instance.healthZone, "VehicleHealthZoneData")
	Something(className, s_guid, "movingBody", s_Instance.movingBody, "CtrRef")
	Something(className, s_guid, "soundEffect", s_Instance.soundEffect, "CtrRef")
	Something(className, s_guid, "soundEffectStartRpm", s_Instance.soundEffectStartRpm, "float")
	Something(className, s_guid, "soundEffectStopRpm", s_Instance.soundEffectStopRpm, "float")
	Something(className, s_guid, "worldSpacePositionLock", s_Instance.worldSpacePositionLock, "bool")
end

function Type:ChildMovingBodyData (p_class, p_guid)
	local s_Instance = ChildMovingBodyData(p_class) 
 	local className = "ChildMovingBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputAction", s_Instance.inputAction, "EntryInputActionEnum")
	Something(className, s_guid, "inputDelay", s_Instance.inputDelay, "float")
	Something(className, s_guid, "isOneShotInput", s_Instance.isOneShotInput, "bool")
	Something(className, s_guid, "speed", s_Instance.speed, "float")
	Something(className, s_guid, "triggerImpulse", s_Instance.triggerImpulse, "float")
end

function Type:ChildRotationBodyData (p_class, p_guid)
	local s_Instance = ChildRotationBodyData(p_class) 
 	local className = "ChildRotationBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forceModifier", s_Instance.forceModifier, "float")
	Something(className, s_guid, "resetForceInputThreshold", s_Instance.resetForceInputThreshold, "float")
	Something(className, s_guid, "resetForceModifier", s_Instance.resetForceModifier, "float")
	Something(className, s_guid, "rotationInput", s_Instance.rotationInput, "EntryInputActionEnum")
	Something(className, s_guid, "useLinearInput", s_Instance.useLinearInput, "bool")
	Something(className, s_guid, "worldSpaceLockEfficiency", s_Instance.worldSpaceLockEfficiency, "float")
end

function Type:ChildStaticModelNetworkInfo (p_class, p_guid)
	local s_Instance = ChildStaticModelNetworkInfo(p_class) 
 	local className = "ChildStaticModelNetworkInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "instanceIndex", s_Instance.instanceIndex, "uint")
	Something(className, s_guid, "networkRange", s_Instance.networkRange, "IndexRange")
	Something(className, s_guid, "parentHealthStateIndex", s_Instance.parentHealthStateIndex, "uint")
	Something(className, s_guid, "parentPartComponentIndex", s_Instance.parentPartComponentIndex, "uint")
end

function Type:ChunkStreamerCell (p_class, p_guid)
	local s_Instance = ChunkStreamerCell(p_class) 
 	local className = "ChunkStreamerCell"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bundleName", s_Instance.bundleName, "string")
	Something(className, s_guid, "shape", s_Instance.shape, "List<Vec2)>")
end

function Type:ChunkStreamerEntityData (p_class, p_guid)
	local s_Instance = ChunkStreamerEntityData(p_class) 
 	local className = "ChunkStreamerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cells", s_Instance.cells, "List<ChunkStreamerCell)>")
end

function Type:ClearAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = ClearAreaTriggerEntityData(p_class) 
 	local className = "ClearAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "excludeImmortalSoldiersInTeam", s_Instance.excludeImmortalSoldiersInTeam, "bool")
	Something(className, s_guid, "removeBangers", s_Instance.removeBangers, "bool")
	Something(className, s_guid, "removeDebrisClusters", s_Instance.removeDebrisClusters, "bool")
	Something(className, s_guid, "removeEffects", s_Instance.removeEffects, "bool")
	Something(className, s_guid, "removeMeshProxies", s_Instance.removeMeshProxies, "bool")
	Something(className, s_guid, "removeSoldiers", s_Instance.removeSoldiers, "bool")
	Something(className, s_guid, "removeStaticModels", s_Instance.removeStaticModels, "bool")
	Something(className, s_guid, "removeVehicles", s_Instance.removeVehicles, "bool")
	Something(className, s_guid, "teamOfImmortalSoldiers", s_Instance.teamOfImmortalSoldiers, "TeamId")
end

function Type:ClientEffectMaskVolumeEntityData (p_class, p_guid)
	local s_Instance = ClientEffectMaskVolumeEntityData(p_class) 
 	local className = "ClientEffectMaskVolumeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "applyEffectCurve", s_Instance.applyEffectCurve, "Vec4")
	Something(className, s_guid, "lifeTimeInSeconds", s_Instance.lifeTimeInSeconds, "float")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "updatePeriodInSeconds", s_Instance.updatePeriodInSeconds, "float")
end

function Type:ClientJuiceState (p_class, p_guid)
	local s_Instance = ClientJuiceState(p_class) 
 	local className = "ClientJuiceState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sessionId", s_Instance.sessionId, "int")
end

function Type:ClientMetricsSettings (p_class, p_guid)
	local s_Instance = ClientMetricsSettings(p_class) 
 	local className = "ClientMetricsSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
end

function Type:ClientPlayerInputPlaybackEntityData (p_class, p_guid)
	local s_Instance = ClientPlayerInputPlaybackEntityData(p_class) 
 	local className = "ClientPlayerInputPlaybackEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fileName", s_Instance.fileName, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ClientPlayerInputRecorderEntityData (p_class, p_guid)
	local s_Instance = ClientPlayerInputRecorderEntityData(p_class) 
 	local className = "ClientPlayerInputRecorderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fileNameBase", s_Instance.fileNameBase, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ClientSettings (p_class, p_guid)
	local s_Instance = ClientSettings(p_class) 
 	local className = "ClientSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimScale", s_Instance.aimScale, "float")
	Something(className, s_guid, "asyncClientBulletEntity", s_Instance.asyncClientBulletEntity, "bool")
	Something(className, s_guid, "autoUnspawnDynamicObjects", s_Instance.autoUnspawnDynamicObjects, "bool")
	Something(className, s_guid, "corruptionChance", s_Instance.corruptionChance, "float")
	Something(className, s_guid, "debrisClusterEnabled", s_Instance.debrisClusterEnabled, "bool")
	Something(className, s_guid, "debugMenuOnLThumb", s_Instance.debugMenuOnLThumb, "bool")
	Something(className, s_guid, "dropSpikeChance", s_Instance.dropSpikeChance, "float")
	Something(className, s_guid, "duplicationChance", s_Instance.duplicationChance, "float")
	Something(className, s_guid, "effectsEnabled", s_Instance.effectsEnabled, "bool")
	Something(className, s_guid, "emittersEnabled", s_Instance.emittersEnabled, "bool")
	Something(className, s_guid, "enableRestTool", s_Instance.enableRestTool, "bool")
	Something(className, s_guid, "extractPersistenceInformation", s_Instance.extractPersistenceInformation, "bool")
	Something(className, s_guid, "havokCaptureToFile", s_Instance.havokCaptureToFile, "bool")
	Something(className, s_guid, "havokVDBShowsEffectsWorld", s_Instance.havokVDBShowsEffectsWorld, "bool")
	Something(className, s_guid, "havokVisualDebugger", s_Instance.havokVisualDebugger, "bool")
	Something(className, s_guid, "ignoreClientFireRateMultiplier", s_Instance.ignoreClientFireRateMultiplier, "bool")
	Something(className, s_guid, "incomingFrequency", s_Instance.incomingFrequency, "float")
	Something(className, s_guid, "incomingRate", s_Instance.incomingRate, "uint")
	Something(className, s_guid, "ingameTimeout", s_Instance.ingameTimeout, "float")
	Something(className, s_guid, "inputEnable", s_Instance.inputEnable, "bool")
	Something(className, s_guid, "invertFreeCamera", s_Instance.invertFreeCamera, "bool")
	Something(className, s_guid, "invertPadPcRightStick", s_Instance.invertPadPcRightStick, "bool")
	Something(className, s_guid, "invertPitch", s_Instance.invertPitch, "bool")
	Something(className, s_guid, "invertYaw", s_Instance.invertYaw, "bool")
	Something(className, s_guid, "isInternetSimulationEnabled", s_Instance.isInternetSimulationEnabled, "bool")
	Something(className, s_guid, "isPresenceEnabled", s_Instance.isPresenceEnabled, "bool")
	Something(className, s_guid, "isSpectator", s_Instance.isSpectator, "bool")
	Something(className, s_guid, "lipSyncEnabled", s_Instance.lipSyncEnabled, "bool")
	Something(className, s_guid, "loadedTimeout", s_Instance.loadedTimeout, "float")
	Something(className, s_guid, "loadingTimeout", s_Instance.loadingTimeout, "float")
	Something(className, s_guid, "loadMenu", s_Instance.loadMenu, "bool")
	Something(className, s_guid, "localVehicleSimulationEnabled", s_Instance.localVehicleSimulationEnabled, "bool")
	Something(className, s_guid, "maxDropDuration", s_Instance.maxDropDuration, "float")
	Something(className, s_guid, "maxIncomingLatency", s_Instance.maxIncomingLatency, "float")
	Something(className, s_guid, "maxLatency", s_Instance.maxLatency, "float")
	Something(className, s_guid, "minDropDuration", s_Instance.minDropDuration, "float")
	Something(className, s_guid, "minIncomingLatency", s_Instance.minIncomingLatency, "float")
	Something(className, s_guid, "minLatency", s_Instance.minLatency, "float")
	Something(className, s_guid, "occludersEnabled", s_Instance.occludersEnabled, "bool")
	Something(className, s_guid, "onDamageSpottingEnabled", s_Instance.onDamageSpottingEnabled, "bool")
	Something(className, s_guid, "outgoingRate", s_Instance.outgoingRate, "uint")
	Something(className, s_guid, "overgrowthEnabled", s_Instance.overgrowthEnabled, "bool")
	Something(className, s_guid, "packetDrops", s_Instance.packetDrops, "float")
	Something(className, s_guid, "padRumbleEnabled", s_Instance.padRumbleEnabled, "bool")
	Something(className, s_guid, "pauseGameOnStartUp", s_Instance.pauseGameOnStartUp, "bool")
	Something(className, s_guid, "quitGameOnServerDisconnect", s_Instance.quitGameOnServerDisconnect, "bool")
	Something(className, s_guid, "renderTags", s_Instance.renderTags, "bool")
	Something(className, s_guid, "reorderingChance", s_Instance.reorderingChance, "float")
	Something(className, s_guid, "scheme0FlipY", s_Instance.scheme0FlipY, "bool")
	Something(className, s_guid, "scheme1FlipY", s_Instance.scheme1FlipY, "bool")
	Something(className, s_guid, "scheme2FlipY", s_Instance.scheme2FlipY, "bool")
	Something(className, s_guid, "screenshotFilename", s_Instance.screenshotFilename, "string")
	Something(className, s_guid, "screenshotSuffix", s_Instance.screenshotSuffix, "string")
	Something(className, s_guid, "screenshotToFile", s_Instance.screenshotToFile, "bool")
	Something(className, s_guid, "secondaryServerIp", s_Instance.secondaryServerIp, "string")
	Something(className, s_guid, "serverIp", s_Instance.serverIp, "string")
	Something(className, s_guid, "showBuildId", s_Instance.showBuildId, "bool")
	Something(className, s_guid, "skipFastLevelLoad", s_Instance.skipFastLevelLoad, "bool")
	Something(className, s_guid, "spawnPointIndex", s_Instance.spawnPointIndex, "int")
	Something(className, s_guid, "team", s_Instance.team, "uint")
	Something(className, s_guid, "terrainEnabled", s_Instance.terrainEnabled, "bool")
	Something(className, s_guid, "threadedLoadingEnable", s_Instance.threadedLoadingEnable, "bool")
	Something(className, s_guid, "useGlobalGamePadInput", s_Instance.useGlobalGamePadInput, "bool")
	Something(className, s_guid, "useMouseAndKeyboardSystem", s_Instance.useMouseAndKeyboardSystem, "bool")
	Something(className, s_guid, "vegetationEnabled", s_Instance.vegetationEnabled, "bool")
	Something(className, s_guid, "visualFrameInterpolation", s_Instance.visualFrameInterpolation, "bool")
	Something(className, s_guid, "vsyncEnable", s_Instance.vsyncEnable, "bool")
	Something(className, s_guid, "waterPhysicsEnabled", s_Instance.waterPhysicsEnabled, "bool")
	Something(className, s_guid, "worldRenderEnabled", s_Instance.worldRenderEnabled, "bool")
end

function Type:ClimbingStateData (p_class, p_guid)
	local s_Instance = ClimbingStateData(p_class) 
 	local className = "ClimbingStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attractionVelocity", s_Instance.attractionVelocity, "float")
	Something(className, s_guid, "climbHeightOffset", s_Instance.climbHeightOffset, "float")
	Something(className, s_guid, "climbOffHorizontalDistance", s_Instance.climbOffHorizontalDistance, "float")
	Something(className, s_guid, "climbOffHorizontalTime", s_Instance.climbOffHorizontalTime, "float")
	Something(className, s_guid, "climbOffVerticalDistance", s_Instance.climbOffVerticalDistance, "float")
	Something(className, s_guid, "climbOffVerticalTime", s_Instance.climbOffVerticalTime, "float")
	Something(className, s_guid, "downAngleLimit", s_Instance.downAngleLimit, "float")
	Something(className, s_guid, "dropOffAngle", s_Instance.dropOffAngle, "float")
	Something(className, s_guid, "lateralInputScale", s_Instance.lateralInputScale, "float")
	Something(className, s_guid, "pushAwayVelocity", s_Instance.pushAwayVelocity, "float")
end

function Type:ClimbLadderBinding (p_class, p_guid)
	local s_Instance = ClimbLadderBinding(p_class) 
 	local className = "ClimbLadderBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "climbLadderConnectPhase", s_Instance.climbLadderConnectPhase, "AntRef")
	Something(className, s_guid, "climbLadderPhase", s_Instance.climbLadderPhase, "AntRef")
	Something(className, s_guid, "climbLadderTransitionPhase", s_Instance.climbLadderTransitionPhase, "AntRef")
	Something(className, s_guid, "fallHigh", s_Instance.fallHigh, "AntRef")
	Something(className, s_guid, "ladderTopTransition", s_Instance.ladderTopTransition, "AntRef")
	Something(className, s_guid, "onLadder", s_Instance.onLadder, "AntRef")
end

function Type:ClimbLadderComponentData (p_class, p_guid)
	local s_Instance = ClimbLadderComponentData(p_class) 
 	local className = "ClimbLadderComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "ClimbLadderBinding")
	Something(className, s_guid, "climbPhase", s_Instance.climbPhase, "int")
	Something(className, s_guid, "connectJointDisplacement", s_Instance.connectJointDisplacement, "float")
	Something(className, s_guid, "connectPhase", s_Instance.connectPhase, "int")
end

function Type:ClosestInstancesScopeStrategyData (p_class, p_guid)
	local s_Instance = ClosestInstancesScopeStrategyData(p_class) 
 	local className = "ClosestInstancesScopeStrategyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "count", s_Instance.count, "uint")
end

function Type:CollisionData (p_class, p_guid)
	local s_Instance = CollisionData(p_class) 
 	local className = "CollisionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageAtHorizVelocity", s_Instance.damageAtHorizVelocity, "List<ValueAtX)>")
	Something(className, s_guid, "damageAtVerticalVelocity", s_Instance.damageAtVerticalVelocity, "List<ValueAtX)>")
end

function Type:ColorCorrectionComponentData (p_class, p_guid)
	local s_Instance = ColorCorrectionComponentData(p_class) 
 	local className = "ColorCorrectionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "brightness", s_Instance.brightness, "Vec3")
	Something(className, s_guid, "colorGradingEnable", s_Instance.colorGradingEnable, "bool")
	Something(className, s_guid, "colorGradingTexture", s_Instance.colorGradingTexture, "CtrRef")
	Something(className, s_guid, "contrast", s_Instance.contrast, "Vec3")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "hue", s_Instance.hue, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "saturation", s_Instance.saturation, "Vec3")
end

function Type:ColorReference (p_class, p_guid)
	local s_Instance = ColorReference(p_class) 
 	local className = "ColorReference"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "Vec4")
end

function Type:ColorTintData (p_class, p_guid)
	local s_Instance = ColorTintData(p_class) 
 	local className = "ColorTintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "brightness", s_Instance.brightness, "Vec3")
	Something(className, s_guid, "contrast", s_Instance.contrast, "Vec3")
	Something(className, s_guid, "hue", s_Instance.hue, "float")
	Something(className, s_guid, "saturation", s_Instance.saturation, "Vec3")
end

function Type:ColorTintScopeFilterData (p_class, p_guid)
	local s_Instance = ColorTintScopeFilterData(p_class) 
 	local className = "ColorTintScopeFilterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "colorTintData", s_Instance.colorTintData, "fb.ColorTintData)")
end

function Type:ColorUnlockPartData (p_class, p_guid)
	local s_Instance = ColorUnlockPartData(p_class) 
 	local className = "ColorUnlockPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "colorReference", s_Instance.colorReference, "CtrRef")
end

function Type:CombatActionTriggerEntityData (p_class, p_guid)
	local s_Instance = CombatActionTriggerEntityData(p_class) 
 	local className = "CombatActionTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "timeToTriggerOnNoAction", s_Instance.timeToTriggerOnNoAction, "float")
end

function Type:CombatAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = CombatAreaTriggerEntityData(p_class) 
 	local className = "CombatAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deserterProjectile", s_Instance.deserterProjectile, "CtrRef")
	Something(className, s_guid, "initalSpeed", s_Instance.initalSpeed, "float")
	Something(className, s_guid, "isAiAllowedOutside", s_Instance.isAiAllowedOutside, "bool")
	Something(className, s_guid, "isTeamSpecific", s_Instance.isTeamSpecific, "bool")
	Something(className, s_guid, "maxRandomSpawnHeight", s_Instance.maxRandomSpawnHeight, "float")
	Something(className, s_guid, "spawnHeight", s_Instance.spawnHeight, "float")
	Something(className, s_guid, "strikeRadius", s_Instance.strikeRadius, "float")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
	Something(className, s_guid, "timeToReturn", s_Instance.timeToReturn, "uint")
end

function Type:CombatConstantData (p_class, p_guid)
	local s_Instance = CombatConstantData(p_class) 
 	local className = "CombatConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowCrouchFiringWaterLevel", s_Instance.allowCrouchFiringWaterLevel, "float")
	Something(className, s_guid, "avoidC4Time", s_Instance.avoidC4Time, "float")
	Something(className, s_guid, "changePoseStopDelay", s_Instance.changePoseStopDelay, "float")
	Something(className, s_guid, "closeRangeAccuracyDistance", s_Instance.closeRangeAccuracyDistance, "float")
	Something(className, s_guid, "explosionInterestRange", s_Instance.explosionInterestRange, "float")
	Something(className, s_guid, "explosiveBlastMultiplier", s_Instance.explosiveBlastMultiplier, "float")
	Something(className, s_guid, "explosiveObjectSearchRadius", s_Instance.explosiveObjectSearchRadius, "float")
	Something(className, s_guid, "fightFromPathRadius", s_Instance.fightFromPathRadius, "float")
	Something(className, s_guid, "investigateAroundTargetRadius", s_Instance.investigateAroundTargetRadius, "float")
	Something(className, s_guid, "investigateCoverSearchWidth", s_Instance.investigateCoverSearchWidth, "float")
	Something(className, s_guid, "investigateFreeLookRadius", s_Instance.investigateFreeLookRadius, "float")
	Something(className, s_guid, "investigatePauseTimeMax", s_Instance.investigatePauseTimeMax, "float")
	Something(className, s_guid, "investigatePauseTimeMin", s_Instance.investigatePauseTimeMin, "float")
	Something(className, s_guid, "maxSuppressDistance", s_Instance.maxSuppressDistance, "float")
	Something(className, s_guid, "maxSuppressorsRatio", s_Instance.maxSuppressorsRatio, "float")
	Something(className, s_guid, "meleeCooldown", s_Instance.meleeCooldown, "float")
	Something(className, s_guid, "poseChangeLockoutTime", s_Instance.poseChangeLockoutTime, "float")
	Something(className, s_guid, "poseTransitionFireDelay", s_Instance.poseTransitionFireDelay, "float")
	Something(className, s_guid, "precisionTimeout", s_Instance.precisionTimeout, "float")
	Something(className, s_guid, "smokeLifeTime", s_Instance.smokeLifeTime, "float")
	Something(className, s_guid, "smokeRadius", s_Instance.smokeRadius, "float")
	Something(className, s_guid, "standStillMinTime", s_Instance.standStillMinTime, "float")
	Something(className, s_guid, "stationaryBailDistance", s_Instance.stationaryBailDistance, "float")
	Something(className, s_guid, "suppressMinLOFDistance", s_Instance.suppressMinLOFDistance, "float")
	Something(className, s_guid, "suppressMinLOFOffsetDistance", s_Instance.suppressMinLOFOffsetDistance, "float")
	Something(className, s_guid, "suppressOffsetXz", s_Instance.suppressOffsetXz, "float")
	Something(className, s_guid, "suppressOffsetY", s_Instance.suppressOffsetY, "float")
end

function Type:CompareBoolEntityData (p_class, p_guid)
	local s_Instance = CompareBoolEntityData(p_class) 
 	local className = "CompareBoolEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bool", s_Instance.bool, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "triggerOnPropertyChange", s_Instance.triggerOnPropertyChange, "bool")
end

function Type:CompareEntityData (p_class, p_guid)
	local s_Instance = CompareEntityData(p_class) 
 	local className = "CompareEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "floatIn0", s_Instance.floatIn0, "float")
	Something(className, s_guid, "floatIn1", s_Instance.floatIn1, "float")
	Something(className, s_guid, "intIn0", s_Instance.intIn0, "int")
	Something(className, s_guid, "intIn1", s_Instance.intIn1, "int")
	Something(className, s_guid, "operator", s_Instance.operator, "CompareOp")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:CompareFloatEntityData (p_class, p_guid)
	local s_Instance = CompareFloatEntityData(p_class) 
 	local className = "CompareFloatEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "float")
	Something(className, s_guid, "b", s_Instance.b, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "triggerOnPropertyChange", s_Instance.triggerOnPropertyChange, "bool")
	Something(className, s_guid, "triggerOnStart", s_Instance.triggerOnStart, "bool")
end

function Type:CompareIntEntityData (p_class, p_guid)
	local s_Instance = CompareIntEntityData(p_class) 
 	local className = "CompareIntEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "int")
	Something(className, s_guid, "b", s_Instance.b, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "triggerOnPropertyChange", s_Instance.triggerOnPropertyChange, "bool")
	Something(className, s_guid, "triggerOnStart", s_Instance.triggerOnStart, "bool")
end

function Type:ComparisonLogicNode (p_class, p_guid)
	local s_Instance = ComparisonLogicNode(p_class) 
 	local className = "ComparisonLogicNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSourceInfo", s_Instance.dataSourceInfo, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "skipFractionals", s_Instance.skipFractionals, "bool")
end

function Type:ComponentData (p_class, p_guid)
	local s_Instance = ComponentData(p_class) 
 	local className = "ComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "components", s_Instance.components, "List<CtrRef)>")
	Something(className, s_guid, "excluded", s_Instance.excluded, "bool")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:CompositeMeshEntityData (p_class, p_guid)
	local s_Instance = CompositeMeshEntityData(p_class) 
 	local className = "CompositeMeshEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
end

function Type:CompressorNodeData (p_class, p_guid)
	local s_Instance = CompressorNodeData(p_class) 
 	local className = "CompressorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackTime", s_Instance.attackTime, "AudioGraphNodePort")
	Something(className, s_guid, "channelMode", s_Instance.channelMode, "CompressorChannelMode")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "ratio", s_Instance.ratio, "AudioGraphNodePort")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "AudioGraphNodePort")
	Something(className, s_guid, "threshold", s_Instance.threshold, "AudioGraphNodePort")
end

function Type:CompressorSettings (p_class, p_guid)
	local s_Instance = CompressorSettings(p_class) 
 	local className = "CompressorSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attack", s_Instance.attack, "float")
	Something(className, s_guid, "ratio", s_Instance.ratio, "float")
	Something(className, s_guid, "release", s_Instance.release, "float")
	Something(className, s_guid, "threshold", s_Instance.threshold, "float")
end

function Type:ConditionGroup (p_class, p_guid)
	local s_Instance = ConditionGroup(p_class) 
 	local className = "ConditionGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "condition", s_Instance.condition, "ConditionType")
	Something(className, s_guid, "true", s_Instance.trueValue, "AudioGraphNodePort")
	Something(className, s_guid, "x", s_Instance.x, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
end

function Type:ConditionNodeData (p_class, p_guid)
	local s_Instance = ConditionNodeData(p_class) 
 	local className = "ConditionNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "conditions", s_Instance.conditions, "List<CtrRef)>")
end

function Type:ConeOutputNodeData (p_class, p_guid)
	local s_Instance = ConeOutputNodeData(p_class) 
 	local className = "ConeOutputNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "centerLevel", s_Instance.centerLevel, "AudioGraphNodePort")
	Something(className, s_guid, "direction", s_Instance.direction, "Vec3")
	Something(className, s_guid, "hFDampingAngle", s_Instance.hFDampingAngle, "float")
	Something(className, s_guid, "innerAngle", s_Instance.innerAngle, "AudioGraphNodePort")
	Something(className, s_guid, "lfeLevel", s_Instance.lfeLevel, "AudioGraphNodePort")
	Something(className, s_guid, "outerAngle", s_Instance.outerAngle, "AudioGraphNodePort")
	Something(className, s_guid, "outsideGain", s_Instance.outsideGain, "float")
	Something(className, s_guid, "panPlugin", s_Instance.panPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "panSize", s_Instance.panSize, "float")
	Something(className, s_guid, "positionX", s_Instance.positionX, "AudioGraphNodePort")
	Something(className, s_guid, "positionY", s_Instance.positionY, "AudioGraphNodePort")
	Something(className, s_guid, "positionZ", s_Instance.positionZ, "AudioGraphNodePort")
	Something(className, s_guid, "reverbGain", s_Instance.reverbGain, "float")
	Something(className, s_guid, "reverbSend", s_Instance.reverbSend, "CtrRef")
	Something(className, s_guid, "reverbSendPlugin", s_Instance.reverbSendPlugin, "SoundGraphPluginRef")
end

function Type:ConsoleCommandEntityData (p_class, p_guid)
	local s_Instance = ConsoleCommandEntityData(p_class) 
 	local className = "ConsoleCommandEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "commands", s_Instance.commands, "List<string)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ConsoleCommandTriggerEntityData (p_class, p_guid)
	local s_Instance = ConsoleCommandTriggerEntityData(p_class) 
 	local className = "ConsoleCommandTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "commandName", s_Instance.commandName, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ConstantEvaluatorData (p_class, p_guid)
	local s_Instance = ConstantEvaluatorData(p_class) 
 	local className = "ConstantEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:ConstantForceData (p_class, p_guid)
	local s_Instance = ConstantForceData(p_class) 
 	local className = "ConstantForceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "condition", s_Instance.condition, "ForceCondition")
	Something(className, s_guid, "space", s_Instance.space, "SpaceType")
	Something(className, s_guid, "typeOfForce", s_Instance.typeOfForce, "ForceType")
	Something(className, s_guid, "value", s_Instance.value, "Vec3")
end

function Type:Consumable (p_class, p_guid)
	local s_Instance = Consumable(p_class) 
 	local className = "Consumable"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "group", s_Instance.group, "ConsumableGroup")
	Something(className, s_guid, "instance", s_Instance.instance, "GUID")
end

function Type:ConsumablesLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = ConsumablesLevelDescriptionComponent(p_class) 
 	local className = "ConsumablesLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "consumables", s_Instance.consumables, "List<Consumable)>")
end

function Type:ConsumableTriggerEntityData (p_class, p_guid)
	local s_Instance = ConsumableTriggerEntityData(p_class) 
 	local className = "ConsumableTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "consumableGroup", s_Instance.consumableGroup, "fb.ConsumableGroup)")
	Something(className, s_guid, "persistent", s_Instance.persistent, "bool")
end

function Type:ContinueWeaponAmmoData (p_class, p_guid)
	local s_Instance = ContinueWeaponAmmoData(p_class) 
 	local className = "ContinueWeaponAmmoData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minMags", s_Instance.minMags, "int")
	Something(className, s_guid, "weaponSlot", s_Instance.weaponSlot, "int")
end

function Type:ControllableEntityData (p_class, p_guid)
	local s_Instance = ControllableEntityData(p_class) 
 	local className = "ControllableEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultTeam", s_Instance.defaultTeam, "TeamId")
	Something(className, s_guid, "fakeImmortal", s_Instance.fakeImmortal, "bool")
	Something(className, s_guid, "forceForegroundRendering", s_Instance.forceForegroundRendering, "bool")
	Something(className, s_guid, "immortal", s_Instance.immortal, "bool")
	Something(className, s_guid, "lowHealthThreshold", s_Instance.lowHealthThreshold, "float")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "resetTeamOnLastPlayerExits", s_Instance.resetTeamOnLastPlayerExits, "bool")
	Something(className, s_guid, "usePrediction", s_Instance.usePrediction, "bool")
end

function Type:CoopLobbyEntityData (p_class, p_guid)
	local s_Instance = CoopLobbyEntityData(p_class) 
 	local className = "CoopLobbyEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientConnectionTimeout", s_Instance.clientConnectionTimeout, "float")
	Something(className, s_guid, "isInGame", s_Instance.isInGame, "bool")
end

function Type:CoreSettings (p_class, p_guid)
	local s_Instance = CoreSettings(p_class) 
 	local className = "CoreSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "availableLanguages", s_Instance.availableLanguages, "string")
	Something(className, s_guid, "crashOnFatalErrors", s_Instance.crashOnFatalErrors, "bool")
	Something(className, s_guid, "displayAsserts", s_Instance.displayAsserts, "bool")
	Something(className, s_guid, "gameConfigurationName", s_Instance.gameConfigurationName, "string")
	Something(className, s_guid, "hardwareCpuBias", s_Instance.hardwareCpuBias, "float")
	Something(className, s_guid, "hardwareGpuBias", s_Instance.hardwareGpuBias, "float")
	Something(className, s_guid, "hardwareProfile", s_Instance.hardwareProfile, "fb.HardwareProfile)")
	Something(className, s_guid, "host", s_Instance.host, "string")
	Something(className, s_guid, "hostUser", s_Instance.hostUser, "string")
	Something(className, s_guid, "hostUserDomain", s_Instance.hostUserDomain, "string")
	Something(className, s_guid, "initSeed", s_Instance.initSeed, "string")
	Something(className, s_guid, "jobProcessorCount", s_Instance.jobProcessorCount, "int")
	Something(className, s_guid, "liveEditingEnable", s_Instance.liveEditingEnable, "bool")
	Something(className, s_guid, "logLevel", s_Instance.logLevel, "CoreLogLevel")
	Something(className, s_guid, "maxJobThreadCount", s_Instance.maxJobThreadCount, "int")
	Something(className, s_guid, "profileDirectoryName", s_Instance.profileDirectoryName, "string")
	Something(className, s_guid, "randomSessionId", s_Instance.randomSessionId, "int")
	Something(className, s_guid, "randomTickSeed", s_Instance.randomTickSeed, "int")
	Something(className, s_guid, "randomTimeSeed", s_Instance.randomTimeSeed, "int")
	Something(className, s_guid, "useDiskCaching", s_Instance.useDiskCaching, "bool")
	Something(className, s_guid, "useStorageServer", s_Instance.useStorageServer, "bool")
end

function Type:CountDownEntityData (p_class, p_guid)
	local s_Instance = CountDownEntityData(p_class) 
 	local className = "CountDownEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
	Something(className, s_guid, "startValue", s_Instance.startValue, "int")
end

function Type:CounterHelper (p_class, p_guid)
	local s_Instance = CounterHelper(p_class) 
 	local className = "CounterHelper"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dummy", s_Instance.dummy, "bool")
end

function Type:CounterStatus (p_class, p_guid)
	local s_Instance = CounterStatus(p_class) 
 	local className = "CounterStatus"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "currentValue", s_Instance.currentValue, "float")
	Something(className, s_guid, "originalValue", s_Instance.originalValue, "float")
end

function Type:CoverConstantData (p_class, p_guid)
	local s_Instance = CoverConstantData(p_class) 
 	local className = "CoverConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackPositionEvaluationWeight", s_Instance.attackPositionEvaluationWeight, "float")
	Something(className, s_guid, "continueMeleeFromCoverDistance", s_Instance.continueMeleeFromCoverDistance, "float")
	Something(className, s_guid, "coverFailIgnoreTime", s_Instance.coverFailIgnoreTime, "float")
	Something(className, s_guid, "coverSelectionMethod", s_Instance.coverSelectionMethod, "fb.CoverSelectionMethod)")
	Something(className, s_guid, "crouchCoverModifier", s_Instance.crouchCoverModifier, "float")
	Something(className, s_guid, "crouchHeight", s_Instance.crouchHeight, "float")
	Something(className, s_guid, "dislikePreviousCoverWeight", s_Instance.dislikePreviousCoverWeight, "float")
	Something(className, s_guid, "distanceEvaluationWeight", s_Instance.distanceEvaluationWeight, "float")
	Something(className, s_guid, "enemiesEvaluationWeight", s_Instance.enemiesEvaluationWeight, "float")
	Something(className, s_guid, "extraCoverSize", s_Instance.extraCoverSize, "float")
	Something(className, s_guid, "inCoverDistance", s_Instance.inCoverDistance, "float")
	Something(className, s_guid, "intermediateCoverSlotModifier", s_Instance.intermediateCoverSlotModifier, "float")
	Something(className, s_guid, "maxCoversInMemory", s_Instance.maxCoversInMemory, "int")
	Something(className, s_guid, "maxHeightDifference", s_Instance.maxHeightDifference, "float")
	Something(className, s_guid, "mediumCoverModifier", s_Instance.mediumCoverModifier, "float")
	Something(className, s_guid, "mediumHeight", s_Instance.mediumHeight, "float")
	Something(className, s_guid, "minAttackableEnemyDistance", s_Instance.minAttackableEnemyDistance, "float")
	Something(className, s_guid, "minimumOpenCoverWidth", s_Instance.minimumOpenCoverWidth, "float")
	Something(className, s_guid, "optimalWeaponDistanceEvaluationWeight", s_Instance.optimalWeaponDistanceEvaluationWeight, "float")
	Something(className, s_guid, "proneCoverModifier", s_Instance.proneCoverModifier, "float")
	Something(className, s_guid, "proneHeight", s_Instance.proneHeight, "float")
	Something(className, s_guid, "reevaluationTime", s_Instance.reevaluationTime, "float")
	Something(className, s_guid, "searchRadius", s_Instance.searchRadius, "float")
	Something(className, s_guid, "slotBlockedEdgeDistance", s_Instance.slotBlockedEdgeDistance, "float")
	Something(className, s_guid, "slotEdgeDistance", s_Instance.slotEdgeDistance, "float")
	Something(className, s_guid, "slotSize", s_Instance.slotSize, "float")
	Something(className, s_guid, "slotSpacing", s_Instance.slotSpacing, "float")
	Something(className, s_guid, "standCoverModifier", s_Instance.standCoverModifier, "float")
	Something(className, s_guid, "standHeight", s_Instance.standHeight, "float")
	Something(className, s_guid, "startMeleeFromCoverDistance", s_Instance.startMeleeFromCoverDistance, "float")
	Something(className, s_guid, "switchCoverUrgencyThreshold", s_Instance.switchCoverUrgencyThreshold, "float")
	Something(className, s_guid, "threatRadius", s_Instance.threatRadius, "float")
end

function Type:CoverEntityData (p_class, p_guid)
	local s_Instance = CoverEntityData(p_class) 
 	local className = "CoverEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coverType", s_Instance.coverType, "fb.CoverType)")
	Something(className, s_guid, "leftEdgeBlocked", s_Instance.leftEdgeBlocked, "bool")
	Something(className, s_guid, "rightEdgeBlocked", s_Instance.rightEdgeBlocked, "bool")
	Something(className, s_guid, "slots", s_Instance.slots, "List<CoverSlot)>")
	Something(className, s_guid, "topBlocked", s_Instance.topBlocked, "bool")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:CoverSlot (p_class, p_guid)
	local s_Instance = CoverSlot(p_class) 
 	local className = "CoverSlot"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
end

function Type:CoverWaypointData (p_class, p_guid)
	local s_Instance = CoverWaypointData(p_class) 
 	local className = "CoverWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coverTask", s_Instance.coverTask, "AILocoCoverTaskData")
end

function Type:CreateDestructionVolumeParams (p_class, p_guid)
	local s_Instance = CreateDestructionVolumeParams(p_class) 
 	local className = "CreateDestructionVolumeParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assetName", s_Instance.assetName, "string")
end

function Type:CreateRawFileParams (p_class, p_guid)
	local s_Instance = CreateRawFileParams(p_class) 
 	local className = "CreateRawFileParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assetName", s_Instance.assetName, "string")
	Something(className, s_guid, "createResource", s_Instance.createResource, "bool")
	Something(className, s_guid, "sourceFile", s_Instance.sourceFile, "string")
end

function Type:CriteriaAward (p_class, p_guid)
	local s_Instance = CriteriaAward(p_class) 
 	local className = "CriteriaAward"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "award", s_Instance.award, "CtrRef")
	Something(className, s_guid, "count", s_Instance.count, "uint")
	Something(className, s_guid, "sid", s_Instance.sid, "string")
end

function Type:CriteriaData (p_class, p_guid)
	local s_Instance = CriteriaData(p_class) 
 	local className = "CriteriaData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "completionValue", s_Instance.completionValue, "float")
	Something(className, s_guid, "countEvents", s_Instance.countEvents, "bool")
	Something(className, s_guid, "criteriaType", s_Instance.criteriaType, "fb.CriteriaType)")
	Something(className, s_guid, "descriptionSid", s_Instance.descriptionSid, "string")
	Something(className, s_guid, "gateList", s_Instance.gateList, "CtrRef")
	Something(className, s_guid, "measuring", s_Instance.measuring, "StatEvent")
	Something(className, s_guid, "orParamsX", s_Instance.orParamsX, "List<CtrRef)>")
	Something(className, s_guid, "paramX", s_Instance.paramX, "CtrRef")
	Something(className, s_guid, "paramY", s_Instance.paramY, "CtrRef")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
	Something(className, s_guid, "scaleFactor", s_Instance.scaleFactor, "float")
	Something(className, s_guid, "shouldHide", s_Instance.shouldHide, "bool")
	Something(className, s_guid, "shouldSummarize", s_Instance.shouldSummarize, "bool")
end

function Type:CriteriaGateList (p_class, p_guid)
	local s_Instance = CriteriaGateList(p_class) 
 	local className = "CriteriaGateList"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criteriaGates", s_Instance.criteriaGates, "List<float)>")
end

function Type:CriteriaStarCategoryData (p_class, p_guid)
	local s_Instance = CriteriaStarCategoryData(p_class) 
 	local className = "CriteriaStarCategoryData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criteriaInstances", s_Instance.criteriaInstances, "List<CriteriaStarCategoryInstance)>")
end

function Type:CriteriaStarCategoryInstance (p_class, p_guid)
	local s_Instance = CriteriaStarCategoryInstance(p_class) 
 	local className = "CriteriaStarCategoryInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "paramX", s_Instance.paramX, "CtrRef")
	Something(className, s_guid, "paramY", s_Instance.paramY, "CtrRef")
end

function Type:CriteriaStarData (p_class, p_guid)
	local s_Instance = CriteriaStarData(p_class) 
 	local className = "CriteriaStarData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "starTemplate", s_Instance.starTemplate, "CtrRef")
end

function Type:Crossfader2NodeData (p_class, p_guid)
	local s_Instance = Crossfader2NodeData(p_class) 
 	local className = "Crossfader2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ctrl", s_Instance.ctrl, "AudioGraphNodePort")
	Something(className, s_guid, "ctrlOut1", s_Instance.ctrlOut1, "AudioGraphNodePort")
	Something(className, s_guid, "ctrlOut2", s_Instance.ctrlOut2, "AudioGraphNodePort")
end

function Type:CrossfaderNodeData (p_class, p_guid)
	local s_Instance = CrossfaderNodeData(p_class) 
 	local className = "CrossfaderNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ctrl", s_Instance.ctrl, "AudioGraphNodePort")
	Something(className, s_guid, "in1", s_Instance.in1, "AudioGraphNodePort")
	Something(className, s_guid, "in2", s_Instance.in2, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin1", s_Instance.plugin1, "SoundGraphPluginRef")
	Something(className, s_guid, "plugin2", s_Instance.plugin2, "SoundGraphPluginRef")
end

function Type:CTFScoringHandlerData (p_class, p_guid)
	local s_Instance = CTFScoringHandlerData(p_class) 
 	local className = "CTFScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "captureAssistRadius", s_Instance.captureAssistRadius, "float")
	Something(className, s_guid, "enemySuppressionTimeout", s_Instance.enemySuppressionTimeout, "float")
	Something(className, s_guid, "enemyThreatRadius", s_Instance.enemyThreatRadius, "float")
	Something(className, s_guid, "maxTeams", s_Instance.maxTeams, "int")
	Something(className, s_guid, "pickUpAssistRadius", s_Instance.pickUpAssistRadius, "float")
end

function Type:Curve2D (p_class, p_guid)
	local s_Instance = Curve2D(p_class) 
 	local className = "Curve2D"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "curve", s_Instance.curve, "List<Vec2)>")
end

function Type:CustomizationTable (p_class, p_guid)
	local s_Instance = CustomizationTable(p_class) 
 	local className = "CustomizationTable"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "unlockParts", s_Instance.unlockParts, "List<CtrRef)>")
end

function Type:CustomizationUnlockParts (p_class, p_guid)
	local s_Instance = CustomizationUnlockParts(p_class) 
 	local className = "CustomizationUnlockParts"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "selectableUnlocks", s_Instance.selectableUnlocks, "List<CtrRef)>")
	Something(className, s_guid, "uICategorySid", s_Instance.uICategorySid, "string")
end

function Type:CustomizeBaseEntityData (p_class, p_guid)
	local s_Instance = CustomizeBaseEntityData(p_class) 
 	local className = "CustomizeBaseEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:CustomizeCharacterData (p_class, p_guid)
	local s_Instance = CustomizeCharacterData(p_class) 
 	local className = "CustomizeCharacterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clearVisualState", s_Instance.clearVisualState, "bool")
	Something(className, s_guid, "overrideCriticalHealthThreshold", s_Instance.overrideCriticalHealthThreshold, "float")
	Something(className, s_guid, "overrideMaxHealth", s_Instance.overrideMaxHealth, "float")
	Something(className, s_guid, "restoreToOriginalVisualState", s_Instance.restoreToOriginalVisualState, "bool")
	Something(className, s_guid, "unlocks", s_Instance.unlocks, "List<CtrRef)>")
	Something(className, s_guid, "visualGroups", s_Instance.visualGroups, "List<CustomizeVisual)>")
end

function Type:CustomizeCharacterEntityData (p_class, p_guid)
	local s_Instance = CustomizeCharacterEntityData(p_class) 
 	local className = "CustomizeCharacterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customizeCharacterData", s_Instance.customizeCharacterData, "CtrRef")
end

function Type:CustomizedMaterialData (p_class, p_guid)
	local s_Instance = CustomizedMaterialData(p_class) 
 	local className = "CustomizedMaterialData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "colorParameters", s_Instance.colorParameters, "List<CtrRef)>")
	Something(className, s_guid, "materialNames", s_Instance.materialNames, "List<string)>")
	Something(className, s_guid, "textureParameters", s_Instance.textureParameters, "List<CtrRef)>")
	Something(className, s_guid, "textureSliceParameters", s_Instance.textureSliceParameters, "List<CtrRef)>")
end

function Type:CustomizedMeshMaterialsData (p_class, p_guid)
	local s_Instance = CustomizedMeshMaterialsData(p_class) 
 	local className = "CustomizedMeshMaterialsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "materialNames", s_Instance.materialNames, "List<string)>")
	Something(className, s_guid, "meshBlueprint", s_Instance.meshBlueprint, "CtrRef")
end

function Type:CustomizeSoldierData (p_class, p_guid)
	local s_Instance = CustomizeSoldierData(p_class) 
 	local className = "CustomizeSoldierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeSlot", s_Instance.activeSlot, "WeaponSlot")
	Something(className, s_guid, "deathPickup", s_Instance.deathPickup, "CtrRef")
	Something(className, s_guid, "disableDeathPickup", s_Instance.disableDeathPickup, "bool")
	Something(className, s_guid, "removeAllExistingWeapons", s_Instance.removeAllExistingWeapons, "bool")
	Something(className, s_guid, "weapons", s_Instance.weapons, "List<UnlockWeaponAndSlot)>")
end

function Type:CustomizeSoldierEntityData (p_class, p_guid)
	local s_Instance = CustomizeSoldierEntityData(p_class) 
 	local className = "CustomizeSoldierEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customizeSoldierData", s_Instance.customizeSoldierData, "CtrRef")
end

function Type:CustomizeVisual (p_class, p_guid)
	local s_Instance = CustomizeVisual(p_class) 
 	local className = "CustomizeVisual"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "visual", s_Instance.visual, "List<CtrRef)>")
end

function Type:CustomReportValueData (p_class, p_guid)
	local s_Instance = CustomReportValueData(p_class) 
 	local className = "CustomReportValueData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataType", s_Instance.dataType, "PersistentValueDataType")
	Something(className, s_guid, "kind", s_Instance.kind, "CustomReportValueKind")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:CustomSequenceTrackData (p_class, p_guid)
	local s_Instance = CustomSequenceTrackData(p_class) 
 	local className = "CustomSequenceTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventMap", s_Instance.eventMap, "List<CtrRef)>")
	Something(className, s_guid, "inputLinkMap", s_Instance.inputLinkMap, "List<CtrRef)>")
	Something(className, s_guid, "outputLinkMap", s_Instance.outputLinkMap, "List<CtrRef)>")
	Something(className, s_guid, "sourceAndTargetPropertyMap", s_Instance.sourceAndTargetPropertyMap, "List<CtrRef)>")
	Something(className, s_guid, "sourcePropertyMap", s_Instance.sourcePropertyMap, "List<CtrRef)>")
	Something(className, s_guid, "targetPropertyMap", s_Instance.targetPropertyMap, "List<CtrRef)>")
	Something(className, s_guid, "trackName", s_Instance.trackName, "string")
end

function Type:CustomSequenceTrackEventMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackEventMapping(p_class) 
 	local className = "CustomSequenceTrackEventMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sequenceEventID", s_Instance.sequenceEventID, "int")
	Something(className, s_guid, "trackEventID", s_Instance.trackEventID, "int")
end

function Type:CustomSequenceTrackLinkMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackLinkMapping(p_class) 
 	local className = "CustomSequenceTrackLinkMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sequenceLinkID", s_Instance.sequenceLinkID, "int")
	Something(className, s_guid, "trackLinkID", s_Instance.trackLinkID, "int")
end

function Type:CustomSequenceTrackPropertyMapping (p_class, p_guid)
	local s_Instance = CustomSequenceTrackPropertyMapping(p_class) 
 	local className = "CustomSequenceTrackPropertyMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sequencePropertyID", s_Instance.sequencePropertyID, "int")
	Something(className, s_guid, "trackPropertyID", s_Instance.trackPropertyID, "int")
end

function Type:DacNodeData (p_class, p_guid)
	local s_Instance = DacNodeData(p_class) 
 	local className = "DacNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dacPlugin", s_Instance.dacPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "gainPlugin", s_Instance.gainPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "sampleRate", s_Instance.sampleRate, "AudioGraphNodePort")
	Something(className, s_guid, "speakerCount", s_Instance.speakerCount, "AudioGraphNodePort")
	Something(className, s_guid, "vuPlugin", s_Instance.vuPlugin, "SoundGraphPluginRef")
end

function Type:DamageAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = DamageAreaTriggerEntityData(p_class) 
 	local className = "DamageAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageBangers", s_Instance.damageBangers, "bool")
	Something(className, s_guid, "damageCharacters", s_Instance.damageCharacters, "bool")
	Something(className, s_guid, "damagePerSecond", s_Instance.damagePerSecond, "float")
	Something(className, s_guid, "damageTime", s_Instance.damageTime, "float")
	Something(className, s_guid, "damageVehicles", s_Instance.damageVehicles, "bool")
	Something(className, s_guid, "excludeImmortalCharactersInTeam", s_Instance.excludeImmortalCharactersInTeam, "bool")
	Something(className, s_guid, "excludeShieldedSoldiers", s_Instance.excludeShieldedSoldiers, "bool")
	Something(className, s_guid, "teamOfImmortalCharacters", s_Instance.teamOfImmortalCharacters, "TeamId")
end

function Type:DamageEffectComponentData (p_class, p_guid)
	local s_Instance = DamageEffectComponentData(p_class) 
 	local className = "DamageEffectComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bottomDamage", s_Instance.bottomDamage, "Vec4")
	Something(className, s_guid, "debugDamage", s_Instance.debugDamage, "bool")
	Something(className, s_guid, "endCriticalEffectHealthThreshold", s_Instance.endCriticalEffectHealthThreshold, "float")
	Something(className, s_guid, "fallofTime", s_Instance.fallofTime, "float")
	Something(className, s_guid, "frameWidth", s_Instance.frameWidth, "float")
	Something(className, s_guid, "innerFrameOpacity", s_Instance.innerFrameOpacity, "float")
	Something(className, s_guid, "leftDamage", s_Instance.leftDamage, "Vec4")
	Something(className, s_guid, "maxOpacityDamagePercentage", s_Instance.maxOpacityDamagePercentage, "float")
	Something(className, s_guid, "minDamagePercentageThreshold", s_Instance.minDamagePercentageThreshold, "float")
	Something(className, s_guid, "outerFrameOpacity", s_Instance.outerFrameOpacity, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "rightDamage", s_Instance.rightDamage, "Vec4")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
	Something(className, s_guid, "startCriticalEffectHealthThreshold", s_Instance.startCriticalEffectHealthThreshold, "float")
	Something(className, s_guid, "topDamage", s_Instance.topDamage, "Vec4")
end

function Type:DamageScoringHandlerData (p_class, p_guid)
	local s_Instance = DamageScoringHandlerData(p_class) 
 	local className = "DamageScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageTeamVehicleLimit", s_Instance.damageTeamVehicleLimit, "float")
	Something(className, s_guid, "hotVehicleTimeout", s_Instance.hotVehicleTimeout, "float")
	Something(className, s_guid, "killAssistLimit", s_Instance.killAssistLimit, "float")
	Something(className, s_guid, "killAssistTimeout", s_Instance.killAssistTimeout, "float")
	Something(className, s_guid, "repairVehicleLimit", s_Instance.repairVehicleLimit, "float")
	Something(className, s_guid, "saviorDamageLimit", s_Instance.saviorDamageLimit, "float")
	Something(className, s_guid, "saviorKillTimeout", s_Instance.saviorKillTimeout, "float")
	Something(className, s_guid, "teamDamageLimit", s_Instance.teamDamageLimit, "float")
	Something(className, s_guid, "teamHealingLimit", s_Instance.teamHealingLimit, "float")
	Something(className, s_guid, "vehicleDestroyAssistLimit", s_Instance.vehicleDestroyAssistLimit, "float")
end

function Type:DamageToVehicleEvent (p_class, p_guid)
	local s_Instance = DamageToVehicleEvent(p_class) 
 	local className = "DamageToVehicleEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageAmount", s_Instance.damageAmount, "float")
	Something(className, s_guid, "vehicleName", s_Instance.vehicleName, "string")
	Something(className, s_guid, "weaponName", s_Instance.weaponName, "string")
end

function Type:DataBusData (p_class, p_guid)
	local s_Instance = DataBusData(p_class) 
 	local className = "DataBusData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "linkConnections", s_Instance.linkConnections, "List<LinkConnection)>")
	Something(className, s_guid, "propertyConnections", s_Instance.propertyConnections, "List<PropertyConnection)>")
end

function Type:DataContainerAsset (p_class, p_guid)
	local s_Instance = DataContainerAsset(p_class) 
 	local className = "DataContainerAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "CtrRef")
end

function Type:DataCopSettings (p_class, p_guid)
	local s_Instance = DataCopSettings(p_class) 
 	local className = "DataCopSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<DataCopValueSetting)>")
end

function Type:DataCopValueSetting (p_class, p_guid)
	local s_Instance = DataCopValueSetting(p_class) 
 	local className = "DataCopValueSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataKey", s_Instance.dataKey, "int")
	Something(className, s_guid, "frameSpacing", s_Instance.frameSpacing, "int")
	Something(className, s_guid, "offset", s_Instance.offset, "int")
end

function Type:DataField (p_class, p_guid)
	local s_Instance = DataField(p_class) 
 	local className = "DataField"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accessType", s_Instance.accessType, "FieldAccessType")
	Something(className, s_guid, "id", s_Instance.id, "int")
	Something(className, s_guid, "value", s_Instance.value, "string")
	Something(className, s_guid, "valueRef", s_Instance.valueRef, "CtrRef")
end

function Type:DataGetNode (p_class, p_guid)
	local s_Instance = DataGetNode(p_class) 
 	local className = "DataGetNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:DataIncrementNode (p_class, p_guid)
	local s_Instance = DataIncrementNode(p_class) 
 	local className = "DataIncrementNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "incrementSize", s_Instance.incrementSize, "float")
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:DataSetNode (p_class, p_guid)
	local s_Instance = DataSetNode(p_class) 
 	local className = "DataSetNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "forceUpdate", s_Instance.forceUpdate, "bool")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
	Something(className, s_guid, "param", s_Instance.param, "string")
	Something(className, s_guid, "setToEmptyString", s_Instance.setToEmptyString, "bool")
end

function Type:DataSource (p_class, p_guid)
	local s_Instance = DataSource(p_class) 
 	local className = "DataSource"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:DataStepNode (p_class, p_guid)
	local s_Instance = DataStepNode(p_class) 
 	local className = "DataStepNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "currentStepDataSource", s_Instance.currentStepDataSource, "UIDataSourceInfo")
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
	Something(className, s_guid, "steps", s_Instance.steps, "List<float)>")
end

function Type:DataToggleNode (p_class, p_guid)
	local s_Instance = DataToggleNode(p_class) 
 	local className = "DataToggleNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:DataVisualizerValue (p_class, p_guid)
	local s_Instance = DataVisualizerValue(p_class) 
 	local className = "DataVisualizerValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:DeathAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = DeathAreaTriggerEntityData(p_class) 
 	local className = "DeathAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damage", s_Instance.damage, "float")
	Something(className, s_guid, "timeToReturn", s_Instance.timeToReturn, "float")
end

function Type:DeathEvent (p_class, p_guid)
	local s_Instance = DeathEvent(p_class) 
 	local className = "DeathEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "killerId", s_Instance.killerId, "ulong")
	Something(className, s_guid, "killerPosition", s_Instance.killerPosition, "Vec3")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "time", s_Instance.time, "float")
	Something(className, s_guid, "weapon", s_Instance.weapon, "string")
end

function Type:DebrisClusterData (p_class, p_guid)
	local s_Instance = DebrisClusterData(p_class) 
 	local className = "DebrisClusterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activateOnSpawn", s_Instance.activateOnSpawn, "bool")
	Something(className, s_guid, "activationEffect", s_Instance.activationEffect, "CtrRef")
	Something(className, s_guid, "activationPushForceMul", s_Instance.activationPushForceMul, "float")
	Something(className, s_guid, "clientSideOnly", s_Instance.clientSideOnly, "bool")
	Something(className, s_guid, "clusterLifetime", s_Instance.clusterLifetime, "float")
	Something(className, s_guid, "compositePartCount", s_Instance.compositePartCount, "uint")
	Something(className, s_guid, "deactivatePartsOnSleep", s_Instance.deactivatePartsOnSleep, "bool")
	Something(className, s_guid, "effect", s_Instance.effect, "CtrRef")
	Something(className, s_guid, "explosion", s_Instance.explosion, "CtrRef")
	Something(className, s_guid, "inEffectWorldOnly", s_Instance.inEffectWorldOnly, "bool")
	Something(className, s_guid, "initRotationRndMul", s_Instance.initRotationRndMul, "Vec3")
	Something(className, s_guid, "killPartsOnCollision", s_Instance.killPartsOnCollision, "bool")
	Something(className, s_guid, "maxActivePartsCount", s_Instance.maxActivePartsCount, "uint")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "noCollision", s_Instance.noCollision, "bool")
	Something(className, s_guid, "onPartCollisionEnable", s_Instance.onPartCollisionEnable, "bool")
	Something(className, s_guid, "onPartCollisionSpeedThreshold", s_Instance.onPartCollisionSpeedThreshold, "float")
	Something(className, s_guid, "partHierarchy", s_Instance.partHierarchy, "List<DebrisClusterPartInfoData)>")
	Something(className, s_guid, "partialDestruction", s_Instance.partialDestruction, "bool")
	Something(className, s_guid, "physicsData", s_Instance.physicsData, "CtrRef")
	Something(className, s_guid, "projectileForceTransferMul", s_Instance.projectileForceTransferMul, "float")
	Something(className, s_guid, "pushVelocityMul", s_Instance.pushVelocityMul, "Vec3")
	Something(className, s_guid, "pushVelocityRndMul", s_Instance.pushVelocityRndMul, "Vec3")
	Something(className, s_guid, "spawnExplosionOnFirstImpactOnly", s_Instance.spawnExplosionOnFirstImpactOnly, "bool")
end

function Type:DebrisClusterPartInfoData (p_class, p_guid)
	local s_Instance = DebrisClusterPartInfoData(p_class) 
 	local className = "DebrisClusterPartInfoData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularVelocity", s_Instance.angularVelocity, "Vec3")
	Something(className, s_guid, "inEffectWorldOnly", s_Instance.inEffectWorldOnly, "bool")
	Something(className, s_guid, "linearVelocity", s_Instance.linearVelocity, "Vec3")
	Something(className, s_guid, "numberOfChildren", s_Instance.numberOfChildren, "int")
	Something(className, s_guid, "partIndex", s_Instance.partIndex, "int")
	Something(className, s_guid, "splitSpeedThreshold", s_Instance.splitSpeedThreshold, "float")
	Something(className, s_guid, "syncContinous", s_Instance.syncContinous, "bool")
	Something(className, s_guid, "syncRestPosition", s_Instance.syncRestPosition, "bool")
end

function Type:DebrisHavokInfo (p_class, p_guid)
	local s_Instance = DebrisHavokInfo(p_class) 
 	local className = "DebrisHavokInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "havokAsset", s_Instance.havokAsset, "CtrRef")
	Something(className, s_guid, "reserveCount", s_Instance.reserveCount, "int")
end

function Type:DebrisSystemAsset (p_class, p_guid)
	local s_Instance = DebrisSystemAsset(p_class) 
 	local className = "DebrisSystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "havokMeshCount", s_Instance.havokMeshCount, "int")
	Something(className, s_guid, "havokMeshes", s_Instance.havokMeshes, "List<DebrisHavokInfo)>")
end

function Type:DebrisSystemMetrics (p_class, p_guid)
	local s_Instance = DebrisSystemMetrics(p_class) 
 	local className = "DebrisSystemMetrics"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "havokParticleCount", s_Instance.havokParticleCount, "int")
	Something(className, s_guid, "havokParticlePartCount", s_Instance.havokParticlePartCount, "int")
end

function Type:DebrisSystemSettings (p_class, p_guid)
	local s_Instance = DebrisSystemSettings(p_class) 
 	local className = "DebrisSystemSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawStats", s_Instance.drawStats, "uint")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "enableJobs", s_Instance.enableJobs, "bool")
	Something(className, s_guid, "meshBatchCountLimit", s_Instance.meshBatchCountLimit, "uint")
	Something(className, s_guid, "meshCullingDistance", s_Instance.meshCullingDistance, "float")
	Something(className, s_guid, "meshDrawBoundingBoxes", s_Instance.meshDrawBoundingBoxes, "bool")
	Something(className, s_guid, "meshDrawCountLimit", s_Instance.meshDrawCountLimit, "uint")
	Something(className, s_guid, "meshDrawCullStats", s_Instance.meshDrawCullStats, "bool")
	Something(className, s_guid, "meshDrawTransforms", s_Instance.meshDrawTransforms, "bool")
	Something(className, s_guid, "meshHavokRenderingEnable", s_Instance.meshHavokRenderingEnable, "bool")
	Something(className, s_guid, "meshRenderingEnable", s_Instance.meshRenderingEnable, "bool")
	Something(className, s_guid, "meshShadowEnable", s_Instance.meshShadowEnable, "bool")
	Something(className, s_guid, "meshStreamingPriorityMultiplier", s_Instance.meshStreamingPriorityMultiplier, "float")
	Something(className, s_guid, "meshViewCullingEnable", s_Instance.meshViewCullingEnable, "bool")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
end

function Type:DebugComponentData (p_class, p_guid)
	local s_Instance = DebugComponentData(p_class) 
 	local className = "DebugComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugTexture", s_Instance.debugTexture, "CtrRef")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "fullscreen", s_Instance.fullscreen, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:DebugConstantData (p_class, p_guid)
	local s_Instance = DebugConstantData(p_class) 
 	local className = "DebugConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "botDebugDistance", s_Instance.botDebugDistance, "float")
	Something(className, s_guid, "graphDataBuffer", s_Instance.graphDataBuffer, "uint")
	Something(className, s_guid, "inaccuracyEnabled", s_Instance.inaccuracyEnabled, "bool")
	Something(className, s_guid, "inViewModeFOV", s_Instance.inViewModeFOV, "float")
	Something(className, s_guid, "minDecisionTime", s_Instance.minDecisionTime, "float")
end

function Type:DebugEventInput (p_class, p_guid)
	local s_Instance = DebugEventInput(p_class) 
 	local className = "DebugEventInput"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "e", s_Instance.e, "AudioGraphNodePort")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "requireTriggeredAndSet", s_Instance.requireTriggeredAndSet, "bool")
end

function Type:DebugMenuItemEntityData (p_class, p_guid)
	local s_Instance = DebugMenuItemEntityData(p_class) 
 	local className = "DebugMenuItemEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "itemType", s_Instance.itemType, "DebugMenuItemType")
	Something(className, s_guid, "text", s_Instance.text, "string")
end

function Type:DebugMenuSubMenuEntityData (p_class, p_guid)
	local s_Instance = DebugMenuSubMenuEntityData(p_class) 
 	local className = "DebugMenuSubMenuEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "text", s_Instance.text, "string")
end

function Type:DebugRenderSettings (p_class, p_guid)
	local s_Instance = DebugRenderSettings(p_class) 
 	local className = "DebugRenderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawStatsEnable", s_Instance.drawStatsEnable, "bool")
	Something(className, s_guid, "dxLine2dAntialiasingEnable", s_Instance.dxLine2dAntialiasingEnable, "bool")
	Something(className, s_guid, "dxLine3dAntialiasingEnable", s_Instance.dxLine3dAntialiasingEnable, "bool")
	Something(className, s_guid, "dxMaxVertexCount", s_Instance.dxMaxVertexCount, "uint")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "processJobCount", s_Instance.processJobCount, "int")
	Something(className, s_guid, "ps3SpuEnable", s_Instance.ps3SpuEnable, "bool")
	Something(className, s_guid, "ps3SpuFrameBufferSize", s_Instance.ps3SpuFrameBufferSize, "uint")
	Something(className, s_guid, "textQueueLocationTop", s_Instance.textQueueLocationTop, "bool")
	Something(className, s_guid, "textQueueMaxLineCount", s_Instance.textQueueMaxLineCount, "uint")
	Something(className, s_guid, "textQueueTimeVisible", s_Instance.textQueueTimeVisible, "float")
	Something(className, s_guid, "textViewDistance", s_Instance.textViewDistance, "float")
end

function Type:DebugSurveyEvent (p_class, p_guid)
	local s_Instance = DebugSurveyEvent(p_class) 
 	local className = "DebugSurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "playerName", s_Instance.playerName, "string")
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
end

function Type:DebugTextEntityData (p_class, p_guid)
	local s_Instance = DebugTextEntityData(p_class) 
 	local className = "DebugTextEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "centered", s_Instance.centered, "bool")
	Something(className, s_guid, "debugText", s_Instance.debugText, "string")
	Something(className, s_guid, "depthTest", s_Instance.depthTest, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
	Something(className, s_guid, "scaleWithDistance", s_Instance.scaleWithDistance, "bool")
	Something(className, s_guid, "textColor", s_Instance.textColor, "Vec3")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:DebugValueInput (p_class, p_guid)
	local s_Instance = DebugValueInput(p_class) 
 	local className = "DebugValueInput"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "renderType", s_Instance.renderType, "DebugRenderType")
	Something(className, s_guid, "v", s_Instance.v, "AudioGraphNodePort")
end

function Type:DecalAtlasTile (p_class, p_guid)
	local s_Instance = DecalAtlasTile(p_class) 
 	local className = "DecalAtlasTile"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flipX", s_Instance.flipX, "bool")
	Something(className, s_guid, "flipY", s_Instance.flipY, "bool")
	Something(className, s_guid, "tileCountX", s_Instance.tileCountX, "float")
	Something(className, s_guid, "tileCountY", s_Instance.tileCountY, "float")
	Something(className, s_guid, "tileIndexX", s_Instance.tileIndexX, "float")
	Something(className, s_guid, "tileIndexY", s_Instance.tileIndexY, "float")
end

function Type:DecalEntityData (p_class, p_guid)
	local s_Instance = DecalEntityData(p_class) 
 	local className = "DecalEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasTile", s_Instance.atlasTile, "DecalAtlasTile")
	Something(className, s_guid, "materialIndex", s_Instance.materialIndex, "sbyte")
	Something(className, s_guid, "projected", s_Instance.projected, "bool")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
	Something(className, s_guid, "sortingPriority", s_Instance.sortingPriority, "sbyte")
end

function Type:DecalSettings (p_class, p_guid)
	local s_Instance = DecalSettings(p_class) 
 	local className = "DecalSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugMemUsageEnable", s_Instance.debugMemUsageEnable, "bool")
	Something(className, s_guid, "debugWarningsEnable", s_Instance.debugWarningsEnable, "bool")
	Something(className, s_guid, "drawEnable", s_Instance.drawEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "nvidiaStreamOutputWorkaroundEnable", s_Instance.nvidiaStreamOutputWorkaroundEnable, "bool")
	Something(className, s_guid, "ringBufferMaxVertexCount", s_Instance.ringBufferMaxVertexCount, "uint")
	Something(className, s_guid, "staticBufferMaxVertexCount", s_Instance.staticBufferMaxVertexCount, "uint")
	Something(className, s_guid, "systemEnable", s_Instance.systemEnable, "bool")
	Something(className, s_guid, "systemEnable2", s_Instance.systemEnable2, "bool")
end

function Type:DecalTemplateData (p_class, p_guid)
	local s_Instance = DecalTemplateData(p_class) 
 	local className = "DecalTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasTile", s_Instance.atlasTile, "DecalAtlasTile")
	Something(className, s_guid, "clipAngle", s_Instance.clipAngle, "float")
	Something(className, s_guid, "materialIndex", s_Instance.materialIndex, "sbyte")
	Something(className, s_guid, "meshUVIndex", s_Instance.meshUVIndex, "int")
	Something(className, s_guid, "normalOffset", s_Instance.normalOffset, "float")
	Something(className, s_guid, "projected", s_Instance.projected, "bool")
	Something(className, s_guid, "projectMultiple", s_Instance.projectMultiple, "bool")
	Something(className, s_guid, "proximityRadiusFactor", s_Instance.proximityRadiusFactor, "float")
	Something(className, s_guid, "randomRotation", s_Instance.randomRotation, "float")
	Something(className, s_guid, "randomSize", s_Instance.randomSize, "float")
	Something(className, s_guid, "rotation", s_Instance.rotation, "float")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
	Something(className, s_guid, "size", s_Instance.size, "float")
	Something(className, s_guid, "sortingPriority", s_Instance.sortingPriority, "sbyte")
end

function Type:DecisionConstantData (p_class, p_guid)
	local s_Instance = DecisionConstantData(p_class) 
 	local className = "DecisionConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowEmergencyGoalInterrupt", s_Instance.allowEmergencyGoalInterrupt, "bool")
	Something(className, s_guid, "allowUninterruptibleBehaviours", s_Instance.allowUninterruptibleBehaviours, "bool")
	Something(className, s_guid, "newEnemyDecideMaxDistance", s_Instance.newEnemyDecideMaxDistance, "float")
end

function Type:DefaultSelectionItem (p_class, p_guid)
	local s_Instance = DefaultSelectionItem(p_class) 
 	local className = "DefaultSelectionItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultSelectionIndex", s_Instance.defaultSelectionIndex, "int")
	Something(className, s_guid, "defaultSelectionQuery", s_Instance.defaultSelectionQuery, "UIDataSourceInfo")
end

function Type:DefibrillatorWeaponData (p_class, p_guid)
	local s_Instance = DefibrillatorWeaponData(p_class) 
 	local className = "DefibrillatorWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackTime", s_Instance.attackTime, "float")
	Something(className, s_guid, "reviveTime", s_Instance.reviveTime, "float")
end

function Type:DelayEntityData (p_class, p_guid)
	local s_Instance = DelayEntityData(p_class) 
 	local className = "DelayEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "delay", s_Instance.delay, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "removeDuplicateEvents", s_Instance.removeDuplicateEvents, "bool")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
end

function Type:DelayNodeData (p_class, p_guid)
	local s_Instance = DelayNodeData(p_class) 
 	local className = "DelayNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delayTime", s_Instance.delayTime, "AudioGraphNodePort")
	Something(className, s_guid, "feedback", s_Instance.feedback, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "maxDelayTime", s_Instance.maxDelayTime, "float")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:DelayTriggerEntityData (p_class, p_guid)
	local s_Instance = DelayTriggerEntityData(p_class) 
 	local className = "DelayTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoTriggerEvent", s_Instance.autoTriggerEvent, "bool")
end

function Type:DeltaGroup (p_class, p_guid)
	local s_Instance = DeltaGroup(p_class) 
 	local className = "DeltaGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delta", s_Instance.delta, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
end

function Type:DeltaNodeData (p_class, p_guid)
	local s_Instance = DeltaNodeData(p_class) 
 	local className = "DeltaNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deltas", s_Instance.deltas, "List<CtrRef)>")
end

function Type:DemoSettings (p_class, p_guid)
	local s_Instance = DemoSettings(p_class) 
 	local className = "DemoSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowOverwrite", s_Instance.allowOverwrite, "bool")
	Something(className, s_guid, "changePlayerInterval", s_Instance.changePlayerInterval, "uint")
	Something(className, s_guid, "forcedDeltaTickCount", s_Instance.forcedDeltaTickCount, "uint")
	Something(className, s_guid, "lockToPlayerName", s_Instance.lockToPlayerName, "string")
	Something(className, s_guid, "lockToRandomPlayer", s_Instance.lockToRandomPlayer, "bool")
	Something(className, s_guid, "logPerformance", s_Instance.logPerformance, "bool")
	Something(className, s_guid, "loopingDemo", s_Instance.loopingDemo, "bool")
	Something(className, s_guid, "pauseOnStartup", s_Instance.pauseOnStartup, "bool")
	Something(className, s_guid, "playbackDemoFileName", s_Instance.playbackDemoFileName, "string")
	Something(className, s_guid, "recordDemoFileName", s_Instance.recordDemoFileName, "string")
	Something(className, s_guid, "shutdownOnDemoComplete", s_Instance.shutdownOnDemoComplete, "bool")
	Something(className, s_guid, "startProfilingOnFrame", s_Instance.startProfilingOnFrame, "uint")
	Something(className, s_guid, "stopProfilingOnFrame", s_Instance.stopProfilingOnFrame, "uint")
	Something(className, s_guid, "suppressDebugLog", s_Instance.suppressDebugLog, "bool")
	Something(className, s_guid, "takeScreenshotOnFrame", s_Instance.takeScreenshotOnFrame, "uint")
	Something(className, s_guid, "timeDemo", s_Instance.timeDemo, "string")
end

function Type:DeMuxNodeData (p_class, p_guid)
	local s_Instance = DeMuxNodeData(p_class) 
 	local className = "DeMuxNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
	Something(className, s_guid, "wrapValue", s_Instance.wrapValue, "bool")
end

function Type:DeMuxOutput (p_class, p_guid)
	local s_Instance = DeMuxOutput(p_class) 
 	local className = "DeMuxOutput"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
end

function Type:DestroyLevelCommandEntityData (p_class, p_guid)
	local s_Instance = DestroyLevelCommandEntityData(p_class) 
 	local className = "DestroyLevelCommandEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "destroyDelay", s_Instance.destroyDelay, "uint")
	Something(className, s_guid, "instanceCountDestroyedPerFrame", s_Instance.instanceCountDestroyedPerFrame, "uint")
end

function Type:DestructionCommandEntityData (p_class, p_guid)
	local s_Instance = DestructionCommandEntityData(p_class) 
 	local className = "DestructionCommandEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "instanceCountDestroyedPerFrame", s_Instance.instanceCountDestroyedPerFrame, "uint")
	Something(className, s_guid, "instanceCountDestroyedPerType", s_Instance.instanceCountDestroyedPerType, "uint")
end

function Type:DestructionControllerComponentData (p_class, p_guid)
	local s_Instance = DestructionControllerComponentData(p_class) 
 	local className = "DestructionControllerComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attachToNearbyObjects", s_Instance.attachToNearbyObjects, "bool")
	Something(className, s_guid, "debrisClusters", s_Instance.debrisClusters, "List<CtrRef)>")
end

function Type:DestructionMaskVolumeEntityData (p_class, p_guid)
	local s_Instance = DestructionMaskVolumeEntityData(p_class) 
 	local className = "DestructionMaskVolumeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dustAccumulationCurve", s_Instance.dustAccumulationCurve, "Vec4")
	Something(className, s_guid, "dustAccumulationLifeTime", s_Instance.dustAccumulationLifeTime, "float")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "shader", s_Instance.shader, "SurfaceShaderInstanceDataStruct")
	Something(className, s_guid, "shaderUserMasks", s_Instance.shaderUserMasks, "Vec4")
end

function Type:DestructionPartComponentData (p_class, p_guid)
	local s_Instance = DestructionPartComponentData(p_class) 
 	local className = "DestructionPartComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "connectivityType", s_Instance.connectivityType, "DestructionConnectivityType")
	Something(className, s_guid, "fixed", s_Instance.fixed, "bool")
	Something(className, s_guid, "fragile", s_Instance.fragile, "bool")
	Something(className, s_guid, "objects", s_Instance.objects, "List<CtrRef)>")
	Something(className, s_guid, "partIndex", s_Instance.partIndex, "uint")
end

function Type:DestructionVolumeAsset (p_class, p_guid)
	local s_Instance = DestructionVolumeAsset(p_class) 
 	local className = "DestructionVolumeAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasTextureScale", s_Instance.atlasTextureScale, "float")
	Something(className, s_guid, "diffuseAtlas", s_Instance.diffuseAtlas, "CtrRef")
	Something(className, s_guid, "normalmapAtlas", s_Instance.normalmapAtlas, "CtrRef")
end

function Type:DestructionVolumeAtlasTextureData (p_class, p_guid)
	local s_Instance = DestructionVolumeAtlasTextureData(p_class) 
 	local className = "DestructionVolumeAtlasTextureData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasAlphaInfluence", s_Instance.atlasAlphaInfluence, "float")
	Something(className, s_guid, "maskEdgeThickness", s_Instance.maskEdgeThickness, "float")
end

function Type:DestructionVolumeComponentData (p_class, p_guid)
	local s_Instance = DestructionVolumeComponentData(p_class) 
 	local className = "DestructionVolumeComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "destructionVolumeData", s_Instance.destructionVolumeData, "CtrRef")
end

function Type:DestructionVolumeData (p_class, p_guid)
	local s_Instance = DestructionVolumeData(p_class) 
 	local className = "DestructionVolumeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
	Something(className, s_guid, "boundingBox", s_Instance.boundingBox, "AxisAlignedBox")
	Something(className, s_guid, "impacts", s_Instance.impacts, "List<Vec4)>")
	Something(className, s_guid, "partToImpactIndices", s_Instance.partToImpactIndices, "List<uint)>")
end

function Type:DestructionVolumeProjectionData (p_class, p_guid)
	local s_Instance = DestructionVolumeProjectionData(p_class) 
 	local className = "DestructionVolumeProjectionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "normal", s_Instance.normal, "Vec3")
	Something(className, s_guid, "tangentAngle", s_Instance.tangentAngle, "float")
end

function Type:DetonatedWeaponData (p_class, p_guid)
	local s_Instance = DetonatedWeaponData(p_class) 
 	local className = "DetonatedWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lockingController", s_Instance.lockingController, "CtrRef")
	Something(className, s_guid, "range", s_Instance.range, "float")
end

function Type:DialogNode (p_class, p_guid)
	local s_Instance = DialogNode(p_class) 
 	local className = "DialogNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buttons", s_Instance.buttons, "List<UIPopupButton)>")
	Something(className, s_guid, "dialogText", s_Instance.dialogText, "string")
	Something(className, s_guid, "dialogTitle", s_Instance.dialogTitle, "string")
end

function Type:DialogSamplerNodeData (p_class, p_guid)
	local s_Instance = DialogSamplerNodeData(p_class) 
 	local className = "DialogSamplerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "continue", s_Instance.continue, "AudioGraphNodePort")
	Something(className, s_guid, "finished", s_Instance.finished, "AudioGraphNodePort")
	Something(className, s_guid, "gainPlugin", s_Instance.gainPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "output", s_Instance.output, "AudioGraphNodePort")
	Something(className, s_guid, "pausePlugin", s_Instance.pausePlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "pitch", s_Instance.pitch, "AudioGraphNodePort")
	Something(className, s_guid, "resamplePlugin", s_Instance.resamplePlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "sndPlayerPlugin", s_Instance.sndPlayerPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "tailLength", s_Instance.tailLength, "float")
	Something(className, s_guid, "triggered", s_Instance.triggered, "AudioGraphNodePort")
end

function Type:DifficultyData (p_class, p_guid)
	local s_Instance = DifficultyData(p_class) 
 	local className = "DifficultyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "adrenalineKillLimit", s_Instance.adrenalineKillLimit, "int")
	Something(className, s_guid, "aiBulletDamageHumanCooldown", s_Instance.aiBulletDamageHumanCooldown, "float")
	Something(className, s_guid, "aIData", s_Instance.aIData, "CtrRef")
	Something(className, s_guid, "criticalFakeImmortalModifier", s_Instance.criticalFakeImmortalModifier, "float")
	Something(className, s_guid, "criticalHealthJesusModeTimeModifier", s_Instance.criticalHealthJesusModeTimeModifier, "float")
	Something(className, s_guid, "difficulty", s_Instance.difficulty, "fb.Difficulty)")
	Something(className, s_guid, "enemiesHealthModifier", s_Instance.enemiesHealthModifier, "float")
	Something(className, s_guid, "friendlyDamageModifier", s_Instance.friendlyDamageModifier, "float")
	Something(className, s_guid, "friendsHealthModifier", s_Instance.friendsHealthModifier, "float")
	Something(className, s_guid, "gameType", s_Instance.gameType, "PersistenceGameType")
	Something(className, s_guid, "humanHealthModifier", s_Instance.humanHealthModifier, "float")
	Something(className, s_guid, "humanInCriticalHealth", s_Instance.humanInCriticalHealth, "float")
	Something(className, s_guid, "humanInCriticalHealthDamageModifier", s_Instance.humanInCriticalHealthDamageModifier, "float")
	Something(className, s_guid, "humanRegenerationRateModifier", s_Instance.humanRegenerationRateModifier, "float")
	Something(className, s_guid, "interactiveManDownDamageModifier", s_Instance.interactiveManDownDamageModifier, "float")
	Something(className, s_guid, "interactiveManDownReviveTime", s_Instance.interactiveManDownReviveTime, "float")
	Something(className, s_guid, "interactiveManDownTimeMultiplier", s_Instance.interactiveManDownTimeMultiplier, "float")
	Something(className, s_guid, "snapBoxModifier", s_Instance.snapBoxModifier, "Vec3")
	Something(className, s_guid, "stickyBoxModifier", s_Instance.stickyBoxModifier, "Vec3")
	Something(className, s_guid, "suckZoomModifier", s_Instance.suckZoomModifier, "float")
	Something(className, s_guid, "usePitchZoomSnap", s_Instance.usePitchZoomSnap, "bool")
	Something(className, s_guid, "vehicleDamageModifier", s_Instance.vehicleDamageModifier, "float")
end

function Type:DifficultyDatas (p_class, p_guid)
	local s_Instance = DifficultyDatas(p_class) 
 	local className = "DifficultyDatas"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "difficulties", s_Instance.difficulties, "List<CtrRef)>")
end

function Type:DifficultyIndexEntityData (p_class, p_guid)
	local s_Instance = DifficultyIndexEntityData(p_class) 
 	local className = "DifficultyIndexEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:DirectWeaponSwitchingMapData (p_class, p_guid)
	local s_Instance = DirectWeaponSwitchingMapData(p_class) 
 	local className = "DirectWeaponSwitchingMapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "action", s_Instance.action, "EntryInputActionEnum")
	Something(className, s_guid, "fireAndSwitchBackToPrev", s_Instance.fireAndSwitchBackToPrev, "bool")
	Something(className, s_guid, "preventMeleeRepeatTime", s_Instance.preventMeleeRepeatTime, "float")
	Something(className, s_guid, "switchBackToPrevMaxTimePressed", s_Instance.switchBackToPrevMaxTimePressed, "float")
	Something(className, s_guid, "toWeapon", s_Instance.toWeapon, "WeaponSwitchingEnum")
	Something(className, s_guid, "useQuickSwitch", s_Instance.useQuickSwitch, "bool")
end

function Type:DistortionClipNodeData (p_class, p_guid)
	local s_Instance = DistortionClipNodeData(p_class) 
 	local className = "DistortionClipNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clipLevel", s_Instance.clipLevel, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:DivisibleLoopPlayerNodeData (p_class, p_guid)
	local s_Instance = DivisibleLoopPlayerNodeData(p_class) 
 	local className = "DivisibleLoopPlayerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "crossFadeLength", s_Instance.crossFadeLength, "float")
	Something(className, s_guid, "externalWave", s_Instance.externalWave, "AudioGraphNodePort")
	Something(className, s_guid, "freezeSegment", s_Instance.freezeSegment, "AudioGraphNodePort")
	Something(className, s_guid, "output", s_Instance.output, "AudioGraphNodePort")
	Something(className, s_guid, "plugins", s_Instance.plugins, "List<DivisibleLoopPlayerPlugins)>")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "startAtRandomPosition", s_Instance.startAtRandomPosition, "bool")
	Something(className, s_guid, "stop", s_Instance.stop, "AudioGraphNodePort")
	Something(className, s_guid, "wave", s_Instance.wave, "CtrRef")
end

function Type:DivisibleLoopPlayerPlugins (p_class, p_guid)
	local s_Instance = DivisibleLoopPlayerPlugins(p_class) 
 	local className = "DivisibleLoopPlayerPlugins"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gain", s_Instance.gain, "SoundGraphPluginRef")
	Something(className, s_guid, "gainFader", s_Instance.gainFader, "SoundGraphPluginRef")
	Something(className, s_guid, "pause", s_Instance.pause, "SoundGraphPluginRef")
	Something(className, s_guid, "sndPlayer", s_Instance.sndPlayer, "SoundGraphPluginRef")
end

function Type:DofComponentData (p_class, p_guid)
	local s_Instance = DofComponentData(p_class) 
 	local className = "DofComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurAdd", s_Instance.blurAdd, "float")
	Something(className, s_guid, "blurFilter", s_Instance.blurFilter, "fb.BlurFilter)")
	Something(className, s_guid, "blurFilterDeviation", s_Instance.blurFilterDeviation, "float")
	Something(className, s_guid, "diffusionDofAperture", s_Instance.diffusionDofAperture, "float")
	Something(className, s_guid, "diffusionDofEnable", s_Instance.diffusionDofEnable, "bool")
	Something(className, s_guid, "diffusionDofFocalLength", s_Instance.diffusionDofFocalLength, "float")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "farDistanceScale", s_Instance.farDistanceScale, "float")
	Something(className, s_guid, "focusDistance", s_Instance.focusDistance, "float")
	Something(className, s_guid, "nearDistanceScale", s_Instance.nearDistanceScale, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:DogTagData (p_class, p_guid)
	local s_Instance = DogTagData(p_class) 
 	local className = "DogTagData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "DogTagCategory")
	Something(className, s_guid, "descriptionSID", s_Instance.descriptionSID, "string")
	Something(className, s_guid, "excludedOnPs3", s_Instance.excludedOnPs3, "bool")
	Something(className, s_guid, "excludedOnWin32", s_Instance.excludedOnWin32, "bool")
	Something(className, s_guid, "excludedOnXenon", s_Instance.excludedOnXenon, "bool")
	Something(className, s_guid, "imageName", s_Instance.imageName, "string")
	Something(className, s_guid, "invertText", s_Instance.invertText, "bool")
	Something(className, s_guid, "isAlwaysAvailable", s_Instance.isAlwaysAvailable, "bool")
	Something(className, s_guid, "nameSID", s_Instance.nameSID, "string")
	Something(className, s_guid, "smallImageName", s_Instance.smallImageName, "string")
end

function Type:DogTagsAsset (p_class, p_guid)
	local s_Instance = DogTagsAsset(p_class) 
 	local className = "DogTagsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "advancedDogTags", s_Instance.advancedDogTags, "List<CtrRef)>")
	Something(className, s_guid, "basicDogTags", s_Instance.basicDogTags, "List<CtrRef)>")
	Something(className, s_guid, "meleeKillWeapon", s_Instance.meleeKillWeapon, "CtrRef")
end

function Type:DriverComponentData (p_class, p_guid)
	local s_Instance = DriverComponentData(p_class) 
 	local className = "DriverComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
	Something(className, s_guid, "wantedSpeed", s_Instance.wantedSpeed, "float")
end

function Type:DriverSettings (p_class, p_guid)
	local s_Instance = DriverSettings(p_class) 
 	local className = "DriverSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accDiffAtMaxThrottleVelocityAccelerating", s_Instance.accDiffAtMaxThrottleVelocityAccelerating, "float")
	Something(className, s_guid, "accDiffAtMaxThrottleVelocityDecelerating", s_Instance.accDiffAtMaxThrottleVelocityDecelerating, "float")
	Something(className, s_guid, "accDiffAtMinThrottleVelocityAccelerating", s_Instance.accDiffAtMinThrottleVelocityAccelerating, "float")
	Something(className, s_guid, "accDiffAtMinThrottleVelocityDecelerating", s_Instance.accDiffAtMinThrottleVelocityDecelerating, "float")
	Something(className, s_guid, "angleDiffForFullSlowdown", s_Instance.angleDiffForFullSlowdown, "float")
	Something(className, s_guid, "angleDiffForNoSlowdown", s_Instance.angleDiffForNoSlowdown, "float")
	Something(className, s_guid, "d", s_Instance.d, "float")
	Something(className, s_guid, "i", s_Instance.i, "float")
	Something(className, s_guid, "lookAheadTime", s_Instance.lookAheadTime, "float")
	Something(className, s_guid, "maxAcc", s_Instance.maxAcc, "float")
	Something(className, s_guid, "maxBrakeOutput", s_Instance.maxBrakeOutput, "float")
	Something(className, s_guid, "maxDec", s_Instance.maxDec, "float")
	Something(className, s_guid, "maxError", s_Instance.maxError, "float")
	Something(className, s_guid, "maxITerm", s_Instance.maxITerm, "float")
	Something(className, s_guid, "maxPTerm", s_Instance.maxPTerm, "float")
	Something(className, s_guid, "maxSumError", s_Instance.maxSumError, "float")
	Something(className, s_guid, "maxThrottleVelocityAccelerating", s_Instance.maxThrottleVelocityAccelerating, "float")
	Something(className, s_guid, "maxThrottleVelocityDecelerating", s_Instance.maxThrottleVelocityDecelerating, "float")
	Something(className, s_guid, "maxYawToApplySprint", s_Instance.maxYawToApplySprint, "float")
	Something(className, s_guid, "minAcc", s_Instance.minAcc, "float")
	Something(className, s_guid, "minDec", s_Instance.minDec, "float")
	Something(className, s_guid, "minRadius", s_Instance.minRadius, "float")
	Something(className, s_guid, "minThrottleVelocityAccelerating", s_Instance.minThrottleVelocityAccelerating, "float")
	Something(className, s_guid, "minThrottleVelocityDecelerating", s_Instance.minThrottleVelocityDecelerating, "float")
	Something(className, s_guid, "p", s_Instance.p, "float")
	Something(className, s_guid, "radiusGrowthSpeed", s_Instance.radiusGrowthSpeed, "float")
	Something(className, s_guid, "squareBrakeOutput", s_Instance.squareBrakeOutput, "bool")
	Something(className, s_guid, "steeringSensitivity", s_Instance.steeringSensitivity, "float")
	Something(className, s_guid, "stoppingDeceleration", s_Instance.stoppingDeceleration, "float")
	Something(className, s_guid, "usePIDRegulator", s_Instance.usePIDRegulator, "bool")
	Something(className, s_guid, "useSquareAccDiffCurveAcc", s_Instance.useSquareAccDiffCurveAcc, "bool")
	Something(className, s_guid, "useSquareAccDiffCurveDec", s_Instance.useSquareAccDiffCurveDec, "bool")
	Something(className, s_guid, "useSquareVelDiffCurveAcc", s_Instance.useSquareVelDiffCurveAcc, "bool")
	Something(className, s_guid, "useSquareVelDiffCurveDec", s_Instance.useSquareVelDiffCurveDec, "bool")
	Something(className, s_guid, "velDiffAtMaxAcc", s_Instance.velDiffAtMaxAcc, "float")
	Something(className, s_guid, "velDiffAtMaxDec", s_Instance.velDiffAtMaxDec, "float")
	Something(className, s_guid, "velDiffAtMinAcc", s_Instance.velDiffAtMinAcc, "float")
	Something(className, s_guid, "velDiffAtMinDec", s_Instance.velDiffAtMinDec, "float")
	Something(className, s_guid, "velocityAtFullSlowdown", s_Instance.velocityAtFullSlowdown, "float")
end

function Type:DriverStaticObjectComponentData (p_class, p_guid)
	local s_Instance = DriverStaticObjectComponentData(p_class) 
 	local className = "DriverStaticObjectComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "acceleration", s_Instance.acceleration, "float")
	Something(className, s_guid, "alignWithGroundNormal", s_Instance.alignWithGroundNormal, "bool")
	Something(className, s_guid, "deceleration", s_Instance.deceleration, "float")
	Something(className, s_guid, "turningRadius", s_Instance.turningRadius, "float")
	Something(className, s_guid, "turnWhileStill", s_Instance.turnWhileStill, "bool")
end

function Type:DropWeaponComponentData (p_class, p_guid)
	local s_Instance = DropWeaponComponentData(p_class) 
 	local className = "DropWeaponComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionIdentifier", s_Instance.actionIdentifier, "EntryInputActionEnum")
	Something(className, s_guid, "allowDropWeaponOnAction", s_Instance.allowDropWeaponOnAction, "bool")
	Something(className, s_guid, "deathPickup", s_Instance.deathPickup, "CtrRef")
	Something(className, s_guid, "dropWeaponAfterTime", s_Instance.dropWeaponAfterTime, "float")
	Something(className, s_guid, "excludedWeaponSlots", s_Instance.excludedWeaponSlots, "List<WeaponSlot)>")
	Something(className, s_guid, "listenToAnimationWeaponDropSignal", s_Instance.listenToAnimationWeaponDropSignal, "bool")
	Something(className, s_guid, "pickup", s_Instance.pickup, "CtrRef")
	Something(className, s_guid, "requireWeaponSlotEmpty", s_Instance.requireWeaponSlotEmpty, "bool")
	Something(className, s_guid, "weaponDropTime", s_Instance.weaponDropTime, "float")
	Something(className, s_guid, "dropWeaponComponentData", s_Instance.dropWeaponComponentData,  "readonly")
	Something(className, s_guid, "weaponSlot", s_Instance.weaponSlot,  "uint")
end

function Type:DuplicateSpawnScopeStrategyData (p_class, p_guid)
	local s_Instance = DuplicateSpawnScopeStrategyData(p_class) 
 	local className = "DuplicateSpawnScopeStrategyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "closestCount", s_Instance.closestCount, "uint")
	Something(className, s_guid, "distance", s_Instance.distance, "float")
	Something(className, s_guid, "groupTypes", s_Instance.groupTypes, "bool")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:DxDisplaySettings (p_class, p_guid)
	local s_Instance = DxDisplaySettings(p_class) 
 	local className = "DxDisplaySettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amdMinDriverVersion", s_Instance.amdMinDriverVersion, "string")
	Something(className, s_guid, "createMinimalWindow", s_Instance.createMinimalWindow, "bool")
	Something(className, s_guid, "debugBreakIgnoredIDs", s_Instance.debugBreakIgnoredIDs, "List<int)>")
	Something(className, s_guid, "debugBreakOnErrorEnable", s_Instance.debugBreakOnErrorEnable, "bool")
	Something(className, s_guid, "debugBreakOnInfoEnable", s_Instance.debugBreakOnInfoEnable, "bool")
	Something(className, s_guid, "debugBreakOnWarningEnable", s_Instance.debugBreakOnWarningEnable, "bool")
	Something(className, s_guid, "debugInfoEnable", s_Instance.debugInfoEnable, "bool")
	Something(className, s_guid, "driverInternalThreadingEnable", s_Instance.driverInternalThreadingEnable, "bool")
	Something(className, s_guid, "dx10Dot0Enable", s_Instance.dx10Dot0Enable, "bool")
	Something(className, s_guid, "dx10Dot1Enable", s_Instance.dx10Dot1Enable, "bool")
	Something(className, s_guid, "dx10PlusEnable", s_Instance.dx10PlusEnable, "bool")
	Something(className, s_guid, "dx11Enable", s_Instance.dx11Enable, "bool")
	Something(className, s_guid, "forceRenderAheadLimit", s_Instance.forceRenderAheadLimit, "int")
	Something(className, s_guid, "fullscreen", s_Instance.fullscreen, "bool")
	Something(className, s_guid, "fullscreenHeight", s_Instance.fullscreenHeight, "uint")
	Something(className, s_guid, "fullscreenModeEnable", s_Instance.fullscreenModeEnable, "bool")
	Something(className, s_guid, "fullscreenOutputIndex", s_Instance.fullscreenOutputIndex, "int")
	Something(className, s_guid, "fullscreenRefreshRate", s_Instance.fullscreenRefreshRate, "float")
	Something(className, s_guid, "fullscreenWidth", s_Instance.fullscreenWidth, "uint")
	Something(className, s_guid, "minDriverRequired", s_Instance.minDriverRequired, "bool")
	Something(className, s_guid, "multiGpuValidationEnable", s_Instance.multiGpuValidationEnable, "bool")
	Something(className, s_guid, "nullDriverEnable", s_Instance.nullDriverEnable, "bool")
	Something(className, s_guid, "nvApiEnable", s_Instance.nvApiEnable, "bool")
	Something(className, s_guid, "nvidiaMinDriverVersion", s_Instance.nvidiaMinDriverVersion, "uint")
	Something(className, s_guid, "nvPerfHudEnable", s_Instance.nvPerfHudEnable, "bool")
	Something(className, s_guid, "presentInterval", s_Instance.presentInterval, "int")
	Something(className, s_guid, "refDriverEnable", s_Instance.refDriverEnable, "bool")
	Something(className, s_guid, "stereoConvergenceScale", s_Instance.stereoConvergenceScale, "float")
	Something(className, s_guid, "stereoDepth", s_Instance.stereoDepth, "float")
	Something(className, s_guid, "stereoEnable", s_Instance.stereoEnable, "bool")
	Something(className, s_guid, "stereoSeparationScale", s_Instance.stereoSeparationScale, "float")
	Something(className, s_guid, "stereoSoldierZoomConvergenceScale", s_Instance.stereoSoldierZoomConvergenceScale, "float")
	Something(className, s_guid, "tripleBufferingEnable", s_Instance.tripleBufferingEnable, "bool")
	Something(className, s_guid, "vSyncEnable", s_Instance.vSyncEnable, "bool")
	Something(className, s_guid, "warpDriverEnable", s_Instance.warpDriverEnable, "bool")
end

function Type:DynamicAOComponentData (p_class, p_guid)
	local s_Instance = DynamicAOComponentData(p_class) 
 	local className = "DynamicAOComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "hbaoAngleBias", s_Instance.hbaoAngleBias, "float")
	Something(className, s_guid, "hbaoAttenuation", s_Instance.hbaoAttenuation, "float")
	Something(className, s_guid, "hbaoContrast", s_Instance.hbaoContrast, "float")
	Something(className, s_guid, "hbaoMaxFootprintRadius", s_Instance.hbaoMaxFootprintRadius, "float")
	Something(className, s_guid, "hbaoPowerExponent", s_Instance.hbaoPowerExponent, "float")
	Something(className, s_guid, "hbaoRadius", s_Instance.hbaoRadius, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "ssaoFade", s_Instance.ssaoFade, "float")
	Something(className, s_guid, "ssaoMaxDistanceInner", s_Instance.ssaoMaxDistanceInner, "float")
	Something(className, s_guid, "ssaoMaxDistanceOuter", s_Instance.ssaoMaxDistanceOuter, "float")
	Something(className, s_guid, "ssaoRadius", s_Instance.ssaoRadius, "float")
end

function Type:DynamicAvoidanceEntityData (p_class, p_guid)
	local s_Instance = DynamicAvoidanceEntityData(p_class) 
 	local className = "DynamicAvoidanceEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "affectedByRepellingForce", s_Instance.affectedByRepellingForce, "bool")
	Something(className, s_guid, "antBinding", s_Instance.antBinding, "AntDynamicAvoidanceBinding")
	Something(className, s_guid, "collisionRadius", s_Instance.collisionRadius, "float")
	Something(className, s_guid, "predictedByOthers", s_Instance.predictedByOthers, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "repelOthers", s_Instance.repelOthers, "DynamicAvoidanceMode")
	Something(className, s_guid, "reportPredictedCollision", s_Instance.reportPredictedCollision, "DynamicAvoidanceMode")
end

function Type:DynamicDataContainer (p_class, p_guid)
	local s_Instance = DynamicDataContainer(p_class) 
 	local className = "DynamicDataContainer"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fields", s_Instance.fields, "List<DataField)>")
end

function Type:DynamicEnlightenEntityData (p_class, p_guid)
	local s_Instance = DynamicEnlightenEntityData(p_class) 
 	local className = "DynamicEnlightenEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enlightenData", s_Instance.enlightenData, "CtrRef")
end

function Type:DynamicEnvmapComponentData (p_class, p_guid)
	local s_Instance = DynamicEnvmapComponentData(p_class) 
 	local className = "DynamicEnvmapComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "groundColorEnvmap", s_Instance.groundColorEnvmap, "Vec3")
	Something(className, s_guid, "keyColorEnvmap", s_Instance.keyColorEnvmap, "Vec3")
	Something(className, s_guid, "skyColorEnvmap", s_Instance.skyColorEnvmap, "Vec3")
end

function Type:DynamicEvent (p_class, p_guid)
	local s_Instance = DynamicEvent(p_class) 
 	local className = "DynamicEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "int")
end

function Type:DynamicLink (p_class, p_guid)
	local s_Instance = DynamicLink(p_class) 
 	local className = "DynamicLink"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "int")
end

function Type:DynamicModelEntityData (p_class, p_guid)
	local s_Instance = DynamicModelEntityData(p_class) 
 	local className = "DynamicModelEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "noCollision", s_Instance.noCollision, "bool")
	Something(className, s_guid, "part", s_Instance.part, "CtrRef")
end

function Type:DynamicWeaponPickupEntityData (p_class, p_guid)
	local s_Instance = DynamicWeaponPickupEntityData(p_class) 
 	local className = "DynamicWeaponPickupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "keepAmmoState", s_Instance.keepAmmoState, "bool")
	Something(className, s_guid, "weaponSlots", s_Instance.weaponSlots, "List<DynamicWeaponPickupSlotData)>")
end

function Type:DynamicWeaponPickupSlotData (p_class, p_guid)
	local s_Instance = DynamicWeaponPickupSlotData(p_class) 
 	local className = "DynamicWeaponPickupSlotData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altWeaponSlot", s_Instance.altWeaponSlot, "int")
	Something(className, s_guid, "linkedToWeaponSlot", s_Instance.linkedToWeaponSlot, "int")
	Something(className, s_guid, "weaponSlot", s_Instance.weaponSlot, "uint")
end

function Type:EdgeModelComponentData (p_class, p_guid)
	local s_Instance = EdgeModelComponentData(p_class) 
 	local className = "EdgeModelComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxInstanceCount", s_Instance.maxInstanceCount, "uint")
	Something(className, s_guid, "rigidMeshes", s_Instance.rigidMeshes, "List<CtrRef)>")
end

function Type:EdgeModelInstance (p_class, p_guid)
	local s_Instance = EdgeModelInstance(p_class) 
 	local className = "EdgeModelInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:EdgeModelLightMapData (p_class, p_guid)
	local s_Instance = EdgeModelLightMapData(p_class) 
 	local className = "EdgeModelLightMapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lightMapUvs", s_Instance.lightMapUvs, "List<Vec4)>")
end

function Type:EdgeModelLightMapInstance (p_class, p_guid)
	local s_Instance = EdgeModelLightMapInstance(p_class) 
 	local className = "EdgeModelLightMapInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lightMapUv", s_Instance.lightMapUv, "Vec4")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
end

function Type:EdgePointerData (p_class, p_guid)
	local s_Instance = EdgePointerData(p_class) 
 	local className = "EdgePointerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "negativeXLimit", s_Instance.negativeXLimit, "float")
	Something(className, s_guid, "negativeYLimit", s_Instance.negativeYLimit, "float")
	Something(className, s_guid, "positiveXLimit", s_Instance.positiveXLimit, "float")
	Something(className, s_guid, "positiveYLimit", s_Instance.positiveYLimit, "float")
end

function Type:EditableAction (p_class, p_guid)
	local s_Instance = EditableAction(p_class) 
 	local className = "EditableAction"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "concept", s_Instance.concept, "InputConceptIdentifiers")
end

function Type:EditableActionMap (p_class, p_guid)
	local s_Instance = EditableActionMap(p_class) 
 	local className = "EditableActionMap"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionMap", s_Instance.actionMap, "CtrRef")
	Something(className, s_guid, "configurationLayout", s_Instance.configurationLayout, "EditableActions")
	Something(className, s_guid, "id", s_Instance.id, "string")
	Something(className, s_guid, "nameId", s_Instance.nameId, "string")
end

function Type:EditableActions (p_class, p_guid)
	local s_Instance = EditableActions(p_class) 
 	local className = "EditableActions"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actions", s_Instance.actions, "List<CtrRef)>")
end

function Type:EffectComponentData (p_class, p_guid)
	local s_Instance = EffectComponentData(p_class) 
 	local className = "EffectComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "effect", s_Instance.effect, "CtrRef")
	Something(className, s_guid, "emitterParameter1", s_Instance.emitterParameter1, "float")
	Something(className, s_guid, "emitterParameter2", s_Instance.emitterParameter2, "float")
	Something(className, s_guid, "emitterParameter3", s_Instance.emitterParameter3, "float")
	Something(className, s_guid, "snapToWaterSurface", s_Instance.snapToWaterSurface, "bool")
end

function Type:EffectEntityData (p_class, p_guid)
	local s_Instance = EffectEntityData(p_class) 
 	local className = "EffectEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "components", s_Instance.components, "List<CtrRef)>")
	Something(className, s_guid, "cullDistance", s_Instance.cullDistance, "float")
	Something(className, s_guid, "highEndPc", s_Instance.highEndPc, "bool")
	Something(className, s_guid, "lowEndPc", s_Instance.lowEndPc, "bool")
	Something(className, s_guid, "maxInstanceCount", s_Instance.maxInstanceCount, "uint")
	Something(className, s_guid, "mediumPc", s_Instance.mediumPc, "bool")
	Something(className, s_guid, "resetInstanceWhenStarted", s_Instance.resetInstanceWhenStarted, "bool")
	Something(className, s_guid, "startDelay", s_Instance.startDelay, "float")
end

function Type:EffectManagerSettings (p_class, p_guid)
	local s_Instance = EffectManagerSettings(p_class) 
 	local className = "EffectManagerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "effectQuality", s_Instance.effectQuality, "uint")
	Something(className, s_guid, "maxNewEffectsPerFrameCount", s_Instance.maxNewEffectsPerFrameCount, "uint")
	Something(className, s_guid, "sizeToGrowNewEffectsContainer", s_Instance.sizeToGrowNewEffectsContainer, "uint")
end

function Type:EffectReferenceObjectData (p_class, p_guid)
	local s_Instance = EffectReferenceObjectData(p_class) 
 	local className = "EffectReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
end

function Type:EloExpectedFunctionPoint (p_class, p_guid)
	local s_Instance = EloExpectedFunctionPoint(p_class) 
 	local className = "EloExpectedFunctionPoint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "xValue", s_Instance.xValue, "float")
	Something(className, s_guid, "yValue", s_Instance.yValue, "float")
end

function Type:EloFunctionPoint (p_class, p_guid)
	local s_Instance = EloFunctionPoint(p_class) 
 	local className = "EloFunctionPoint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "xValue", s_Instance.xValue, "float")
	Something(className, s_guid, "yValue", s_Instance.yValue, "float")
end

function Type:EloParameters (p_class, p_guid)
	local s_Instance = EloParameters(p_class) 
 	local className = "EloParameters"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "expected", s_Instance.expected, "List<EloExpectedFunctionPoint)>")
	Something(className, s_guid, "kCompetitor", s_Instance.kCompetitor, "List<EloFunctionPoint)>")
	Something(className, s_guid, "kLoser", s_Instance.kLoser, "List<EloFunctionPoint)>")
	Something(className, s_guid, "kNewbie", s_Instance.kNewbie, "List<EloFunctionPoint)>")
	Something(className, s_guid, "kWinner", s_Instance.kWinner, "List<EloFunctionPoint)>")
end

function Type:EmitterData (p_class, p_guid)
	local s_Instance = EmitterData(p_class) 
 	local className = "EmitterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emitterAssets", s_Instance.emitterAssets, "List<CtrRef)>")
end

function Type:EmitterDocument (p_class, p_guid)
	local s_Instance = EmitterDocument(p_class) 
 	local className = "EmitterDocument"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rootProcessor", s_Instance.rootProcessor, "CtrRef")
	Something(className, s_guid, "templateData", s_Instance.templateData, "CtrRef")
end

function Type:EmitterEntityData (p_class, p_guid)
	local s_Instance = EmitterEntityData(p_class) 
 	local className = "EmitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emitter", s_Instance.emitter, "CtrRef")
	Something(className, s_guid, "spawnProbability", s_Instance.spawnProbability, "float")
end

function Type:EmitterSystemAsset (p_class, p_guid)
	local s_Instance = EmitterSystemAsset(p_class) 
 	local className = "EmitterSystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseAtlasTexture", s_Instance.baseAtlasTexture, "CtrRef")
	Something(className, s_guid, "normalAtlasTexture", s_Instance.normalAtlasTexture, "CtrRef")
	Something(className, s_guid, "textureInfos", s_Instance.textureInfos, "List<EmitterTextureAtlasInfo)>")
end

function Type:EmitterSystemSettings (p_class, p_guid)
	local s_Instance = EmitterSystemSettings(p_class) 
 	local className = "EmitterSystemSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugOverdrawCount", s_Instance.debugOverdrawCount, "int")
	Something(className, s_guid, "drawBoundingBoxes", s_Instance.drawBoundingBoxes, "uint")
	Something(className, s_guid, "drawProjectedBoxes", s_Instance.drawProjectedBoxes, "bool")
	Something(className, s_guid, "drawStats", s_Instance.drawStats, "uint")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "enableFixedDelta", s_Instance.enableFixedDelta, "bool")
	Something(className, s_guid, "enableFixedTimeStep", s_Instance.enableFixedTimeStep, "bool")
	Something(className, s_guid, "enableJobs", s_Instance.enableJobs, "bool")
	Something(className, s_guid, "enableRendering", s_Instance.enableRendering, "bool")
	Something(className, s_guid, "globalResetStartTimeInterval", s_Instance.globalResetStartTimeInterval, "float")
	Something(className, s_guid, "meshCullingDistance", s_Instance.meshCullingDistance, "float")
	Something(className, s_guid, "meshDrawBoundingBoxes", s_Instance.meshDrawBoundingBoxes, "bool")
	Something(className, s_guid, "meshDrawCountLimit", s_Instance.meshDrawCountLimit, "uint")
	Something(className, s_guid, "meshDrawCullStats", s_Instance.meshDrawCullStats, "bool")
	Something(className, s_guid, "meshDrawTransforms", s_Instance.meshDrawTransforms, "bool")
	Something(className, s_guid, "meshRenderingEnable", s_Instance.meshRenderingEnable, "bool")
	Something(className, s_guid, "meshShadowEnable", s_Instance.meshShadowEnable, "bool")
	Something(className, s_guid, "meshStreamingPriorityMultiplier", s_Instance.meshStreamingPriorityMultiplier, "float")
	Something(className, s_guid, "minScreenArea", s_Instance.minScreenArea, "float")
	Something(className, s_guid, "quadClipScaleEnable", s_Instance.quadClipScaleEnable, "bool")
	Something(className, s_guid, "quadColorShaderCostsEnable", s_Instance.quadColorShaderCostsEnable, "bool")
	Something(className, s_guid, "quadEnableOpaque", s_Instance.quadEnableOpaque, "bool")
	Something(className, s_guid, "quadEnableOverdrawRendering", s_Instance.quadEnableOverdrawRendering, "bool")
	Something(className, s_guid, "quadEnableRendering", s_Instance.quadEnableRendering, "bool")
	Something(className, s_guid, "quadEnableSorting", s_Instance.quadEnableSorting, "bool")
	Something(className, s_guid, "quadEnableWireframe", s_Instance.quadEnableWireframe, "bool")
	Something(className, s_guid, "quadEnableZOcclusion", s_Instance.quadEnableZOcclusion, "bool")
	Something(className, s_guid, "quadGroupsJoinAll", s_Instance.quadGroupsJoinAll, "bool")
	Something(className, s_guid, "quadGroupsJoinNiceAndSimple", s_Instance.quadGroupsJoinNiceAndSimple, "bool")
	Something(className, s_guid, "quadGroupsJoinNone", s_Instance.quadGroupsJoinNone, "bool")
	Something(className, s_guid, "quadHalfResEnable", s_Instance.quadHalfResEnable, "bool")
	Something(className, s_guid, "quadHalfResSlice1ThresholdHigh", s_Instance.quadHalfResSlice1ThresholdHigh, "float")
	Something(className, s_guid, "quadHalfResSlice1ThresholdLow", s_Instance.quadHalfResSlice1ThresholdLow, "float")
	Something(className, s_guid, "quadHalfResSlice2ThresholdHigh", s_Instance.quadHalfResSlice2ThresholdHigh, "float")
	Something(className, s_guid, "quadHalfResSlice2ThresholdLow", s_Instance.quadHalfResSlice2ThresholdLow, "float")
	Something(className, s_guid, "quadNearFadeDistance", s_Instance.quadNearFadeDistance, "float")
	Something(className, s_guid, "quadNiceRenderingEnable", s_Instance.quadNiceRenderingEnable, "bool")
	Something(className, s_guid, "quadPointLightsEnable", s_Instance.quadPointLightsEnable, "bool")
	Something(className, s_guid, "quadSimpleRenderingEnable", s_Instance.quadSimpleRenderingEnable, "bool")
	Something(className, s_guid, "quadSpotLightsEnable", s_Instance.quadSpotLightsEnable, "bool")
	Something(className, s_guid, "quadTechnique", s_Instance.quadTechnique, "int")
	Something(className, s_guid, "quadVertexShadowsEnable", s_Instance.quadVertexShadowsEnable, "bool")
	Something(className, s_guid, "quadZOcclusionBias", s_Instance.quadZOcclusionBias, "float")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
	Something(className, s_guid, "zBufferCullEnable", s_Instance.zBufferCullEnable, "bool")
end

function Type:EmitterTemplateData (p_class, p_guid)
	local s_Instance = EmitterTemplateData(p_class) 
 	local className = "EmitterTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actAsPointLight", s_Instance.actAsPointLight, "bool")
	Something(className, s_guid, "distanceScaleFarValue", s_Instance.distanceScaleFarValue, "float")
	Something(className, s_guid, "distanceScaleLength", s_Instance.distanceScaleLength, "float")
	Something(className, s_guid, "distanceScaleNearValue", s_Instance.distanceScaleNearValue, "float")
	Something(className, s_guid, "emissive", s_Instance.emissive, "bool")
	Something(className, s_guid, "emittableType", s_Instance.emittableType, "fb.EmittableType)")
	Something(className, s_guid, "exclusionVolumeCullEnable", s_Instance.exclusionVolumeCullEnable, "bool")
	Something(className, s_guid, "followSpawnSource", s_Instance.followSpawnSource, "bool")
	Something(className, s_guid, "forceFullRes", s_Instance.forceFullRes, "bool")
	Something(className, s_guid, "forceNiceSorting", s_Instance.forceNiceSorting, "bool")
	Something(className, s_guid, "globalLocalNormalBlendFactor", s_Instance.globalLocalNormalBlendFactor, "float")
	Something(className, s_guid, "killParticlesWithEmitter", s_Instance.killParticlesWithEmitter, "bool")
	Something(className, s_guid, "lifetime", s_Instance.lifetime, "float")
	Something(className, s_guid, "lifetimeFrameCount", s_Instance.lifetimeFrameCount, "uint")
	Something(className, s_guid, "lightMultiplier", s_Instance.lightMultiplier, "float")
	Something(className, s_guid, "lightWrapAroundFactor", s_Instance.lightWrapAroundFactor, "float")
	Something(className, s_guid, "localSpace", s_Instance.localSpace, "bool")
	Something(className, s_guid, "maxCount", s_Instance.maxCount, "uint")
	Something(className, s_guid, "maxSpawnDistance", s_Instance.maxSpawnDistance, "float")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "meshCullingDistance", s_Instance.meshCullingDistance, "float")
	Something(className, s_guid, "minScreenArea", s_Instance.minScreenArea, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "opaque", s_Instance.opaque, "bool")
	Something(className, s_guid, "particleCullingFactor", s_Instance.particleCullingFactor, "float")
	Something(className, s_guid, "pointLightColor", s_Instance.pointLightColor, "Vec3")
	Something(className, s_guid, "pointLightIntensity", s_Instance.pointLightIntensity, "Vec4")
	Something(className, s_guid, "pointLightMaxClamp", s_Instance.pointLightMaxClamp, "float")
	Something(className, s_guid, "pointLightMinClamp", s_Instance.pointLightMinClamp, "float")
	Something(className, s_guid, "pointLightPivot", s_Instance.pointLightPivot, "Vec3")
	Something(className, s_guid, "pointLightRadius", s_Instance.pointLightRadius, "float")
	Something(className, s_guid, "pointLightRandomIntensityMax", s_Instance.pointLightRandomIntensityMax, "float")
	Something(className, s_guid, "pointLightRandomIntensityMin", s_Instance.pointLightRandomIntensityMin, "float")
	Something(className, s_guid, "repeatParticleSpawning", s_Instance.repeatParticleSpawning, "bool")
	Something(className, s_guid, "rootProcessor", s_Instance.rootProcessor, "CtrRef")
	Something(className, s_guid, "softParticlesFadeDistanceMultiplier", s_Instance.softParticlesFadeDistanceMultiplier, "float")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
	Something(className, s_guid, "transparencySunShadowEnable", s_Instance.transparencySunShadowEnable, "bool")
	Something(className, s_guid, "vertexPixelLightingBlendFactor", s_Instance.vertexPixelLightingBlendFactor, "float")
	Something(className, s_guid, "visibleAfterDistance", s_Instance.visibleAfterDistance, "float")
	Something(className, s_guid, "zOcclusionLookup", s_Instance.zOcclusionLookup, "List<float)>")
end

function Type:EmitterTextureAtlasInfo (p_class, p_guid)
	local s_Instance = EmitterTextureAtlasInfo(p_class) 
 	local className = "EmitterTextureAtlasInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxUv", s_Instance.maxUv, "Vec2")
	Something(className, s_guid, "minUv", s_Instance.minUv, "Vec2")
	Something(className, s_guid, "textureName", s_Instance.textureName, "string")
end

function Type:EmitterTextureInfo (p_class, p_guid)
	local s_Instance = EmitterTextureInfo(p_class) 
 	local className = "EmitterTextureInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationFrameColumnCount", s_Instance.animationFrameColumnCount, "float")
	Something(className, s_guid, "animationFrameCount", s_Instance.animationFrameCount, "float")
	Something(className, s_guid, "enableAnimation", s_Instance.enableAnimation, "bool")
	Something(className, s_guid, "normalmapName", s_Instance.normalmapName, "string")
	Something(className, s_guid, "textureName", s_Instance.textureName, "string")
end

function Type:EndPointData (p_class, p_guid)
	local s_Instance = EndPointData(p_class) 
 	local className = "EndPointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "endDamping", s_Instance.endDamping, "float")
	Something(className, s_guid, "pos", s_Instance.pos, "float")
	Something(className, s_guid, "springAcceleration", s_Instance.springAcceleration, "float")
	Something(className, s_guid, "springDamping", s_Instance.springDamping, "float")
	Something(className, s_guid, "springLength", s_Instance.springLength, "float")
end

function Type:EngineComponentData (p_class, p_guid)
	local s_Instance = EngineComponentData(p_class) 
 	local className = "EngineComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "config", s_Instance.config, "CtrRef")
	Something(className, s_guid, "outputIsEngineInWater", s_Instance.outputIsEngineInWater, "bool")
	Something(className, s_guid, "soundEffect", s_Instance.soundEffect, "CtrRef")
	Something(className, s_guid, "surfaceSoundEffect", s_Instance.surfaceSoundEffect, "CtrRef")
	Something(className, s_guid, "useFirstPersonSounds", s_Instance.useFirstPersonSounds, "bool")
end

function Type:EngineConfigData (p_class, p_guid)
	local s_Instance = EngineConfigData(p_class) 
 	local className = "EngineConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boost", s_Instance.boost, "fb.Boost)")
	Something(className, s_guid, "enginePowerMultiplier", s_Instance.enginePowerMultiplier, "float")
	Something(className, s_guid, "internalAccelerationFactor", s_Instance.internalAccelerationFactor, "float")
	Something(className, s_guid, "internalDeaccelerationFactor", s_Instance.internalDeaccelerationFactor, "float")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "rpmCurvePoints", s_Instance.rpmCurvePoints, "List<float)>")
	Something(className, s_guid, "rpmCut", s_Instance.rpmCut, "float")
	Something(className, s_guid, "rpmMax", s_Instance.rpmMax, "float")
	Something(className, s_guid, "rpmMin", s_Instance.rpmMin, "float")
	Something(className, s_guid, "torqueCurvePoints", s_Instance.torqueCurvePoints, "List<float)>")
end

function Type:EnlightenBuildRadiositySceneDesc (p_class, p_guid)
	local s_Instance = EnlightenBuildRadiositySceneDesc(p_class) 
 	local className = "EnlightenBuildRadiositySceneDesc"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cacheEnable", s_Instance.cacheEnable, "bool")
	Something(className, s_guid, "clusterSize", s_Instance.clusterSize, "float")
	Something(className, s_guid, "distributedBuild", s_Instance.distributedBuild, "bool")
	Something(className, s_guid, "instances", s_Instance.instances, "List<EnlightenInputInstance)>")
	Something(className, s_guid, "irBudget", s_Instance.irBudget, "uint")
	Something(className, s_guid, "lightProbeSets", s_Instance.lightProbeSets, "List<EnlightenLightProbeSet)>")
	Something(className, s_guid, "samplesPerCluster", s_Instance.samplesPerCluster, "uint")
	Something(className, s_guid, "saveDebugData", s_Instance.saveDebugData, "bool")
	Something(className, s_guid, "staticLightProbes", s_Instance.staticLightProbes, "List<Vec3)>")
	Something(className, s_guid, "systemInfluenceRadius", s_Instance.systemInfluenceRadius, "float")
	Something(className, s_guid, "systemSize", s_Instance.systemSize, "uint")
	Something(className, s_guid, "terrain", s_Instance.terrain, "string")
end

function Type:EnlightenComponentData (p_class, p_guid)
	local s_Instance = EnlightenComponentData(p_class) 
 	local className = "EnlightenComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bounceScale", s_Instance.bounceScale, "float")
	Something(className, s_guid, "cullDistance", s_Instance.cullDistance, "float")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "skyBoxBackLightColor", s_Instance.skyBoxBackLightColor, "Vec3")
	Something(className, s_guid, "skyBoxBackLightColorSize", s_Instance.skyBoxBackLightColorSize, "float")
	Something(className, s_guid, "skyBoxBackLightRotationX", s_Instance.skyBoxBackLightRotationX, "float")
	Something(className, s_guid, "skyBoxBackLightRotationY", s_Instance.skyBoxBackLightRotationY, "float")
	Something(className, s_guid, "skyBoxEnable", s_Instance.skyBoxEnable, "bool")
	Something(className, s_guid, "skyBoxGroundColor", s_Instance.skyBoxGroundColor, "Vec3")
	Something(className, s_guid, "skyBoxSkyColor", s_Instance.skyBoxSkyColor, "Vec3")
	Something(className, s_guid, "skyBoxSunLightColor", s_Instance.skyBoxSunLightColor, "Vec3")
	Something(className, s_guid, "skyBoxSunLightColorSize", s_Instance.skyBoxSunLightColorSize, "float")
	Something(className, s_guid, "sunScale", s_Instance.sunScale, "float")
	Something(className, s_guid, "terrainColor", s_Instance.terrainColor, "Vec3")
end

function Type:EnlightenDataAsset (p_class, p_guid)
	local s_Instance = EnlightenDataAsset(p_class) 
 	local className = "EnlightenDataAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugBackFaceTexture", s_Instance.debugBackFaceTexture, "CtrRef")
	Something(className, s_guid, "debugChartTexture", s_Instance.debugChartTexture, "CtrRef")
	Something(className, s_guid, "dynamicEnable", s_Instance.dynamicEnable, "bool")
	Something(className, s_guid, "loadDebugData", s_Instance.loadDebugData, "bool")
	Something(className, s_guid, "maxResolutionX", s_Instance.maxResolutionX, "int")
	Something(className, s_guid, "maxResolutionY", s_Instance.maxResolutionY, "int")
	Something(className, s_guid, "skyVisibilityTexture", s_Instance.skyVisibilityTexture, "CtrRef")
	Something(className, s_guid, "visibilityThreshold", s_Instance.visibilityThreshold, "float")
end

function Type:EnlightenDatabaseAsset (p_class, p_guid)
	local s_Instance = EnlightenDatabaseAsset(p_class) 
 	local className = "EnlightenDatabaseAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataVersion", s_Instance.dataVersion, "uint")
	Something(className, s_guid, "debugMeshDataVersion", s_Instance.debugMeshDataVersion, "uint")
	Something(className, s_guid, "lightProbeSets", s_Instance.lightProbeSets, "List<EnlightenLightProbeSet)>")
	Something(className, s_guid, "outputSizeX", s_Instance.outputSizeX, "uint")
	Something(className, s_guid, "outputSizeY", s_Instance.outputSizeY, "uint")
	Something(className, s_guid, "systems", s_Instance.systems, "List<EnlightenDbSystem)>")
end

function Type:EnlightenDataCreatorParams (p_class, p_guid)
	local s_Instance = EnlightenDataCreatorParams(p_class) 
 	local className = "EnlightenDataCreatorParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assetName", s_Instance.assetName, "string")
end

function Type:EnlightenDbInstance (p_class, p_guid)
	local s_Instance = EnlightenDbInstance(p_class) 
 	local className = "EnlightenDbInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cacheKey", s_Instance.cacheKey, "GUID")
	Something(className, s_guid, "enlightenMeshName", s_Instance.enlightenMeshName, "string")
	Something(className, s_guid, "geometryId", s_Instance.geometryId, "uint")
	Something(className, s_guid, "guidString", s_Instance.guidString, "string")
	Something(className, s_guid, "instanceAlbedos", s_Instance.instanceAlbedos, "List<ulong)>")
	Something(className, s_guid, "meshAsset", s_Instance.meshAsset, "string")
	Something(className, s_guid, "objectVariation", s_Instance.objectVariation, "string")
	Something(className, s_guid, "pixelSize", s_Instance.pixelSize, "float")
	Something(className, s_guid, "uvSizeX", s_Instance.uvSizeX, "uint")
	Something(className, s_guid, "uvSizeY", s_Instance.uvSizeY, "uint")
	Something(className, s_guid, "uvTransform", s_Instance.uvTransform, "Vec4")
	Something(className, s_guid, "uvTranslation", s_Instance.uvTranslation, "Vec2")
	Something(className, s_guid, "worldBoundingbox", s_Instance.worldBoundingbox, "AxisAlignedBox")
	Something(className, s_guid, "worldTransform", s_Instance.worldTransform, "LinearTransform")
end

function Type:EnlightenDbSystem (p_class, p_guid)
	local s_Instance = EnlightenDbSystem(p_class) 
 	local className = "EnlightenDbSystem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasStartX", s_Instance.atlasStartX, "uint")
	Something(className, s_guid, "atlasStartY", s_Instance.atlasStartY, "uint")
	Something(className, s_guid, "boundingBox", s_Instance.boundingBox, "AxisAlignedBox")
	Something(className, s_guid, "clusteringCache", s_Instance.clusteringCache, "PrecomputeCache")
	Something(className, s_guid, "inputSystems", s_Instance.inputSystems, "List<int)>")
	Something(className, s_guid, "instances", s_Instance.instances, "List<EnlightenDbInstance)>")
	Something(className, s_guid, "lightTransportCache", s_Instance.lightTransportCache, "PrecomputeCache")
	Something(className, s_guid, "outputHeight", s_Instance.outputHeight, "uint")
	Something(className, s_guid, "outputWidth", s_Instance.outputWidth, "uint")
	Something(className, s_guid, "pixelCount", s_Instance.pixelCount, "uint")
	Something(className, s_guid, "pixelSize", s_Instance.pixelSize, "float")
	Something(className, s_guid, "preClusteringCache", s_Instance.preClusteringCache, "PrecomputeCache")
	Something(className, s_guid, "systemCache", s_Instance.systemCache, "PrecomputeCache")
	Something(className, s_guid, "systemId", s_Instance.systemId, "int")
	Something(className, s_guid, "terrainSystem", s_Instance.terrainSystem, "bool")
	Something(className, s_guid, "visibilityCache", s_Instance.visibilityCache, "PrecomputeCache")
end

function Type:EnlightenEntityData (p_class, p_guid)
	local s_Instance = EnlightenEntityData(p_class) 
 	local className = "EnlightenEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EnlightenInputInstance (p_class, p_guid)
	local s_Instance = EnlightenInputInstance(p_class) 
 	local className = "EnlightenInputInstance"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "string")
	Something(className, s_guid, "objectVariation", s_Instance.objectVariation, "string")
	Something(className, s_guid, "systemId", s_Instance.systemId, "int")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:EnlightenLightProbeSet (p_class, p_guid)
	local s_Instance = EnlightenLightProbeSet(p_class) 
 	local className = "EnlightenLightProbeSet"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blendDistance", s_Instance.blendDistance, "float")
	Something(className, s_guid, "boundingBox", s_Instance.boundingBox, "AxisAlignedBox")
	Something(className, s_guid, "cache", s_Instance.cache, "PrecomputeCache")
	Something(className, s_guid, "inputSystems", s_Instance.inputSystems, "List<int)>")
	Something(className, s_guid, "positions", s_Instance.positions, "List<Vec3)>")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
	Something(className, s_guid, "sizeX", s_Instance.sizeX, "uint")
	Something(className, s_guid, "sizeY", s_Instance.sizeY, "uint")
	Something(className, s_guid, "sizeZ", s_Instance.sizeZ, "uint")
	Something(className, s_guid, "staticProbeSet", s_Instance.staticProbeSet, "bool")
	Something(className, s_guid, "systemId", s_Instance.systemId, "int")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
	Something(className, s_guid, "validIndices", s_Instance.validIndices, "List<uint)>")
end

function Type:EnlightenPipelineParams (p_class, p_guid)
	local s_Instance = EnlightenPipelineParams(p_class) 
 	local className = "EnlightenPipelineParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dynamicEnable", s_Instance.dynamicEnable, "bool")
end

function Type:EnlightenPipelineTerrain (p_class, p_guid)
	local s_Instance = EnlightenPipelineTerrain(p_class) 
 	local className = "EnlightenPipelineTerrain"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshes", s_Instance.meshes, "List<EnlightenPipelineTerrainMesh)>")
end

function Type:EnlightenPipelineTerrainMesh (p_class, p_guid)
	local s_Instance = EnlightenPipelineTerrainMesh(p_class) 
 	local className = "EnlightenPipelineTerrainMesh"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boundingBox", s_Instance.boundingBox, "AxisAlignedBox")
	Something(className, s_guid, "lightMapResolution", s_Instance.lightMapResolution, "uint")
	Something(className, s_guid, "terrainMeshName", s_Instance.terrainMeshName, "string")
	Something(className, s_guid, "uvTransform", s_Instance.uvTransform, "Vec4")
	Something(className, s_guid, "uvTranslation", s_Instance.uvTranslation, "Vec2")
end

function Type:EnlightenRuntimeConfig (p_class, p_guid)
	local s_Instance = EnlightenRuntimeConfig(p_class) 
 	local className = "EnlightenRuntimeConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "jobCount", s_Instance.jobCount, "uint")
end

function Type:EnlightenRuntimeSettings (p_class, p_guid)
	local s_Instance = EnlightenRuntimeSettings(p_class) 
 	local className = "EnlightenRuntimeSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "albedoDefaultColor", s_Instance.albedoDefaultColor, "Vec3")
	Something(className, s_guid, "albedoForceColorEnable", s_Instance.albedoForceColorEnable, "bool")
	Something(className, s_guid, "albedoForceUpdateEnable", s_Instance.albedoForceUpdateEnable, "bool")
	Something(className, s_guid, "compensateSunShadowHeightScale", s_Instance.compensateSunShadowHeightScale, "bool")
	Something(className, s_guid, "drawDebugBackFaces", s_Instance.drawDebugBackFaces, "bool")
	Something(className, s_guid, "drawDebugColoringEnable", s_Instance.drawDebugColoringEnable, "bool")
	Something(className, s_guid, "drawDebugEntities", s_Instance.drawDebugEntities, "bool")
	Something(className, s_guid, "drawDebugLightProbeBoundingBoxes", s_Instance.drawDebugLightProbeBoundingBoxes, "bool")
	Something(className, s_guid, "drawDebugLightProbeOcclusion", s_Instance.drawDebugLightProbeOcclusion, "bool")
	Something(className, s_guid, "drawDebugLightProbes", s_Instance.drawDebugLightProbes, "bool")
	Something(className, s_guid, "drawDebugLightProbeSize", s_Instance.drawDebugLightProbeSize, "float")
	Something(className, s_guid, "drawDebugLightProbeStats", s_Instance.drawDebugLightProbeStats, "bool")
	Something(className, s_guid, "drawDebugSystemBoundingBoxEnable", s_Instance.drawDebugSystemBoundingBoxEnable, "int")
	Something(className, s_guid, "drawDebugSystemDependenciesEnable", s_Instance.drawDebugSystemDependenciesEnable, "int")
	Something(className, s_guid, "drawDebugSystemsEnable", s_Instance.drawDebugSystemsEnable, "bool")
	Something(className, s_guid, "drawDebugTargetMeshes", s_Instance.drawDebugTargetMeshes, "bool")
	Something(className, s_guid, "drawDebugTextures", s_Instance.drawDebugTextures, "bool")
	Something(className, s_guid, "drawSolveTaskPerformance", s_Instance.drawSolveTaskPerformance, "bool")
	Something(className, s_guid, "drawWarningsEnable", s_Instance.drawWarningsEnable, "bool")
	Something(className, s_guid, "emissiveEnable", s_Instance.emissiveEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "forceDynamic", s_Instance.forceDynamic, "bool")
	Something(className, s_guid, "jobCount", s_Instance.jobCount, "uint")
	Something(className, s_guid, "lightMapsEnable", s_Instance.lightMapsEnable, "bool")
	Something(className, s_guid, "lightProbeEnable", s_Instance.lightProbeEnable, "bool")
	Something(className, s_guid, "lightProbeForceUpdate", s_Instance.lightProbeForceUpdate, "bool")
	Something(className, s_guid, "lightProbeJobsEnable", s_Instance.lightProbeJobsEnable, "bool")
	Something(className, s_guid, "lightProbeMaxUpdateSolveCount", s_Instance.lightProbeMaxUpdateSolveCount, "uint")
	Something(className, s_guid, "localLightCullingEnable", s_Instance.localLightCullingEnable, "bool")
	Something(className, s_guid, "localLightCustumFalloff", s_Instance.localLightCustumFalloff, "bool")
	Something(className, s_guid, "localLightForceRadius", s_Instance.localLightForceRadius, "float")
	Something(className, s_guid, "localLightsEnable", s_Instance.localLightsEnable, "bool")
	Something(className, s_guid, "minSystemUpdateCount", s_Instance.minSystemUpdateCount, "uint")
	Something(className, s_guid, "saveRadiosityTexturesEnable", s_Instance.saveRadiosityTexturesEnable, "bool")
	Something(className, s_guid, "shadowsEnable", s_Instance.shadowsEnable, "bool")
	Something(className, s_guid, "skyBoxScale", s_Instance.skyBoxScale, "float")
	Something(className, s_guid, "temporalCoherenceThreshold", s_Instance.temporalCoherenceThreshold, "float")
	Something(className, s_guid, "terrainMapEnable", s_Instance.terrainMapEnable, "bool")
end

function Type:EnlightenState (p_class, p_guid)
	local s_Instance = EnlightenState(p_class) 
 	local className = "EnlightenState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bounceScale", s_Instance.bounceScale, "float")
	Something(className, s_guid, "outputScale", s_Instance.outputScale, "float")
	Something(className, s_guid, "skyBoxBackLightColor", s_Instance.skyBoxBackLightColor, "Vec3")
	Something(className, s_guid, "skyBoxBackLightColorSize", s_Instance.skyBoxBackLightColorSize, "float")
	Something(className, s_guid, "skyBoxBackLightRotationX", s_Instance.skyBoxBackLightRotationX, "float")
	Something(className, s_guid, "skyBoxBackLightRotationY", s_Instance.skyBoxBackLightRotationY, "float")
	Something(className, s_guid, "skyBoxEnable", s_Instance.skyBoxEnable, "bool")
	Something(className, s_guid, "skyBoxGroundColor", s_Instance.skyBoxGroundColor, "Vec3")
	Something(className, s_guid, "skyBoxSkyColor", s_Instance.skyBoxSkyColor, "Vec3")
	Something(className, s_guid, "skyBoxSunLightColor", s_Instance.skyBoxSunLightColor, "Vec3")
	Something(className, s_guid, "skyBoxSunLightColorSize", s_Instance.skyBoxSunLightColorSize, "float")
	Something(className, s_guid, "sunScale", s_Instance.sunScale, "float")
end

function Type:EnterVehicleSurveyEvent (p_class, p_guid)
	local s_Instance = EnterVehicleSurveyEvent(p_class) 
 	local className = "EnterVehicleSurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
	Something(className, s_guid, "vehicleName", s_Instance.vehicleName, "string")
end

function Type:EntitlementData (p_class, p_guid)
	local s_Instance = EntitlementData(p_class) 
 	local className = "EntitlementData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entitlementTag", s_Instance.entitlementTag, "string")
	Something(className, s_guid, "groupName", s_Instance.groupName, "string")
	Something(className, s_guid, "license", s_Instance.license, "string")
	Something(className, s_guid, "productId", s_Instance.productId, "string")
	Something(className, s_guid, "projectId", s_Instance.projectId, "string")
	Something(className, s_guid, "usageType", s_Instance.usageType, "EntitlementType")
	Something(className, s_guid, "verifyOwnership", s_Instance.verifyOwnership, "bool")
end

function Type:EntitlementQuery (p_class, p_guid)
	local s_Instance = EntitlementQuery(p_class) 
 	local className = "EntitlementQuery"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entitlementsData", s_Instance.entitlementsData, "List<EntitlementData)>")
	Something(className, s_guid, "entitlementTag", s_Instance.entitlementTag, "string")
	Something(className, s_guid, "groupNames", s_Instance.groupNames, "List<string)>")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "productId", s_Instance.productId, "string")
	Something(className, s_guid, "projectId", s_Instance.projectId, "string")
end

function Type:EntityBusData (p_class, p_guid)
	local s_Instance = EntityBusData(p_class) 
 	local className = "EntityBusData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alwaysCreateEntityBusClient", s_Instance.alwaysCreateEntityBusClient, "bool")
	Something(className, s_guid, "alwaysCreateEntityBusServer", s_Instance.alwaysCreateEntityBusServer, "bool")
	Something(className, s_guid, "descriptor", s_Instance.descriptor, "CtrRef")
	Something(className, s_guid, "eventConnections", s_Instance.eventConnections, "List<EventConnection)>")
	Something(className, s_guid, "interfaceHasConnections", s_Instance.interfaceHasConnections, "bool")
	Something(className, s_guid, "needNetworkId", s_Instance.needNetworkId, "bool")
end

function Type:EntityInteractionComponentData (p_class, p_guid)
	local s_Instance = EntityInteractionComponentData(p_class) 
 	local className = "EntityInteractionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowInteractionWithSoldiers", s_Instance.allowInteractionWithSoldiers, "bool")
	Something(className, s_guid, "interactWithTypes", s_Instance.interactWithTypes, "InteractionTypesData")
	Something(className, s_guid, "maxAmmoCrateTimer", s_Instance.maxAmmoCrateTimer, "float")
	Something(className, s_guid, "maxAmmoPickupTimer", s_Instance.maxAmmoPickupTimer, "float")
	Something(className, s_guid, "maxLookAtAngle", s_Instance.maxLookAtAngle, "float")
	Something(className, s_guid, "onlyAllowInteractionWithManDownSoldiers", s_Instance.onlyAllowInteractionWithManDownSoldiers, "bool")
	Something(className, s_guid, "pickupRadius", s_Instance.pickupRadius, "float")
	Something(className, s_guid, "soldierInteractInputAction", s_Instance.soldierInteractInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "soldierInteractRadius", s_Instance.soldierInteractRadius, "float")
end

function Type:EntityRecordingData (p_class, p_guid)
	local s_Instance = EntityRecordingData(p_class) 
 	local className = "EntityRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "List<CtrRef)>")
	Something(className, s_guid, "entityGuid", s_Instance.entityGuid, "GUID")
end

function Type:EntitySettings (p_class, p_guid)
	local s_Instance = EntitySettings(p_class) 
 	local className = "EntitySettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "editorGameViewEnable", s_Instance.editorGameViewEnable, "bool")
	Something(className, s_guid, "executionMode", s_Instance.executionMode, "ExecutionModeType")
	Something(className, s_guid, "outOfEntityBusNetworkIdThreshold", s_Instance.outOfEntityBusNetworkIdThreshold, "uint")
	Something(className, s_guid, "spawnSubLevelsFromLogic", s_Instance.spawnSubLevelsFromLogic, "bool")
end

function Type:EntityTransformData (p_class, p_guid)
	local s_Instance = EntityTransformData(p_class) 
 	local className = "EntityTransformData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entityTransforms", s_Instance.entityTransforms, "List<LinearTransform)>")
end

function Type:EntityUid (p_class, p_guid)
	local s_Instance = EntityUid(p_class) 
 	local className = "EntityUid"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "uint")
end

function Type:EntityVoiceOverInfo (p_class, p_guid)
	local s_Instance = EntityVoiceOverInfo(p_class) 
 	local className = "EntityVoiceOverInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "labels", s_Instance.labels, "List<CtrRef)>")
	Something(className, s_guid, "voiceOverType", s_Instance.voiceOverType, "CtrRef")
end

function Type:EntryComponentData (p_class, p_guid)
	local s_Instance = EntryComponentData(p_class) 
 	local className = "EntryComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aIData", s_Instance.aIData, "CtrRef")
	Something(className, s_guid, "enterImpulse", s_Instance.enterImpulse, "float")
	Something(className, s_guid, "entryClass", s_Instance.entryClass, "fb.EntryClass)")
	Something(className, s_guid, "entryComponentSound", s_Instance.entryComponentSound, "CtrRef")
	Something(className, s_guid, "entryOrderNumber", s_Instance.entryOrderNumber, "int")
	Something(className, s_guid, "entryRadius", s_Instance.entryRadius, "float")
	Something(className, s_guid, "entrySpottingSettings", s_Instance.entrySpottingSettings, "fb.EntrySpottingSettings)")
	Something(className, s_guid, "forbiddenForHuman", s_Instance.forbiddenForHuman, "bool")
	Something(className, s_guid, "hideSoldierForPassengers", s_Instance.hideSoldierForPassengers, "bool")
	Something(className, s_guid, "hudData", s_Instance.hudData, "EntryComponentHudData")
	Something(className, s_guid, "inputConceptDefinition", s_Instance.inputConceptDefinition, "CtrRef")
	Something(className, s_guid, "inputCurves", s_Instance.inputCurves, "List<CtrRef)>")
	Something(className, s_guid, "inputMapping", s_Instance.inputMapping, "CtrRef")
	Something(className, s_guid, "isAllowedToExitInAir", s_Instance.isAllowedToExitInAir, "bool")
	Something(className, s_guid, "isShielded", s_Instance.isShielded, "bool")
	Something(className, s_guid, "lockSoldierAimingToEntry", s_Instance.lockSoldierAimingToEntry, "bool")
	Something(className, s_guid, "numberOfStances", s_Instance.numberOfStances, "int")
	Something(className, s_guid, "poseConstraints", s_Instance.poseConstraints, "PoseConstraintsData")
	Something(className, s_guid, "show1pSoldierInEntry", s_Instance.show1pSoldierInEntry, "bool")
	Something(className, s_guid, "show1pSoldierInEntryForPlayerOnly", s_Instance.show1pSoldierInEntryForPlayerOnly, "bool")
	Something(className, s_guid, "show3pSoldierWeaponInEntry", s_Instance.show3pSoldierWeaponInEntry, "bool")
	Something(className, s_guid, "showSoldierGearInEntry", s_Instance.showSoldierGearInEntry, "bool")
	Something(className, s_guid, "showSoldierInEntry", s_Instance.showSoldierInEntry, "bool")
	Something(className, s_guid, "showSoldierWeaponInEntry", s_Instance.showSoldierWeaponInEntry, "bool")
	Something(className, s_guid, "soldierOffset", s_Instance.soldierOffset, "Vec3")
	Something(className, s_guid, "soldierTransitionInvisbleTime", s_Instance.soldierTransitionInvisbleTime, "float")
	Something(className, s_guid, "stancesEnabled", s_Instance.stancesEnabled, "bool")
	Something(className, s_guid, "triggerEventOnKey", s_Instance.triggerEventOnKey, "EntryInputActionEnum")
end

function Type:EntryComponentHudData (p_class, p_guid)
	local s_Instance = EntryComponentHudData(p_class) 
 	local className = "EntryComponentHudData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frustum", s_Instance.frustum, "bool")
	Something(className, s_guid, "index", s_Instance.index, "int")
	Something(className, s_guid, "maximizeMiniMapOnEntry", s_Instance.maximizeMiniMapOnEntry, "bool")
	Something(className, s_guid, "seatType", s_Instance.seatType, "EntrySeatType")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:EntryComponentSoundData (p_class, p_guid)
	local s_Instance = EntryComponentSoundData(p_class) 
 	local className = "EntryComponentSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "stanceSounds", s_Instance.stanceSounds, "List<StanceSwitchSoundData)>")
	Something(className, s_guid, "stanceSwitchSound", s_Instance.stanceSwitchSound, "CtrRef")
end

function Type:EntryInputActionMappingData (p_class, p_guid)
	local s_Instance = EntryInputActionMappingData(p_class) 
 	local className = "EntryInputActionMappingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionIdentifier", s_Instance.actionIdentifier, "EntryInputActionEnum")
	Something(className, s_guid, "conceptIdentifier", s_Instance.conceptIdentifier, "InputConceptIdentifiers")
end

function Type:EntryInputActionMapsData (p_class, p_guid)
	local s_Instance = EntryInputActionMapsData(p_class) 
 	local className = "EntryInputActionMapsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionMapSettingsScheme", s_Instance.actionMapSettingsScheme, "int")
	Something(className, s_guid, "defaultInputActionMap", s_Instance.defaultInputActionMap, "InputActionMapSlot")
	Something(className, s_guid, "inputActionMaps", s_Instance.inputActionMaps, "List<CtrRef)>")
end

function Type:EqualizerSettings (p_class, p_guid)
	local s_Instance = EqualizerSettings(p_class) 
 	local className = "EqualizerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "highShelfFrequency", s_Instance.highShelfFrequency, "float")
	Something(className, s_guid, "highShelfGain", s_Instance.highShelfGain, "float")
	Something(className, s_guid, "hpCutoffFrequency", s_Instance.hpCutoffFrequency, "float")
	Something(className, s_guid, "lowShelfFrequency", s_Instance.lowShelfFrequency, "float")
	Something(className, s_guid, "lowShelfGain", s_Instance.lowShelfGain, "float")
end

function Type:EulerTransformEntityData (p_class, p_guid)
	local s_Instance = EulerTransformEntityData(p_class) 
 	local className = "EulerTransformEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "euler", s_Instance.euler, "ModifierEuler")
	Something(className, s_guid, "in", s_Instance.inValue, "float")
	Something(className, s_guid, "in1", s_Instance.in1, "Vec3")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EulerTransformSplitterEntityData (p_class, p_guid)
	local s_Instance = EulerTransformSplitterEntityData(p_class) 
 	local className = "EulerTransformSplitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:EvaluatorData (p_class, p_guid)
	local s_Instance = EvaluatorData(p_class) 
 	local className = "EvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emitterParameter", s_Instance.emitterParameter, "fb.EmitterParameter)")
end

function Type:EventAndGateEntityData (p_class, p_guid)
	local s_Instance = EventAndGateEntityData(p_class) 
 	local className = "EventAndGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventCount", s_Instance.eventCount, "uint")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EventCompareGateEntityData (p_class, p_guid)
	local s_Instance = EventCompareGateEntityData(p_class) 
 	local className = "EventCompareGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "compareType", s_Instance.compareType, "EventCompareGateType")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:EventConnection (p_class, p_guid)
	local s_Instance = EventConnection(p_class) 
 	local className = "EventConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "sourceEvent", s_Instance.sourceEvent, "EventSpec")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
	Something(className, s_guid, "targetEvent", s_Instance.targetEvent, "EventSpec")
	Something(className, s_guid, "targetType", s_Instance.targetType, "EventConnectionTargetType")
end

function Type:EventDebugNodeData (p_class, p_guid)
	local s_Instance = EventDebugNodeData(p_class) 
 	local className = "EventDebugNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "List<CtrRef)>")
end

function Type:EventGateEntityData (p_class, p_guid)
	local s_Instance = EventGateEntityData(p_class) 
 	local className = "EventGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "default", s_Instance.default, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EventGateNodeData (p_class, p_guid)
	local s_Instance = EventGateNodeData(p_class) 
 	local className = "EventGateNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coolDownTime", s_Instance.coolDownTime, "AudioGraphNodePort")
	Something(className, s_guid, "enable", s_Instance.enable, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
end

function Type:EventIfSwitchEntityData (p_class, p_guid)
	local s_Instance = EventIfSwitchEntityData(p_class) 
 	local className = "EventIfSwitchEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
	Something(className, s_guid, "startState", s_Instance.startState, "bool")
end

function Type:EventMemoryEntityData (p_class, p_guid)
	local s_Instance = EventMemoryEntityData(p_class) 
 	local className = "EventMemoryEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EventQueueEntityData (p_class, p_guid)
	local s_Instance = EventQueueEntityData(p_class) 
 	local className = "EventQueueEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EventScaleData (p_class, p_guid)
	local s_Instance = EventScaleData(p_class) 
 	local className = "EventScaleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "event", s_Instance.event, "StatEvent")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:EventSpec (p_class, p_guid)
	local s_Instance = EventSpec(p_class) 
 	local className = "EventSpec"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "int")
end

function Type:EventSplitterEntityData (p_class, p_guid)
	local s_Instance = EventSplitterEntityData(p_class) 
 	local className = "EventSplitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
end

function Type:EventSwitchEntityData (p_class, p_guid)
	local s_Instance = EventSwitchEntityData(p_class) 
 	local className = "EventSwitchEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoIncrement", s_Instance.autoIncrement, "bool")
	Something(className, s_guid, "outEvents", s_Instance.outEvents, "uint")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:EventSwitcherEntry (p_class, p_guid)
	local s_Instance = EventSwitcherEntry(p_class) 
 	local className = "EventSwitcherEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "caseTrigger", s_Instance.caseTrigger, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:EventSwitcherNodeData (p_class, p_guid)
	local s_Instance = EventSwitcherNodeData(p_class) 
 	local className = "EventSwitcherNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
end

function Type:ExampleVehicleBlueprintBundleMetadata (p_class, p_guid)
	local s_Instance = ExampleVehicleBlueprintBundleMetadata(p_class) 
 	local className = "ExampleVehicleBlueprintBundleMetadata"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "exampleVehicleType", s_Instance.exampleVehicleType, "fb.ExampleVehicleType)")
end

function Type:ExpanderNodeData (p_class, p_guid)
	local s_Instance = ExpanderNodeData(p_class) 
 	local className = "ExpanderNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackTime", s_Instance.attackTime, "AudioGraphNodePort")
	Something(className, s_guid, "channelMode", s_Instance.channelMode, "ExpanderChannelMode")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "ratio", s_Instance.ratio, "AudioGraphNodePort")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "AudioGraphNodePort")
	Something(className, s_guid, "threshold", s_Instance.threshold, "AudioGraphNodePort")
end

function Type:ExplosionEntityData (p_class, p_guid)
	local s_Instance = ExplosionEntityData(p_class) 
 	local className = "ExplosionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blastDamage", s_Instance.blastDamage, "float")
	Something(className, s_guid, "blastImpulse", s_Instance.blastImpulse, "float")
	Something(className, s_guid, "blastRadius", s_Instance.blastRadius, "float")
	Something(className, s_guid, "cameraShockwaveRadius", s_Instance.cameraShockwaveRadius, "float")
	Something(className, s_guid, "damageIndicationType", s_Instance.damageIndicationType, "fb.DamageIndicationType)")
	Something(className, s_guid, "destructionMaskVolume", s_Instance.destructionMaskVolume, "CtrRef")
	Something(className, s_guid, "detonateOnce", s_Instance.detonateOnce, "bool")
	Something(className, s_guid, "detonationEffect", s_Instance.detonationEffect, "CtrRef")
	Something(className, s_guid, "disableOcclusion", s_Instance.disableOcclusion, "bool")
	Something(className, s_guid, "disableStaticEntityOcclusion", s_Instance.disableStaticEntityOcclusion, "bool")
	Something(className, s_guid, "empTime", s_Instance.empTime, "float")
	Something(className, s_guid, "hasStunEffect", s_Instance.hasStunEffect, "bool")
	Something(className, s_guid, "innerBlastRadius", s_Instance.innerBlastRadius, "float")
	Something(className, s_guid, "maskVolume", s_Instance.maskVolume, "CtrRef")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "maxOcclusionRaycastRadius", s_Instance.maxOcclusionRaycastRadius, "float")
	Something(className, s_guid, "shockwaveDamage", s_Instance.shockwaveDamage, "float")
	Something(className, s_guid, "shockwaveImpulse", s_Instance.shockwaveImpulse, "float")
	Something(className, s_guid, "shockwaveRadius", s_Instance.shockwaveRadius, "float")
	Something(className, s_guid, "shockwaveTime", s_Instance.shockwaveTime, "float")
	Something(className, s_guid, "showOnMinimap", s_Instance.showOnMinimap, "bool")
	Something(className, s_guid, "spawnDelay", s_Instance.spawnDelay, "float")
	Something(className, s_guid, "triggerImpairedHearing", s_Instance.triggerImpairedHearing, "bool")
	Something(className, s_guid, "useEntityTransformForDetonationEffect", s_Instance.useEntityTransformForDetonationEffect, "bool")
end

function Type:ExplosionPackEntityData (p_class, p_guid)
	local s_Instance = ExplosionPackEntityData(p_class) 
 	local className = "ExplosionPackEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defuseRadius", s_Instance.defuseRadius, "float")
	Something(className, s_guid, "hasRemoteDetonator", s_Instance.hasRemoteDetonator, "bool")
	Something(className, s_guid, "hasVehicleDetonation", s_Instance.hasVehicleDetonation, "bool")
	Something(className, s_guid, "health", s_Instance.health, "float")
	Something(className, s_guid, "icon", s_Instance.icon, "UIHudIcon")
	Something(className, s_guid, "isDestructible", s_Instance.isDestructible, "bool")
	Something(className, s_guid, "receivesExplosionDamage", s_Instance.receivesExplosionDamage, "bool")
	Something(className, s_guid, "soldierDetonationData", s_Instance.soldierDetonationData, "fb.SoldierDetonationData)")
	Something(className, s_guid, "spottedTime", s_Instance.spottedTime, "float")
	Something(className, s_guid, "timeToLiveOnPlayerDeath", s_Instance.timeToLiveOnPlayerDeath, "float")
	Something(className, s_guid, "vehicleDetonationActivationDelay", s_Instance.vehicleDetonationActivationDelay, "float")
	Something(className, s_guid, "vehicleDetonationRadius", s_Instance.vehicleDetonationRadius, "float")
end

function Type:ExtendedConstraintsData (p_class, p_guid)
	local s_Instance = ExtendedConstraintsData(p_class) 
 	local className = "ExtendedConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularConstraintMax", s_Instance.angularConstraintMax, "float")
	Something(className, s_guid, "angularConstraintMin", s_Instance.angularConstraintMin, "float")
	Something(className, s_guid, "falloff", s_Instance.falloff, "float")
	Something(className, s_guid, "heading", s_Instance.heading, "float")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:FaceAnimationWaveMapping (p_class, p_guid)
	local s_Instance = FaceAnimationWaveMapping(p_class) 
 	local className = "FaceAnimationWaveMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antEnumValue", s_Instance.antEnumValue, "int")
	Something(className, s_guid, "waveNameHash", s_Instance.waveNameHash, "int")
end

function Type:FaceAnimationWaveMappings (p_class, p_guid)
	local s_Instance = FaceAnimationWaveMappings(p_class) 
 	local className = "FaceAnimationWaveMappings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antAsset", s_Instance.antAsset, "AntRef")
	Something(className, s_guid, "mappings", s_Instance.mappings, "List<FaceAnimationWaveMapping)>")
	Something(className, s_guid, "onStartedTalking", s_Instance.onStartedTalking, "AntRef")
end

function Type:FaceposerComponentData (p_class, p_guid)
	local s_Instance = FaceposerComponentData(p_class) 
 	local className = "FaceposerComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "facePoseLibrary", s_Instance.facePoseLibrary, "List<AntRef)>")
	Something(className, s_guid, "facePoseLibraryIndex", s_Instance.facePoseLibraryIndex, "int")
	Something(className, s_guid, "facePoseLibraryReference", s_Instance.facePoseLibraryReference, "AntRef")
	Something(className, s_guid, "facePoserDofSetName", s_Instance.facePoserDofSetName, "string")
	Something(className, s_guid, "facePoserEnabled", s_Instance.facePoserEnabled, "AntRef")
	Something(className, s_guid, "lodDistance", s_Instance.lodDistance, "float")
	Something(className, s_guid, "shaderExposedValues", s_Instance.shaderExposedValues, "List<string)>")
end

function Type:FadeEntityData (p_class, p_guid)
	local s_Instance = FadeEntityData(p_class) 
 	local className = "FadeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fadeAudio", s_Instance.fadeAudio, "bool")
	Something(className, s_guid, "fadeMovie", s_Instance.fadeMovie, "bool")
	Something(className, s_guid, "fadeRumble", s_Instance.fadeRumble, "bool")
	Something(className, s_guid, "fadeScreen", s_Instance.fadeScreen, "bool")
	Something(className, s_guid, "fadeTime", s_Instance.fadeTime, "float")
	Something(className, s_guid, "fadeUI", s_Instance.fadeUI, "bool")
	Something(className, s_guid, "maxWaitFadedWhileStreamingTime", s_Instance.maxWaitFadedWhileStreamingTime, "float")
	Something(className, s_guid, "startFaded", s_Instance.startFaded, "bool")
end

function Type:FakeHingeData (p_class, p_guid)
	local s_Instance = FakeHingeData(p_class) 
 	local className = "FakeHingeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularDampening", s_Instance.angularDampening, "float")
	Something(className, s_guid, "extensionAxis", s_Instance.extensionAxis, "Vec3")
	Something(className, s_guid, "inertiaModifier", s_Instance.inertiaModifier, "float")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
	Something(className, s_guid, "pivot", s_Instance.pivot, "Vec3")
	Something(className, s_guid, "progressiveExponent", s_Instance.progressiveExponent, "float")
	Something(className, s_guid, "pullbackAcceleration", s_Instance.pullbackAcceleration, "float")
	Something(className, s_guid, "rotationAxis", s_Instance.rotationAxis, "Vec3")
end

function Type:FakePhysicsData (p_class, p_guid)
	local s_Instance = FakePhysicsData(p_class) 
 	local className = "FakePhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "childFakePhysics", s_Instance.childFakePhysics, "CtrRef")
	Something(className, s_guid, "endDampening", s_Instance.endDampening, "float")
	Something(className, s_guid, "gravityModifier", s_Instance.gravityModifier, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "minSpeed", s_Instance.minSpeed, "float")
	Something(className, s_guid, "startDampening", s_Instance.startDampening, "float")
	Something(className, s_guid, "startSpeed", s_Instance.startSpeed, "float")
end

function Type:FakeSpringData (p_class, p_guid)
	local s_Instance = FakeSpringData(p_class) 
 	local className = "FakeSpringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "acceleration", s_Instance.acceleration, "float")
	Something(className, s_guid, "damping", s_Instance.damping, "float")
	Something(className, s_guid, "direction", s_Instance.direction, "Vec3")
	Something(className, s_guid, "length", s_Instance.length, "float")
	Something(className, s_guid, "progressiveExponent", s_Instance.progressiveExponent, "float")
end

function Type:FenceModelEntityData (p_class, p_guid)
	local s_Instance = FenceModelEntityData(p_class) 
 	local className = "FenceModelEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:FilmGrainComponentData (p_class, p_guid)
	local s_Instance = FilmGrainComponentData(p_class) 
 	local className = "FilmGrainComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "colorScale", s_Instance.colorScale, "Vec3")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "linearFilteringEnable", s_Instance.linearFilteringEnable, "bool")
	Something(className, s_guid, "randomEnable", s_Instance.randomEnable, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
	Something(className, s_guid, "textureScale", s_Instance.textureScale, "Vec2")
end

function Type:FireEffectData (p_class, p_guid)
	local s_Instance = FireEffectData(p_class) 
 	local className = "FireEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "disableDuringZoom", s_Instance.disableDuringZoom, "bool")
	Something(className, s_guid, "effect", s_Instance.effect, "CtrRef")
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "rotation", s_Instance.rotation, "Vec3")
	Something(className, s_guid, "stopLoopingEffects", s_Instance.stopLoopingEffects, "bool")
	Something(className, s_guid, "updateTransform", s_Instance.updateTransform, "bool")
	Something(className, s_guid, "useZoomOffset", s_Instance.useZoomOffset, "bool")
	Something(className, s_guid, "useZoomRotation", s_Instance.useZoomRotation, "bool")
	Something(className, s_guid, "zoomOffset", s_Instance.zoomOffset, "Vec3")
	Something(className, s_guid, "zoomRotation", s_Instance.zoomRotation, "Vec3")
end

function Type:FireLogicData (p_class, p_guid)
	local s_Instance = FireLogicData(p_class) 
 	local className = "FireLogicData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alwaysAutoReload", s_Instance.alwaysAutoReload, "bool")
	Something(className, s_guid, "automaticDelay", s_Instance.automaticDelay, "float")
	Something(className, s_guid, "boltAction", s_Instance.boltAction, "BoltActionData")
	Something(className, s_guid, "clientFireRateMultiplier", s_Instance.clientFireRateMultiplier, "float")
	Something(className, s_guid, "cycleFireModeInputAction", s_Instance.cycleFireModeInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "fireInputAction", s_Instance.fireInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "fireLogicType", s_Instance.fireLogicType, "fb.FireLogicType)")
	Something(className, s_guid, "fireLogicTypeArray", s_Instance.fireLogicTypeArray, "List<fb).FireLogicType>")
	Something(className, s_guid, "forceReloadActionOnFireTrigger", s_Instance.forceReloadActionOnFireTrigger, "bool")
	Something(className, s_guid, "holdAndRelease", s_Instance.holdAndRelease, "HoldAndReleaseData")
	Something(className, s_guid, "holdOffReloadUntilFireRelease", s_Instance.holdOffReloadUntilFireRelease, "bool")
	Something(className, s_guid, "holdOffReloadUntilZoomRelease", s_Instance.holdOffReloadUntilZoomRelease, "bool")
	Something(className, s_guid, "preFireDelay", s_Instance.preFireDelay, "float")
	Something(className, s_guid, "rateOfFire", s_Instance.rateOfFire, "float")
	Something(className, s_guid, "rateOfFireForBurst", s_Instance.rateOfFireForBurst, "float")
	Something(className, s_guid, "recoil", s_Instance.recoil, "RecoilData")
	Something(className, s_guid, "reloadDelay", s_Instance.reloadDelay, "float")
	Something(className, s_guid, "reloadInputAction", s_Instance.reloadInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "reloadLogic", s_Instance.reloadLogic, "fb.ReloadLogic)")
	Something(className, s_guid, "reloadThreshold", s_Instance.reloadThreshold, "float")
	Something(className, s_guid, "reloadTime", s_Instance.reloadTime, "float")
	Something(className, s_guid, "reloadTimeBulletsLeft", s_Instance.reloadTimeBulletsLeft, "float")
	Something(className, s_guid, "reloadType", s_Instance.reloadType, "fb.ReloadType)")
	Something(className, s_guid, "triggerPullWeight", s_Instance.triggerPullWeight, "float")
	Something(className, s_guid, "fireLogicData", s_Instance.fireLogicData,  "readonly")
	Something(className, s_guid, "fireLogicType", s_Instance.fireLogicType,  "uint")
end

function Type:FiringDispersionData (p_class, p_guid)
	local s_Instance = FiringDispersionData(p_class) 
 	local className = "FiringDispersionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decreasePerSecond", s_Instance.decreasePerSecond, "float")
	Something(className, s_guid, "increasePerShot", s_Instance.increasePerShot, "float")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:FiringFunctionData (p_class, p_guid)
	local s_Instance = FiringFunctionData(p_class) 
 	local className = "FiringFunctionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammo", s_Instance.ammo, "AmmoConfigData")
	Something(className, s_guid, "ammoCrateReloadDelay", s_Instance.ammoCrateReloadDelay, "float")
	Something(className, s_guid, "dispersion", s_Instance.dispersion, "List<FiringDispersionData)>")
	Something(className, s_guid, "fireEffects1p", s_Instance.fireEffects1p, "List<FireEffectData)>")
	Something(className, s_guid, "fireEffects3p", s_Instance.fireEffects3p, "List<FireEffectData)>")
	Something(className, s_guid, "fireLogic", s_Instance.fireLogic, "FireLogicData")
	Something(className, s_guid, "overHeat", s_Instance.overHeat, "OverHeatData")
	Something(className, s_guid, "selfHealTimeWhenDeployed", s_Instance.selfHealTimeWhenDeployed, "float")
	Something(className, s_guid, "shot", s_Instance.shot, "ShotConfigData")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
	Something(className, s_guid, "unlimitedAmmoForAI", s_Instance.unlimitedAmmoForAI, "bool")
	Something(className, s_guid, "usePrimaryAmmo", s_Instance.usePrimaryAmmo, "bool")
	Something(className, s_guid, "weaponDispersion", s_Instance.weaponDispersion, "SoldierWeaponDispersion")
end

function Type:FirstPersonCameraData (p_class, p_guid)
	local s_Instance = FirstPersonCameraData(p_class) 
 	local className = "FirstPersonCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraSpringEffect", s_Instance.cameraSpringEffect, "CtrRef")
	Something(className, s_guid, "moveForwardModifier", s_Instance.moveForwardModifier, "float")
	Something(className, s_guid, "moveStrafeModifier", s_Instance.moveStrafeModifier, "float")
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "offsetReleaseModifier", s_Instance.offsetReleaseModifier, "float")
	Something(className, s_guid, "releaseModifier", s_Instance.releaseModifier, "float")
	Something(className, s_guid, "releaseModifierPitch", s_Instance.releaseModifierPitch, "float")
	Something(className, s_guid, "releaseModifierRoll", s_Instance.releaseModifierRoll, "float")
	Something(className, s_guid, "releaseModifierYaw", s_Instance.releaseModifierYaw, "float")
	Something(className, s_guid, "rotatePitchModifier", s_Instance.rotatePitchModifier, "float")
	Something(className, s_guid, "rotateRollModifier", s_Instance.rotateRollModifier, "float")
	Something(className, s_guid, "rotateYawModifier", s_Instance.rotateYawModifier, "float")
	Something(className, s_guid, "rotation", s_Instance.rotation, "Vec3")
	Something(className, s_guid, "rotationAdditionToOffset", s_Instance.rotationAdditionToOffset, "float")
	Something(className, s_guid, "weaponBaseOffset", s_Instance.weaponBaseOffset, "Vec3")
	Something(className, s_guid, "weaponLagRotationOffset", s_Instance.weaponLagRotationOffset, "Vec3")
	Something(className, s_guid, "weaponSpringEffect", s_Instance.weaponSpringEffect, "CtrRef")
	Something(className, s_guid, "zoomMoveForwardModifier", s_Instance.zoomMoveForwardModifier, "float")
	Something(className, s_guid, "zoomMoveStrafeModifier", s_Instance.zoomMoveStrafeModifier, "float")
	Something(className, s_guid, "zoomOffsetReleaseModifier", s_Instance.zoomOffsetReleaseModifier, "float")
	Something(className, s_guid, "zoomReleaseModifierPitch", s_Instance.zoomReleaseModifierPitch, "float")
	Something(className, s_guid, "zoomReleaseModifierRoll", s_Instance.zoomReleaseModifierRoll, "float")
	Something(className, s_guid, "zoomReleaseModifierYaw", s_Instance.zoomReleaseModifierYaw, "float")
	Something(className, s_guid, "zoomRotatePitchModifier", s_Instance.zoomRotatePitchModifier, "float")
	Something(className, s_guid, "zoomRotateRollModifier", s_Instance.zoomRotateRollModifier, "float")
	Something(className, s_guid, "zoomRotateYawModifier", s_Instance.zoomRotateYawModifier, "float")
end

function Type:FlagComponentData (p_class, p_guid)
	local s_Instance = FlagComponentData(p_class) 
 	local className = "FlagComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flag_Team1", s_Instance.flag_Team1, "CtrRef")
	Something(className, s_guid, "flag_Team2", s_Instance.flag_Team2, "CtrRef")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:FlagCounterEntityData (p_class, p_guid)
	local s_Instance = FlagCounterEntityData(p_class) 
 	local className = "FlagCounterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enemyFlagProgress", s_Instance.enemyFlagProgress, "float")
	Something(className, s_guid, "objectiveFlagCount", s_Instance.objectiveFlagCount, "int")
	Something(className, s_guid, "roundTime", s_Instance.roundTime, "float")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "visibleInMinimap", s_Instance.visibleInMinimap, "bool")
end

function Type:FlapComponentData (p_class, p_guid)
	local s_Instance = FlapComponentData(p_class) 
 	local className = "FlapComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rotationAxis", s_Instance.rotationAxis, "RotationAxisEnum")
	Something(className, s_guid, "rotationScale", s_Instance.rotationScale, "float")
end

function Type:FlareEntityData (p_class, p_guid)
	local s_Instance = FlareEntityData(p_class) 
 	local className = "FlareEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flareRange", s_Instance.flareRange, "float")
end

function Type:FlashlightWeaponData (p_class, p_guid)
	local s_Instance = FlashlightWeaponData(p_class) 
 	local className = "FlashlightWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "range", s_Instance.range, "float")
	Something(className, s_guid, "updateFrequency", s_Instance.updateFrequency, "float")
end

function Type:FlatOutputNodeData (p_class, p_guid)
	local s_Instance = FlatOutputNodeData(p_class) 
 	local className = "FlatOutputNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "centerLevel", s_Instance.centerLevel, "AudioGraphNodePort")
	Something(className, s_guid, "lfeLevel", s_Instance.lfeLevel, "AudioGraphNodePort")
	Something(className, s_guid, "panPlugin", s_Instance.panPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "reverbGain", s_Instance.reverbGain, "float")
	Something(className, s_guid, "reverbSend", s_Instance.reverbSend, "CtrRef")
	Something(className, s_guid, "reverbSendPlugin", s_Instance.reverbSendPlugin, "SoundGraphPluginRef")
end

function Type:FloatEntityData (p_class, p_guid)
	local s_Instance = FloatEntityData(p_class) 
 	local className = "FloatEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "float")
	Something(className, s_guid, "incDecValue", s_Instance.incDecValue, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:FloatHubEntityData (p_class, p_guid)
	local s_Instance = FloatHubEntityData(p_class) 
 	local className = "FloatHubEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputCount", s_Instance.inputCount, "int")
	Something(className, s_guid, "inputSelect", s_Instance.inputSelect, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:FloatOption (p_class, p_guid)
	local s_Instance = FloatOption(p_class) 
 	local className = "FloatOption"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "step", s_Instance.step, "float")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:FloatPhysicsData (p_class, p_guid)
	local s_Instance = FloatPhysicsData(p_class) 
 	local className = "FloatPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "density", s_Instance.density, "float")
	Something(className, s_guid, "filledDensity", s_Instance.filledDensity, "float")
end

function Type:FloatPropertyTrackData (p_class, p_guid)
	local s_Instance = FloatPropertyTrackData(p_class) 
 	local className = "FloatPropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<float)>")
end

function Type:FloatRange (p_class, p_guid)
	local s_Instance = FloatRange(p_class) 
 	local className = "FloatRange"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
end

function Type:FloatRangeDefaultZero (p_class, p_guid)
	local s_Instance = FloatRangeDefaultZero(p_class) 
 	local className = "FloatRangeDefaultZero"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
end

function Type:FloatRecordingData (p_class, p_guid)
	local s_Instance = FloatRecordingData(p_class) 
 	local className = "FloatRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<float)>")
end

function Type:FloatUnlockValuePair (p_class, p_guid)
	local s_Instance = FloatUnlockValuePair(p_class) 
 	local className = "FloatUnlockValuePair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "float")
	Something(className, s_guid, "unlockedValue", s_Instance.unlockedValue, "float")
end

function Type:FogComponentData (p_class, p_guid)
	local s_Instance = FogComponentData(p_class) 
 	local className = "FogComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "curve", s_Instance.curve, "Vec4")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "end", s_Instance.endValue, "float")
	Something(className, s_guid, "fogColor", s_Instance.fogColor, "Vec3")
	Something(className, s_guid, "fogColorCurve", s_Instance.fogColorCurve, "Vec4")
	Something(className, s_guid, "fogColorEnable", s_Instance.fogColorEnable, "bool")
	Something(className, s_guid, "fogColorEnd", s_Instance.fogColorEnd, "float")
	Something(className, s_guid, "fogColorStart", s_Instance.fogColorStart, "float")
	Something(className, s_guid, "fogDistanceMultiplier", s_Instance.fogDistanceMultiplier, "float")
	Something(className, s_guid, "fogGradientEnable", s_Instance.fogGradientEnable, "bool")
	Something(className, s_guid, "heightFogAltitude", s_Instance.heightFogAltitude, "float")
	Something(className, s_guid, "heightFogDepth", s_Instance.heightFogDepth, "float")
	Something(className, s_guid, "heightFogEnable", s_Instance.heightFogEnable, "bool")
	Something(className, s_guid, "heightFogFollowCamera", s_Instance.heightFogFollowCamera, "float")
	Something(className, s_guid, "heightFogVisibilityRange", s_Instance.heightFogVisibilityRange, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "start", s_Instance.start, "float")
	Something(className, s_guid, "transparencyFadeClamp", s_Instance.transparencyFadeClamp, "float")
	Something(className, s_guid, "transparencyFadeEnd", s_Instance.transparencyFadeEnd, "float")
	Something(className, s_guid, "transparencyFadeStart", s_Instance.transparencyFadeStart, "float")
end

function Type:FogEffectState (p_class, p_guid)
	local s_Instance = FogEffectState(p_class) 
 	local className = "FogEffectState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "curve", s_Instance.curve, "Vec4")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "end", s_Instance.endValue, "float")
	Something(className, s_guid, "fogColor", s_Instance.fogColor, "Vec3")
	Something(className, s_guid, "fogColorCurve", s_Instance.fogColorCurve, "Vec4")
	Something(className, s_guid, "fogColorEnd", s_Instance.fogColorEnd, "float")
	Something(className, s_guid, "fogColorStart", s_Instance.fogColorStart, "float")
	Something(className, s_guid, "heightFogAltitude", s_Instance.heightFogAltitude, "float")
	Something(className, s_guid, "heightFogDepth", s_Instance.heightFogDepth, "float")
	Something(className, s_guid, "heightFogEnable", s_Instance.heightFogEnable, "bool")
	Something(className, s_guid, "heightFogFollowCamera", s_Instance.heightFogFollowCamera, "float")
	Something(className, s_guid, "heightFogVisibilityRange", s_Instance.heightFogVisibilityRange, "float")
	Something(className, s_guid, "start", s_Instance.start, "float")
	Something(className, s_guid, "transparencyFadeClamp", s_Instance.transparencyFadeClamp, "float")
	Something(className, s_guid, "transparencyFadeEnd", s_Instance.transparencyFadeEnd, "float")
	Something(className, s_guid, "transparencyFadeStart", s_Instance.transparencyFadeStart, "float")
end

function Type:FollowConstantData (p_class, p_guid)
	local s_Instance = FollowConstantData(p_class) 
 	local className = "FollowConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceFromPlayerBeforeTeleport", s_Instance.distanceFromPlayerBeforeTeleport, "float")
	Something(className, s_guid, "followAiInCombatMaxDistance", s_Instance.followAiInCombatMaxDistance, "float")
	Something(className, s_guid, "followAiMaxDistance", s_Instance.followAiMaxDistance, "float")
	Something(className, s_guid, "followHumanInCombatMaxDistance", s_Instance.followHumanInCombatMaxDistance, "float")
	Something(className, s_guid, "followHumanMaxDistance", s_Instance.followHumanMaxDistance, "float")
	Something(className, s_guid, "followInertia", s_Instance.followInertia, "float")
	Something(className, s_guid, "followMimicPoseDistance", s_Instance.followMimicPoseDistance, "float")
	Something(className, s_guid, "lookAwayAngle", s_Instance.lookAwayAngle, "float")
end

function Type:FollowEnvelopeNodeData (p_class, p_guid)
	local s_Instance = FollowEnvelopeNodeData(p_class) 
 	local className = "FollowEnvelopeNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "base", s_Instance.base, "float")
	Something(className, s_guid, "pivot", s_Instance.pivot, "float")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
	Something(className, s_guid, "x", s_Instance.x, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
end

function Type:FollowPlayerOrderEntityData (p_class, p_guid)
	local s_Instance = FollowPlayerOrderEntityData(p_class) 
 	local className = "FollowPlayerOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "combatForbidden", s_Instance.combatForbidden, "bool")
	Something(className, s_guid, "formation", s_Instance.formation, "CtrRef")
end

function Type:FollowWaypointsEntityData (p_class, p_guid)
	local s_Instance = FollowWaypointsEntityData(p_class) 
 	local className = "FollowWaypointsEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "startAtGeometricallyClosestWaypoint", s_Instance.startAtGeometricallyClosestWaypoint, "bool")
	Something(className, s_guid, "typeOfRoute", s_Instance.typeOfRoute, "RouteType")
	Something(className, s_guid, "usePathFinding", s_Instance.usePathFinding, "bool")
end

function Type:FootStepTrigger (p_class, p_guid)
	local s_Instance = FootStepTrigger(p_class) 
 	local className = "FootStepTrigger"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:FormationData (p_class, p_guid)
	local s_Instance = FormationData(p_class) 
 	local className = "FormationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "positions", s_Instance.positions, "List<Vec3)>")
end

function Type:FormationHolder (p_class, p_guid)
	local s_Instance = FormationHolder(p_class) 
 	local className = "FormationHolder"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "formations", s_Instance.formations, "List<CtrRef)>")
end

function Type:FPSCameraData (p_class, p_guid)
	local s_Instance = FPSCameraData(p_class) 
 	local className = "FPSCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurEffectSettings", s_Instance.blurEffectSettings, "BlurEffectData")
	Something(className, s_guid, "fOV", s_Instance.fOV, "float")
	Something(className, s_guid, "turnEffectSettings", s_Instance.turnEffectSettings, "TurnEffectData")
end

function Type:FramerateHistogramPerformanceEvent (p_class, p_guid)
	local s_Instance = FramerateHistogramPerformanceEvent(p_class) 
 	local className = "FramerateHistogramPerformanceEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "above60", s_Instance.above60, "float")
	Something(className, s_guid, "below10", s_Instance.below10, "float")
	Something(className, s_guid, "below15", s_Instance.below15, "float")
	Something(className, s_guid, "below20", s_Instance.below20, "float")
	Something(className, s_guid, "below25", s_Instance.below25, "float")
	Something(className, s_guid, "below30", s_Instance.below30, "float")
	Something(className, s_guid, "below5", s_Instance.below5, "float")
	Something(className, s_guid, "below60", s_Instance.below60, "float")
	Something(className, s_guid, "performanceLink", s_Instance.performanceLink, "GUID")
	Something(className, s_guid, "spikeAverage", s_Instance.spikeAverage, "float")
end

function Type:FrequencyShiftSsbNodeData (p_class, p_guid)
	local s_Instance = FrequencyShiftSsbNodeData(p_class) 
 	local className = "FrequencyShiftSsbNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "filter", s_Instance.filter, "FrequencyShiftSsbFilter")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:FrictionScaleAtVelocity (p_class, p_guid)
	local s_Instance = FrictionScaleAtVelocity(p_class) 
 	local className = "FrictionScaleAtVelocity"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frictionScale", s_Instance.frictionScale, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:FriendlyFireEntityData (p_class, p_guid)
	local s_Instance = FriendlyFireEntityData(p_class) 
 	local className = "FriendlyFireEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decayRate", s_Instance.decayRate, "float")
	Something(className, s_guid, "enemyCommitmentAllocation", s_Instance.enemyCommitmentAllocation, "float")
	Something(className, s_guid, "failureThreshold", s_Instance.failureThreshold, "float")
	Something(className, s_guid, "friendlyCommitmentAllocation", s_Instance.friendlyCommitmentAllocation, "float")
	Something(className, s_guid, "maxCommitment", s_Instance.maxCommitment, "float")
	Something(className, s_guid, "teams", s_Instance.teams, "List<TeamId)>")
	Something(className, s_guid, "friendlyFireEntityData", s_Instance.friendlyFireEntityData,  "readonly")
	Something(className, s_guid, "teamId", s_Instance.teamId,  "uint")
end

function Type:FriendZoneDebugRenderEntityData (p_class, p_guid)
	local s_Instance = FriendZoneDebugRenderEntityData(p_class) 
 	local className = "FriendZoneDebugRenderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:FriendZoneEntityData (p_class, p_guid)
	local s_Instance = FriendZoneEntityData(p_class) 
 	local className = "FriendZoneEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "corpsTimeout", s_Instance.corpsTimeout, "int")
	Something(className, s_guid, "corpsWeight", s_Instance.corpsWeight, "int")
	Something(className, s_guid, "countCorpsesForAllTeams", s_Instance.countCorpsesForAllTeams, "bool")
	Something(className, s_guid, "enemyWeight", s_Instance.enemyWeight, "int")
	Something(className, s_guid, "friendlyWeight", s_Instance.friendlyWeight, "int")
	Something(className, s_guid, "initialZoneRandomized", s_Instance.initialZoneRandomized, "bool")
end

function Type:GainFaderNodeData (p_class, p_guid)
	local s_Instance = GainFaderNodeData(p_class) 
 	local className = "GainFaderNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "fadeTime", s_Instance.fadeTime, "AudioGraphNodePort")
	Something(className, s_guid, "fadeType", s_Instance.fadeType, "GainFaderFadeType")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "startTime", s_Instance.startTime, "AudioGraphNodePort")
end

function Type:GainNodeData (p_class, p_guid)
	local s_Instance = GainNodeData(p_class) 
 	local className = "GainNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:GameAnimationConfig (p_class, p_guid)
	local s_Instance = GameAnimationConfig(p_class) 
 	local className = "GameAnimationConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientEnable", s_Instance.clientEnable, "bool")
	Something(className, s_guid, "serverEnable", s_Instance.serverEnable, "bool")
	Something(className, s_guid, "useRawGamepadInput", s_Instance.useRawGamepadInput, "bool")
end

function Type:GameAnimationSettings (p_class, p_guid)
	local s_Instance = GameAnimationSettings(p_class) 
 	local className = "GameAnimationSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antOnClientOnlyGamemodes", s_Instance.antOnClientOnlyGamemodes, "List<string)>")
	Something(className, s_guid, "clientEnable", s_Instance.clientEnable, "bool")
	Something(className, s_guid, "serverEnable", s_Instance.serverEnable, "bool")
	Something(className, s_guid, "temporalLoddingFarDistance", s_Instance.temporalLoddingFarDistance, "float")
	Something(className, s_guid, "temporalLoddingFifthDeltaTime", s_Instance.temporalLoddingFifthDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingFifthDistance", s_Instance.temporalLoddingFifthDistance, "float")
	Something(className, s_guid, "temporalLoddingFirstDeltaTime", s_Instance.temporalLoddingFirstDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingFirstDistance", s_Instance.temporalLoddingFirstDistance, "float")
	Something(className, s_guid, "temporalLoddingFourthDeltaTime", s_Instance.temporalLoddingFourthDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingFourthDistance", s_Instance.temporalLoddingFourthDistance, "float")
	Something(className, s_guid, "temporalLoddingSecondDeltaTime", s_Instance.temporalLoddingSecondDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingSecondDistance", s_Instance.temporalLoddingSecondDistance, "float")
	Something(className, s_guid, "temporalLoddingSixthDeltaTime", s_Instance.temporalLoddingSixthDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingSixthDistance", s_Instance.temporalLoddingSixthDistance, "float")
	Something(className, s_guid, "temporalLoddingThirdDeltaTime", s_Instance.temporalLoddingThirdDeltaTime, "float")
	Something(className, s_guid, "temporalLoddingThirdDistance", s_Instance.temporalLoddingThirdDistance, "float")
	Something(className, s_guid, "useAnimationDrivenCharacter", s_Instance.useAnimationDrivenCharacter, "bool")
	Something(className, s_guid, "useRawGamepadInput", s_Instance.useRawGamepadInput, "bool")
end

function Type:GameDataContainerAsset (p_class, p_guid)
	local s_Instance = GameDataContainerAsset(p_class) 
 	local className = "GameDataContainerAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "CtrRef")
end

function Type:GameEntityData (p_class, p_guid)
	local s_Instance = GameEntityData(p_class) 
 	local className = "GameEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "components", s_Instance.components, "List<CtrRef)>")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "runtimeComponentCount", s_Instance.runtimeComponentCount, "sbyte")
end

function Type:GameInteractionEntityData (p_class, p_guid)
	local s_Instance = GameInteractionEntityData(p_class) 
 	local className = "GameInteractionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blink", s_Instance.blink, "BlinkType")
	Something(className, s_guid, "capturepointVerticalOffset", s_Instance.capturepointVerticalOffset, "float")
	Something(className, s_guid, "delayBetweenUses", s_Instance.delayBetweenUses, "float")
	Something(className, s_guid, "enemyTextSid", s_Instance.enemyTextSid, "string")
	Something(className, s_guid, "friendlyTextSid", s_Instance.friendlyTextSid, "string")
	Something(className, s_guid, "holdToInteractTime", s_Instance.holdToInteractTime, "float")
	Something(className, s_guid, "inputAction", s_Instance.inputAction, "EntryInputActionEnum")
	Something(className, s_guid, "interactingSid", s_Instance.interactingSid, "string")
	Something(className, s_guid, "interactionEntityType", s_Instance.interactionEntityType, "fb.InteractionEntityType)")
	Something(className, s_guid, "interactionSid", s_Instance.interactionSid, "string")
	Something(className, s_guid, "interactionVerticalOffset", s_Instance.interactionVerticalOffset, "float")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "showAsCapturePoint", s_Instance.showAsCapturePoint, "bool")
	Something(className, s_guid, "shrinkSnap", s_Instance.shrinkSnap, "bool")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
end

function Type:GameModeConfiguration (p_class, p_guid)
	local s_Instance = GameModeConfiguration(p_class) 
 	local className = "GameModeConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "information", s_Instance.information, "List<GameModeInformation)>")
end

function Type:GameModeInformation (p_class, p_guid)
	local s_Instance = GameModeInformation(p_class) 
 	local className = "GameModeInformation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowFallbackToDefault", s_Instance.allowFallbackToDefault, "bool")
	Something(className, s_guid, "defaultSize", s_Instance.defaultSize, "GameModeSize")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "sizes", s_Instance.sizes, "List<GameModeSize)>")
end

function Type:GameModeSettings (p_class, p_guid)
	local s_Instance = GameModeSettings(p_class) 
 	local className = "GameModeSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "information", s_Instance.information, "List<GameModeInformation)>")
end

function Type:GameModeSize (p_class, p_guid)
	local s_Instance = GameModeSize(p_class) 
 	local className = "GameModeSize"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forceSquad", s_Instance.forceSquad, "bool")
	Something(className, s_guid, "metaIdentifier", s_Instance.metaIdentifier, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "playerCount", s_Instance.playerCount, "uint")
	Something(className, s_guid, "roundsPerMap", s_Instance.roundsPerMap, "uint")
	Something(className, s_guid, "shortName", s_Instance.shortName, "string")
	Something(className, s_guid, "teams", s_Instance.teams, "List<GameModeTeamSize)>")
end

function Type:GameModeTeamSize (p_class, p_guid)
	local s_Instance = GameModeTeamSize(p_class) 
 	local className = "GameModeTeamSize"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "playerCount", s_Instance.playerCount, "uint")
	Something(className, s_guid, "squadSize", s_Instance.squadSize, "uint")
end

function Type:GameModeVariation (p_class, p_guid)
	local s_Instance = GameModeVariation(p_class) 
 	local className = "GameModeVariation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:GameObjectData (p_class, p_guid)
	local s_Instance = GameObjectData(p_class) 
 	local className = "GameObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "indexInBlueprint", s_Instance.indexInBlueprint, "ushort")
	Something(className, s_guid, "isEventConnectionTarget", s_Instance.isEventConnectionTarget, "sbyte")
	Something(className, s_guid, "isPropertyConnectionTarget", s_Instance.isPropertyConnectionTarget, "sbyte")
end

function Type:GamePhysicsEntityData (p_class, p_guid)
	local s_Instance = GamePhysicsEntityData(p_class) 
 	local className = "GamePhysicsEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "physicsData", s_Instance.physicsData, "CtrRef")
end

function Type:GameplayBone (p_class, p_guid)
	local s_Instance = GameplayBone(p_class) 
 	local className = "GameplayBone"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bone", s_Instance.bone, "GameplayBones")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:GameRenderSettings (p_class, p_guid)
	local s_Instance = GameRenderSettings(p_class) 
 	local className = "GameRenderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurEnable", s_Instance.blurEnable, "bool")
	Something(className, s_guid, "buildJobSyncEnable", s_Instance.buildJobSyncEnable, "bool")
	Something(className, s_guid, "cameraCutMaxFrameTranslation", s_Instance.cameraCutMaxFrameTranslation, "float")
	Something(className, s_guid, "debugRendererEnable", s_Instance.debugRendererEnable, "bool")
	Something(className, s_guid, "debugRenderServiceEnable", s_Instance.debugRenderServiceEnable, "bool")
	Something(className, s_guid, "destructionVolumeDrawEnable", s_Instance.destructionVolumeDrawEnable, "bool")
	Something(className, s_guid, "drawFps", s_Instance.drawFps, "bool")
	Something(className, s_guid, "drawFpsHistogram", s_Instance.drawFpsHistogram, "bool")
	Something(className, s_guid, "drawFpsMethod", s_Instance.drawFpsMethod, "uint")
	Something(className, s_guid, "drawInfo", s_Instance.drawInfo, "bool")
	Something(className, s_guid, "drawScreenInfo", s_Instance.drawScreenInfo, "bool")
	Something(className, s_guid, "edgeModelAdditionalCullEnable", s_Instance.edgeModelAdditionalCullEnable, "bool")
	Something(className, s_guid, "edgeModelCastShadowsEnable", s_Instance.edgeModelCastShadowsEnable, "bool")
	Something(className, s_guid, "edgeModelCullEnable", s_Instance.edgeModelCullEnable, "bool")
	Something(className, s_guid, "edgeModelDepthBiasEnable", s_Instance.edgeModelDepthBiasEnable, "bool")
	Something(className, s_guid, "edgeModelDrawBoxes", s_Instance.edgeModelDrawBoxes, "bool")
	Something(className, s_guid, "edgeModelDrawStats", s_Instance.edgeModelDrawStats, "bool")
	Something(className, s_guid, "edgeModelForceLod", s_Instance.edgeModelForceLod, "int")
	Something(className, s_guid, "edgeModelFrustumCullEnable", s_Instance.edgeModelFrustumCullEnable, "bool")
	Something(className, s_guid, "edgeModelLodScale", s_Instance.edgeModelLodScale, "float")
	Something(className, s_guid, "edgeModelMaxVisibleInstanceCount", s_Instance.edgeModelMaxVisibleInstanceCount, "uint")
	Something(className, s_guid, "edgeModelOcclusionCullEnable", s_Instance.edgeModelOcclusionCullEnable, "bool")
	Something(className, s_guid, "edgeModelScreenAreaScale", s_Instance.edgeModelScreenAreaScale, "float")
	Something(className, s_guid, "edgeModelsEnable", s_Instance.edgeModelsEnable, "bool")
	Something(className, s_guid, "edgeModelShadowDepthBiasEnable", s_Instance.edgeModelShadowDepthBiasEnable, "bool")
	Something(className, s_guid, "edgeModelSpuInstancingEnable", s_Instance.edgeModelSpuInstancingEnable, "bool")
	Something(className, s_guid, "edgeModelUseLodBox", s_Instance.edgeModelUseLodBox, "bool")
	Something(className, s_guid, "edgeModelUseMainLodEnable", s_Instance.edgeModelUseMainLodEnable, "bool")
	Something(className, s_guid, "edgeModelViewDistance", s_Instance.edgeModelViewDistance, "float")
	Something(className, s_guid, "emittersEnable", s_Instance.emittersEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "entityRenderEnable", s_Instance.entityRenderEnable, "bool")
	Something(className, s_guid, "fadeEnable", s_Instance.fadeEnable, "bool")
	Something(className, s_guid, "fadeWaitingEnable", s_Instance.fadeWaitingEnable, "bool")
	Something(className, s_guid, "forceBlurAmount", s_Instance.forceBlurAmount, "float")
	Something(className, s_guid, "forceFov", s_Instance.forceFov, "float")
	Something(className, s_guid, "forceOrthoViewEnable", s_Instance.forceOrthoViewEnable, "bool")
	Something(className, s_guid, "forceOrthoViewSize", s_Instance.forceOrthoViewSize, "float")
	Something(className, s_guid, "forceSquareOrthoView", s_Instance.forceSquareOrthoView, "bool")
	Something(className, s_guid, "forceVSyncEnable", s_Instance.forceVSyncEnable, "bool")
	Something(className, s_guid, "forceWorldFadeAmount", s_Instance.forceWorldFadeAmount, "float")
	Something(className, s_guid, "fovMultiplier", s_Instance.fovMultiplier, "float")
	Something(className, s_guid, "fullscreen", s_Instance.fullscreen, "bool")
	Something(className, s_guid, "gcmHudEnable", s_Instance.gcmHudEnable, "bool")
	Something(className, s_guid, "gpuProfilerEnable", s_Instance.gpuProfilerEnable, "bool")
	Something(className, s_guid, "inactiveSkipFrameCount", s_Instance.inactiveSkipFrameCount, "uint")
	Something(className, s_guid, "initialClearEnable", s_Instance.initialClearEnable, "bool")
	Something(className, s_guid, "jobEnable", s_Instance.jobEnable, "bool")
	Something(className, s_guid, "lockView", s_Instance.lockView, "bool")
	Something(className, s_guid, "movieVSyncEnable", s_Instance.movieVSyncEnable, "bool")
	Something(className, s_guid, "nearPlane", s_Instance.nearPlane, "float")
	Something(className, s_guid, "perfOverlayEnable", s_Instance.perfOverlayEnable, "bool")
	Something(className, s_guid, "perfOverlayLatestFrameTimeEnable", s_Instance.perfOverlayLatestFrameTimeEnable, "bool")
	Something(className, s_guid, "perfOverlayVisible", s_Instance.perfOverlayVisible, "bool")
	Something(className, s_guid, "ps3CellMemoryTexturesEnable", s_Instance.ps3CellMemoryTexturesEnable, "bool")
	Something(className, s_guid, "ps3FrameLocalBufferSize", s_Instance.ps3FrameLocalBufferSize, "uint")
	Something(className, s_guid, "ps3FrameMainBufferSize", s_Instance.ps3FrameMainBufferSize, "uint")
	Something(className, s_guid, "ps3LinearFrameCmdBufEnable", s_Instance.ps3LinearFrameCmdBufEnable, "bool")
	Something(className, s_guid, "ps3Res1280x704Enable", s_Instance.ps3Res1280x704Enable, "bool")
	Something(className, s_guid, "ps3VideoGamma", s_Instance.ps3VideoGamma, "float")
	Something(className, s_guid, "ps3VSyncMethod", s_Instance.ps3VSyncMethod, "uint")
	Something(className, s_guid, "resetLockedView", s_Instance.resetLockedView, "bool")
	Something(className, s_guid, "splitScreenTestViewCount", s_Instance.splitScreenTestViewCount, "uint")
	Something(className, s_guid, "staticModelCullJobCount", s_Instance.staticModelCullJobCount, "uint")
	Something(className, s_guid, "staticModelCullSpuJobEnable", s_Instance.staticModelCullSpuJobEnable, "bool")
	Something(className, s_guid, "staticModelDrawBoxes", s_Instance.staticModelDrawBoxes, "bool")
	Something(className, s_guid, "staticModelDrawStats", s_Instance.staticModelDrawStats, "bool")
	Something(className, s_guid, "staticModelEnable", s_Instance.staticModelEnable, "bool")
	Something(className, s_guid, "staticModelMeshesEnable", s_Instance.staticModelMeshesEnable, "bool")
	Something(className, s_guid, "staticModelPartCullEnable", s_Instance.staticModelPartCullEnable, "bool")
	Something(className, s_guid, "staticModelPartFrustumCullEnable", s_Instance.staticModelPartFrustumCullEnable, "bool")
	Something(className, s_guid, "staticModelPartOcclusionCullEnable", s_Instance.staticModelPartOcclusionCullEnable, "bool")
	Something(className, s_guid, "staticModelPartOcclusionMaxScreenArea", s_Instance.staticModelPartOcclusionMaxScreenArea, "float")
	Something(className, s_guid, "staticModelPartShadowCullEnable", s_Instance.staticModelPartShadowCullEnable, "bool")
	Something(className, s_guid, "staticModelZPassEnable", s_Instance.staticModelZPassEnable, "bool")
	Something(className, s_guid, "stereoCrosshairDampingFactor", s_Instance.stereoCrosshairDampingFactor, "float")
	Something(className, s_guid, "stereoCrosshairMaxHitDepth", s_Instance.stereoCrosshairMaxHitDepth, "float")
	Something(className, s_guid, "stereoCrosshairRadius", s_Instance.stereoCrosshairRadius, "float")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
	Something(className, s_guid, "vSyncFlashTestEnable", s_Instance.vSyncFlashTestEnable, "bool")
	Something(className, s_guid, "xenonBufferTwoFramesEnable", s_Instance.xenonBufferTwoFramesEnable, "bool")
	Something(className, s_guid, "xenonGammaRampType", s_Instance.xenonGammaRampType, "uint")
	Something(className, s_guid, "xenonPresentImmediateThreshold", s_Instance.xenonPresentImmediateThreshold, "uint")
	Something(className, s_guid, "xenonRes1280x704Enable", s_Instance.xenonRes1280x704Enable, "bool")
	Something(className, s_guid, "xenonRingBufferSize", s_Instance.xenonRingBufferSize, "uint")
end

function Type:GameSettings (p_class, p_guid)
	local s_Instance = GameSettings(p_class) 
 	local className = "GameSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "adjustVehicleCenterOfMass", s_Instance.adjustVehicleCenterOfMass, "bool")
	Something(className, s_guid, "aimAssistEnabled", s_Instance.aimAssistEnabled, "bool")
	Something(className, s_guid, "aimAssistUsePolynomials", s_Instance.aimAssistUsePolynomials, "bool")
	Something(className, s_guid, "allowDestructionOutsideCombatArea", s_Instance.allowDestructionOutsideCombatArea, "bool")
	Something(className, s_guid, "autoAimEnabled", s_Instance.autoAimEnabled, "bool")
	Something(className, s_guid, "currentSKU", s_Instance.currentSKU, "SKU")
	Something(className, s_guid, "defaultLayerInclusion", s_Instance.defaultLayerInclusion, "string")
	Something(className, s_guid, "defaultTeamId", s_Instance.defaultTeamId, "TeamId")
	Something(className, s_guid, "difficultyIndex", s_Instance.difficultyIndex, "int")
	Something(className, s_guid, "difficultySettings", s_Instance.difficultySettings, "CtrRef")
	Something(className, s_guid, "enableLoadingProfile", s_Instance.enableLoadingProfile, "bool")
	Something(className, s_guid, "forceDisableFreeStreaming", s_Instance.forceDisableFreeStreaming, "bool")
	Something(className, s_guid, "forceFreeStreaming", s_Instance.forceFreeStreaming, "bool")
	Something(className, s_guid, "gameAdministrationEnabled", s_Instance.gameAdministrationEnabled, "bool")
	Something(className, s_guid, "hasUnlimitedAmmo", s_Instance.hasUnlimitedAmmo, "bool")
	Something(className, s_guid, "hasUnlimitedMags", s_Instance.hasUnlimitedMags, "bool")
	Something(className, s_guid, "inputConfiguration", s_Instance.inputConfiguration, "List<CtrRef)>")
	Something(className, s_guid, "isGodMode", s_Instance.isGodMode, "bool")
	Something(className, s_guid, "isJesusMode", s_Instance.isJesusMode, "bool")
	Something(className, s_guid, "isJesusModeAi", s_Instance.isJesusModeAi, "bool")
	Something(className, s_guid, "layerInclusionTable", s_Instance.layerInclusionTable, "CtrRef")
	Something(className, s_guid, "level", s_Instance.level, "string")
	Something(className, s_guid, "levelWarmUpTime", s_Instance.levelWarmUpTime, "float")
	Something(className, s_guid, "logFileCollisionMode", s_Instance.logFileCollisionMode, "fb.LogFileCollisionMode)")
	Something(className, s_guid, "logFileEnable", s_Instance.logFileEnable, "bool")
	Something(className, s_guid, "logFileRotationHistoryLength", s_Instance.logFileRotationHistoryLength, "uint")
	Something(className, s_guid, "logHistory", s_Instance.logHistory, "uint")
	Something(className, s_guid, "maxPlayerCount", s_Instance.maxPlayerCount, "uint")
	Something(className, s_guid, "maxSpectatorCount", s_Instance.maxSpectatorCount, "uint")
	Something(className, s_guid, "metadataContainers", s_Instance.metadataContainers, "List<CtrRef)>")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "player", s_Instance.player, "CtrRef")
	Something(className, s_guid, "pS3ContentRatingAge", s_Instance.pS3ContentRatingAge, "uint")
	Something(className, s_guid, "resourceRefreshAlwaysAllowed", s_Instance.resourceRefreshAlwaysAllowed, "bool")
	Something(className, s_guid, "rotateLogs", s_Instance.rotateLogs, "bool")
	Something(className, s_guid, "soldierWeaponSwitching", s_Instance.soldierWeaponSwitching, "CtrRef")
	Something(className, s_guid, "timeBeforeSpawnIsAllowed", s_Instance.timeBeforeSpawnIsAllowed, "float")
	Something(className, s_guid, "timeToWaitForQuitTaskCompletion", s_Instance.timeToWaitForQuitTaskCompletion, "float")
	Something(className, s_guid, "useSingleWeaponSelector", s_Instance.useSingleWeaponSelector, "bool")
	Something(className, s_guid, "useSpeedBasedDetailedCollision", s_Instance.useSpeedBasedDetailedCollision, "bool")
	Something(className, s_guid, "version", s_Instance.version, "CtrRef")
end

function Type:GameSoundEntityData (p_class, p_guid)
	local s_Instance = GameSoundEntityData(p_class) 
 	local className = "GameSoundEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "playOnCreation", s_Instance.playOnCreation, "bool")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:GameSplineData (p_class, p_guid)
	local s_Instance = GameSplineData(p_class) 
 	local className = "GameSplineData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "splineType", s_Instance.splineType, "GameSplineType")
end

function Type:GameSplineEntityData (p_class, p_guid)
	local s_Instance = GameSplineEntityData(p_class) 
 	local className = "GameSplineEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "localPoints", s_Instance.localPoints, "List<Vec3)>")
	Something(className, s_guid, "normals", s_Instance.normals, "List<Vec3)>")
	Something(className, s_guid, "splineType", s_Instance.splineType, "GameSplineType")
end

function Type:GameTimeSettings (p_class, p_guid)
	local s_Instance = GameTimeSettings(p_class) 
 	local className = "GameTimeSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clampTicks", s_Instance.clampTicks, "int")
	Something(className, s_guid, "forceDeltaTickCount", s_Instance.forceDeltaTickCount, "int")
	Something(className, s_guid, "forceDeltaTime", s_Instance.forceDeltaTime, "float")
	Something(className, s_guid, "forceMultiplayerOneTickMin", s_Instance.forceMultiplayerOneTickMin, "bool")
	Something(className, s_guid, "forceSinglePlayerFixedTick", s_Instance.forceSinglePlayerFixedTick, "bool")
	Something(className, s_guid, "forceUseSleepTimer", s_Instance.forceUseSleepTimer, "bool")
	Something(className, s_guid, "joinJobsTimeLimit", s_Instance.joinJobsTimeLimit, "float")
	Something(className, s_guid, "maxInactiveVariableFps", s_Instance.maxInactiveVariableFps, "float")
	Something(className, s_guid, "maxSimFps", s_Instance.maxSimFps, "float")
	Something(className, s_guid, "maxVariableFps", s_Instance.maxVariableFps, "float")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
	Something(className, s_guid, "useWaitableTimers", s_Instance.useWaitableTimers, "bool")
	Something(className, s_guid, "variableSimTickTimeEnable", s_Instance.variableSimTickTimeEnable, "bool")
	Something(className, s_guid, "vSyncSubtractTime", s_Instance.vSyncSubtractTime, "float")
	Something(className, s_guid, "yieldTime", s_Instance.yieldTime, "int")
	Something(className, s_guid, "yieldTimeLimit", s_Instance.yieldTimeLimit, "float")
end

function Type:GameTipAsset (p_class, p_guid)
	local s_Instance = GameTipAsset(p_class) 
 	local className = "GameTipAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "tips", s_Instance.tips, "List<GameTipData)>")
end

function Type:GameTipData (p_class, p_guid)
	local s_Instance = GameTipData(p_class) 
 	local className = "GameTipData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "text", s_Instance.text, "string")
end

function Type:GearBagSpec (p_class, p_guid)
	local s_Instance = GearBagSpec(p_class) 
 	local className = "GearBagSpec"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "childSpecs", s_Instance.childSpecs, "List<CtrRef)>")
	Something(className, s_guid, "gadgetSlots", s_Instance.gadgetSlots, "uint")
	Something(className, s_guid, "maxGadgetsPerSlot", s_Instance.maxGadgetsPerSlot, "uint")
	Something(className, s_guid, "maxPrimaryWeapons", s_Instance.maxPrimaryWeapons, "uint")
	Something(className, s_guid, "maxSecondaryWeapons", s_Instance.maxSecondaryWeapons, "uint")
	Something(className, s_guid, "maxSidearms", s_Instance.maxSidearms, "uint")
end

function Type:GearboxConfigData (p_class, p_guid)
	local s_Instance = GearboxConfigData(p_class) 
 	local className = "GearboxConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "backwardThrottleLimit", s_Instance.backwardThrottleLimit, "float")
	Something(className, s_guid, "clutchSpeedFactor", s_Instance.clutchSpeedFactor, "float")
	Something(className, s_guid, "forwardGearRatios", s_Instance.forwardGearRatios, "List<float)>")
	Something(className, s_guid, "forwardGearSpeeds", s_Instance.forwardGearSpeeds, "List<float)>")
	Something(className, s_guid, "gearboxMode", s_Instance.gearboxMode, "int")
	Something(className, s_guid, "gearboxType", s_Instance.gearboxType, "int")
	Something(className, s_guid, "gearChangeTime", s_Instance.gearChangeTime, "float")
	Something(className, s_guid, "gearDownSpeedFactor", s_Instance.gearDownSpeedFactor, "float")
	Something(className, s_guid, "limitBackwardThrottle", s_Instance.limitBackwardThrottle, "bool")
	Something(className, s_guid, "oppositeDirGearChangeMaxSpeed", s_Instance.oppositeDirGearChangeMaxSpeed, "float")
	Something(className, s_guid, "oppositeDirGearChangeTime", s_Instance.oppositeDirGearChangeTime, "float")
	Something(className, s_guid, "reverseGearRatios", s_Instance.reverseGearRatios, "List<float)>")
	Something(className, s_guid, "reverseGearSpeeds", s_Instance.reverseGearSpeeds, "List<float)>")
	Something(className, s_guid, "transmissionEfficiency", s_Instance.transmissionEfficiency, "float")
	Something(className, s_guid, "useAutoClutch", s_Instance.useAutoClutch, "bool")
	Something(className, s_guid, "useClassicGearBoxAutoClutch", s_Instance.useClassicGearBoxAutoClutch, "bool")
	Something(className, s_guid, "useNeutralGear", s_Instance.useNeutralGear, "bool")
end

function Type:GeographicalData (p_class, p_guid)
	local s_Instance = GeographicalData(p_class) 
 	local className = "GeographicalData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "latitude", s_Instance.latitude, "UIGeoLatitude")
	Something(className, s_guid, "longitude", s_Instance.longitude, "UIGeoLongitude")
	Something(className, s_guid, "seaLevelOffset", s_Instance.seaLevelOffset, "float")
end

function Type:GeographicalLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = GeographicalLevelDescriptionComponent(p_class) 
 	local className = "GeographicalLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "geographicalData", s_Instance.geographicalData, "CtrRef")
end

function Type:GlobalNode (p_class, p_guid)
	local s_Instance = GlobalNode(p_class) 
 	local className = "GlobalNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
end

function Type:GlobalPostProcessSettings (p_class, p_guid)
	local s_Instance = GlobalPostProcessSettings(p_class) 
 	local className = "GlobalPostProcessSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bloomBlurEnable", s_Instance.bloomBlurEnable, "bool")
	Something(className, s_guid, "bloomBlurFilter", s_Instance.bloomBlurFilter, "BlurFilter")
	Something(className, s_guid, "bloomBlurIterationCount", s_Instance.bloomBlurIterationCount, "uint")
	Something(className, s_guid, "bloomEnable", s_Instance.bloomEnable, "bool")
	Something(className, s_guid, "bloomPyramidAttenuateEnable", s_Instance.bloomPyramidAttenuateEnable, "bool")
	Something(className, s_guid, "bloomPyramidEnable", s_Instance.bloomPyramidEnable, "bool")
	Something(className, s_guid, "bloomPyramidFinalLevel", s_Instance.bloomPyramidFinalLevel, "uint")
	Something(className, s_guid, "bloomPyramidLevelCount", s_Instance.bloomPyramidLevelCount, "uint")
	Something(className, s_guid, "bloomQuarterResEnable", s_Instance.bloomQuarterResEnable, "bool")
	Something(className, s_guid, "blurBlendEnable", s_Instance.blurBlendEnable, "bool")
	Something(className, s_guid, "brightness", s_Instance.brightness, "Vec3")
	Something(className, s_guid, "colorGradingEnable", s_Instance.colorGradingEnable, "bool")
	Something(className, s_guid, "colorGradingForceUpdateAlways", s_Instance.colorGradingForceUpdateAlways, "bool")
	Something(className, s_guid, "colorTransformEnable", s_Instance.colorTransformEnable, "bool")
	Something(className, s_guid, "contrast", s_Instance.contrast, "Vec3")
	Something(className, s_guid, "debugMode", s_Instance.debugMode, "PostProcessDebugMode")
	Something(className, s_guid, "debugModeStep", s_Instance.debugModeStep, "uint")
	Something(className, s_guid, "diffusionDofEnable", s_Instance.diffusionDofEnable, "bool")
	Something(className, s_guid, "diffusionDofLuminance", s_Instance.diffusionDofLuminance, "float")
	Something(className, s_guid, "directExposureEnable", s_Instance.directExposureEnable, "bool")
	Something(className, s_guid, "downsampleAverageFromBloomEnable", s_Instance.downsampleAverageFromBloomEnable, "bool")
	Something(className, s_guid, "downsampleAverageStartMipmap", s_Instance.downsampleAverageStartMipmap, "uint")
	Something(className, s_guid, "downsampleBeforeBlurEnable", s_Instance.downsampleBeforeBlurEnable, "bool")
	Something(className, s_guid, "downsampleLogAverageEnable", s_Instance.downsampleLogAverageEnable, "bool")
	Something(className, s_guid, "drawDebugInfo", s_Instance.drawDebugInfo, "bool")
	Something(className, s_guid, "drawDebugUserBrightnessLUT", s_Instance.drawDebugUserBrightnessLUT, "bool")
	Something(className, s_guid, "dynamicAOEnable", s_Instance.dynamicAOEnable, "bool")
	Something(className, s_guid, "dynamicAOMethod", s_Instance.dynamicAOMethod, "fb.DynamicAOMethod)")
	Something(className, s_guid, "exposureClampEnable", s_Instance.exposureClampEnable, "bool")
	Something(className, s_guid, "filmGrainColorScale", s_Instance.filmGrainColorScale, "Vec3")
	Something(className, s_guid, "filmGrainEnable", s_Instance.filmGrainEnable, "bool")
	Something(className, s_guid, "filmGrainLinearFilteringEnable", s_Instance.filmGrainLinearFilteringEnable, "bool")
	Something(className, s_guid, "filmGrainRandomEnable", s_Instance.filmGrainRandomEnable, "bool")
	Something(className, s_guid, "filmGrainTextureScale", s_Instance.filmGrainTextureScale, "Vec2")
	Something(className, s_guid, "forceBloomScale", s_Instance.forceBloomScale, "Vec3")
	Something(className, s_guid, "forceBlurAdd", s_Instance.forceBlurAdd, "float")
	Something(className, s_guid, "forceChromostereopsisEnable", s_Instance.forceChromostereopsisEnable, "int")
	Something(className, s_guid, "forceChromostereopsisOffset", s_Instance.forceChromostereopsisOffset, "int")
	Something(className, s_guid, "forceChromostereopsisScale", s_Instance.forceChromostereopsisScale, "float")
	Something(className, s_guid, "forceDiffusionDofAperture", s_Instance.forceDiffusionDofAperture, "float")
	Something(className, s_guid, "forceDiffusionDofFocalLength", s_Instance.forceDiffusionDofFocalLength, "float")
	Something(className, s_guid, "forceDiffusionDofPlaneInFocus", s_Instance.forceDiffusionDofPlaneInFocus, "float")
	Something(className, s_guid, "forceDofBlurFilterDeviation", s_Instance.forceDofBlurFilterDeviation, "float")
	Something(className, s_guid, "forceDofEnable", s_Instance.forceDofEnable, "int")
	Something(className, s_guid, "forceDofFarDistanceScale", s_Instance.forceDofFarDistanceScale, "float")
	Something(className, s_guid, "forceDofFocusDistance", s_Instance.forceDofFocusDistance, "float")
	Something(className, s_guid, "forceDofNearDistanceScale", s_Instance.forceDofNearDistanceScale, "float")
	Something(className, s_guid, "forceDofScale", s_Instance.forceDofScale, "float")
	Something(className, s_guid, "forceExposure", s_Instance.forceExposure, "float")
	Something(className, s_guid, "forceMiddleGray", s_Instance.forceMiddleGray, "float")
	Something(className, s_guid, "forceTonemapMethod", s_Instance.forceTonemapMethod, "int")
	Something(className, s_guid, "forceVignetteColor", s_Instance.forceVignetteColor, "Vec4")
	Something(className, s_guid, "forceVignetteExponent", s_Instance.forceVignetteExponent, "float")
	Something(className, s_guid, "forceVignetteScale", s_Instance.forceVignetteScale, "Vec2")
	Something(className, s_guid, "hbaoBilateralBlurCsEnable", s_Instance.hbaoBilateralBlurCsEnable, "bool")
	Something(className, s_guid, "hbaoBilateralBlurEnable", s_Instance.hbaoBilateralBlurEnable, "bool")
	Something(className, s_guid, "hbaoBilateralBlurRadius", s_Instance.hbaoBilateralBlurRadius, "uint")
	Something(className, s_guid, "hbaoBilateralBlurSharpness", s_Instance.hbaoBilateralBlurSharpness, "float")
	Something(className, s_guid, "hbaoDirCount", s_Instance.hbaoDirCount, "float")
	Something(className, s_guid, "hbaoForceVendor", s_Instance.hbaoForceVendor, "int")
	Something(className, s_guid, "hbaoGaussianBlurEnable", s_Instance.hbaoGaussianBlurEnable, "bool")
	Something(className, s_guid, "hbaoGaussianBlurHalfResEnable", s_Instance.hbaoGaussianBlurHalfResEnable, "bool")
	Something(className, s_guid, "hbaoGaussianBlurSize", s_Instance.hbaoGaussianBlurSize, "BlurFilter")
	Something(className, s_guid, "hbaoHalfResDepthEnable", s_Instance.hbaoHalfResDepthEnable, "bool")
	Something(className, s_guid, "hbaoHalfResEnable", s_Instance.hbaoHalfResEnable, "bool")
	Something(className, s_guid, "hbaoMaxFootprintRadius", s_Instance.hbaoMaxFootprintRadius, "float")
	Something(className, s_guid, "hbaoQuality", s_Instance.hbaoQuality, "uint")
	Something(className, s_guid, "hbaoRandomDirVariationCount", s_Instance.hbaoRandomDirVariationCount, "uint")
	Something(className, s_guid, "hbaoRandomTextureWidth", s_Instance.hbaoRandomTextureWidth, "uint")
	Something(className, s_guid, "hbaoStepCount", s_Instance.hbaoStepCount, "float")
	Something(className, s_guid, "hbaoTemporalFilterDebugMode", s_Instance.hbaoTemporalFilterDebugMode, "uint")
	Something(className, s_guid, "hbaoTemporalFilterEnable", s_Instance.hbaoTemporalFilterEnable, "bool")
	Something(className, s_guid, "hbaoTemporalFilterMaxNumFrames", s_Instance.hbaoTemporalFilterMaxNumFrames, "uint")
	Something(className, s_guid, "hbaoTemporalFilterThreshold", s_Instance.hbaoTemporalFilterThreshold, "float")
	Something(className, s_guid, "hbaoTemporalFilterThreshold2", s_Instance.hbaoTemporalFilterThreshold2, "float")
	Something(className, s_guid, "hbaoVectorizedEnable", s_Instance.hbaoVectorizedEnable, "bool")
	Something(className, s_guid, "hdrBloomEnable", s_Instance.hdrBloomEnable, "bool")
	Something(className, s_guid, "hdrBlurEnable", s_Instance.hdrBlurEnable, "bool")
	Something(className, s_guid, "hue", s_Instance.hue, "float")
	Something(className, s_guid, "ldr16BitBloomEnable", s_Instance.ldr16BitBloomEnable, "bool")
	Something(className, s_guid, "ldrBloomRange", s_Instance.ldrBloomRange, "float")
	Something(className, s_guid, "lensScopeFilterColorScale", s_Instance.lensScopeFilterColorScale, "float")
	Something(className, s_guid, "lensScopeFilterEnable", s_Instance.lensScopeFilterEnable, "bool")
	Something(className, s_guid, "lUTGammaB", s_Instance.lUTGammaB, "float")
	Something(className, s_guid, "lUTGammaCurbOffset", s_Instance.lUTGammaCurbOffset, "float")
	Something(className, s_guid, "lUTGammaG", s_Instance.lUTGammaG, "float")
	Something(className, s_guid, "lUTGammaR", s_Instance.lUTGammaR, "float")
	Something(className, s_guid, "ps3BackBufferAsLdrTargetEnable", s_Instance.ps3BackBufferAsLdrTargetEnable, "bool")
	Something(className, s_guid, "ps3CompressedRenderTargetsEnable", s_Instance.ps3CompressedRenderTargetsEnable, "bool")
	Something(className, s_guid, "ps3EdgeMlaaAbsoluteThreshold", s_Instance.ps3EdgeMlaaAbsoluteThreshold, "uint")
	Something(className, s_guid, "ps3EdgeMlaaCopyOnly", s_Instance.ps3EdgeMlaaCopyOnly, "bool")
	Something(className, s_guid, "ps3EdgeMlaaEnable", s_Instance.ps3EdgeMlaaEnable, "bool")
	Something(className, s_guid, "ps3EdgeMlaaGpuBlockEnable", s_Instance.ps3EdgeMlaaGpuBlockEnable, "bool")
	Something(className, s_guid, "ps3EdgeMlaaJobCount", s_Instance.ps3EdgeMlaaJobCount, "uint")
	Something(className, s_guid, "ps3EdgeMlaaJobPriority", s_Instance.ps3EdgeMlaaJobPriority, "uint")
	Something(className, s_guid, "ps3EdgeMlaaRelativeEdgeDetection", s_Instance.ps3EdgeMlaaRelativeEdgeDetection, "bool")
	Something(className, s_guid, "ps3EdgeMlaaShowEdges", s_Instance.ps3EdgeMlaaShowEdges, "bool")
	Something(className, s_guid, "ps3EdgeMlaaThresholdBase", s_Instance.ps3EdgeMlaaThresholdBase, "uint")
	Something(className, s_guid, "ps3EdgeMlaaThresholdFactor", s_Instance.ps3EdgeMlaaThresholdFactor, "uint")
	Something(className, s_guid, "ps3TiledBloomMipmapCount", s_Instance.ps3TiledBloomMipmapCount, "uint")
	Something(className, s_guid, "ps3TiledFloatMipmapCount", s_Instance.ps3TiledFloatMipmapCount, "uint")
	Something(className, s_guid, "ps3TiledLdrMipmapCount", s_Instance.ps3TiledLdrMipmapCount, "uint")
	Something(className, s_guid, "quarterDownsamplingEnable", s_Instance.quarterDownsamplingEnable, "bool")
	Something(className, s_guid, "saturation", s_Instance.saturation, "Vec3")
	Something(className, s_guid, "uIBrightnessNorm", s_Instance.uIBrightnessNorm, "float")
	Something(className, s_guid, "userBrightnessAddScale", s_Instance.userBrightnessAddScale, "float")
	Something(className, s_guid, "userBrightnessLUTEnable", s_Instance.userBrightnessLUTEnable, "bool")
	Something(className, s_guid, "userBrightnessMax", s_Instance.userBrightnessMax, "float")
	Something(className, s_guid, "userBrightnessMin", s_Instance.userBrightnessMin, "float")
	Something(className, s_guid, "userBrightnessMulScale", s_Instance.userBrightnessMulScale, "float")
end

function Type:GravityData (p_class, p_guid)
	local s_Instance = GravityData(p_class) 
 	local className = "GravityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gravity", s_Instance.gravity, "float")
end

function Type:GrenadeEntityData (p_class, p_guid)
	local s_Instance = GrenadeEntityData(p_class) 
 	local className = "GrenadeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collisionSpeedMultiplier", s_Instance.collisionSpeedMultiplier, "float")
	Something(className, s_guid, "gravity", s_Instance.gravity, "float")
	Something(className, s_guid, "grenadeType", s_Instance.grenadeType, "fb.GrenadeType)")
	Something(className, s_guid, "minBounceSpeed", s_Instance.minBounceSpeed, "float")
end

function Type:GroundHeightData (p_class, p_guid)
	local s_Instance = GroundHeightData(p_class) 
 	local className = "GroundHeightData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "List<ushort)>")
	Something(className, s_guid, "heightSpan", s_Instance.heightSpan, "Vec2")
	Something(className, s_guid, "worldSize", s_Instance.worldSize, "float")
end

function Type:GroundHeightEntityData (p_class, p_guid)
	local s_Instance = GroundHeightEntityData(p_class) 
 	local className = "GroundHeightEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "GroundHeightData")
end

function Type:GroupHavokAsset (p_class, p_guid)
	local s_Instance = GroupHavokAsset(p_class) 
 	local className = "GroupHavokAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aabb", s_Instance.aabb, "List<AssetAabbs)>")
	Something(className, s_guid, "externalAssetScaleIndex", s_Instance.externalAssetScaleIndex, "List<ushort)>")
end

function Type:GunMasterKillCounterEntityData (p_class, p_guid)
	local s_Instance = GunMasterKillCounterEntityData(p_class) 
 	local className = "GunMasterKillCounterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponsPreset", s_Instance.weaponsPreset, "List<GunMasterWeaponsPreset)>")
end

function Type:GunMasterLevelInfo (p_class, p_guid)
	local s_Instance = GunMasterLevelInfo(p_class) 
 	local className = "GunMasterLevelInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customizeData", s_Instance.customizeData, "CtrRef")
	Something(className, s_guid, "killsNeeded", s_Instance.killsNeeded, "int")
end

function Type:GunMasterWeaponsPreset (p_class, p_guid)
	local s_Instance = GunMasterWeaponsPreset(p_class) 
 	local className = "GunMasterWeaponsPreset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gunMasterLevelInfos", s_Instance.gunMasterLevelInfos, "List<GunMasterLevelInfo)>")
	Something(className, s_guid, "levelOverrides", s_Instance.levelOverrides, "List<CtrRef)>")
end

function Type:GunnerSpottingTrackerData (p_class, p_guid)
	local s_Instance = GunnerSpottingTrackerData(p_class) 
 	local className = "GunnerSpottingTrackerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "spottedInfantryIcon", s_Instance.spottedInfantryIcon, "UIHudIcon")
	Something(className, s_guid, "spottedVehicleIcon", s_Instance.spottedVehicleIcon, "UIHudIcon")
end

function Type:GunSwayBaseData (p_class, p_guid)
	local s_Instance = GunSwayBaseData(p_class) 
 	local className = "GunSwayBaseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseValue", s_Instance.baseValue, "GunSwayDispersionData")
	Something(className, s_guid, "gunSwayLag", s_Instance.gunSwayLag, "GunSwayLagData")
	Something(className, s_guid, "recoil", s_Instance.recoil, "GunSwayRecoilData")
end

function Type:GunSwayBaseMoveData (p_class, p_guid)
	local s_Instance = GunSwayBaseMoveData(p_class) 
 	local className = "GunSwayBaseMoveData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseValue", s_Instance.baseValue, "GunSwayDispersionData")
	Something(className, s_guid, "gunSwayLag", s_Instance.gunSwayLag, "GunSwayLagData")
	Something(className, s_guid, "moving", s_Instance.moving, "GunSwayDispersionData")
	Something(className, s_guid, "recoil", s_Instance.recoil, "GunSwayRecoilData")
end

function Type:GunSwayBaseMoveJumpData (p_class, p_guid)
	local s_Instance = GunSwayBaseMoveJumpData(p_class) 
 	local className = "GunSwayBaseMoveJumpData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseValue", s_Instance.baseValue, "GunSwayDispersionData")
	Something(className, s_guid, "gunSwayLag", s_Instance.gunSwayLag, "GunSwayLagData")
	Something(className, s_guid, "jumping", s_Instance.jumping, "GunSwayDispersionData")
	Something(className, s_guid, "moving", s_Instance.moving, "GunSwayDispersionData")
	Something(className, s_guid, "recoil", s_Instance.recoil, "GunSwayRecoilData")
	Something(className, s_guid, "sprinting", s_Instance.sprinting, "GunSwayDispersionData")
	Something(className, s_guid, "vaultingMediumObject", s_Instance.vaultingMediumObject, "GunSwayDispersionData")
	Something(className, s_guid, "vaultingSmallObject", s_Instance.vaultingSmallObject, "GunSwayDispersionData")
end

function Type:GunSwayCrouchProneData (p_class, p_guid)
	local s_Instance = GunSwayCrouchProneData(p_class) 
 	local className = "GunSwayCrouchProneData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "noZoom", s_Instance.noZoom, "GunSwayBaseMoveData")
	Something(className, s_guid, "zoom", s_Instance.zoom, "GunSwayBaseMoveData")
end

function Type:GunSwayData (p_class, p_guid)
	local s_Instance = GunSwayData(p_class) 
 	local className = "GunSwayData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraRecoil", s_Instance.cameraRecoil, "CtrRef")
	Something(className, s_guid, "crouch", s_Instance.crouch, "GunSwayCrouchProneData")
	Something(className, s_guid, "crouchToProne", s_Instance.crouchToProne, "GunSwayStanceTransition")
	Something(className, s_guid, "crouchToStand", s_Instance.crouchToStand, "GunSwayStanceTransition")
	Something(className, s_guid, "deviationScaleFactorNoZoom", s_Instance.deviationScaleFactorNoZoom, "float")
	Something(className, s_guid, "deviationScaleFactorZoom", s_Instance.deviationScaleFactorZoom, "float")
	Something(className, s_guid, "firstShotRecoilMultiplier", s_Instance.firstShotRecoilMultiplier, "float")
	Something(className, s_guid, "gameplayDeviationScaleFactorNoZoom", s_Instance.gameplayDeviationScaleFactorNoZoom, "float")
	Something(className, s_guid, "gameplayDeviationScaleFactorZoom", s_Instance.gameplayDeviationScaleFactorZoom, "float")
	Something(className, s_guid, "modifiers", s_Instance.modifiers, "List<CtrRef)>")
	Something(className, s_guid, "prone", s_Instance.prone, "GunSwayCrouchProneData")
	Something(className, s_guid, "proneToCrouch", s_Instance.proneToCrouch, "GunSwayStanceTransition")
	Something(className, s_guid, "proneToStand", s_Instance.proneToStand, "GunSwayStanceTransition")
	Something(className, s_guid, "shootingRecoilDecreaseScale", s_Instance.shootingRecoilDecreaseScale, "float")
	Something(className, s_guid, "stand", s_Instance.stand, "GunSwayStandData")
	Something(className, s_guid, "standToCrouch", s_Instance.standToCrouch, "GunSwayStanceTransition")
	Something(className, s_guid, "standToProne", s_Instance.standToProne, "GunSwayStanceTransition")
	Something(className, s_guid, "suppressionModifierUnzoomed", s_Instance.suppressionModifierUnzoomed, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "suppressionModifierZoomed", s_Instance.suppressionModifierZoomed, "GunSwayStanceZoomModifierData")
end

function Type:GunSwayDispersionData (p_class, p_guid)
	local s_Instance = GunSwayDispersionData(p_class) 
 	local className = "GunSwayDispersionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decreasePerSecond", s_Instance.decreasePerSecond, "float")
	Something(className, s_guid, "increasePerShot", s_Instance.increasePerShot, "float")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:GunSwayDispersionModData (p_class, p_guid)
	local s_Instance = GunSwayDispersionModData(p_class) 
 	local className = "GunSwayDispersionModData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decreasePerSecondModifier", s_Instance.decreasePerSecondModifier, "float")
	Something(className, s_guid, "increasePerShotModifier", s_Instance.increasePerShotModifier, "float")
	Something(className, s_guid, "maxAngleModifier", s_Instance.maxAngleModifier, "float")
	Something(className, s_guid, "minAngleModifier", s_Instance.minAngleModifier, "float")
end

function Type:GunSwayLagData (p_class, p_guid)
	local s_Instance = GunSwayLagData(p_class) 
 	local className = "GunSwayLagData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "moveForwardModifier", s_Instance.moveForwardModifier, "float")
	Something(className, s_guid, "moveStrafeModifier", s_Instance.moveStrafeModifier, "float")
	Something(className, s_guid, "releaseModifier", s_Instance.releaseModifier, "float")
	Something(className, s_guid, "rotatePitchModifier", s_Instance.rotatePitchModifier, "float")
	Something(className, s_guid, "rotateYawModifier", s_Instance.rotateYawModifier, "float")
end

function Type:GunSwayModifierData (p_class, p_guid)
	local s_Instance = GunSwayModifierData(p_class) 
 	local className = "GunSwayModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchNoZoomModifier", s_Instance.crouchNoZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "crouchZoomModifier", s_Instance.crouchZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "onlyInSupportedShooting", s_Instance.onlyInSupportedShooting, "bool")
	Something(className, s_guid, "onlyOnWeaponLightEnabled", s_Instance.onlyOnWeaponLightEnabled, "bool")
	Something(className, s_guid, "proneNoZoomModifier", s_Instance.proneNoZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "proneZoomModifier", s_Instance.proneZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "standNoZoomModifier", s_Instance.standNoZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "standZoomModifier", s_Instance.standZoomModifier, "GunSwayStanceZoomModifierData")
	Something(className, s_guid, "unlockAsset", s_Instance.unlockAsset, "CtrRef")
end

function Type:GunSwayRecoilData (p_class, p_guid)
	local s_Instance = GunSwayRecoilData(p_class) 
 	local className = "GunSwayRecoilData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "horizontalRecoilAmplitudeIncPerShotMax", s_Instance.horizontalRecoilAmplitudeIncPerShotMax, "float")
	Something(className, s_guid, "horizontalRecoilAmplitudeIncPerShotMin", s_Instance.horizontalRecoilAmplitudeIncPerShotMin, "float")
	Something(className, s_guid, "horizontalRecoilAmplitudeMax", s_Instance.horizontalRecoilAmplitudeMax, "float")
	Something(className, s_guid, "recoilAmplitudeDecreaseFactor", s_Instance.recoilAmplitudeDecreaseFactor, "float")
	Something(className, s_guid, "recoilAmplitudeIncPerShot", s_Instance.recoilAmplitudeIncPerShot, "float")
	Something(className, s_guid, "recoilAmplitudeMax", s_Instance.recoilAmplitudeMax, "float")
end

function Type:GunSwayStanceTransition (p_class, p_guid)
	local s_Instance = GunSwayStanceTransition(p_class) 
 	local className = "GunSwayStanceTransition"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coolDown", s_Instance.coolDown, "float")
	Something(className, s_guid, "maxPenaltyValue", s_Instance.maxPenaltyValue, "GunSwayDispersionData")
end

function Type:GunSwayStanceZoomModifierData (p_class, p_guid)
	local s_Instance = GunSwayStanceZoomModifierData(p_class) 
 	local className = "GunSwayStanceZoomModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dispersionMod", s_Instance.dispersionMod, "GunSwayDispersionModData")
	Something(className, s_guid, "lagPitchMod", s_Instance.lagPitchMod, "float")
	Something(className, s_guid, "lagYawMod", s_Instance.lagYawMod, "float")
	Something(className, s_guid, "recoilAngleMod", s_Instance.recoilAngleMod, "float")
	Something(className, s_guid, "recoilMagnitudeMod", s_Instance.recoilMagnitudeMod, "float")
end

function Type:GunSwayStandData (p_class, p_guid)
	local s_Instance = GunSwayStandData(p_class) 
 	local className = "GunSwayStandData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "noZoom", s_Instance.noZoom, "GunSwayBaseMoveJumpData")
	Something(className, s_guid, "zoom", s_Instance.zoom, "GunSwayBaseMoveJumpData")
end

function Type:HavokAsset (p_class, p_guid)
	local s_Instance = HavokAsset(p_class) 
 	local className = "HavokAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalAssets", s_Instance.externalAssets, "List<CtrRef)>")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:HdrSetting (p_class, p_guid)
	local s_Instance = HdrSetting(p_class) 
 	local className = "HdrSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowedOvershoot", s_Instance.allowedOvershoot, "float")
	Something(className, s_guid, "compressFactor", s_Instance.compressFactor, "float")
	Something(className, s_guid, "dischargeFactor", s_Instance.dischargeFactor, "float")
	Something(className, s_guid, "headroom", s_Instance.headroom, "float")
	Something(className, s_guid, "maxAllowedEnergy", s_Instance.maxAllowedEnergy, "float")
	Something(className, s_guid, "windowBottomAttackTime", s_Instance.windowBottomAttackTime, "float")
	Something(className, s_guid, "windowBottomReleaseTime", s_Instance.windowBottomReleaseTime, "float")
	Something(className, s_guid, "windowMinBottom", s_Instance.windowMinBottom, "float")
	Something(className, s_guid, "windowMinTop", s_Instance.windowMinTop, "float")
	Something(className, s_guid, "windowSize", s_Instance.windowSize, "float")
	Something(className, s_guid, "windowTopAttackTime", s_Instance.windowTopAttackTime, "float")
	Something(className, s_guid, "windowTopMaxReleaseTime", s_Instance.windowTopMaxReleaseTime, "float")
	Something(className, s_guid, "windowTopMinReleaseTime", s_Instance.windowTopMinReleaseTime, "float")
	Something(className, s_guid, "windowTopReleaseTimeCurve", s_Instance.windowTopReleaseTimeCurve, "AudioCurve")
end

function Type:HealerData (p_class, p_guid)
	local s_Instance = HealerData(p_class) 
 	local className = "HealerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healingTime", s_Instance.healingTime, "float")
	Something(className, s_guid, "health", s_Instance.health, "float")
	Something(className, s_guid, "pickUpDelay", s_Instance.pickUpDelay, "float")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
end

function Type:HealingSphereData (p_class, p_guid)
	local s_Instance = HealingSphereData(p_class) 
 	local className = "HealingSphereData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healthIncSpeed", s_Instance.healthIncSpeed, "float")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
end

function Type:HealthComponentData (p_class, p_guid)
	local s_Instance = HealthComponentData(p_class) 
 	local className = "HealthComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "health", s_Instance.health, "float")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
end

function Type:HealthStateData (p_class, p_guid)
	local s_Instance = HealthStateData(p_class) 
 	local className = "HealthStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "canSupportOtherParts", s_Instance.canSupportOtherParts, "bool")
	Something(className, s_guid, "copyDamageToBanger", s_Instance.copyDamageToBanger, "bool")
	Something(className, s_guid, "health", s_Instance.health, "float")
	Something(className, s_guid, "loosePartPhysics", s_Instance.loosePartPhysics, "List<CtrRef)>")
	Something(className, s_guid, "objects", s_Instance.objects, "List<CtrRef)>")
	Something(className, s_guid, "partIndex", s_Instance.partIndex, "uint")
	Something(className, s_guid, "physicsEnabled", s_Instance.physicsEnabled, "bool")
	Something(className, s_guid, "spawnedBangerBlueprint", s_Instance.spawnedBangerBlueprint, "CtrRef")
	Something(className, s_guid, "spawnedBangerImpulseParams", s_Instance.spawnedBangerImpulseParams, "CtrRef")
end

function Type:HeightfieldTreeAsset (p_class, p_guid)
	local s_Instance = HeightfieldTreeAsset(p_class) 
 	local className = "HeightfieldTreeAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minHeightSamplesPerSide", s_Instance.minHeightSamplesPerSide, "int")
	Something(className, s_guid, "minHeightWidth", s_Instance.minHeightWidth, "float")
end

function Type:HidableSoldierMeshWeaponPart (p_class, p_guid)
	local s_Instance = HidableSoldierMeshWeaponPart(p_class) 
 	local className = "HidableSoldierMeshWeaponPart"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
	Something(className, s_guid, "hideAlways", s_Instance.hideAlways, "bool")
	Something(className, s_guid, "hideInVehicleEntries", s_Instance.hideInVehicleEntries, "bool")
	Something(className, s_guid, "weaponMesh", s_Instance.weaponMesh, "CtrRef")
	Something(className, s_guid, "weaponMeshBlueprint", s_Instance.weaponMeshBlueprint, "CtrRef")
end

function Type:HighPassButterworthNodeData (p_class, p_guid)
	local s_Instance = HighPassButterworthNodeData(p_class) 
 	local className = "HighPassButterworthNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "order", s_Instance.order, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:HighPassFir64NodeData (p_class, p_guid)
	local s_Instance = HighPassFir64NodeData(p_class) 
 	local className = "HighPassFir64NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:HighPassIir2NodeData (p_class, p_guid)
	local s_Instance = HighPassIir2NodeData(p_class) 
 	local className = "HighPassIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:HighShelfIir2NodeData (p_class, p_guid)
	local s_Instance = HighShelfIir2NodeData(p_class) 
 	local className = "HighShelfIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:HIKData (p_class, p_guid)
	local s_Instance = HIKData(p_class) 
 	local className = "HIKData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pull", s_Instance.pull, "float")
	Something(className, s_guid, "reachR", s_Instance.reachR, "float")
	Something(className, s_guid, "reachT", s_Instance.reachT, "float")
	Something(className, s_guid, "resist", s_Instance.resist, "float")
end

function Type:HitReactionComponentBinding (p_class, p_guid)
	local s_Instance = HitReactionComponentBinding(p_class) 
 	local className = "HitReactionComponentBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowKillFromAnimation", s_Instance.allowKillFromAnimation, "AntRef")
	Something(className, s_guid, "boneType", s_Instance.boneType, "AntRef")
	Something(className, s_guid, "direction", s_Instance.direction, "AntRef")
	Something(className, s_guid, "firingDistance", s_Instance.firingDistance, "AntRef")
	Something(className, s_guid, "hit", s_Instance.hit, "AntRef")
	Something(className, s_guid, "immortal", s_Instance.immortal, "AntRef")
	Something(className, s_guid, "impactType", s_Instance.impactType, "AntRef")
	Something(className, s_guid, "randomAnimationIndex", s_Instance.randomAnimationIndex, "AntRef")
end

function Type:HitReactionComponentData (p_class, p_guid)
	local s_Instance = HitReactionComponentData(p_class) 
 	local className = "HitReactionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "hitReactionBinding", s_Instance.hitReactionBinding, "HitReactionComponentBinding")
end

function Type:HoldAndReleaseData (p_class, p_guid)
	local s_Instance = HoldAndReleaseData(p_class) 
 	local className = "HoldAndReleaseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delay", s_Instance.delay, "float")
	Something(className, s_guid, "forceFireWhenKilledHolding", s_Instance.forceFireWhenKilledHolding, "bool")
	Something(className, s_guid, "killedHoldingPowerModifier", s_Instance.killedHoldingPowerModifier, "float")
	Something(className, s_guid, "maxHoldTime", s_Instance.maxHoldTime, "float")
	Something(className, s_guid, "maxPowerModifier", s_Instance.maxPowerModifier, "float")
	Something(className, s_guid, "minPowerModifier", s_Instance.minPowerModifier, "float")
	Something(className, s_guid, "powerIncreasePerSecond", s_Instance.powerIncreasePerSecond, "float")
end

function Type:HovercraftFloatPhysicsData (p_class, p_guid)
	local s_Instance = HovercraftFloatPhysicsData(p_class) 
 	local className = "HovercraftFloatPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frontLength", s_Instance.frontLength, "float")
	Something(className, s_guid, "landFrictionAxisMod", s_Instance.landFrictionAxisMod, "Vec3")
	Something(className, s_guid, "landResistanceAxisMod", s_Instance.landResistanceAxisMod, "Vec3")
	Something(className, s_guid, "sideLength", s_Instance.sideLength, "float")
end

function Type:HudCameraShakeData (p_class, p_guid)
	local s_Instance = HudCameraShakeData(p_class) 
 	local className = "HudCameraShakeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraShakeMaxAngle", s_Instance.cameraShakeMaxAngle, "float")
	Something(className, s_guid, "cameraShakeMinAngle", s_Instance.cameraShakeMinAngle, "float")
	Something(className, s_guid, "cameraShakeScale", s_Instance.cameraShakeScale, "float")
	Something(className, s_guid, "filterSize", s_Instance.filterSize, "uint")
	Something(className, s_guid, "jumpEffectDurationMax", s_Instance.jumpEffectDurationMax, "float")
	Something(className, s_guid, "jumpEffectDurationMin", s_Instance.jumpEffectDurationMin, "float")
	Something(className, s_guid, "jumpEffectMax", s_Instance.jumpEffectMax, "float")
	Something(className, s_guid, "jumpEffectMin", s_Instance.jumpEffectMin, "float")
	Something(className, s_guid, "landEffectDurationMax", s_Instance.landEffectDurationMax, "float")
	Something(className, s_guid, "landEffectDurationMin", s_Instance.landEffectDurationMin, "float")
	Something(className, s_guid, "landEffectMax", s_Instance.landEffectMax, "float")
	Something(className, s_guid, "landEffectMin", s_Instance.landEffectMin, "float")
	Something(className, s_guid, "maxDisplacement", s_Instance.maxDisplacement, "float")
	Something(className, s_guid, "weaponDispersionMax", s_Instance.weaponDispersionMax, "float")
	Something(className, s_guid, "weaponDispersionMin", s_Instance.weaponDispersionMin, "float")
	Something(className, s_guid, "weaponDispersionOffsetScale", s_Instance.weaponDispersionOffsetScale, "float")
	Something(className, s_guid, "weaponLagXScale", s_Instance.weaponLagXScale, "float")
	Something(className, s_guid, "weaponLagYScale", s_Instance.weaponLagYScale, "float")
end

function Type:HudData (p_class, p_guid)
	local s_Instance = HudData(p_class) 
 	local className = "HudData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraShakeModifier", s_Instance.cameraShakeModifier, "float")
	Something(className, s_guid, "crosshairOpacityMax", s_Instance.crosshairOpacityMax, "float")
	Something(className, s_guid, "crosshairOpacityMin", s_Instance.crosshairOpacityMin, "float")
	Something(className, s_guid, "crosshairOpacityModifier", s_Instance.crosshairOpacityModifier, "float")
	Something(className, s_guid, "crosshairScaleMax", s_Instance.crosshairScaleMax, "float")
	Something(className, s_guid, "crosshairScaleMin", s_Instance.crosshairScaleMin, "float")
	Something(className, s_guid, "crosshairTypeId", s_Instance.crosshairTypeId, "string")
	Something(className, s_guid, "hideAmmo", s_Instance.hideAmmo, "bool")
	Something(className, s_guid, "hideCrosshairWhenAimOnFriend", s_Instance.hideCrosshairWhenAimOnFriend, "bool")
	Something(className, s_guid, "hudPropertyList", s_Instance.hudPropertyList, "CtrRef")
	Something(className, s_guid, "infiniteAmmo", s_Instance.infiniteAmmo, "bool")
	Something(className, s_guid, "lowAmmoWarning", s_Instance.lowAmmoWarning, "float")
	Something(className, s_guid, "reloadPrompt", s_Instance.reloadPrompt, "float")
	Something(className, s_guid, "renderTargetIndex", s_Instance.renderTargetIndex, "int")
	Something(className, s_guid, "seaLevelAltFreq", s_Instance.seaLevelAltFreq, "float")
	Something(className, s_guid, "showMinimap", s_Instance.showMinimap, "bool")
	Something(className, s_guid, "useAimWarning", s_Instance.useAimWarning, "bool")
	Something(className, s_guid, "useClimbRate", s_Instance.useClimbRate, "bool")
	Something(className, s_guid, "useGForce", s_Instance.useGForce, "bool")
	Something(className, s_guid, "useLockingController", s_Instance.useLockingController, "bool")
	Something(className, s_guid, "usePredictedSight", s_Instance.usePredictedSight, "bool")
	Something(className, s_guid, "useRangeMeter", s_Instance.useRangeMeter, "bool")
	Something(className, s_guid, "useRenderTarget", s_Instance.useRenderTarget, "bool")
	Something(className, s_guid, "useSkidSlip", s_Instance.useSkidSlip, "bool")
	Something(className, s_guid, "useThrust", s_Instance.useThrust, "bool")
	Something(className, s_guid, "useVelocityVectorMarker", s_Instance.useVelocityVectorMarker, "bool")
	Something(className, s_guid, "useWeaponOrientations", s_Instance.useWeaponOrientations, "bool")
	Something(className, s_guid, "weaponClass", s_Instance.weaponClass, "string")
end

function Type:HudImpactData (p_class, p_guid)
	local s_Instance = HudImpactData(p_class) 
 	local className = "HudImpactData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "maxHealth", s_Instance.maxHealth, "float")
	Something(className, s_guid, "maxTimeVisible", s_Instance.maxTimeVisible, "float")
	Something(className, s_guid, "minHealth", s_Instance.minHealth, "float")
	Something(className, s_guid, "minTimeVisible", s_Instance.minTimeVisible, "float")
end

function Type:HudProgressbarData (p_class, p_guid)
	local s_Instance = HudProgressbarData(p_class) 
 	local className = "HudProgressbarData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "progressType", s_Instance.progressType, "fb.ProgressType)")
end

function Type:HudTrackerData (p_class, p_guid)
	local s_Instance = HudTrackerData(p_class) 
 	local className = "HudTrackerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "displayExtraInfo", s_Instance.displayExtraInfo, "bool")
	Something(className, s_guid, "distanceTextOffsetY", s_Instance.distanceTextOffsetY, "float")
	Something(className, s_guid, "fadeMinAlpha", s_Instance.fadeMinAlpha, "float")
	Something(className, s_guid, "iconSize", s_Instance.iconSize, "float")
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "secondFadeDistance", s_Instance.secondFadeDistance, "float")
	Something(className, s_guid, "showDistance", s_Instance.showDistance, "bool")
	Something(className, s_guid, "startFadeDistance", s_Instance.startFadeDistance, "float")
	Something(className, s_guid, "trackerHudRadiusX", s_Instance.trackerHudRadiusX, "float")
	Something(className, s_guid, "trackerHudRadiusY", s_Instance.trackerHudRadiusY, "float")
end

function Type:HudVehicleTrackerData (p_class, p_guid)
	local s_Instance = HudVehicleTrackerData(p_class) 
 	local className = "HudVehicleTrackerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceIconShrinkFactor", s_Instance.distanceIconShrinkFactor, "float")
	Something(className, s_guid, "edgePointer", s_Instance.edgePointer, "EdgePointerData")
	Something(className, s_guid, "enableEdgePointers", s_Instance.enableEdgePointers, "bool")
	Something(className, s_guid, "enemyTrackerIcon", s_Instance.enemyTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "friendlyTrackerIcon", s_Instance.friendlyTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "heatSensitivity", s_Instance.heatSensitivity, "float")
	Something(className, s_guid, "iconSize", s_Instance.iconSize, "float")
	Something(className, s_guid, "laserPaintedVehicleTrackerIcon", s_Instance.laserPaintedVehicleTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "missileLockTrackerIcon", s_Instance.missileLockTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "missileTrackerIcon", s_Instance.missileTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "outsideScreenTrackerIcon", s_Instance.outsideScreenTrackerIcon, "UIHudIcon")
	Something(className, s_guid, "radarSensitivity", s_Instance.radarSensitivity, "float")
	Something(className, s_guid, "renderTargetData", s_Instance.renderTargetData, "VehicleTrackerRenderTargetData")
	Something(className, s_guid, "showTracker", s_Instance.showTracker, "bool")
	Something(className, s_guid, "trackLaserPaintedObjects", s_Instance.trackLaserPaintedObjects, "bool")
	Something(className, s_guid, "trackOnlyUsedVehicles", s_Instance.trackOnlyUsedVehicles, "bool")
	Something(className, s_guid, "useCameraComponentTransform", s_Instance.useCameraComponentTransform, "bool")
	Something(className, s_guid, "useTrackerSignatures", s_Instance.useTrackerSignatures, "bool")
end

function Type:HullFloatPhysicsData (p_class, p_guid)
	local s_Instance = HullFloatPhysicsData(p_class) 
 	local className = "HullFloatPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularDampening", s_Instance.angularDampening, "float")
	Something(className, s_guid, "depth", s_Instance.depth, "float")
	Something(className, s_guid, "frictionThrottleModifier", s_Instance.frictionThrottleModifier, "float")
	Something(className, s_guid, "frontCurveDegree", s_Instance.frontCurveDegree, "float")
	Something(className, s_guid, "length", s_Instance.length, "float")
	Something(className, s_guid, "liftModifier", s_Instance.liftModifier, "float")
	Something(className, s_guid, "nonEngineSteer", s_Instance.nonEngineSteer, "float")
	Something(className, s_guid, "nonEngineSteerMaxSpeed", s_Instance.nonEngineSteerMaxSpeed, "float")
	Something(className, s_guid, "nonEngineSteerMinSpeed", s_Instance.nonEngineSteerMinSpeed, "float")
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "sideCurveDegree", s_Instance.sideCurveDegree, "float")
	Something(className, s_guid, "subSurfaceSplits", s_Instance.subSurfaceSplits, "int")
	Something(className, s_guid, "supportSizeMod", s_Instance.supportSizeMod, "float")
	Something(className, s_guid, "waterDampeningMod", s_Instance.waterDampeningMod, "float")
	Something(className, s_guid, "waterFrictionAxisMod", s_Instance.waterFrictionAxisMod, "Vec3")
	Something(className, s_guid, "waterResistanceAxisMod", s_Instance.waterResistanceAxisMod, "Vec3")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:HumanPlayerEntityData (p_class, p_guid)
	local s_Instance = HumanPlayerEntityData(p_class) 
 	local className = "HumanPlayerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "lastManStandingSid", s_Instance.lastManStandingSid, "string")
	Something(className, s_guid, "playerKilledDelay", s_Instance.playerKilledDelay, "float")
end

function Type:IKComponentData (p_class, p_guid)
	local s_Instance = IKComponentData(p_class) 
 	local className = "IKComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "iKData", s_Instance.iKData, "HIKData")
	Something(className, s_guid, "iKEffector", s_Instance.iKEffector, "IKEffectorEnum")
end

function Type:InAirStateData (p_class, p_guid)
	local s_Instance = InAirStateData(p_class) 
 	local className = "InAirStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "freeFallVelocity", s_Instance.freeFallVelocity, "float")
end

function Type:IndexRange (p_class, p_guid)
	local s_Instance = IndexRange(p_class) 
 	local className = "IndexRange"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "first", s_Instance.first, "uint")
	Something(className, s_guid, "last", s_Instance.last, "uint")
end

function Type:InputActionData (p_class, p_guid)
	local s_Instance = InputActionData(p_class) 
 	local className = "InputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isAnalog", s_Instance.isAnalog, "bool")
	Something(className, s_guid, "negateValue", s_Instance.negateValue, "bool")
end

function Type:InputActionMapData (p_class, p_guid)
	local s_Instance = InputActionMapData(p_class) 
 	local className = "InputActionMapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actions", s_Instance.actions, "List<CtrRef)>")
	Something(className, s_guid, "copyKeyBindingsFrom", s_Instance.copyKeyBindingsFrom, "string")
	Something(className, s_guid, "platformSpecific", s_Instance.platformSpecific, "InputActionMapPlatform")
	Something(className, s_guid, "slot", s_Instance.slot, "InputActionMapSlot")
end

function Type:InputActionMappingsData (p_class, p_guid)
	local s_Instance = InputActionMappingsData(p_class) 
 	local className = "InputActionMappingsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mappings", s_Instance.mappings, "List<CtrRef)>")
end

function Type:InputActionsData (p_class, p_guid)
	local s_Instance = InputActionsData(p_class) 
 	local className = "InputActionsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "conceptIdentifier", s_Instance.conceptIdentifier, "InputConceptIdentifiers")
	Something(className, s_guid, "copyKeyBindingFrom", s_Instance.copyKeyBindingFrom, "InputConceptIdentifiers")
	Something(className, s_guid, "hideInKeyBindings", s_Instance.hideInKeyBindings, "bool")
	Something(className, s_guid, "inputActions", s_Instance.inputActions, "List<CtrRef)>")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
end

function Type:InputConfigurationAsset (p_class, p_guid)
	local s_Instance = InputConfigurationAsset(p_class) 
 	local className = "InputConfigurationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchAction", s_Instance.crouchAction, "EntryInputActionEnum")
	Something(className, s_guid, "crouchAndHoldAction", s_Instance.crouchAndHoldAction, "EntryInputActionEnum")
	Something(className, s_guid, "defaultExclusiveInputConcepts", s_Instance.defaultExclusiveInputConcepts, "List<InputConceptIdentifiers)>")
	Something(className, s_guid, "defaultInputConceptDefinition", s_Instance.defaultInputConceptDefinition, "CtrRef")
	Something(className, s_guid, "disableCrawlingWhileFiring", s_Instance.disableCrawlingWhileFiring, "bool")
	Something(className, s_guid, "disableCrawlingWhileReloading", s_Instance.disableCrawlingWhileReloading, "bool")
	Something(className, s_guid, "disableFiringWhileDeployingBipod", s_Instance.disableFiringWhileDeployingBipod, "bool")
	Something(className, s_guid, "disableFiringWhileJumping", s_Instance.disableFiringWhileJumping, "bool")
	Something(className, s_guid, "disableSprintingWhileReloading", s_Instance.disableSprintingWhileReloading, "bool")
	Something(className, s_guid, "enableSprintToCrouchTransition", s_Instance.enableSprintToCrouchTransition, "bool")
	Something(className, s_guid, "firingDisablingTransitions", s_Instance.firingDisablingTransitions, "List<PoseTransition)>")
	Something(className, s_guid, "inputCurvesEnabled", s_Instance.inputCurvesEnabled, "bool")
	Something(className, s_guid, "pickupInteractionAction", s_Instance.pickupInteractionAction, "EntryInputActionEnum")
	Something(className, s_guid, "proneToStandOnJump", s_Instance.proneToStandOnJump, "bool")
	Something(className, s_guid, "sprintReleaseTime", s_Instance.sprintReleaseTime, "float")
	Something(className, s_guid, "standAutomaticallyIfSprinting", s_Instance.standAutomaticallyIfSprinting, "bool")
	Something(className, s_guid, "stopSprintingWhenReleasingSprint", s_Instance.stopSprintingWhenReleasingSprint, "bool")
	Something(className, s_guid, "stopSprintingWhenReleasingThrottle", s_Instance.stopSprintingWhenReleasingThrottle, "bool")
	Something(className, s_guid, "throttleInputRequiredForSprint", s_Instance.throttleInputRequiredForSprint, "float")
	Something(className, s_guid, "togglePoseAction", s_Instance.togglePoseAction, "EntryInputActionEnum")
	Something(className, s_guid, "userConfigurableActionMaps", s_Instance.userConfigurableActionMaps, "List<EditableActionMap)>")
	Something(className, s_guid, "vehicleBoostIsToggle", s_Instance.vehicleBoostIsToggle, "bool")
	Something(className, s_guid, "waitForSprintReleaseBeforeSprintAgain", s_Instance.waitForSprintReleaseBeforeSprintAgain, "bool")
	Something(className, s_guid, "inputConfigurationAsset", s_Instance.inputConfigurationAsset,  "readonly")
	Something(className, s_guid, "inputConceptIdentifiers", s_Instance.inputConceptIdentifiers,  "uint")
	Something(className, s_guid, "poseTransition", s_Instance.poseTransition,  "uint")
end

function Type:InputCurveData (p_class, p_guid)
	local s_Instance = InputCurveData(p_class) 
 	local className = "InputCurveData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "affectedInputs", s_Instance.affectedInputs, "List<EntryInputActionEnum)>")
	Something(className, s_guid, "handleMultipleInputsAsSquare", s_Instance.handleMultipleInputsAsSquare, "bool")
	Something(className, s_guid, "inputModifierCurve", s_Instance.inputModifierCurve, "List<Vec2)>")
	Something(className, s_guid, "inputCurveData", s_Instance.inputCurveData,  "readonly")
	Something(className, s_guid, "entryInputActionEnum", s_Instance.entryInputActionEnum,  "uint")
end

function Type:InputModifierEntityData (p_class, p_guid)
	local s_Instance = InputModifierEntityData(p_class) 
 	local className = "InputModifierEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "action", s_Instance.action, "EntryInputActionEnum")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "offset", s_Instance.offset, "float")
	Something(className, s_guid, "scale", s_Instance.scale, "float")
end

function Type:InputRecorderData (p_class, p_guid)
	local s_Instance = InputRecorderData(p_class) 
 	local className = "InputRecorderData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoIncrementFileName", s_Instance.autoIncrementFileName, "bool")
	Something(className, s_guid, "fileName", s_Instance.fileName, "string")
	Something(className, s_guid, "fileNamePrefix", s_Instance.fileNamePrefix, "string")
	Something(className, s_guid, "toggleRecordAction", s_Instance.toggleRecordAction, "EntryInputActionEnum")
end

function Type:InputRecorderTrackData (p_class, p_guid)
	local s_Instance = InputRecorderTrackData(p_class) 
 	local className = "InputRecorderTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "propertyTrack", s_Instance.propertyTrack, "CtrRef")
end

function Type:InputRestrictionEntityData (p_class, p_guid)
	local s_Instance = InputRestrictionEntityData(p_class) 
 	local className = "InputRestrictionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altFire", s_Instance.altFire, "bool")
	Something(className, s_guid, "applyRestrictionsToSpecificPlayer", s_Instance.applyRestrictionsToSpecificPlayer, "bool")
	Something(className, s_guid, "brake", s_Instance.brake, "bool")
	Something(className, s_guid, "changeEntry", s_Instance.changeEntry, "bool")
	Something(className, s_guid, "changePose", s_Instance.changePose, "bool")
	Something(className, s_guid, "changeVehicle", s_Instance.changeVehicle, "bool")
	Something(className, s_guid, "changeWeapon", s_Instance.changeWeapon, "bool")
	Something(className, s_guid, "clutch", s_Instance.clutch, "bool")
	Something(className, s_guid, "cycleRadioChannel", s_Instance.cycleRadioChannel, "bool")
	Something(className, s_guid, "dynamicGadget1", s_Instance.dynamicGadget1, "bool")
	Something(className, s_guid, "dynamicGadget2", s_Instance.dynamicGadget2, "bool")
	Something(className, s_guid, "fire", s_Instance.fire, "bool")
	Something(className, s_guid, "fireCountermeasure", s_Instance.fireCountermeasure, "bool")
	Something(className, s_guid, "gearDown", s_Instance.gearDown, "bool")
	Something(className, s_guid, "gearUp", s_Instance.gearUp, "bool")
	Something(className, s_guid, "giveOrder", s_Instance.giveOrder, "bool")
	Something(className, s_guid, "grenadeLauncher", s_Instance.grenadeLauncher, "bool")
	Something(className, s_guid, "handBrake", s_Instance.handBrake, "bool")
	Something(className, s_guid, "jump", s_Instance.jump, "bool")
	Something(className, s_guid, "mapZoom", s_Instance.mapZoom, "bool")
	Something(className, s_guid, "meleeAttack", s_Instance.meleeAttack, "bool")
	Something(className, s_guid, "overridePreviousInputRestriction", s_Instance.overridePreviousInputRestriction, "bool")
	Something(className, s_guid, "pitch", s_Instance.pitch, "bool")
	Something(className, s_guid, "prone", s_Instance.prone, "bool")
	Something(className, s_guid, "reload", s_Instance.reload, "bool")
	Something(className, s_guid, "roll", s_Instance.roll, "bool")
	Something(className, s_guid, "scoreboardMenu", s_Instance.scoreboardMenu, "bool")
	Something(className, s_guid, "selectMeleeWeapon", s_Instance.selectMeleeWeapon, "bool")
	Something(className, s_guid, "selectWeapon1", s_Instance.selectWeapon1, "bool")
	Something(className, s_guid, "selectWeapon2", s_Instance.selectWeapon2, "bool")
	Something(className, s_guid, "selectWeapon3", s_Instance.selectWeapon3, "bool")
	Something(className, s_guid, "selectWeapon4", s_Instance.selectWeapon4, "bool")
	Something(className, s_guid, "selectWeapon5", s_Instance.selectWeapon5, "bool")
	Something(className, s_guid, "selectWeapon6", s_Instance.selectWeapon6, "bool")
	Something(className, s_guid, "selectWeapon7", s_Instance.selectWeapon7, "bool")
	Something(className, s_guid, "selectWeapon8", s_Instance.selectWeapon8, "bool")
	Something(className, s_guid, "selectWeapon9", s_Instance.selectWeapon9, "bool")
	Something(className, s_guid, "sprint", s_Instance.sprint, "bool")
	Something(className, s_guid, "staticGadget", s_Instance.staticGadget, "bool")
	Something(className, s_guid, "strafe", s_Instance.strafe, "bool")
	Something(className, s_guid, "switchPrimaryInventory", s_Instance.switchPrimaryInventory, "bool")
	Something(className, s_guid, "switchPrimaryWeapon", s_Instance.switchPrimaryWeapon, "bool")
	Something(className, s_guid, "threeDimensionalMap", s_Instance.threeDimensionalMap, "bool")
	Something(className, s_guid, "throttle", s_Instance.throttle, "bool")
	Something(className, s_guid, "throwGrenade", s_Instance.throwGrenade, "bool")
	Something(className, s_guid, "toggleCamera", s_Instance.toggleCamera, "bool")
	Something(className, s_guid, "toggleParachute", s_Instance.toggleParachute, "bool")
	Something(className, s_guid, "yaw", s_Instance.yaw, "bool")
	Something(className, s_guid, "zoom", s_Instance.zoom, "bool")
end

function Type:InputSuppressionData (p_class, p_guid)
	local s_Instance = InputSuppressionData(p_class) 
 	local className = "InputSuppressionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suppressVehicleInput", s_Instance.suppressVehicleInput, "List<ActionSuppressor)>")
end

function Type:InspectAnimationTriggerData (p_class, p_guid)
	local s_Instance = InspectAnimationTriggerData(p_class) 
 	local className = "InspectAnimationTriggerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animation", s_Instance.animation, "AntRef")
	Something(className, s_guid, "probability", s_Instance.probability, "float")
end

function Type:InspectEntityData (p_class, p_guid)
	local s_Instance = InspectEntityData(p_class) 
 	local className = "InspectEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationSignal", s_Instance.animationSignal, "AntRef")
	Something(className, s_guid, "cameras", s_Instance.cameras, "List<CtrRef)>")
	Something(className, s_guid, "centerOffset", s_Instance.centerOffset, "Vec3")
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "maxLookAtHeight", s_Instance.maxLookAtHeight, "float")
	Something(className, s_guid, "minDistance", s_Instance.minDistance, "float")
	Something(className, s_guid, "minLookAtHeight", s_Instance.minLookAtHeight, "float")
	Something(className, s_guid, "uIName", s_Instance.uIName, "string")
	Something(className, s_guid, "viewPoints", s_Instance.viewPoints, "List<InspectViewPointData)>")
	Something(className, s_guid, "zoomScrollAcceleration", s_Instance.zoomScrollAcceleration, "float")
	Something(className, s_guid, "zoomScrollSpeed", s_Instance.zoomScrollSpeed, "float")
end

function Type:InspectViewPointData (p_class, p_guid)
	local s_Instance = InspectViewPointData(p_class) 
 	local className = "InspectViewPointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "adjustmentYaw", s_Instance.adjustmentYaw, "float")
	Something(className, s_guid, "animationTriggers", s_Instance.animationTriggers, "List<InspectAnimationTriggerData)>")
	Something(className, s_guid, "continuousAnimationSignal", s_Instance.continuousAnimationSignal, "List<AntRef)>")
	Something(className, s_guid, "distance", s_Instance.distance, "float")
	Something(className, s_guid, "fixed", s_Instance.fixed, "bool")
	Something(className, s_guid, "fovOffset", s_Instance.fovOffset, "float")
	Something(className, s_guid, "lookAtHeight", s_Instance.lookAtHeight, "float")
	Something(className, s_guid, "pitch", s_Instance.pitch, "float")
	Something(className, s_guid, "viewPointID", s_Instance.viewPointID, "string")
	Something(className, s_guid, "yaw", s_Instance.yaw, "float")
end

function Type:InstanceInputNode (p_class, p_guid)
	local s_Instance = InstanceInputNode(p_class) 
 	local className = "InstanceInputNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:InstanceNode (p_class, p_guid)
	local s_Instance = InstanceNode(p_class) 
 	local className = "InstanceNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "uIGraph", s_Instance.uIGraph, "CtrRef")
end

function Type:InstanceOutputNode (p_class, p_guid)
	local s_Instance = InstanceOutputNode(p_class) 
 	local className = "InstanceOutputNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "destroyGraph", s_Instance.destroyGraph, "bool")
	Something(className, s_guid, "id", s_Instance.id, "int")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
end

function Type:IntegratorOrDifferentiatorEntityData (p_class, p_guid)
	local s_Instance = IntegratorOrDifferentiatorEntityData(p_class) 
 	local className = "IntegratorOrDifferentiatorEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bounded", s_Instance.bounded, "bool")
	Something(className, s_guid, "input", s_Instance.input, "float")
	Something(className, s_guid, "maxValue", s_Instance.maxValue, "float")
	Something(className, s_guid, "minValue", s_Instance.minValue, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "startValue", s_Instance.startValue, "float")
	Something(className, s_guid, "updatePass", s_Instance.updatePass, "EntityUpdateOrder")
end

function Type:IntentData (p_class, p_guid)
	local s_Instance = IntentData(p_class) 
 	local className = "IntentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultModifier", s_Instance.defaultModifier, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:IntEntityData (p_class, p_guid)
	local s_Instance = IntEntityData(p_class) 
 	local className = "IntEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "int")
	Something(className, s_guid, "incDecValue", s_Instance.incDecValue, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:InteractionEntityData (p_class, p_guid)
	local s_Instance = InteractionEntityData(p_class) 
 	local className = "InteractionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowInteractionViaRemoteEntry", s_Instance.allowInteractionViaRemoteEntry, "bool")
	Something(className, s_guid, "maxUses", s_Instance.maxUses, "uint")
	Something(className, s_guid, "preInteractionSoundEffect", s_Instance.preInteractionSoundEffect, "CtrRef")
	Something(className, s_guid, "testIfOccluded", s_Instance.testIfOccluded, "bool")
	Something(className, s_guid, "useWithinAngle", s_Instance.useWithinAngle, "float")
	Something(className, s_guid, "useWithinRadius", s_Instance.useWithinRadius, "float")
end

function Type:InteractionTypesData (p_class, p_guid)
	local s_Instance = InteractionTypesData(p_class) 
 	local className = "InteractionTypesData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammoCrateEntity", s_Instance.ammoCrateEntity, "bool")
	Something(className, s_guid, "explosionPackEntity", s_Instance.explosionPackEntity, "bool")
	Something(className, s_guid, "interactionEntity", s_Instance.interactionEntity, "bool")
	Something(className, s_guid, "pickupEntity", s_Instance.pickupEntity, "bool")
	Something(className, s_guid, "soldierEntity", s_Instance.soldierEntity, "bool")
	Something(className, s_guid, "vehicleEntity", s_Instance.vehicleEntity, "bool")
end

function Type:InterfaceDescriptorData (p_class, p_guid)
	local s_Instance = InterfaceDescriptorData(p_class) 
 	local className = "InterfaceDescriptorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputEvents", s_Instance.inputEvents, "List<DynamicEvent)>")
	Something(className, s_guid, "inputLinks", s_Instance.inputLinks, "List<DynamicLink)>")
	Something(className, s_guid, "outputEvents", s_Instance.outputEvents, "List<DynamicEvent)>")
	Something(className, s_guid, "outputLinks", s_Instance.outputLinks, "List<DynamicLink)>")
end

function Type:InterludeOrderEntityData (p_class, p_guid)
	local s_Instance = InterludeOrderEntityData(p_class) 
 	local className = "InterludeOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouch", s_Instance.crouch, "bool")
	Something(className, s_guid, "isCutscene", s_Instance.isCutscene, "bool")
end

function Type:InterruptFlow (p_class, p_guid)
	local s_Instance = InterruptFlow(p_class) 
 	local className = "InterruptFlow"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "interruptEnum", s_Instance.interruptEnum, "UIInterruptID")
	Something(className, s_guid, "interruptFlow", s_Instance.interruptFlow, "CtrRef")
end

function Type:IntHubEntityData (p_class, p_guid)
	local s_Instance = IntHubEntityData(p_class) 
 	local className = "IntHubEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputCount", s_Instance.inputCount, "int")
	Something(className, s_guid, "inputSelect", s_Instance.inputSelect, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:IntOption (p_class, p_guid)
	local s_Instance = IntOption(p_class) 
 	local className = "IntOption"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:IntPropertyTrackData (p_class, p_guid)
	local s_Instance = IntPropertyTrackData(p_class) 
 	local className = "IntPropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<int)>")
end

function Type:IntRecordingData (p_class, p_guid)
	local s_Instance = IntRecordingData(p_class) 
 	local className = "IntRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<int)>")
end

function Type:IntUnlockValuePair (p_class, p_guid)
	local s_Instance = IntUnlockValuePair(p_class) 
 	local className = "IntUnlockValuePair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "int")
	Something(className, s_guid, "unlockedValue", s_Instance.unlockedValue, "int")
end

function Type:IrReverbControllerNodeData (p_class, p_guid)
	local s_Instance = IrReverbControllerNodeData(p_class) 
 	local className = "IrReverbControllerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude0", s_Instance.amplitude0, "AudioGraphNodePort")
	Something(className, s_guid, "amplitude1", s_Instance.amplitude1, "AudioGraphNodePort")
	Something(className, s_guid, "reverb0", s_Instance.reverb0, "AudioGraphNodePort")
	Something(className, s_guid, "reverb1", s_Instance.reverb1, "AudioGraphNodePort")
end

function Type:IrReverbEntityData (p_class, p_guid)
	local s_Instance = IrReverbEntityData(p_class) 
 	local className = "IrReverbEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fadeCurve", s_Instance.fadeCurve, "FadeCurveType")
	Something(className, s_guid, "gain", s_Instance.gain, "float")
	Something(className, s_guid, "impulseResponse", s_Instance.impulseResponse, "CtrRef")
	Something(className, s_guid, "volume", s_Instance.volume, "float")
end

function Type:IrReverbNodeData (p_class, p_guid)
	local s_Instance = IrReverbNodeData(p_class) 
 	local className = "IrReverbNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude0", s_Instance.amplitude0, "AudioGraphNodePort")
	Something(className, s_guid, "amplitude1", s_Instance.amplitude1, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "maxReverbLength", s_Instance.maxReverbLength, "float")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "reverb0", s_Instance.reverb0, "AudioGraphNodePort")
	Something(className, s_guid, "reverb1", s_Instance.reverb1, "AudioGraphNodePort")
	Something(className, s_guid, "reverbPlugin", s_Instance.reverbPlugin, "SoundGraphPluginRef")
end

function Type:JammingComponentData (p_class, p_guid)
	local s_Instance = JammingComponentData(p_class) 
 	local className = "JammingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "airMissileJamming", s_Instance.airMissileJamming, "AirMissileJammingData")
	Something(className, s_guid, "smokeJamming", s_Instance.smokeJamming, "SmokeJammingData")
end

function Type:JetEngineConfigData (p_class, p_guid)
	local s_Instance = JetEngineConfigData(p_class) 
 	local className = "JetEngineConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angleInputPitchMultiplier", s_Instance.angleInputPitchMultiplier, "float")
	Something(className, s_guid, "angleInputYMultiplier", s_Instance.angleInputYMultiplier, "float")
	Something(className, s_guid, "directionVectorIndex", s_Instance.directionVectorIndex, "uint")
	Something(className, s_guid, "forceMagnitudeMultiplier", s_Instance.forceMagnitudeMultiplier, "float")
	Something(className, s_guid, "isTurnable", s_Instance.isTurnable, "bool")
	Something(className, s_guid, "isWaterJetEngine", s_Instance.isWaterJetEngine, "bool")
	Something(className, s_guid, "maxVelocity", s_Instance.maxVelocity, "float")
	Something(className, s_guid, "powerFadeOutRange", s_Instance.powerFadeOutRange, "Vec2")
end

function Type:JoypadNodeData (p_class, p_guid)
	local s_Instance = JoypadNodeData(p_class) 
 	local className = "JoypadNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aButton", s_Instance.aButton, "AudioGraphNodePort")
	Something(className, s_guid, "bButton", s_Instance.bButton, "AudioGraphNodePort")
	Something(className, s_guid, "leftAnalogX", s_Instance.leftAnalogX, "AudioGraphNodePort")
	Something(className, s_guid, "leftAnalogY", s_Instance.leftAnalogY, "AudioGraphNodePort")
	Something(className, s_guid, "rightAnalogX", s_Instance.rightAnalogX, "AudioGraphNodePort")
	Something(className, s_guid, "rightAnalogY", s_Instance.rightAnalogY, "AudioGraphNodePort")
end

function Type:JumpNode (p_class, p_guid)
	local s_Instance = JumpNode(p_class) 
 	local className = "JumpNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "targetNode", s_Instance.targetNode, "CtrRef")
	Something(className, s_guid, "targetPort", s_Instance.targetPort, "CtrRef")
end

function Type:JumpStateData (p_class, p_guid)
	local s_Instance = JumpStateData(p_class) 
 	local className = "JumpStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "jumpEffectSize", s_Instance.jumpEffectSize, "float")
	Something(className, s_guid, "jumpHeight", s_Instance.jumpHeight, "float")
end

function Type:KeyboardInputActionData (p_class, p_guid)
	local s_Instance = KeyboardInputActionData(p_class) 
 	local className = "KeyboardInputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "key", s_Instance.key, "InputDeviceKeys")
end

function Type:KillAllEntityData (p_class, p_guid)
	local s_Instance = KillAllEntityData(p_class) 
 	local className = "KillAllEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "killAllHumanSoldiers", s_Instance.killAllHumanSoldiers, "bool")
end

function Type:KillCounterEntityData (p_class, p_guid)
	local s_Instance = KillCounterEntityData(p_class) 
 	local className = "KillCounterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enemyWeight", s_Instance.enemyWeight, "float")
	Something(className, s_guid, "ignoreAI", s_Instance.ignoreAI, "bool")
	Something(className, s_guid, "maxKillCount", s_Instance.maxKillCount, "uint")
	Something(className, s_guid, "neutralTeamWeight", s_Instance.neutralTeamWeight, "KillWeight")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "teamKillWeight", s_Instance.teamKillWeight, "KillWeight")
end

function Type:KillEvent (p_class, p_guid)
	local s_Instance = KillEvent(p_class) 
 	local className = "KillEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "time", s_Instance.time, "float")
	Something(className, s_guid, "victimId", s_Instance.victimId, "ulong")
	Something(className, s_guid, "victimPosition", s_Instance.victimPosition, "Vec3")
	Something(className, s_guid, "weapon", s_Instance.weapon, "string")
end

function Type:KillWeight (p_class, p_guid)
	local s_Instance = KillWeight(p_class) 
 	local className = "KillWeight"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coolDownTime", s_Instance.coolDownTime, "float")
	Something(className, s_guid, "highIntenseWeight", s_Instance.highIntenseWeight, "float")
	Something(className, s_guid, "lowIntenseWeight", s_Instance.lowIntenseWeight, "float")
end

function Type:KitPickupEntityData (p_class, p_guid)
	local s_Instance = KitPickupEntityData(p_class) 
 	local className = "KitPickupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "keepAdditionalWeapons", s_Instance.keepAdditionalWeapons, "bool")
	Something(className, s_guid, "keepAmmoState", s_Instance.keepAmmoState, "bool")
end

function Type:KitState (p_class, p_guid)
	local s_Instance = KitState(p_class) 
 	local className = "KitState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "kit", s_Instance.kit, "string")
end

function Type:KitStateEvent (p_class, p_guid)
	local s_Instance = KitStateEvent(p_class) 
 	local className = "KitStateEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "kit", s_Instance.kit, "string")
	Something(className, s_guid, "secondsAsKit", s_Instance.secondsAsKit, "float")
end

function Type:LandingFlapData (p_class, p_guid)
	local s_Instance = LandingFlapData(p_class) 
 	local className = "LandingFlapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activationHeight", s_Instance.activationHeight, "float")
	Something(className, s_guid, "activationVelocity", s_Instance.activationVelocity, "float")
	Something(className, s_guid, "heightTolerance", s_Instance.heightTolerance, "float")
	Something(className, s_guid, "velocityTolerance", s_Instance.velocityTolerance, "float")
end

function Type:LandingGearConditionData (p_class, p_guid)
	local s_Instance = LandingGearConditionData(p_class) 
 	local className = "LandingGearConditionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "height", s_Instance.height, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:LandingGearLogicData (p_class, p_guid)
	local s_Instance = LandingGearLogicData(p_class) 
 	local className = "LandingGearLogicData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deployCondition", s_Instance.deployCondition, "LandingGearConditionData")
	Something(className, s_guid, "retractCondition", s_Instance.retractCondition, "LandingGearConditionData")
end

function Type:LaserDesignatorData (p_class, p_guid)
	local s_Instance = LaserDesignatorData(p_class) 
 	local className = "LaserDesignatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bomberSound", s_Instance.bomberSound, "CtrRef")
	Something(className, s_guid, "bomberTime", s_Instance.bomberTime, "float")
	Something(className, s_guid, "bombWarnTime", s_Instance.bombWarnTime, "float")
	Something(className, s_guid, "postLockTime", s_Instance.postLockTime, "float")
end

function Type:LaserPainterData (p_class, p_guid)
	local s_Instance = LaserPainterData(p_class) 
 	local className = "LaserPainterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "timeObjectIsPainted", s_Instance.timeObjectIsPainted, "float")
end

function Type:LensFlareComponentData (p_class, p_guid)
	local s_Instance = LensFlareComponentData(p_class) 
 	local className = "LensFlareComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lensFlare", s_Instance.lensFlare, "CtrRef")
end

function Type:LensFlareElement (p_class, p_guid)
	local s_Instance = LensFlareElement(p_class) 
 	local className = "LensFlareElement"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alphaAngleCurve", s_Instance.alphaAngleCurve, "Vec4")
	Something(className, s_guid, "alphaCamDistCurve", s_Instance.alphaCamDistCurve, "Vec4")
	Something(className, s_guid, "alphaCamDistMax", s_Instance.alphaCamDistMax, "float")
	Something(className, s_guid, "alphaOccluderCurve", s_Instance.alphaOccluderCurve, "Vec4")
	Something(className, s_guid, "alphaScreenPosCurve", s_Instance.alphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "rayDistance", s_Instance.rayDistance, "float")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
	Something(className, s_guid, "size", s_Instance.size, "Vec2")
	Something(className, s_guid, "sizeAngleCurve", s_Instance.sizeAngleCurve, "Vec4")
	Something(className, s_guid, "sizeCamDistCurve", s_Instance.sizeCamDistCurve, "Vec4")
	Something(className, s_guid, "sizeCamDistMax", s_Instance.sizeCamDistMax, "float")
	Something(className, s_guid, "sizeOccluderCurve", s_Instance.sizeOccluderCurve, "Vec4")
	Something(className, s_guid, "sizeScreenPosCurve", s_Instance.sizeScreenPosCurve, "Vec4")
end

function Type:LensFlareEntityData (p_class, p_guid)
	local s_Instance = LensFlareEntityData(p_class) 
 	local className = "LensFlareEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugDrawOccluder", s_Instance.debugDrawOccluder, "bool")
	Something(className, s_guid, "elements", s_Instance.elements, "List<LensFlareElement)>")
	Something(className, s_guid, "halfRes", s_Instance.halfRes, "bool")
	Something(className, s_guid, "occluderSize", s_Instance.occluderSize, "float")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:LensScopeComponentData (p_class, p_guid)
	local s_Instance = LensScopeComponentData(p_class) 
 	local className = "LensScopeComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurCenter", s_Instance.blurCenter, "Vec2")
	Something(className, s_guid, "blurScale", s_Instance.blurScale, "float")
	Something(className, s_guid, "chromaticAberrationColor1", s_Instance.chromaticAberrationColor1, "Vec3")
	Something(className, s_guid, "chromaticAberrationColor2", s_Instance.chromaticAberrationColor2, "Vec3")
	Something(className, s_guid, "chromaticAberrationDisplacement1", s_Instance.chromaticAberrationDisplacement1, "Vec2")
	Something(className, s_guid, "chromaticAberrationDisplacement2", s_Instance.chromaticAberrationDisplacement2, "Vec2")
	Something(className, s_guid, "chromaticAberrationStrengths", s_Instance.chromaticAberrationStrengths, "Vec2")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "radialBlendDistanceCoefficients", s_Instance.radialBlendDistanceCoefficients, "Vec2")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:LevelAudioObstructionAsset (p_class, p_guid)
	local s_Instance = LevelAudioObstructionAsset(p_class) 
 	local className = "LevelAudioObstructionAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequencySlewRate", s_Instance.frequencySlewRate, "float")
	Something(className, s_guid, "gainSlewRate", s_Instance.gainSlewRate, "float")
	Something(className, s_guid, "materialMap", s_Instance.materialMap, "List<AudioObstructionMaterialInfo)>")
	Something(className, s_guid, "maxRaycastDistanceSquared", s_Instance.maxRaycastDistanceSquared, "float")
end

function Type:LevelControlEntityData (p_class, p_guid)
	local s_Instance = LevelControlEntityData(p_class) 
 	local className = "LevelControlEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "levelToLoad", s_Instance.levelToLoad, "string")
	Something(className, s_guid, "rollCredits", s_Instance.rollCredits, "bool")
end

function Type:LevelData (p_class, p_guid)
	local s_Instance = LevelData(p_class) 
 	local className = "LevelData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aerialHeightmapData", s_Instance.aerialHeightmapData, "string")
	Something(className, s_guid, "aISystem", s_Instance.aISystem, "CtrRef")
	Something(className, s_guid, "animatedSkeletonDatabase", s_Instance.animatedSkeletonDatabase, "CtrRef")
	Something(className, s_guid, "antProjectAssets", s_Instance.antProjectAssets, "List<CtrRef)>")
	Something(className, s_guid, "audioObstructionInfo", s_Instance.audioObstructionInfo, "CtrRef")
	Something(className, s_guid, "cameraModes", s_Instance.cameraModes, "List<CtrRef)>")
	Something(className, s_guid, "cameraTransitions", s_Instance.cameraTransitions, "List<CtrRef)>")
	Something(className, s_guid, "defaultFOV", s_Instance.defaultFOV, "float")
	Something(className, s_guid, "emitterExclusionVolumes", s_Instance.emitterExclusionVolumes, "List<CtrRef)>")
	Something(className, s_guid, "emitterSystemAsset", s_Instance.emitterSystemAsset, "CtrRef")
	Something(className, s_guid, "enlightenShaderDatabase", s_Instance.enlightenShaderDatabase, "CtrRef")
	Something(className, s_guid, "faceAnimationsWaveMappings", s_Instance.faceAnimationsWaveMappings, "CtrRef")
	Something(className, s_guid, "freeStreamingEnable", s_Instance.freeStreamingEnable, "bool")
	Something(className, s_guid, "gameConfigurationName", s_Instance.gameConfigurationName, "string")
	Something(className, s_guid, "hackForceBuild", s_Instance.hackForceBuild, "CtrRef")
	Something(className, s_guid, "hugeBroadPhase", s_Instance.hugeBroadPhase, "bool")
	Something(className, s_guid, "infantryFOVMultiplier", s_Instance.infantryFOVMultiplier, "float")
	Something(className, s_guid, "levelDescription", s_Instance.levelDescription, "fb.LevelDescription)")
	Something(className, s_guid, "levelReference", s_Instance.levelReference, "CtrRef")
	Something(className, s_guid, "maxEntityBusNetworkCount", s_Instance.maxEntityBusNetworkCount, "uint")
	Something(className, s_guid, "maxVehicleHeight", s_Instance.maxVehicleHeight, "float")
	Something(className, s_guid, "pathfindingBlobInfo", s_Instance.pathfindingBlobInfo, "PathfindingBlob")
	Something(className, s_guid, "soundStates", s_Instance.soundStates, "CtrRef")
	Something(className, s_guid, "voiceOverLogic", s_Instance.voiceOverLogic, "List<CtrRef)>")
	Something(className, s_guid, "voiceOverSystem", s_Instance.voiceOverSystem, "CtrRef")
	Something(className, s_guid, "worldSizeXZ", s_Instance.worldSizeXZ, "float")
end

function Type:LevelDescription (p_class, p_guid)
	local s_Instance = LevelDescription(p_class) 
 	local className = "LevelDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "components", s_Instance.components, "List<CtrRef)>")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "isCoop", s_Instance.isCoop, "bool")
	Something(className, s_guid, "isMenu", s_Instance.isMenu, "bool")
	Something(className, s_guid, "isMultiplayer", s_Instance.isMultiplayer, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:LevelDescriptionAsset (p_class, p_guid)
	local s_Instance = LevelDescriptionAsset(p_class) 
 	local className = "LevelDescriptionAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "categories", s_Instance.categories, "List<LevelDescriptionInclusionCategory)>")
	Something(className, s_guid, "description", s_Instance.description, "LevelDescription")
	Something(className, s_guid, "levelName", s_Instance.levelName, "string")
	Something(className, s_guid, "startPoints", s_Instance.startPoints, "List<string)>")
end

function Type:LevelDescriptionInclusionCategory (p_class, p_guid)
	local s_Instance = LevelDescriptionInclusionCategory(p_class) 
 	local className = "LevelDescriptionInclusionCategory"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "mode", s_Instance.mode, "List<string)>")
end

function Type:LevelReportingAsset (p_class, p_guid)
	local s_Instance = LevelReportingAsset(p_class) 
 	local className = "LevelReportingAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "builtLevels", s_Instance.builtLevels, "List<CtrRef)>")
end

function Type:LevelSaveData (p_class, p_guid)
	local s_Instance = LevelSaveData(p_class) 
 	local className = "LevelSaveData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "saveNames", s_Instance.saveNames, "List<string)>")
	Something(className, s_guid, "saveSize", s_Instance.saveSize, "uint")
end

function Type:LevelSetup (p_class, p_guid)
	local s_Instance = LevelSetup(p_class) 
 	local className = "LevelSetup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "difficultyIndex", s_Instance.difficultyIndex, "uint")
	Something(className, s_guid, "forceReloadResources", s_Instance.forceReloadResources, "bool")
	Something(className, s_guid, "inclusionOptions", s_Instance.inclusionOptions, "List<LevelSetupOption)>")
	Something(className, s_guid, "isSaveGame", s_Instance.isSaveGame, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "subLevelNames", s_Instance.subLevelNames, "List<string)>")
	Something(className, s_guid, "subLevelStates", s_Instance.subLevelStates, "List<int)>")
end

function Type:LevelSetupOption (p_class, p_guid)
	local s_Instance = LevelSetupOption(p_class) 
 	local className = "LevelSetupOption"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criterion", s_Instance.criterion, "string")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:LfoNodeData (p_class, p_guid)
	local s_Instance = LfoNodeData(p_class) 
 	local className = "LfoNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "hz", s_Instance.hz, "AudioGraphNodePort")
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "startAtRandomValue", s_Instance.startAtRandomValue, "bool")
end

function Type:LicenseConfiguration (p_class, p_guid)
	local s_Instance = LicenseConfiguration(p_class) 
 	local className = "LicenseConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<LicenseInfo)>")
end

function Type:LicenseInfo (p_class, p_guid)
	local s_Instance = LicenseInfo(p_class) 
 	local className = "LicenseInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowStaging", s_Instance.allowStaging, "bool")
	Something(className, s_guid, "clientOnly", s_Instance.clientOnly, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "stagingPlatform", s_Instance.stagingPlatform, "GamePlatform")
end

function Type:LifeCounterEntityData (p_class, p_guid)
	local s_Instance = LifeCounterEntityData(p_class) 
 	local className = "LifeCounterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attacker", s_Instance.attacker, "bool")
	Something(className, s_guid, "baseCount", s_Instance.baseCount, "int")
	Something(className, s_guid, "defensiveKillRadius", s_Instance.defensiveKillRadius, "float")
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "fallbackTime", s_Instance.fallbackTime, "float")
	Something(className, s_guid, "fightHarderMessageSid", s_Instance.fightHarderMessageSid, "string")
	Something(className, s_guid, "fightHarderTreshold", s_Instance.fightHarderTreshold, "float")
	Something(className, s_guid, "lifeTresholdValues", s_Instance.lifeTresholdValues, "List<int)>")
	Something(className, s_guid, "reinforceMessageSid", s_Instance.reinforceMessageSid, "string")
	Something(className, s_guid, "reinforceTable", s_Instance.reinforceTable, "List<float)>")
	Something(className, s_guid, "reinforceThreshold", s_Instance.reinforceThreshold, "int")
	Something(className, s_guid, "setBestSquadSpawner", s_Instance.setBestSquadSpawner, "bool")
	Something(className, s_guid, "simpleReinforce", s_Instance.simpleReinforce, "bool")
	Something(className, s_guid, "startingLifeCount", s_Instance.startingLifeCount, "int")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "uiShowCountLowerThreshold", s_Instance.uiShowCountLowerThreshold, "int")
	Something(className, s_guid, "uiShowCountUpperThreshold", s_Instance.uiShowCountUpperThreshold, "int")
end

function Type:LightComponentData (p_class, p_guid)
	local s_Instance = LightComponentData(p_class) 
 	local className = "LightComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "light", s_Instance.light, "CtrRef")
end

function Type:LightProbeVolumeData (p_class, p_guid)
	local s_Instance = LightProbeVolumeData(p_class) 
 	local className = "LightProbeVolumeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blendDistance", s_Instance.blendDistance, "float")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
	Something(className, s_guid, "xres", s_Instance.xres, "uint")
	Something(className, s_guid, "yres", s_Instance.yres, "uint")
	Something(className, s_guid, "zres", s_Instance.zres, "uint")
end

function Type:LimiterNodeData (p_class, p_guid)
	local s_Instance = LimiterNodeData(p_class) 
 	local className = "LimiterNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "channelMode", s_Instance.channelMode, "LimiterChannelMode")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "AudioGraphNodePort")
	Something(className, s_guid, "threshold", s_Instance.threshold, "AudioGraphNodePort")
end

function Type:LinearMovingBodyData (p_class, p_guid)
	local s_Instance = LinearMovingBodyData(p_class) 
 	local className = "LinearMovingBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "axis", s_Instance.axis, "Vec3")
	Something(className, s_guid, "end", s_Instance.endValue, "EndPointData")
	Something(className, s_guid, "start", s_Instance.start, "EndPointData")
end

function Type:LinearTransformNodeData (p_class, p_guid)
	local s_Instance = LinearTransformNodeData(p_class) 
 	local className = "LinearTransformNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "k", s_Instance.k, "AudioGraphNodePort")
	Something(className, s_guid, "m", s_Instance.m, "AudioGraphNodePort")
	Something(className, s_guid, "x", s_Instance.x, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
end

function Type:LinearTransformRecordingData (p_class, p_guid)
	local s_Instance = LinearTransformRecordingData(p_class) 
 	local className = "LinearTransformRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<LinearTransform)>")
end

function Type:LinkConnection (p_class, p_guid)
	local s_Instance = LinkConnection(p_class) 
 	local className = "LinkConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "sourceFieldId", s_Instance.sourceFieldId, "int")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
	Something(className, s_guid, "targetFieldId", s_Instance.targetFieldId, "int")
end

function Type:LocalForceData (p_class, p_guid)
	local s_Instance = LocalForceData(p_class) 
 	local className = "LocalForceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "localForce", s_Instance.localForce, "Vec3")
end

function Type:LocalizationAsset (p_class, p_guid)
	local s_Instance = LocalizationAsset(p_class) 
 	local className = "LocalizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "localizedTexts", s_Instance.localizedTexts, "List<CtrRef)>")
end

function Type:LocalLightEntityData (p_class, p_guid)
	local s_Instance = LocalLightEntityData(p_class) 
 	local className = "LocalLightEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attenuationOffset", s_Instance.attenuationOffset, "float")
	Something(className, s_guid, "color", s_Instance.color, "Vec3")
	Something(className, s_guid, "enlightenColorMode", s_Instance.enlightenColorMode, "fb.EnlightenColorMode)")
	Something(className, s_guid, "enlightenColorScale", s_Instance.enlightenColorScale, "Vec3")
	Something(className, s_guid, "enlightenEnable", s_Instance.enlightenEnable, "bool")
	Something(className, s_guid, "intensity", s_Instance.intensity, "float")
	Something(className, s_guid, "particleColorScale", s_Instance.particleColorScale, "Vec3")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "specularEnable", s_Instance.specularEnable, "bool")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:LocatorComponentData (p_class, p_guid)
	local s_Instance = LocatorComponentData(p_class) 
 	local className = "LocatorComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:LocatorEntityData (p_class, p_guid)
	local s_Instance = LocatorEntityData(p_class) 
 	local className = "LocatorEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:LockedSettingConfig (p_class, p_guid)
	local s_Instance = LockedSettingConfig(p_class) 
 	local className = "LockedSettingConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "key", s_Instance.key, "string")
	Something(className, s_guid, "value", s_Instance.value, "uint")
end

function Type:LockingControllerData (p_class, p_guid)
	local s_Instance = LockingControllerData(p_class) 
 	local className = "LockingControllerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "acceptanceAngle", s_Instance.acceptanceAngle, "float")
	Something(className, s_guid, "angleConstant", s_Instance.angleConstant, "float")
	Something(className, s_guid, "distanceConstant", s_Instance.distanceConstant, "float")
	Something(className, s_guid, "holdStillThreshold", s_Instance.holdStillThreshold, "float")
	Something(className, s_guid, "ignoreHeigthLockDistance", s_Instance.ignoreHeigthLockDistance, "bool")
	Something(className, s_guid, "lockOnEmptyVehicles", s_Instance.lockOnEmptyVehicles, "bool")
	Something(className, s_guid, "lockOnVisibleTargetsOnly", s_Instance.lockOnVisibleTargetsOnly, "bool")
	Something(className, s_guid, "lockOnWorldSpacePos", s_Instance.lockOnWorldSpacePos, "bool")
	Something(className, s_guid, "lockTime", s_Instance.lockTime, "float")
	Something(className, s_guid, "minimumLockTime", s_Instance.minimumLockTime, "float")
	Something(className, s_guid, "positionOnly", s_Instance.positionOnly, "bool")
	Something(className, s_guid, "rayLength", s_Instance.rayLength, "float")
	Something(className, s_guid, "releaseOnNewTargetTime", s_Instance.releaseOnNewTargetTime, "float")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "float")
	Something(className, s_guid, "sampleRate", s_Instance.sampleRate, "float")
	Something(className, s_guid, "sensitivity", s_Instance.sensitivity, "float")
	Something(className, s_guid, "zoomLevelLock", s_Instance.zoomLevelLock, "List<ZoomLevelLockData)>")
end

function Type:LockingScoringHandlerData (p_class, p_guid)
	local s_Instance = LockingScoringHandlerData(p_class) 
 	local className = "LockingScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hotVehicleTimeout", s_Instance.hotVehicleTimeout, "float")
end

function Type:LockingWeaponData (p_class, p_guid)
	local s_Instance = LockingWeaponData(p_class) 
 	local className = "LockingWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fireOnlyWhenLockedOn", s_Instance.fireOnlyWhenLockedOn, "bool")
	Something(className, s_guid, "isGuided", s_Instance.isGuided, "bool")
	Something(className, s_guid, "isGuidedWhenZoomed", s_Instance.isGuidedWhenZoomed, "bool")
	Something(className, s_guid, "isHoming", s_Instance.isHoming, "bool")
	Something(className, s_guid, "lockingController", s_Instance.lockingController, "CtrRef")
	Something(className, s_guid, "secondaryLockingController", s_Instance.secondaryLockingController, "CtrRef")
	Something(className, s_guid, "warnLock", s_Instance.warnLock, "WarnTarget")
end

function Type:LodBinding (p_class, p_guid)
	local s_Instance = LodBinding(p_class) 
 	local className = "LodBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "disableControllerUpdate", s_Instance.disableControllerUpdate, "AntRef")
	Something(className, s_guid, "disablePoseUpdate", s_Instance.disablePoseUpdate, "AntRef")
	Something(className, s_guid, "distanceFromCamera", s_Instance.distanceFromCamera, "AntRef")
end

function Type:LoggingEntityData (p_class, p_guid)
	local s_Instance = LoggingEntityData(p_class) 
 	local className = "LoggingEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolValue", s_Instance.boolValue, "bool")
	Something(className, s_guid, "floatValue", s_Instance.floatValue, "float")
	Something(className, s_guid, "intValue", s_Instance.intValue, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "strings", s_Instance.strings, "List<string)>")
	Something(className, s_guid, "transformValue", s_Instance.transformValue, "LinearTransform")
	Something(className, s_guid, "vec2Value", s_Instance.vec2Value, "Vec2")
	Something(className, s_guid, "vec3Value", s_Instance.vec3Value, "Vec3")
end

function Type:LogicalExpressionEntry (p_class, p_guid)
	local s_Instance = LogicalExpressionEntry(p_class) 
 	local className = "LogicalExpressionEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
end

function Type:LogicalExpressionNodeData (p_class, p_guid)
	local s_Instance = LogicalExpressionNodeData(p_class) 
 	local className = "LogicalExpressionNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "operator", s_Instance.operator, "LogicalExpressionOperator")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
end

function Type:LogicReferenceObjectData (p_class, p_guid)
	local s_Instance = LogicReferenceObjectData(p_class) 
 	local className = "LogicReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "subRealm", s_Instance.subRealm, "fb.SubRealm)")
end

function Type:LogicVisualEnvironmentEntityData (p_class, p_guid)
	local s_Instance = LogicVisualEnvironmentEntityData(p_class) 
 	local className = "LogicVisualEnvironmentEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "visibility", s_Instance.visibility, "float")
	Something(className, s_guid, "visualEnvironment", s_Instance.visualEnvironment, "CtrRef")
end

function Type:LookAtEntityData (p_class, p_guid)
	local s_Instance = LookAtEntityData(p_class) 
 	local className = "LookAtEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
	Something(className, s_guid, "useStaticDirection", s_Instance.useStaticDirection, "bool")
end

function Type:LookAtTriggerEntityData (p_class, p_guid)
	local s_Instance = LookAtTriggerEntityData(p_class) 
 	local className = "LookAtTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkOcclusion", s_Instance.checkOcclusion, "bool")
	Something(className, s_guid, "fOV", s_Instance.fOV, "float")
	Something(className, s_guid, "maxDistanceToObject", s_Instance.maxDistanceToObject, "float")
	Something(className, s_guid, "minDistanceToObject", s_Instance.minDistanceToObject, "float")
	Something(className, s_guid, "startTriggerLookingAt", s_Instance.startTriggerLookingAt, "bool")
	Something(className, s_guid, "weapon", s_Instance.weapon, "CtrRef")
	Something(className, s_guid, "zoomLevel", s_Instance.zoomLevel, "uint")
end

function Type:LookConstraintsData (p_class, p_guid)
	local s_Instance = LookConstraintsData(p_class) 
 	local className = "LookConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxLookPitch", s_Instance.maxLookPitch, "float")
	Something(className, s_guid, "maxLookYaw", s_Instance.maxLookYaw, "float")
	Something(className, s_guid, "minLookPitch", s_Instance.minLookPitch, "float")
	Something(className, s_guid, "minLookYaw", s_Instance.minLookYaw, "float")
end

function Type:LoosePartPhysicsData (p_class, p_guid)
	local s_Instance = LoosePartPhysicsData(p_class) 
 	local className = "LoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fakePhysics", s_Instance.fakePhysics, "CtrRef")
end

function Type:LowPassButterworthNodeData (p_class, p_guid)
	local s_Instance = LowPassButterworthNodeData(p_class) 
 	local className = "LowPassButterworthNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "order", s_Instance.order, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:LowPassFir64NodeData (p_class, p_guid)
	local s_Instance = LowPassFir64NodeData(p_class) 
 	local className = "LowPassFir64NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:LowPassIir2NodeData (p_class, p_guid)
	local s_Instance = LowPassIir2NodeData(p_class) 
 	local className = "LowPassIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:LowShelfIir2NodeData (p_class, p_guid)
	local s_Instance = LowShelfIir2NodeData(p_class) 
 	local className = "LowShelfIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:ManualDataAsset (p_class, p_guid)
	local s_Instance = ManualDataAsset(p_class) 
 	local className = "ManualDataAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<ManualDataEntry)>")
end

function Type:ManualDataEntry (p_class, p_guid)
	local s_Instance = ManualDataEntry(p_class) 
 	local className = "ManualDataEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "language", s_Instance.language, "LanguageFormat")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "textures", s_Instance.textures, "List<CtrRef)>")
end

function Type:MapMarkerEntityData (p_class, p_guid)
	local s_Instance = MapMarkerEntityData(p_class) 
 	local className = "MapMarkerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseTransform", s_Instance.baseTransform, "Vec3")
	Something(className, s_guid, "blinkTime", s_Instance.blinkTime, "float")
	Something(className, s_guid, "flagControlMarker", s_Instance.flagControlMarker, "bool")
	Something(className, s_guid, "focusPointRadius", s_Instance.focusPointRadius, "float")
	Something(className, s_guid, "hideRadius", s_Instance.hideRadius, "float")
	Something(className, s_guid, "hudIcon", s_Instance.hudIcon, "UIHudIcon")
	Something(className, s_guid, "instantFlagReturnRadius", s_Instance.instantFlagReturnRadius, "float")
	Something(className, s_guid, "isFocusPoint", s_Instance.isFocusPoint, "bool")
	Something(className, s_guid, "isVisible", s_Instance.isVisible, "bool")
	Something(className, s_guid, "markerType", s_Instance.markerType, "MapMarkerType")
	Something(className, s_guid, "nrOfEntries", s_Instance.nrOfEntries, "int")
	Something(className, s_guid, "nrOfPassengers", s_Instance.nrOfPassengers, "int")
	Something(className, s_guid, "onlyShowSnapped", s_Instance.onlyShowSnapped, "bool")
	Something(className, s_guid, "ownerTeam", s_Instance.ownerTeam, "TeamId")
	Something(className, s_guid, "progress", s_Instance.progress, "float")
	Something(className, s_guid, "progressMinTime", s_Instance.progressMinTime, "float")
	Something(className, s_guid, "progressPlayerSpeedUpPercentage", s_Instance.progressPlayerSpeedUpPercentage, "float")
	Something(className, s_guid, "progressTime", s_Instance.progressTime, "float")
	Something(className, s_guid, "progressTime1Player", s_Instance.progressTime1Player, "float")
	Something(className, s_guid, "showAirTargetBox", s_Instance.showAirTargetBox, "bool")
	Something(className, s_guid, "showProgress", s_Instance.showProgress, "bool")
	Something(className, s_guid, "showRadius", s_Instance.showRadius, "float")
	Something(className, s_guid, "sid", s_Instance.sid, "string")
	Something(className, s_guid, "snap", s_Instance.snap, "bool")
	Something(className, s_guid, "trackedPlayersInRange", s_Instance.trackedPlayersInRange, "uint")
	Something(className, s_guid, "trackingPlayerRange", s_Instance.trackingPlayerRange, "float")
	Something(className, s_guid, "useMarkerTransform", s_Instance.useMarkerTransform, "bool")
	Something(className, s_guid, "verticalOffset", s_Instance.verticalOffset, "float")
	Something(className, s_guid, "visibleForTeam", s_Instance.visibleForTeam, "TeamId")
end

function Type:MapRotataionLookup (p_class, p_guid)
	local s_Instance = MapRotataionLookup(p_class) 
 	local className = "MapRotataionLookup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gameMode", s_Instance.gameMode, "string")
end

function Type:MapRotationConfig (p_class, p_guid)
	local s_Instance = MapRotationConfig(p_class) 
 	local className = "MapRotationConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "descSid", s_Instance.descSid, "string")
	Something(className, s_guid, "gameMode", s_Instance.gameMode, "string")
	Something(className, s_guid, "mapRotationId", s_Instance.mapRotationId, "int")
	Something(className, s_guid, "mod", s_Instance.mod, "string")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "randomizeStartingMap", s_Instance.randomizeStartingMap, "bool")
end

function Type:MasterSkeletonAsset (p_class, p_guid)
	local s_Instance = MasterSkeletonAsset(p_class) 
 	local className = "MasterSkeletonAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "masterSkeleton", s_Instance.masterSkeleton, "CtrRef")
	Something(className, s_guid, "subSkeletons", s_Instance.subSkeletons, "List<SubSkeleton)>")
end

function Type:MasterUnitNodeData (p_class, p_guid)
	local s_Instance = MasterUnitNodeData(p_class) 
 	local className = "MasterUnitNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "compAttack", s_Instance.compAttack, "AudioGraphNodePort")
	Something(className, s_guid, "compRatio", s_Instance.compRatio, "AudioGraphNodePort")
	Something(className, s_guid, "compRelease", s_Instance.compRelease, "AudioGraphNodePort")
	Something(className, s_guid, "compThreshold", s_Instance.compThreshold, "AudioGraphNodePort")
	Something(className, s_guid, "distClipLevel", s_Instance.distClipLevel, "AudioGraphNodePort")
	Something(className, s_guid, "fadeTime", s_Instance.fadeTime, "AudioGraphNodePort")
	Something(className, s_guid, "highPassFreq", s_Instance.highPassFreq, "AudioGraphNodePort")
	Something(className, s_guid, "highShelfFreq", s_Instance.highShelfFreq, "AudioGraphNodePort")
	Something(className, s_guid, "highShelfGain", s_Instance.highShelfGain, "AudioGraphNodePort")
	Something(className, s_guid, "lowShelfFreq", s_Instance.lowShelfFreq, "AudioGraphNodePort")
	Something(className, s_guid, "lowShelfGain", s_Instance.lowShelfGain, "AudioGraphNodePort")
	Something(className, s_guid, "mainMixGain", s_Instance.mainMixGain, "AudioGraphNodePort")
	Something(className, s_guid, "masterDialogGain", s_Instance.masterDialogGain, "AudioGraphNodePort")
	Something(className, s_guid, "masterGain", s_Instance.masterGain, "AudioGraphNodePort")
	Something(className, s_guid, "masterLfeGain", s_Instance.masterLfeGain, "AudioGraphNodePort")
	Something(className, s_guid, "parallelDistortionGain", s_Instance.parallelDistortionGain, "AudioGraphNodePort")
	Something(className, s_guid, "postEffectsGain", s_Instance.postEffectsGain, "AudioGraphNodePort")
	Something(className, s_guid, "reverbGain", s_Instance.reverbGain, "AudioGraphNodePort")
	Something(className, s_guid, "settings", s_Instance.settings, "List<CtrRef)>")
	Something(className, s_guid, "settingsIndex", s_Instance.settingsIndex, "AudioGraphNodePort")
end

function Type:MasterUnitSettings (p_class, p_guid)
	local s_Instance = MasterUnitSettings(p_class) 
 	local className = "MasterUnitSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "compressor", s_Instance.compressor, "CtrRef")
	Something(className, s_guid, "distortionClipLevel", s_Instance.distortionClipLevel, "float")
	Something(className, s_guid, "equalizer", s_Instance.equalizer, "CtrRef")
	Something(className, s_guid, "fadeTime", s_Instance.fadeTime, "float")
	Something(className, s_guid, "mainMixVolume", s_Instance.mainMixVolume, "float")
	Something(className, s_guid, "masterDialogGain", s_Instance.masterDialogGain, "float")
	Something(className, s_guid, "masterLfeGain", s_Instance.masterLfeGain, "float")
	Something(className, s_guid, "masterVolume", s_Instance.masterVolume, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "parallelDistortionGain", s_Instance.parallelDistortionGain, "float")
	Something(className, s_guid, "postEffectsGain", s_Instance.postEffectsGain, "float")
	Something(className, s_guid, "reverbVolume", s_Instance.reverbVolume, "float")
end

function Type:MatchmakingCreateGameParameters (p_class, p_guid)
	local s_Instance = MatchmakingCreateGameParameters(p_class) 
 	local className = "MatchmakingCreateGameParameters"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attributes", s_Instance.attributes, "List<MatchmakingGameAttribute)>")
	Something(className, s_guid, "gameTopology", s_Instance.gameTopology, "MatchmakingNetworkTopology")
	Something(className, s_guid, "peerMode", s_Instance.peerMode, "MatchmakingPeer2PeerMode")
	Something(className, s_guid, "queueCapacity", s_Instance.queueCapacity, "uint")
	Something(className, s_guid, "settings", s_Instance.settings, "MatchmakingGameSettings")
	Something(className, s_guid, "voipTopology", s_Instance.voipTopology, "MatchmakingNetworkTopology")
end

function Type:MatchmakingCriteria (p_class, p_guid)
	local s_Instance = MatchmakingCriteria(p_class) 
 	local className = "MatchmakingCriteria"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "genericRules", s_Instance.genericRules, "List<MatchmakingGenericRule)>")
	Something(className, s_guid, "pingSiteRule", s_Instance.pingSiteRule, "MatchmakingPingSiteRule")
	Something(className, s_guid, "rankedRule", s_Instance.rankedRule, "MatchmakingRankedRule")
	Something(className, s_guid, "sizeRule", s_Instance.sizeRule, "MatchmakingSizeRule")
	Something(className, s_guid, "uEDRules", s_Instance.uEDRules, "List<MatchmakingUserExtendedDataRule)>")
	Something(className, s_guid, "virtualizedRule", s_Instance.virtualizedRule, "MatchmakingVirtualizedRule")
end

function Type:MatchmakingGameAttribute (p_class, p_guid)
	local s_Instance = MatchmakingGameAttribute(p_class) 
 	local className = "MatchmakingGameAttribute"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attribute", s_Instance.attribute, "string")
	Something(className, s_guid, "override", s_Instance.override, "bool")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:MatchmakingGameSettings (p_class, p_guid)
	local s_Instance = MatchmakingGameSettings(p_class) 
 	local className = "MatchmakingGameSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "adminInvitesOnlyIgnoreEntryChecks", s_Instance.adminInvitesOnlyIgnoreEntryChecks, "bool")
	Something(className, s_guid, "adminOnlyInvites", s_Instance.adminOnlyInvites, "bool")
	Something(className, s_guid, "allowSameTeamId", s_Instance.allowSameTeamId, "bool")
	Something(className, s_guid, "enablePersistedGameId", s_Instance.enablePersistedGameId, "bool")
	Something(className, s_guid, "enforceSingleGroupJoin", s_Instance.enforceSingleGroupJoin, "bool")
	Something(className, s_guid, "hostMigratable", s_Instance.hostMigratable, "bool")
	Something(className, s_guid, "joinInProgressSupported", s_Instance.joinInProgressSupported, "bool")
	Something(className, s_guid, "openToBrowsing", s_Instance.openToBrowsing, "bool")
	Something(className, s_guid, "openToInvites", s_Instance.openToInvites, "bool")
	Something(className, s_guid, "openToJoinByPlayer", s_Instance.openToJoinByPlayer, "bool")
	Something(className, s_guid, "openToMatchmaking", s_Instance.openToMatchmaking, "bool")
	Something(className, s_guid, "ranked", s_Instance.ranked, "bool")
end

function Type:MatchmakingGenericRule (p_class, p_guid)
	local s_Instance = MatchmakingGenericRule(p_class) 
 	local className = "MatchmakingGenericRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "desiredValues", s_Instance.desiredValues, "List<MatchmakingRuleString)>")
	Something(className, s_guid, "ignoreIfDefault", s_Instance.ignoreIfDefault, "bool")
	Something(className, s_guid, "mergeValues", s_Instance.mergeValues, "bool")
	Something(className, s_guid, "minFitThresHold", s_Instance.minFitThresHold, "string")
	Something(className, s_guid, "rule", s_Instance.rule, "string")
	Something(className, s_guid, "setting", s_Instance.setting, "string")
	Something(className, s_guid, "sortValues", s_Instance.sortValues, "bool")
end

function Type:MatchmakingPingSiteRule (p_class, p_guid)
	local s_Instance = MatchmakingPingSiteRule(p_class) 
 	local className = "MatchmakingPingSiteRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minFitThreshold", s_Instance.minFitThreshold, "string")
end

function Type:MatchmakingPlayerCapacityModifier (p_class, p_guid)
	local s_Instance = MatchmakingPlayerCapacityModifier(p_class) 
 	local className = "MatchmakingPlayerCapacityModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attribute", s_Instance.attribute, "string")
end

function Type:MatchmakingRankedRule (p_class, p_guid)
	local s_Instance = MatchmakingRankedRule(p_class) 
 	local className = "MatchmakingRankedRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minFitThreshold", s_Instance.minFitThreshold, "string")
end

function Type:MatchmakingRuleString (p_class, p_guid)
	local s_Instance = MatchmakingRuleString(p_class) 
 	local className = "MatchmakingRuleString"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<string)>")
	Something(className, s_guid, "platform", s_Instance.platform, "MatchmakingPlatform")
	Something(className, s_guid, "useOnlyIfEmpty", s_Instance.useOnlyIfEmpty, "bool")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:MatchmakingSession (p_class, p_guid)
	local s_Instance = MatchmakingSession(p_class) 
 	local className = "MatchmakingSession"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "createGameParams", s_Instance.createGameParams, "MatchmakingCreateGameParameters")
	Something(className, s_guid, "criteria", s_Instance.criteria, "MatchmakingCriteria")
	Something(className, s_guid, "durationMs", s_Instance.durationMs, "uint")
	Something(className, s_guid, "mode", s_Instance.mode, "MatchmakingSessionMode")
	Something(className, s_guid, "modifiers", s_Instance.modifiers, "List<CtrRef)>")
	Something(className, s_guid, "onNotFound", s_Instance.onNotFound, "CtrRef")
end

function Type:MatchmakingSizeConfiguration (p_class, p_guid)
	local s_Instance = MatchmakingSizeConfiguration(p_class) 
 	local className = "MatchmakingSizeConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "desiredPlayerCount", s_Instance.desiredPlayerCount, "uint")
	Something(className, s_guid, "maxPlayerCapacity", s_Instance.maxPlayerCapacity, "uint")
	Something(className, s_guid, "minFitThreshold", s_Instance.minFitThreshold, "string")
	Something(className, s_guid, "minPlayerCount", s_Instance.minPlayerCount, "uint")
	Something(className, s_guid, "platform", s_Instance.platform, "MatchmakingPlatform")
	Something(className, s_guid, "settings", s_Instance.settings, "List<string)>")
end

function Type:MatchmakingSizeRule (p_class, p_guid)
	local s_Instance = MatchmakingSizeRule(p_class) 
 	local className = "MatchmakingSizeRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "configurations", s_Instance.configurations, "List<MatchmakingSizeConfiguration)>")
	Something(className, s_guid, "setting", s_Instance.setting, "string")
end

function Type:MatchmakingUserExtendedDataRule (p_class, p_guid)
	local s_Instance = MatchmakingUserExtendedDataRule(p_class) 
 	local className = "MatchmakingUserExtendedDataRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minFitThresHold", s_Instance.minFitThresHold, "string")
	Something(className, s_guid, "rule", s_Instance.rule, "string")
end

function Type:MatchmakingVirtualizedRule (p_class, p_guid)
	local s_Instance = MatchmakingVirtualizedRule(p_class) 
 	local className = "MatchmakingVirtualizedRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minFitThreshold", s_Instance.minFitThreshold, "string")
	Something(className, s_guid, "virtualizationMode", s_Instance.virtualizationMode, "MatchmakingVirtualizationMode")
end

function Type:MaterialContainerAsset (p_class, p_guid)
	local s_Instance = MaterialContainerAsset(p_class) 
 	local className = "MaterialContainerAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "materialNames", s_Instance.materialNames, "List<string)>")
	Something(className, s_guid, "materialPairs", s_Instance.materialPairs, "List<CtrRef)>")
end

function Type:MaterialContainerPair (p_class, p_guid)
	local s_Instance = MaterialContainerPair(p_class) 
 	local className = "MaterialContainerPair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flagsAndIndex", s_Instance.flagsAndIndex, "uint")
	Something(className, s_guid, "physicsMaterialIndex", s_Instance.physicsMaterialIndex, "sbyte")
	Something(className, s_guid, "physicsPropertyIndex", s_Instance.physicsPropertyIndex, "sbyte")
end

function Type:MaterialGridData (p_class, p_guid)
	local s_Instance = MaterialGridData(p_class) 
 	local className = "MaterialGridData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultMaterial", s_Instance.defaultMaterial, "CtrRef")
	Something(className, s_guid, "defaultMaterialIndex", s_Instance.defaultMaterialIndex, "uint")
	Something(className, s_guid, "interactionGrid", s_Instance.interactionGrid, "List<MaterialInteractionGridRow)>")
	Something(className, s_guid, "materialIndexMap", s_Instance.materialIndexMap, "List<uint)>")
	Something(className, s_guid, "materialPairs", s_Instance.materialPairs, "List<CtrRef)>")
	Something(className, s_guid, "materialProperties", s_Instance.materialProperties, "List<MaterialRelationPropertyPair)>")
end

function Type:MaterialInteractionGridRow (p_class, p_guid)
	local s_Instance = MaterialInteractionGridRow(p_class) 
 	local className = "MaterialInteractionGridRow"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "items", s_Instance.items, "List<MaterialRelationPropertyPair)>")
end

function Type:MaterialPropertyEffectData (p_class, p_guid)
	local s_Instance = MaterialPropertyEffectData(p_class) 
 	local className = "MaterialPropertyEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impactEffects", s_Instance.impactEffects, "List<CtrRef)>")
end

function Type:MaterialPropertyHealthData (p_class, p_guid)
	local s_Instance = MaterialPropertyHealthData(p_class) 
 	local className = "MaterialPropertyHealthData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "health", s_Instance.health, "float")
end

function Type:MaterialPropertyImpulseData (p_class, p_guid)
	local s_Instance = MaterialPropertyImpulseData(p_class) 
 	local className = "MaterialPropertyImpulseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impulseAbsorptionMultiplier", s_Instance.impulseAbsorptionMultiplier, "float")
end

function Type:MaterialPropertyPhysicsData (p_class, p_guid)
	local s_Instance = MaterialPropertyPhysicsData(p_class) 
 	local className = "MaterialPropertyPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dynamicFrictionModifier", s_Instance.dynamicFrictionModifier, "float")
	Something(className, s_guid, "resistance", s_Instance.resistance, "float")
	Something(className, s_guid, "restitutionModifier", s_Instance.restitutionModifier, "float")
	Something(className, s_guid, "staticFrictionModifier", s_Instance.staticFrictionModifier, "float")
end

function Type:MaterialPropertySoundData (p_class, p_guid)
	local s_Instance = MaterialPropertySoundData(p_class) 
 	local className = "MaterialPropertySoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impactSound", s_Instance.impactSound, "CtrRef")
	Something(className, s_guid, "materialSoundId", s_Instance.materialSoundId, "float")
	Something(className, s_guid, "scrapeLength", s_Instance.scrapeLength, "float")
	Something(className, s_guid, "scrapeSound", s_Instance.scrapeSound, "CtrRef")
	Something(className, s_guid, "softness", s_Instance.softness, "float")
	Something(className, s_guid, "soldierSettings", s_Instance.soldierSettings, "CtrRef")
end

function Type:MaterialPropertyTerrainData (p_class, p_guid)
	local s_Instance = MaterialPropertyTerrainData(p_class) 
 	local className = "MaterialPropertyTerrainData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "destructionEffect", s_Instance.destructionEffect, "CtrRef")
	Something(className, s_guid, "dirtTriggerColor", s_Instance.dirtTriggerColor, "Vec3")
	Something(className, s_guid, "dirtTriggerFactor", s_Instance.dirtTriggerFactor, "float")
end

function Type:MaterialRelationDamageData (p_class, p_guid)
	local s_Instance = MaterialRelationDamageData(p_class) 
 	local className = "MaterialRelationDamageData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collisionDamageMultiplier", s_Instance.collisionDamageMultiplier, "float")
	Something(className, s_guid, "collisionDamageThreshold", s_Instance.collisionDamageThreshold, "float")
	Something(className, s_guid, "damagePenetrationMultiplier", s_Instance.damagePenetrationMultiplier, "float")
	Something(className, s_guid, "damageProtectionMultiplier", s_Instance.damageProtectionMultiplier, "float")
	Something(className, s_guid, "damageProtectionThreshold", s_Instance.damageProtectionThreshold, "float")
	Something(className, s_guid, "explosionCoverDamageModifier", s_Instance.explosionCoverDamageModifier, "float")
	Something(className, s_guid, "inflictsDemolitionDamage", s_Instance.inflictsDemolitionDamage, "bool")
end

function Type:MaterialRelationDecalData (p_class, p_guid)
	local s_Instance = MaterialRelationDecalData(p_class) 
 	local className = "MaterialRelationDecalData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decal", s_Instance.decal, "CtrRef")
end

function Type:MaterialRelationEffectData (p_class, p_guid)
	local s_Instance = MaterialRelationEffectData(p_class) 
 	local className = "MaterialRelationEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impactDebris", s_Instance.impactDebris, "List<CtrRef)>")
	Something(className, s_guid, "impactEffectMaxSpreadAngle", s_Instance.impactEffectMaxSpreadAngle, "float")
	Something(className, s_guid, "impactEffects", s_Instance.impactEffects, "List<CtrRef)>")
	Something(className, s_guid, "mirrorImpactDirection", s_Instance.mirrorImpactDirection, "bool")
end

function Type:MaterialRelationPenetrationData (p_class, p_guid)
	local s_Instance = MaterialRelationPenetrationData(p_class) 
 	local className = "MaterialRelationPenetrationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "neverPenetrate", s_Instance.neverPenetrate, "bool")
end

function Type:MaterialRelationPropertyPair (p_class, p_guid)
	local s_Instance = MaterialRelationPropertyPair(p_class) 
 	local className = "MaterialRelationPropertyPair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "physicsMaterialProperties", s_Instance.physicsMaterialProperties, "List<CtrRef)>")
	Something(className, s_guid, "physicsPropertyProperties", s_Instance.physicsPropertyProperties, "List<CtrRef)>")
end

function Type:MaterialRelationSoundData (p_class, p_guid)
	local s_Instance = MaterialRelationSoundData(p_class) 
 	local className = "MaterialRelationSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impactSound", s_Instance.impactSound, "CtrRef")
	Something(className, s_guid, "scrapeLength", s_Instance.scrapeLength, "float")
	Something(className, s_guid, "scrapeSound", s_Instance.scrapeSound, "CtrRef")
end

function Type:MaterialRelationTerrainDestructionData (p_class, p_guid)
	local s_Instance = MaterialRelationTerrainDestructionData(p_class) 
 	local className = "MaterialRelationTerrainDestructionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "depth", s_Instance.depth, "float")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:MaterialRelationVehicleData (p_class, p_guid)
	local s_Instance = MaterialRelationVehicleData(p_class) 
 	local className = "MaterialRelationVehicleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chassiEffect", s_Instance.chassiEffect, "CtrRef")
	Something(className, s_guid, "groundEffect", s_Instance.groundEffect, "CtrRef")
	Something(className, s_guid, "trackEffect", s_Instance.trackEffect, "CtrRef")
	Something(className, s_guid, "wheelEffect", s_Instance.wheelEffect, "CtrRef")
end

function Type:MaterialSoldierSoundSettings (p_class, p_guid)
	local s_Instance = MaterialSoldierSoundSettings(p_class) 
 	local className = "MaterialSoldierSoundSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "footStepSound", s_Instance.footStepSound, "CtrRef")
	Something(className, s_guid, "landSound", s_Instance.landSound, "CtrRef")
	Something(className, s_guid, "proneSound", s_Instance.proneSound, "CtrRef")
end

function Type:MathOpEntityData (p_class, p_guid)
	local s_Instance = MathOpEntityData(p_class) 
 	local className = "MathOpEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "operators", s_Instance.operators, "List<MathOp)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "mathOpEntityData", s_Instance.mathOpEntityData,  "readonly")
	Something(className, s_guid, "mathOp", s_Instance.mathOp,  "uint")
end

function Type:MatrixPannerNodeData (p_class, p_guid)
	local s_Instance = MatrixPannerNodeData(p_class) 
 	local className = "MatrixPannerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "center", s_Instance.center, "AudioGraphNodePort")
	Something(className, s_guid, "farRearLeft", s_Instance.farRearLeft, "AudioGraphNodePort")
	Something(className, s_guid, "farRearRight", s_Instance.farRearRight, "AudioGraphNodePort")
	Something(className, s_guid, "frontLeft", s_Instance.frontLeft, "AudioGraphNodePort")
	Something(className, s_guid, "frontRight", s_Instance.frontRight, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "lfe", s_Instance.lfe, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "rearLeft", s_Instance.rearLeft, "AudioGraphNodePort")
	Something(className, s_guid, "rearRight", s_Instance.rearRight, "AudioGraphNodePort")
end

function Type:MaxInstancesScopeStrategyData (p_class, p_guid)
	local s_Instance = MaxInstancesScopeStrategyData(p_class) 
 	local className = "MaxInstancesScopeStrategyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "count", s_Instance.count, "uint")
	Something(className, s_guid, "keepOldest", s_Instance.keepOldest, "bool")
end

function Type:MedicBagEntityData (p_class, p_guid)
	local s_Instance = MedicBagEntityData(p_class) 
 	local className = "MedicBagEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healer", s_Instance.healer, "HealerData")
end

function Type:MedicBagHealingSphereEntityData (p_class, p_guid)
	local s_Instance = MedicBagHealingSphereEntityData(p_class) 
 	local className = "MedicBagHealingSphereEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healer", s_Instance.healer, "HealingSphereData")
end

function Type:MedicBagHealingSphereWeaponData (p_class, p_guid)
	local s_Instance = MedicBagHealingSphereWeaponData(p_class) 
 	local className = "MedicBagHealingSphereWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healer", s_Instance.healer, "HealingSphereData")
	Something(className, s_guid, "healthPointsPerBag", s_Instance.healthPointsPerBag, "float")
	Something(className, s_guid, "healthPointsRefillSpeed", s_Instance.healthPointsRefillSpeed, "float")
end

function Type:MedicBagWeaponData (p_class, p_guid)
	local s_Instance = MedicBagWeaponData(p_class) 
 	local className = "MedicBagWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healer", s_Instance.healer, "HealerData")
	Something(className, s_guid, "healthPointsPerBag", s_Instance.healthPointsPerBag, "float")
	Something(className, s_guid, "healthPointsRefillSpeed", s_Instance.healthPointsRefillSpeed, "float")
end

function Type:MeleeEntityCommonData (p_class, p_guid)
	local s_Instance = MeleeEntityCommonData(p_class) 
 	local className = "MeleeEntityCommonData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchAttackType", s_Instance.crouchAttackType, "CtrRef")
	Something(className, s_guid, "defendWindow", s_Instance.defendWindow, "float")
	Something(className, s_guid, "enableAbortPossibility", s_Instance.enableAbortPossibility, "bool")
	Something(className, s_guid, "invalidMeleeAttackZone", s_Instance.invalidMeleeAttackZone, "float")
	Something(className, s_guid, "killDamage", s_Instance.killDamage, "float")
	Something(className, s_guid, "killDelay", s_Instance.killDelay, "float")
	Something(className, s_guid, "maxAttackHeightDifference", s_Instance.maxAttackHeightDifference, "float")
	Something(className, s_guid, "meleeAttackDistance", s_Instance.meleeAttackDistance, "float")
	Something(className, s_guid, "meleeBinding", s_Instance.meleeBinding, "CharacterMeleeBinding")
	Something(className, s_guid, "meleeCommonBinding", s_Instance.meleeCommonBinding, "CharacterMeleeCommonBinding")
	Something(className, s_guid, "meleeEndDelay", s_Instance.meleeEndDelay, "float")
	Something(className, s_guid, "proneAttackType", s_Instance.proneAttackType, "CtrRef")
	Something(className, s_guid, "triggerDelay", s_Instance.triggerDelay, "float")
end

function Type:MeleeEntityData (p_class, p_guid)
	local s_Instance = MeleeEntityData(p_class) 
 	local className = "MeleeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "commonData", s_Instance.commonData, "CtrRef")
end

function Type:MeleeTriggerEntityData (p_class, p_guid)
	local s_Instance = MeleeTriggerEntityData(p_class) 
 	local className = "MeleeTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "connectTransform", s_Instance.connectTransform, "LinearTransform")
	Something(className, s_guid, "meleeEnabled", s_Instance.meleeEnabled, "bool")
	Something(className, s_guid, "meleeType", s_Instance.meleeType, "CtrRef")
end

function Type:MeleeWeaponData (p_class, p_guid)
	local s_Instance = MeleeWeaponData(p_class) 
 	local className = "MeleeWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "useCannedAnimation", s_Instance.useCannedAnimation, "bool")
	Something(className, s_guid, "useSphereDamage", s_Instance.useSphereDamage, "bool")
end

function Type:MemoryLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = MemoryLevelDescriptionComponent(p_class) 
 	local className = "MemoryLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshPoolSizePs3", s_Instance.meshPoolSizePs3, "int")
	Something(className, s_guid, "meshPoolSizePs3Cell", s_Instance.meshPoolSizePs3Cell, "int")
	Something(className, s_guid, "meshPoolSizeXenon", s_Instance.meshPoolSizeXenon, "int")
	Something(className, s_guid, "texturePoolSize", s_Instance.texturePoolSize, "int")
	Something(className, s_guid, "texturePoolSizePs3", s_Instance.texturePoolSizePs3, "int")
	Something(className, s_guid, "texturePoolSizeXenon", s_Instance.texturePoolSizeXenon, "int")
end

function Type:MenuIdAsset (p_class, p_guid)
	local s_Instance = MenuIdAsset(p_class) 
 	local className = "MenuIdAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shortName", s_Instance.shortName, "string")
end

function Type:MeshAsset (p_class, p_guid)
	local s_Instance = MeshAsset(p_class) 
 	local className = "MeshAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cullScale", s_Instance.cullScale, "float")
	Something(className, s_guid, "destructionMaterialEnable", s_Instance.destructionMaterialEnable, "bool")
	Something(className, s_guid, "enlightenType", s_Instance.enlightenType, "fb.EnlightenType)")
	Something(className, s_guid, "lodGroup", s_Instance.lodGroup, "CtrRef")
	Something(className, s_guid, "lodScale", s_Instance.lodScale, "float")
	Something(className, s_guid, "materials", s_Instance.materials, "List<CtrRef)>")
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
	Something(className, s_guid, "occluderHighPriority", s_Instance.occluderHighPriority, "bool")
	Something(className, s_guid, "occluderMeshEnable", s_Instance.occluderMeshEnable, "bool")
	Something(className, s_guid, "streamingEnable", s_Instance.streamingEnable, "bool")
end

function Type:MeshComponentData (p_class, p_guid)
	local s_Instance = MeshComponentData(p_class) 
 	local className = "MeshComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneFakePhysics", s_Instance.boneFakePhysics, "List<CtrRef)>")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "skeleton", s_Instance.skeleton, "CtrRef")
end

function Type:MeshLodGroup (p_class, p_guid)
	local s_Instance = MeshLodGroup(p_class) 
 	local className = "MeshLodGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cullScreenArea", s_Instance.cullScreenArea, "float")
	Something(className, s_guid, "lod1Distance", s_Instance.lod1Distance, "float")
	Something(className, s_guid, "lod2Distance", s_Instance.lod2Distance, "float")
	Something(className, s_guid, "lod3Distance", s_Instance.lod3Distance, "float")
	Something(className, s_guid, "lod4Distance", s_Instance.lod4Distance, "float")
	Something(className, s_guid, "lod5Distance", s_Instance.lod5Distance, "float")
	Something(className, s_guid, "shadowDistance", s_Instance.shadowDistance, "float")
end

function Type:MeshMaterial (p_class, p_guid)
	local s_Instance = MeshMaterial(p_class) 
 	local className = "MeshMaterial"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shader", s_Instance.shader, "SurfaceShaderInstanceDataStruct")
	Something(className, s_guid, "shaderInstance", s_Instance.shaderInstance, "CtrRef")
end

function Type:MeshMaterialVariation (p_class, p_guid)
	local s_Instance = MeshMaterialVariation(p_class) 
 	local className = "MeshMaterialVariation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shader", s_Instance.shader, "SurfaceShaderInstanceDataStruct")
end

function Type:MeshMergingSettings (p_class, p_guid)
	local s_Instance = MeshMergingSettings(p_class) 
 	local className = "MeshMergingSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clearMergeReport", s_Instance.clearMergeReport, "bool")
	Something(className, s_guid, "drawDebugTexturesEnable", s_Instance.drawDebugTexturesEnable, "bool")
	Something(className, s_guid, "drawStatsEnable", s_Instance.drawStatsEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "statsLodIndex", s_Instance.statsLodIndex, "int")
	Something(className, s_guid, "statsSeedIndex", s_Instance.statsSeedIndex, "int")
	Something(className, s_guid, "textureAtlasMergeEnable", s_Instance.textureAtlasMergeEnable, "bool")
	Something(className, s_guid, "textureAtlasWidth", s_Instance.textureAtlasWidth, "uint")
	Something(className, s_guid, "virtualTextureArrayStreamingEnable", s_Instance.virtualTextureArrayStreamingEnable, "bool")
end

function Type:MeshProjectileEntityData (p_class, p_guid)
	local s_Instance = MeshProjectileEntityData(p_class) 
 	local className = "MeshProjectileEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "extraDamping", s_Instance.extraDamping, "bool")
	Something(className, s_guid, "initialAngularVelocity", s_Instance.initialAngularVelocity, "Vec3")
	Something(className, s_guid, "isAttachable", s_Instance.isAttachable, "bool")
	Something(className, s_guid, "maxAttachableInclination", s_Instance.maxAttachableInclination, "float")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "trailEffect", s_Instance.trailEffect, "CtrRef")
end

function Type:MeshProxyEntityData (p_class, p_guid)
	local s_Instance = MeshProxyEntityData(p_class) 
 	local className = "MeshProxyEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "basePoseTransforms", s_Instance.basePoseTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
end

function Type:MeshSettings (p_class, p_guid)
	local s_Instance = MeshSettings(p_class) 
 	local className = "MeshSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forceLod", s_Instance.forceLod, "int")
	Something(className, s_guid, "globalLodScale", s_Instance.globalLodScale, "float")
	Something(className, s_guid, "loadingEnabled", s_Instance.loadingEnabled, "bool")
	Something(className, s_guid, "overrideShadersMeshName", s_Instance.overrideShadersMeshName, "string")
	Something(className, s_guid, "overrideShadersShaderName", s_Instance.overrideShadersShaderName, "string")
	Something(className, s_guid, "shadowDistanceScale", s_Instance.shadowDistanceScale, "float")
end

function Type:MeshStreamingSettings (p_class, p_guid)
	local s_Instance = MeshStreamingSettings(p_class) 
 	local className = "MeshStreamingSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asyncCreatesEnable", s_Instance.asyncCreatesEnable, "bool")
	Something(className, s_guid, "defragEnable", s_Instance.defragEnable, "bool")
	Something(className, s_guid, "defragTransferLimit", s_Instance.defragTransferLimit, "uint")
	Something(className, s_guid, "defragTransfersEnable", s_Instance.defragTransfersEnable, "bool")
	Something(className, s_guid, "drawInstanceBoxesEnable", s_Instance.drawInstanceBoxesEnable, "bool")
	Something(className, s_guid, "drawLoadingListEnable", s_Instance.drawLoadingListEnable, "bool")
	Something(className, s_guid, "drawMeshListEnable", s_Instance.drawMeshListEnable, "bool")
	Something(className, s_guid, "drawMissingListEnable", s_Instance.drawMissingListEnable, "bool")
	Something(className, s_guid, "drawNonStreamedListEnable", s_Instance.drawNonStreamedListEnable, "bool")
	Something(className, s_guid, "drawPriorityListEnable", s_Instance.drawPriorityListEnable, "bool")
	Something(className, s_guid, "drawStatsEnable", s_Instance.drawStatsEnable, "bool")
	Something(className, s_guid, "dumpLoadedList", s_Instance.dumpLoadedList, "bool")
	Something(className, s_guid, "dxImmutableUsageEnable", s_Instance.dxImmutableUsageEnable, "bool")
	Something(className, s_guid, "dynamicLoadingEnable", s_Instance.dynamicLoadingEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "forceLod", s_Instance.forceLod, "int")
	Something(className, s_guid, "highestPriorityEnable", s_Instance.highestPriorityEnable, "bool")
	Something(className, s_guid, "instantUnloadingEnable", s_Instance.instantUnloadingEnable, "bool")
	Something(className, s_guid, "listViewPageIndex", s_Instance.listViewPageIndex, "uint")
	Something(className, s_guid, "listViewSortOrder", s_Instance.listViewSortOrder, "uint")
	Something(className, s_guid, "maxPendingLoadCount", s_Instance.maxPendingLoadCount, "uint")
	Something(className, s_guid, "maxUnloadCountPerFrame", s_Instance.maxUnloadCountPerFrame, "uint")
	Something(className, s_guid, "overridePoolSizes", s_Instance.overridePoolSizes, "bool")
	Something(className, s_guid, "poolHeadroomSize", s_Instance.poolHeadroomSize, "uint")
	Something(className, s_guid, "poolSize", s_Instance.poolSize, "uint")
	Something(className, s_guid, "prioritizeNearestPointEnable", s_Instance.prioritizeNearestPointEnable, "bool")
	Something(className, s_guid, "prioritizeTexturesEnable", s_Instance.prioritizeTexturesEnable, "bool")
	Something(className, s_guid, "prioritizeVisibleLoadsEnable", s_Instance.prioritizeVisibleLoadsEnable, "bool")
	Something(className, s_guid, "prioritizeVisibleLodsFirstEnable", s_Instance.prioritizeVisibleLodsFirstEnable, "bool")
	Something(className, s_guid, "prioritizeVisibleMeshesFirstEnable", s_Instance.prioritizeVisibleMeshesFirstEnable, "bool")
	Something(className, s_guid, "priorityJobEnable", s_Instance.priorityJobEnable, "bool")
	Something(className, s_guid, "prioritySpuJobEnable", s_Instance.prioritySpuJobEnable, "bool")
	Something(className, s_guid, "ps3CellDefragTransferLimit", s_Instance.ps3CellDefragTransferLimit, "uint")
	Something(className, s_guid, "ps3CellPoolHeadroomSize", s_Instance.ps3CellPoolHeadroomSize, "uint")
	Something(className, s_guid, "ps3CellPoolSize", s_Instance.ps3CellPoolSize, "uint")
	Something(className, s_guid, "updateEnable", s_Instance.updateEnable, "bool")
	Something(className, s_guid, "updateJobEnable", s_Instance.updateJobEnable, "bool")
	Something(className, s_guid, "useConditionalStreaming", s_Instance.useConditionalStreaming, "bool")
	Something(className, s_guid, "useSlowTexturePrio", s_Instance.useSlowTexturePrio, "bool")
	Something(className, s_guid, "xenonFinalPoolSizeAdjustment", s_Instance.xenonFinalPoolSizeAdjustment, "uint")
	Something(className, s_guid, "xenonRetailPoolSizeAdjustment", s_Instance.xenonRetailPoolSizeAdjustment, "uint")
end

function Type:MeshVariationDatabase (p_class, p_guid)
	local s_Instance = MeshVariationDatabase(p_class) 
 	local className = "MeshVariationDatabase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
	Something(className, s_guid, "redirectEntries", s_Instance.redirectEntries, "List<CtrRef)>")
end

function Type:MeshVariationDatabaseEntry (p_class, p_guid)
	local s_Instance = MeshVariationDatabaseEntry(p_class) 
 	local className = "MeshVariationDatabaseEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "materials", s_Instance.materials, "List<MeshVariationDatabaseMaterial)>")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "variationAssetNameHash", s_Instance.variationAssetNameHash, "uint")
end

function Type:MeshVariationDatabaseMaterial (p_class, p_guid)
	local s_Instance = MeshVariationDatabaseMaterial(p_class) 
 	local className = "MeshVariationDatabaseMaterial"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "material", s_Instance.material, "CtrRef")
	Something(className, s_guid, "materialVariation", s_Instance.materialVariation, "CtrRef")
	Something(className, s_guid, "textureParameters", s_Instance.textureParameters, "List<TextureShaderParameter)>")
end

function Type:MeshVariationInfo (p_class, p_guid)
	local s_Instance = MeshVariationInfo(p_class) 
 	local className = "MeshVariationInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshAsset", s_Instance.meshAsset, "CtrRef")
	Something(className, s_guid, "origMeshAsset", s_Instance.origMeshAsset, "CtrRef")
	Something(className, s_guid, "variationAsset", s_Instance.variationAsset, "CtrRef")
end

function Type:MessageEntityData (p_class, p_guid)
	local s_Instance = MessageEntityData(p_class) 
 	local className = "MessageEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalMessages", s_Instance.additionalMessages, "List<MessageLineData)>")
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "entryInputAction", s_Instance.entryInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "messageSid", s_Instance.messageSid, "string")
	Something(className, s_guid, "messageType", s_Instance.messageType, "UIMessageEntityType")
end

function Type:MessageInfo (p_class, p_guid)
	local s_Instance = MessageInfo(p_class) 
 	local className = "MessageInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "messageQueueSize", s_Instance.messageQueueSize, "uint")
	Something(className, s_guid, "normalMessageTime", s_Instance.normalMessageTime, "float")
	Something(className, s_guid, "rowTypeName", s_Instance.rowTypeName, "string")
	Something(className, s_guid, "shortMessageTime", s_Instance.shortMessageTime, "float")
end

function Type:MessageLineData (p_class, p_guid)
	local s_Instance = MessageLineData(p_class) 
 	local className = "MessageLineData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entryInputAction", s_Instance.entryInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "messageSid", s_Instance.messageSid, "string")
end

function Type:MetricEvent (p_class, p_guid)
	local s_Instance = MetricEvent(p_class) 
 	local className = "MetricEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "owner", s_Instance.owner, "ulong")
end

function Type:MetricReport (p_class, p_guid)
	local s_Instance = MetricReport(p_class) 
 	local className = "MetricReport"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "List<CtrRef)>")
end

function Type:MetricState (p_class, p_guid)
	local s_Instance = MetricState(p_class) 
 	local className = "MetricState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isSet", s_Instance.isSet, "bool")
end

function Type:Minimap2DEntityData (p_class, p_guid)
	local s_Instance = Minimap2DEntityData(p_class) 
 	local className = "Minimap2DEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "antialiasMultiplier", s_Instance.antialiasMultiplier, "uint")
	Something(className, s_guid, "cameraTransform", s_Instance.cameraTransform, "Vec3")
	Something(className, s_guid, "fov", s_Instance.fov, "uint")
	Something(className, s_guid, "imageHeight", s_Instance.imageHeight, "uint")
	Something(className, s_guid, "imageWidth", s_Instance.imageWidth, "uint")
	Something(className, s_guid, "terrainHeight", s_Instance.terrainHeight, "uint")
end

function Type:MinimapCameraOffsetData (p_class, p_guid)
	local s_Instance = MinimapCameraOffsetData(p_class) 
 	local className = "MinimapCameraOffsetData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraFov", s_Instance.cameraFov, "float")
	Something(className, s_guid, "position", s_Instance.position, "Vec2")
end

function Type:MinimapData (p_class, p_guid)
	local s_Instance = MinimapData(p_class) 
 	local className = "MinimapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "anchorPosHorizontal", s_Instance.anchorPosHorizontal, "float")
	Something(className, s_guid, "anchorPosVertical", s_Instance.anchorPosVertical, "float")
	Something(className, s_guid, "cameraDistance", s_Instance.cameraDistance, "float")
	Something(className, s_guid, "cameraFov", s_Instance.cameraFov, "float")
	Something(className, s_guid, "cameraLookDistance", s_Instance.cameraLookDistance, "float")
	Something(className, s_guid, "cameraPosition", s_Instance.cameraPosition, "Vec3")
	Something(className, s_guid, "cameraRotation", s_Instance.cameraRotation, "float")
	Something(className, s_guid, "centerOnCombatArea", s_Instance.centerOnCombatArea, "bool")
	Something(className, s_guid, "innerZoomFactor", s_Instance.innerZoomFactor, "int")
	Something(className, s_guid, "maxZoomLevels", s_Instance.maxZoomLevels, "int")
	Something(className, s_guid, "overlayAlpha", s_Instance.overlayAlpha, "float")
	Something(className, s_guid, "overlayColor", s_Instance.overlayColor, "Vec3")
	Something(className, s_guid, "position", s_Instance.position, "Vec2")
	Something(className, s_guid, "positionFromPlayer", s_Instance.positionFromPlayer, "bool")
	Something(className, s_guid, "rotationFromPlayer", s_Instance.rotationFromPlayer, "bool")
	Something(className, s_guid, "size", s_Instance.size, "Vec2")
	Something(className, s_guid, "startZoomLevel", s_Instance.startZoomLevel, "int")
end

function Type:MinMaxNodeData (p_class, p_guid)
	local s_Instance = MinMaxNodeData(p_class) 
 	local className = "MinMaxNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "AudioGraphNodePort")
	Something(className, s_guid, "min", s_Instance.min, "AudioGraphNodePort")
	Something(className, s_guid, "x", s_Instance.x, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
end

function Type:MinMaxValueSelectorEntry (p_class, p_guid)
	local s_Instance = MinMaxValueSelectorEntry(p_class) 
 	local className = "MinMaxValueSelectorEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "input", s_Instance.input, "AudioGraphNodePort")
end

function Type:MinMaxValueSelectorNodeData (p_class, p_guid)
	local s_Instance = MinMaxValueSelectorNodeData(p_class) 
 	local className = "MinMaxValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "maxIndex", s_Instance.maxIndex, "AudioGraphNodePort")
	Something(className, s_guid, "maxValue", s_Instance.maxValue, "AudioGraphNodePort")
	Something(className, s_guid, "minIndex", s_Instance.minIndex, "AudioGraphNodePort")
	Something(className, s_guid, "minValue", s_Instance.minValue, "AudioGraphNodePort")
end

function Type:MissileEntityData (p_class, p_guid)
	local s_Instance = MissileEntityData(p_class) 
 	local className = "MissileEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "applyGravityWhenGuided", s_Instance.applyGravityWhenGuided, "bool")
	Something(className, s_guid, "damage", s_Instance.damage, "float")
	Something(className, s_guid, "defaultTeam", s_Instance.defaultTeam, "TeamId")
	Something(className, s_guid, "drag", s_Instance.drag, "float")
	Something(className, s_guid, "dudExplosion", s_Instance.dudExplosion, "CtrRef")
	Something(className, s_guid, "engineEffect", s_Instance.engineEffect, "CtrRef")
	Something(className, s_guid, "engineStrength", s_Instance.engineStrength, "float")
	Something(className, s_guid, "engineTimeToIgnition", s_Instance.engineTimeToIgnition, "float")
	Something(className, s_guid, "engineTimeToLive", s_Instance.engineTimeToLive, "float")
	Something(className, s_guid, "flyBySound", s_Instance.flyBySound, "CtrRef")
	Something(className, s_guid, "flyBySoundRadius", s_Instance.flyBySoundRadius, "float")
	Something(className, s_guid, "flyBySoundSpeed", s_Instance.flyBySoundSpeed, "float")
	Something(className, s_guid, "gravity", s_Instance.gravity, "float")
	Something(className, s_guid, "impactImpulse", s_Instance.impactImpulse, "float")
	Something(className, s_guid, "lockableInfo", s_Instance.lockableInfo, "MissileLockableInfoData")
	Something(className, s_guid, "lockingController", s_Instance.lockingController, "CtrRef")
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "maxTurnAngle", s_Instance.maxTurnAngle, "float")
	Something(className, s_guid, "nearTargetDetonation", s_Instance.nearTargetDetonation, "NearTargetDetonationData")
	Something(className, s_guid, "timeToActivateGuidingSystem", s_Instance.timeToActivateGuidingSystem, "float")
	Something(className, s_guid, "timeToArm", s_Instance.timeToArm, "float")
	Something(className, s_guid, "unguidedData", s_Instance.unguidedData, "MissileUnguidedData")
	Something(className, s_guid, "warnOnPointingMissile", s_Instance.warnOnPointingMissile, "bool")
	Something(className, s_guid, "warnTarget", s_Instance.warnTarget, "fb.WarnTarget)")
end

function Type:MissileLockableInfoData (p_class, p_guid)
	local s_Instance = MissileLockableInfoData(p_class) 
 	local className = "MissileLockableInfoData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heatSignature", s_Instance.heatSignature, "float")
	Something(className, s_guid, "radarSignature", s_Instance.radarSignature, "float")
end

function Type:MissileUnguidedData (p_class, p_guid)
	local s_Instance = MissileUnguidedData(p_class) 
 	local className = "MissileUnguidedData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "staticPosition", s_Instance.staticPosition, "Vec2")
	Something(className, s_guid, "targetPositionOffset", s_Instance.targetPositionOffset, "Vec2")
	Something(className, s_guid, "useStaticPosition", s_Instance.useStaticPosition, "bool")
	Something(className, s_guid, "useTargetPosition", s_Instance.useTargetPosition, "bool")
end

function Type:MissionObjectiveHudData (p_class, p_guid)
	local s_Instance = MissionObjectiveHudData(p_class) 
 	local className = "MissionObjectiveHudData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraDistance", s_Instance.cameraDistance, "float")
	Something(className, s_guid, "cameraFov", s_Instance.cameraFov, "float")
	Something(className, s_guid, "cameraLookDistance", s_Instance.cameraLookDistance, "float")
	Something(className, s_guid, "cameraPosition", s_Instance.cameraPosition, "Vec3")
	Something(className, s_guid, "cameraRotation", s_Instance.cameraRotation, "float")
	Something(className, s_guid, "horizontalBoundaries", s_Instance.horizontalBoundaries, "Vec2")
	Something(className, s_guid, "verticalBoundaries", s_Instance.verticalBoundaries, "Vec2")
end

function Type:MixerAsset (p_class, p_guid)
	local s_Instance = MixerAsset(p_class) 
 	local className = "MixerAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultPreset", s_Instance.defaultPreset, "CtrRef")
	Something(className, s_guid, "graph", s_Instance.graph, "CtrRef")
	Something(className, s_guid, "presets", s_Instance.presets, "List<CtrRef)>")
end

function Type:MixerEntityData (p_class, p_guid)
	local s_Instance = MixerEntityData(p_class) 
 	local className = "MixerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activateOnCreation", s_Instance.activateOnCreation, "bool")
	Something(className, s_guid, "mixer", s_Instance.mixer, "CtrRef")
end

function Type:MixerEntry (p_class, p_guid)
	local s_Instance = MixerEntry(p_class) 
 	local className = "MixerEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:MixerGraphData (p_class, p_guid)
	local s_Instance = MixerGraphData(p_class) 
 	local className = "MixerGraphData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accumulateModes", s_Instance.accumulateModes, "List<MixerValueAccumulateMode)>")
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "mixerGraphData", s_Instance.mixerGraphData,  "readonly")
	Something(className, s_guid, "mixerValueAccumulateMode", s_Instance.mixerValueAccumulateMode,  "uint")
end

function Type:MixerInputEntry (p_class, p_guid)
	local s_Instance = MixerInputEntry(p_class) 
 	local className = "MixerInputEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accumulateMode", s_Instance.accumulateMode, "MixerValueAccumulateMode")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:MixerInputNodeData (p_class, p_guid)
	local s_Instance = MixerInputNodeData(p_class) 
 	local className = "MixerInputNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:MixerNodeData (p_class, p_guid)
	local s_Instance = MixerNodeData(p_class) 
 	local className = "MixerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
end

function Type:MixerOutputEntry (p_class, p_guid)
	local s_Instance = MixerOutputEntry(p_class) 
 	local className = "MixerOutputEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
end

function Type:MixerOutputNodeData (p_class, p_guid)
	local s_Instance = MixerOutputNodeData(p_class) 
 	local className = "MixerOutputNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:MixerPreset (p_class, p_guid)
	local s_Instance = MixerPreset(p_class) 
 	local className = "MixerPreset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "groups", s_Instance.groups, "List<MixerPresetGroupData)>")
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
	Something(className, s_guid, "nodes", s_Instance.nodes, "List<MixerPresetNodeData)>")
end

function Type:MixerPresetGroupData (p_class, p_guid)
	local s_Instance = MixerPresetGroupData(p_class) 
 	local className = "MixerPresetGroupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackTime", s_Instance.attackTime, "float")
	Something(className, s_guid, "group", s_Instance.group, "CtrRef")
	Something(className, s_guid, "isDominant", s_Instance.isDominant, "bool")
	Something(className, s_guid, "properties", s_Instance.properties, "List<MixGroupPropertyValue)>")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "float")
	Something(className, s_guid, "state", s_Instance.state, "MixGroupState")
end

function Type:MixerPresetNodeData (p_class, p_guid)
	local s_Instance = MixerPresetNodeData(p_class) 
 	local className = "MixerPresetNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "node", s_Instance.node, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:MixerReceiveEntry (p_class, p_guid)
	local s_Instance = MixerReceiveEntry(p_class) 
 	local className = "MixerReceiveEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mixer", s_Instance.mixer, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:MixerReceiveNodeData (p_class, p_guid)
	local s_Instance = MixerReceiveNodeData(p_class) 
 	local className = "MixerReceiveNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:MixerSendEntry (p_class, p_guid)
	local s_Instance = MixerSendEntry(p_class) 
 	local className = "MixerSendEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "mixer", s_Instance.mixer, "CtrRef")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
end

function Type:MixerSendNodeData (p_class, p_guid)
	local s_Instance = MixerSendNodeData(p_class) 
 	local className = "MixerSendNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:MixerSetPropertyEntry (p_class, p_guid)
	local s_Instance = MixerSetPropertyEntry(p_class) 
 	local className = "MixerSetPropertyEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackTime", s_Instance.attackTime, "float")
	Something(className, s_guid, "group", s_Instance.group, "CtrRef")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "releaseTime", s_Instance.releaseTime, "float")
	Something(className, s_guid, "target", s_Instance.target, "uint")
end

function Type:MixerSetPropertyNodeData (p_class, p_guid)
	local s_Instance = MixerSetPropertyNodeData(p_class) 
 	local className = "MixerSetPropertyNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:MixerSimplePresetNodeData (p_class, p_guid)
	local s_Instance = MixerSimplePresetNodeData(p_class) 
 	local className = "MixerSimplePresetNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "AudioGraphNodePort")
	Something(className, s_guid, "presets", s_Instance.presets, "List<CtrRef)>")
end

function Type:MixerSystemAsset (p_class, p_guid)
	local s_Instance = MixerSystemAsset(p_class) 
 	local className = "MixerSystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "groups", s_Instance.groups, "List<CtrRef)>")
end

function Type:MixerValueNodeData (p_class, p_guid)
	local s_Instance = MixerValueNodeData(p_class) 
 	local className = "MixerValueNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "float")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
end

function Type:MixGroup (p_class, p_guid)
	local s_Instance = MixGroup(p_class) 
 	local className = "MixGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "groupIndex", s_Instance.groupIndex, "ushort")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "parentGroupIndex", s_Instance.parentGroupIndex, "ushort")
end

function Type:MixGroupPropertyValue (p_class, p_guid)
	local s_Instance = MixGroupPropertyValue(p_class) 
 	local className = "MixGroupPropertyValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "property", s_Instance.property, "uint")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:MobileSpawnComponentData (p_class, p_guid)
	local s_Instance = MobileSpawnComponentData(p_class) 
 	local className = "MobileSpawnComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enterMobileSpawnPoint", s_Instance.enterMobileSpawnPoint, "bool")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "parachuteSpawnDistance", s_Instance.parachuteSpawnDistance, "float")
	Something(className, s_guid, "parachuteSpawnRadiusMax", s_Instance.parachuteSpawnRadiusMax, "float")
	Something(className, s_guid, "parachuteSpawnRadiusMin", s_Instance.parachuteSpawnRadiusMin, "float")
end

function Type:MobilityData (p_class, p_guid)
	local s_Instance = MobilityData(p_class) 
 	local className = "MobilityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "use3DWaypoints", s_Instance.use3DWaypoints, "bool")
end

function Type:ModelAnimationEntityData (p_class, p_guid)
	local s_Instance = ModelAnimationEntityData(p_class) 
 	local className = "ModelAnimationEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpace", s_Instance.animationEntitySpace, "LinearTransform")
	Something(className, s_guid, "animationEntitySpaceActive", s_Instance.animationEntitySpaceActive, "bool")
	Something(className, s_guid, "animationIndex", s_Instance.animationIndex, "int")
	Something(className, s_guid, "animationSet", s_Instance.animationSet, "CtrRef")
	Something(className, s_guid, "applyPreTransformation", s_Instance.applyPreTransformation, "bool")
	Something(className, s_guid, "applyRotationCompensation", s_Instance.applyRotationCompensation, "bool")
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "boneToPlace", s_Instance.boneToPlace, "GameplayBones")
	Something(className, s_guid, "connectBoneName", s_Instance.connectBoneName, "string")
	Something(className, s_guid, "defaultAnimation", s_Instance.defaultAnimation, "string")
	Something(className, s_guid, "disableCulling", s_Instance.disableCulling, "bool")
	Something(className, s_guid, "enableJointWorldTransformOutput", s_Instance.enableJointWorldTransformOutput, "bool")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "instanceSeed", s_Instance.instanceSeed, "int")
	Something(className, s_guid, "jointOutputPropertyIds", s_Instance.jointOutputPropertyIds, "List<int)>")
	Something(className, s_guid, "jointWorldTransformUpdateOrder", s_Instance.jointWorldTransformUpdateOrder, "ModelAnimationUpdateOrder")
	Something(className, s_guid, "looping", s_Instance.looping, "bool")
	Something(className, s_guid, "modelAnimationTransformType", s_Instance.modelAnimationTransformType, "fb.ModelAnimationTransformType)")
	Something(className, s_guid, "playFirstFrame", s_Instance.playFirstFrame, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "resetAfterStop", s_Instance.resetAfterStop, "bool")
	Something(className, s_guid, "rootMeshBoneName", s_Instance.rootMeshBoneName, "string")
	Something(className, s_guid, "showDebugTransforms", s_Instance.showDebugTransforms, "bool")
	Something(className, s_guid, "trajectoryBoneName", s_Instance.trajectoryBoneName, "string")
end

function Type:MortarStrikeWeaponData (p_class, p_guid)
	local s_Instance = MortarStrikeWeaponData(p_class) 
 	local className = "MortarStrikeWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "holdingTolerance", s_Instance.holdingTolerance, "float")
	Something(className, s_guid, "maxRandomSpawnHeight", s_Instance.maxRandomSpawnHeight, "float")
	Something(className, s_guid, "maxStrikeDistance", s_Instance.maxStrikeDistance, "float")
	Something(className, s_guid, "strikeRadius", s_Instance.strikeRadius, "float")
end

function Type:MotionBlurComponentData (p_class, p_guid)
	local s_Instance = MotionBlurComponentData(p_class) 
 	local className = "MotionBlurComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cutoffGradientScale", s_Instance.cutoffGradientScale, "float")
	Something(className, s_guid, "motionBlurCutoffRadius", s_Instance.motionBlurCutoffRadius, "float")
	Something(className, s_guid, "motionBlurEnable", s_Instance.motionBlurEnable, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:MotionControllerInputActionData (p_class, p_guid)
	local s_Instance = MotionControllerInputActionData(p_class) 
 	local className = "MotionControllerInputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "button", s_Instance.button, "InputDeviceMotionControllerButtons")
end

function Type:MotionDampingData (p_class, p_guid)
	local s_Instance = MotionDampingData(p_class) 
 	local className = "MotionDampingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "linear", s_Instance.linear, "float")
	Something(className, s_guid, "linearModifier", s_Instance.linearModifier, "Vec3")
	Something(className, s_guid, "pitch", s_Instance.pitch, "float")
	Something(className, s_guid, "roll", s_Instance.roll, "float")
	Something(className, s_guid, "yaw", s_Instance.yaw, "float")
end

function Type:MotorbikeData (p_class, p_guid)
	local s_Instance = MotorbikeData(p_class) 
 	local className = "MotorbikeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "counterLeanForce", s_Instance.counterLeanForce, "float")
	Something(className, s_guid, "dampBigJumpImpact", s_Instance.dampBigJumpImpact, "bool")
	Something(className, s_guid, "dampBigJumpImpactCounterForce", s_Instance.dampBigJumpImpactCounterForce, "Vec3")
	Something(className, s_guid, "dampBigJumpImpactVelocity", s_Instance.dampBigJumpImpactVelocity, "float")
	Something(className, s_guid, "jumpForwardLeanMinAngle", s_Instance.jumpForwardLeanMinAngle, "float")
	Something(className, s_guid, "jumpForwardLeanMomentum", s_Instance.jumpForwardLeanMomentum, "float")
	Something(className, s_guid, "kickstandLinearDamping", s_Instance.kickstandLinearDamping, "float")
	Something(className, s_guid, "kickstandRoll", s_Instance.kickstandRoll, "float")
	Something(className, s_guid, "leanForce", s_Instance.leanForce, "float")
	Something(className, s_guid, "leanForceMaxVel", s_Instance.leanForceMaxVel, "float")
	Something(className, s_guid, "maxLeaningRoll", s_Instance.maxLeaningRoll, "float")
	Something(className, s_guid, "proximityExtScale", s_Instance.proximityExtScale, "Vec3")
	Something(className, s_guid, "proximityHeightTranslation", s_Instance.proximityHeightTranslation, "float")
	Something(className, s_guid, "shortOffgroundGravityMultiplier", s_Instance.shortOffgroundGravityMultiplier, "float")
	Something(className, s_guid, "shortOffgroundPeriod", s_Instance.shortOffgroundPeriod, "float")
	Something(className, s_guid, "standStillRoll", s_Instance.standStillRoll, "float")
	Something(className, s_guid, "stoppieActivationVelocity", s_Instance.stoppieActivationVelocity, "float")
	Something(className, s_guid, "stoppieMomentum", s_Instance.stoppieMomentum, "float")
	Something(className, s_guid, "stoppieStartVelocity", s_Instance.stoppieStartVelocity, "float")
	Something(className, s_guid, "stoppieStopVelocity", s_Instance.stoppieStopVelocity, "float")
	Something(className, s_guid, "wheelieAngularDamping", s_Instance.wheelieAngularDamping, "float")
	Something(className, s_guid, "wheelieAngularDampingSpeed", s_Instance.wheelieAngularDampingSpeed, "float")
	Something(className, s_guid, "wheelieAngularStartMomentum", s_Instance.wheelieAngularStartMomentum, "float")
	Something(className, s_guid, "wheelieForce", s_Instance.wheelieForce, "Vec3")
	Something(className, s_guid, "wheelieForceBodyOffset", s_Instance.wheelieForceBodyOffset, "Vec3")
	Something(className, s_guid, "wheelieInertia", s_Instance.wheelieInertia, "float")
	Something(className, s_guid, "wheelieMaxAngle", s_Instance.wheelieMaxAngle, "float")
	Something(className, s_guid, "wheelieMaxNoContactTime", s_Instance.wheelieMaxNoContactTime, "float")
	Something(className, s_guid, "wheelieMaxNoDownForceContactTime", s_Instance.wheelieMaxNoDownForceContactTime, "float")
	Something(className, s_guid, "wheelieMaxVelocity", s_Instance.wheelieMaxVelocity, "float")
	Something(className, s_guid, "wheelieMaxVelocityDampRange", s_Instance.wheelieMaxVelocityDampRange, "float")
	Something(className, s_guid, "wheelieMaxVelocityUndamped", s_Instance.wheelieMaxVelocityUndamped, "float")
	Something(className, s_guid, "wheelieOutAngularMomentum", s_Instance.wheelieOutAngularMomentum, "float")
	Something(className, s_guid, "wheelieSpringDamping", s_Instance.wheelieSpringDamping, "float")
	Something(className, s_guid, "wheelieStartVelocity", s_Instance.wheelieStartVelocity, "float")
	Something(className, s_guid, "wheelieSteeringFactor", s_Instance.wheelieSteeringFactor, "float")
	Something(className, s_guid, "wheelieVelocityForceScale", s_Instance.wheelieVelocityForceScale, "float")
	Something(className, s_guid, "yawBrakeDampingLerpEndScale", s_Instance.yawBrakeDampingLerpEndScale, "float")
	Something(className, s_guid, "yawBrakeDampingLerpStartScale", s_Instance.yawBrakeDampingLerpStartScale, "float")
end

function Type:MouseInputActionData (p_class, p_guid)
	local s_Instance = MouseInputActionData(p_class) 
 	local className = "MouseInputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "button", s_Instance.button, "InputDeviceMouseButtons")
	Something(className, s_guid, "rememberExcessInput", s_Instance.rememberExcessInput, "bool")
	Something(className, s_guid, "scaleScrollWheelAxisInput", s_Instance.scaleScrollWheelAxisInput, "bool")
	Something(className, s_guid, "simulateJoystickAxis", s_Instance.simulateJoystickAxis, "bool")
end

function Type:MovementActionGroupData (p_class, p_guid)
	local s_Instance = MovementActionGroupData(p_class) 
 	local className = "MovementActionGroupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actions", s_Instance.actions, "List<CtrRef)>")
	Something(className, s_guid, "restartChildren", s_Instance.restartChildren, "bool")
	Something(className, s_guid, "runSimultaneously", s_Instance.runSimultaneously, "bool")
end

function Type:MovementActionRandomizerData (p_class, p_guid)
	local s_Instance = MovementActionRandomizerData(p_class) 
 	local className = "MovementActionRandomizerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actions", s_Instance.actions, "List<CtrRef)>")
	Something(className, s_guid, "reinsertIntoRandomizedListAfterUse", s_Instance.reinsertIntoRandomizedListAfterUse, "bool")
end

function Type:MovementActionRoot (p_class, p_guid)
	local s_Instance = MovementActionRoot(p_class) 
 	local className = "MovementActionRoot"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "startSequence", s_Instance.startSequence, "CtrRef")
end

function Type:MovementComponentBinding (p_class, p_guid)
	local s_Instance = MovementComponentBinding(p_class) 
 	local className = "MovementComponentBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationControlled", s_Instance.animationControlled, "AntRef")
end

function Type:MovementComponentData (p_class, p_guid)
	local s_Instance = MovementComponentData(p_class) 
 	local className = "MovementComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "movementBinding", s_Instance.movementBinding, "MovementComponentBinding")
end

function Type:MovementConstantData (p_class, p_guid)
	local s_Instance = MovementConstantData(p_class) 
 	local className = "MovementConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxCrouchWalkDistance", s_Instance.maxCrouchWalkDistance, "float")
end

function Type:MovieComponentData (p_class, p_guid)
	local s_Instance = MovieComponentData(p_class) 
 	local className = "MovieComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "isNormalMap", s_Instance.isNormalMap, "bool")
	Something(className, s_guid, "movie", s_Instance.movie, "CtrRef")
end

function Type:MovieEntityData (p_class, p_guid)
	local s_Instance = MovieEntityData(p_class) 
 	local className = "MovieEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "isNormalMap", s_Instance.isNormalMap, "bool")
	Something(className, s_guid, "movie", s_Instance.movie, "CtrRef")
end

function Type:MovieTextureAsset (p_class, p_guid)
	local s_Instance = MovieTextureAsset(p_class) 
 	local className = "MovieTextureAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chunkGuid", s_Instance.chunkGuid, "GUID")
	Something(className, s_guid, "chunkSize", s_Instance.chunkSize, "uint")
	Something(className, s_guid, "hasLocalizedAudioTracks", s_Instance.hasLocalizedAudioTracks, "bool")
	Something(className, s_guid, "overrideBackgroundMusic", s_Instance.overrideBackgroundMusic, "bool")
	Something(className, s_guid, "subtitleChunkGuid", s_Instance.subtitleChunkGuid, "GUID")
	Something(className, s_guid, "subtitleChunkSize", s_Instance.subtitleChunkSize, "uint")
end

function Type:MovieTextureSettings (p_class, p_guid)
	local s_Instance = MovieTextureSettings(p_class) 
 	local className = "MovieTextureSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
end

function Type:MovingBodyData (p_class, p_guid)
	local s_Instance = MovingBodyData(p_class) 
 	local className = "MovingBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inertia", s_Instance.inertia, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
end

function Type:MPModeData (p_class, p_guid)
	local s_Instance = MPModeData(p_class) 
 	local className = "MPModeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "vehiclePoints", s_Instance.vehiclePoints, "int")
end

function Type:MultiCrossfaderGroup (p_class, p_guid)
	local s_Instance = MultiCrossfaderGroup(p_class) 
 	local className = "MultiCrossfaderGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "fadeAmplitude", s_Instance.fadeAmplitude, "float")
	Something(className, s_guid, "fadeBegin", s_Instance.fadeBegin, "float")
	Something(className, s_guid, "fadeEnd", s_Instance.fadeEnd, "float")
	Something(className, s_guid, "fadeType", s_Instance.fadeType, "FaderType")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "stop", s_Instance.stop, "AudioGraphNodePort")
end

function Type:MultiCrossfaderNodeData (p_class, p_guid)
	local s_Instance = MultiCrossfaderNodeData(p_class) 
 	local className = "MultiCrossfaderNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "control", s_Instance.control, "AudioGraphNodePort")
	Something(className, s_guid, "crossfaderGroups", s_Instance.crossfaderGroups, "List<CtrRef)>")
	Something(className, s_guid, "lockControlValue", s_Instance.lockControlValue, "bool")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "stop", s_Instance.stop, "AudioGraphNodePort")
end

function Type:MultipleActorScenarioEntityData (p_class, p_guid)
	local s_Instance = MultipleActorScenarioEntityData(p_class) 
 	local className = "MultipleActorScenarioEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actor1", s_Instance.actor1, "int")
	Something(className, s_guid, "actor1Part", s_Instance.actor1Part, "int")
	Something(className, s_guid, "actor1Prepared", s_Instance.actor1Prepared, "bool")
	Something(className, s_guid, "actor1SecondPart", s_Instance.actor1SecondPart, "int")
	Something(className, s_guid, "actor2", s_Instance.actor2, "int")
	Something(className, s_guid, "actor2Part", s_Instance.actor2Part, "int")
	Something(className, s_guid, "actor2Prepared", s_Instance.actor2Prepared, "bool")
	Something(className, s_guid, "actor2SecondPart", s_Instance.actor2SecondPart, "int")
	Something(className, s_guid, "actor3", s_Instance.actor3, "int")
	Something(className, s_guid, "actor3Part", s_Instance.actor3Part, "int")
	Something(className, s_guid, "actor3Prepared", s_Instance.actor3Prepared, "bool")
	Something(className, s_guid, "actor3SecondPart", s_Instance.actor3SecondPart, "int")
	Something(className, s_guid, "actor4", s_Instance.actor4, "int")
	Something(className, s_guid, "actor4Part", s_Instance.actor4Part, "int")
	Something(className, s_guid, "actor4Prepared", s_Instance.actor4Prepared, "bool")
	Something(className, s_guid, "actor4SecondPart", s_Instance.actor4SecondPart, "int")
	Something(className, s_guid, "actor5", s_Instance.actor5, "int")
	Something(className, s_guid, "actor5Part", s_Instance.actor5Part, "int")
	Something(className, s_guid, "actor5Prepared", s_Instance.actor5Prepared, "bool")
	Something(className, s_guid, "actor5SecondPart", s_Instance.actor5SecondPart, "int")
	Something(className, s_guid, "actor6", s_Instance.actor6, "int")
	Something(className, s_guid, "actor6Part", s_Instance.actor6Part, "int")
	Something(className, s_guid, "actor6Prepared", s_Instance.actor6Prepared, "bool")
	Something(className, s_guid, "actor6SecondPart", s_Instance.actor6SecondPart, "int")
	Something(className, s_guid, "aligningEnabled", s_Instance.aligningEnabled, "bool")
	Something(className, s_guid, "checkActor1Finished", s_Instance.checkActor1Finished, "bool")
	Something(className, s_guid, "checkActor2Finished", s_Instance.checkActor2Finished, "bool")
	Something(className, s_guid, "checkActor3Finished", s_Instance.checkActor3Finished, "bool")
	Something(className, s_guid, "checkActor4Finished", s_Instance.checkActor4Finished, "bool")
	Something(className, s_guid, "checkActor5Finished", s_Instance.checkActor5Finished, "bool")
	Something(className, s_guid, "checkActor6Finished", s_Instance.checkActor6Finished, "bool")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "levelChoice", s_Instance.levelChoice, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scenarioActive", s_Instance.scenarioActive, "bool")
	Something(className, s_guid, "scenarioAntRef", s_Instance.scenarioAntRef, "AntRef")
	Something(className, s_guid, "scenarioChoice", s_Instance.scenarioChoice, "int")
	Something(className, s_guid, "useExternalTime", s_Instance.useExternalTime, "bool")
	Something(className, s_guid, "useInputEventPlayerAsPlayer1", s_Instance.useInputEventPlayerAsPlayer1, "bool")
	Something(className, s_guid, "worldSpace", s_Instance.worldSpace, "bool")
	Something(className, s_guid, "worldSpaceConnectTransform", s_Instance.worldSpaceConnectTransform, "LinearTransform")
end

function Type:MultipleTargetPainterWeaponData (p_class, p_guid)
	local s_Instance = MultipleTargetPainterWeaponData(p_class) 
 	local className = "MultipleTargetPainterWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "range", s_Instance.range, "float")
	Something(className, s_guid, "spottingBehavior", s_Instance.spottingBehavior, "SpottingType")
	Something(className, s_guid, "timeObjectIsPainted", s_Instance.timeObjectIsPainted, "float")
	Something(className, s_guid, "timeObjectIsSpotted", s_Instance.timeObjectIsSpotted, "float")
	Something(className, s_guid, "useLaserPainting", s_Instance.useLaserPainting, "bool")
	Something(className, s_guid, "useSpotting", s_Instance.useSpotting, "bool")
end

function Type:MultipleTriggerEntityData (p_class, p_guid)
	local s_Instance = MultipleTriggerEntityData(p_class) 
 	local className = "MultipleTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "triggerAmount", s_Instance.triggerAmount, "int")
end

function Type:NearTargetDetonationData (p_class, p_guid)
	local s_Instance = NearTargetDetonationData(p_class) 
 	local className = "NearTargetDetonationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "detonateNearTarget", s_Instance.detonateNearTarget, "bool")
	Something(className, s_guid, "detonationRadius", s_Instance.detonationRadius, "float")
	Something(className, s_guid, "maxDetonationDelay", s_Instance.maxDetonationDelay, "float")
	Something(className, s_guid, "minDetonationDelay", s_Instance.minDetonationDelay, "float")
end

function Type:NestedList (p_class, p_guid)
	local s_Instance = NestedList(p_class) 
 	local className = "NestedList"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultHighlighted", s_Instance.defaultHighlighted, "DefaultSelectionItem")
	Something(className, s_guid, "dynamicShowList", s_Instance.dynamicShowList, "UIDataSourceInfo")
	Something(className, s_guid, "hiddenOnPC", s_Instance.hiddenOnPC, "bool")
	Something(className, s_guid, "hiddenOnXenon", s_Instance.hiddenOnXenon, "bool")
	Something(className, s_guid, "highLightOnUpdate", s_Instance.highLightOnUpdate, "bool")
	Something(className, s_guid, "index", s_Instance.index, "string")
	Something(className, s_guid, "label", s_Instance.label, "string")
	Something(className, s_guid, "listDataSource", s_Instance.listDataSource, "UIDataSourceInfo")
	Something(className, s_guid, "rowType", s_Instance.rowType, "UIListRowType")
	Something(className, s_guid, "staticItems", s_Instance.staticItems, "List<string)>")
	Something(className, s_guid, "useAsNormalListRows", s_Instance.useAsNormalListRows, "bool")
end

function Type:NetworkableLoosePartPhysicsData (p_class, p_guid)
	local s_Instance = NetworkableLoosePartPhysicsData(p_class) 
 	local className = "NetworkableLoosePartPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "networked", s_Instance.networked, "bool")
end

function Type:NetworkDataId (p_class, p_guid)
	local s_Instance = NetworkDataId(p_class) 
 	local className = "NetworkDataId"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "uint")
end

function Type:NetworkPerformanceEvent (p_class, p_guid)
	local s_Instance = NetworkPerformanceEvent(p_class) 
 	local className = "NetworkPerformanceEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "performanceLink", s_Instance.performanceLink, "GUID")
	Something(className, s_guid, "received", s_Instance.received, "uint")
	Something(className, s_guid, "receivedAverage", s_Instance.receivedAverage, "float")
	Something(className, s_guid, "sent", s_Instance.sent, "uint")
	Something(className, s_guid, "sentAverage", s_Instance.sentAverage, "float")
end

function Type:NetworkSettings (p_class, p_guid)
	local s_Instance = NetworkSettings(p_class) 
 	local className = "NetworkSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientConnectionDebugFilePrefix", s_Instance.clientConnectionDebugFilePrefix, "string")
	Something(className, s_guid, "clientPort", s_Instance.clientPort, "uint")
	Something(className, s_guid, "connectTimeout", s_Instance.connectTimeout, "float")
	Something(className, s_guid, "incrementServerPortOnFail", s_Instance.incrementServerPortOnFail, "bool")
	Something(className, s_guid, "maxClientCount", s_Instance.maxClientCount, "uint")
	Something(className, s_guid, "maxClientFrameSize", s_Instance.maxClientFrameSize, "uint")
	Something(className, s_guid, "maxGhostCount", s_Instance.maxGhostCount, "uint")
	Something(className, s_guid, "maxServerFrameSize", s_Instance.maxServerFrameSize, "uint")
	Something(className, s_guid, "protocolVersion", s_Instance.protocolVersion, "uint")
	Something(className, s_guid, "serverAddress", s_Instance.serverAddress, "string")
	Something(className, s_guid, "serverConnectionDebugFilePrefix", s_Instance.serverConnectionDebugFilePrefix, "string")
	Something(className, s_guid, "serverPort", s_Instance.serverPort, "uint")
	Something(className, s_guid, "timeNudgeBias", s_Instance.timeNudgeBias, "float")
	Something(className, s_guid, "timeNudgeGhostFrequencyFactor", s_Instance.timeNudgeGhostFrequencyFactor, "float")
	Something(className, s_guid, "timeSyncEnabled", s_Instance.timeSyncEnabled, "bool")
	Something(className, s_guid, "titleId", s_Instance.titleId, "string")
	Something(className, s_guid, "useFrameManager", s_Instance.useFrameManager, "bool")
	Something(className, s_guid, "xlspAddress", s_Instance.xlspAddress, "string")
end

function Type:NetworkVoteDetails (p_class, p_guid)
	local s_Instance = NetworkVoteDetails(p_class) 
 	local className = "NetworkVoteDetails"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "issuer", s_Instance.issuer, "uint")
	Something(className, s_guid, "personal", s_Instance.personal, "bool")
	Something(className, s_guid, "voteId", s_Instance.voteId, "sbyte")
end

function Type:NFSUIListDataBinding (p_class, p_guid)
	local s_Instance = NFSUIListDataBinding(p_class) 
 	local className = "NFSUIListDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "items", s_Instance.items, "List<UIListItem)>")
	Something(className, s_guid, "refresh", s_Instance.refresh, "UIDataSourceInfo")
end

function Type:NormalizeSettings (p_class, p_guid)
	local s_Instance = NormalizeSettings(p_class) 
 	local className = "NormalizeSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lower", s_Instance.lower, "float")
	Something(className, s_guid, "maximum", s_Instance.maximum, "float")
	Something(className, s_guid, "minimum", s_Instance.minimum, "float")
	Something(className, s_guid, "normalize", s_Instance.normalize, "bool")
	Something(className, s_guid, "upper", s_Instance.upper, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:NotEntityData (p_class, p_guid)
	local s_Instance = NotEntityData(p_class) 
 	local className = "NotEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:NumberGeneratorNodeData (p_class, p_guid)
	local s_Instance = NumberGeneratorNodeData(p_class) 
 	local className = "NumberGeneratorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "mode", s_Instance.mode, "NumberGeneratorMode")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
end

function Type:OBBData (p_class, p_guid)
	local s_Instance = OBBData(p_class) 
 	local className = "OBBData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "halfExtents", s_Instance.halfExtents, "Vec3")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:ObjectBlueprint (p_class, p_guid)
	local s_Instance = ObjectBlueprint(p_class) 
 	local className = "ObjectBlueprint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "object", s_Instance.object, "CtrRef")
end

function Type:ObjectEnterAreaTriggerEntityData (p_class, p_guid)
	local s_Instance = ObjectEnterAreaTriggerEntityData(p_class) 
 	local className = "ObjectEnterAreaTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "updatePass", s_Instance.updatePass, "fb.UpdatePass)")
end

function Type:ObjectiveEntityData (p_class, p_guid)
	local s_Instance = ObjectiveEntityData(p_class) 
 	local className = "ObjectiveEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delayTime", s_Instance.delayTime, "float")
	Something(className, s_guid, "displaySuccess", s_Instance.displaySuccess, "bool")
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "hudData", s_Instance.hudData, "CtrRef")
	Something(className, s_guid, "objectiveBriefSid", s_Instance.objectiveBriefSid, "string")
	Something(className, s_guid, "objectiveSid", s_Instance.objectiveSid, "string")
	Something(className, s_guid, "objectiveType", s_Instance.objectiveType, "fb.ObjectiveType)")
	Something(className, s_guid, "reciever", s_Instance.reciever, "MessageReciever")
	Something(className, s_guid, "retriggerSuccessOnShowObjective", s_Instance.retriggerSuccessOnShowObjective, "bool")
	Something(className, s_guid, "squadId", s_Instance.squadId, "fb.SquadId)")
	Something(className, s_guid, "successSid", s_Instance.successSid, "string")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "tutorial", s_Instance.tutorial, "bool")
end

function Type:ObjectVariation (p_class, p_guid)
	local s_Instance = ObjectVariation(p_class) 
 	local className = "ObjectVariation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
end

function Type:ObjectVariationSwitchEntityData (p_class, p_guid)
	local s_Instance = ObjectVariationSwitchEntityData(p_class) 
 	local className = "ObjectVariationSwitchEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "variation1", s_Instance.variation1, "CtrRef")
	Something(className, s_guid, "variation2", s_Instance.variation2, "CtrRef")
end

function Type:OccluderMeshEntityData (p_class, p_guid)
	local s_Instance = OccluderMeshEntityData(p_class) 
 	local className = "OccluderMeshEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
end

function Type:OccluderVolumeEntityData (p_class, p_guid)
	local s_Instance = OccluderVolumeEntityData(p_class) 
 	local className = "OccluderVolumeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "occluderHighPriority", s_Instance.occluderHighPriority, "bool")
end

function Type:OcclusionSettings (p_class, p_guid)
	local s_Instance = OcclusionSettings(p_class) 
 	local className = "OcclusionSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawBinaryBuffer", s_Instance.drawBinaryBuffer, "bool")
	Something(className, s_guid, "drawZbuffer", s_Instance.drawZbuffer, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
end

function Type:OneOptionAxisEditableAction (p_class, p_guid)
	local s_Instance = OneOptionAxisEditableAction(p_class) 
 	local className = "OneOptionAxisEditableAction"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "header", s_Instance.header, "string")
	Something(className, s_guid, "invert", s_Instance.invert, "bool")
end

function Type:OneOptionButtonEditableAction (p_class, p_guid)
	local s_Instance = OneOptionButtonEditableAction(p_class) 
 	local className = "OneOptionButtonEditableAction"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "header", s_Instance.header, "string")
end

function Type:OnGroundStateData (p_class, p_guid)
	local s_Instance = OnGroundStateData(p_class) 
 	local className = "OnGroundStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowedDistanceFromGround", s_Instance.allowedDistanceFromGround, "float")
	Something(className, s_guid, "groundHugging", s_Instance.groundHugging, "bool")
	Something(className, s_guid, "jumpDelay", s_Instance.jumpDelay, "float")
	Something(className, s_guid, "jumpStaminaPenalty", s_Instance.jumpStaminaPenalty, "float")
	Something(className, s_guid, "limitDownwardVelocity", s_Instance.limitDownwardVelocity, "bool")
end

function Type:OnlineConfiguration (p_class, p_guid)
	local s_Instance = OnlineConfiguration(p_class) 
 	local className = "OnlineConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "backend", s_Instance.backend, "BackendType")
	Something(className, s_guid, "chat", s_Instance.chat, "CtrRef")
	Something(className, s_guid, "provider", s_Instance.provider, "CtrRef")
	Something(className, s_guid, "richPresence", s_Instance.richPresence, "CtrRef")
end

function Type:OnlineEnvironmentConsoleUrl (p_class, p_guid)
	local s_Instance = OnlineEnvironmentConsoleUrl(p_class) 
 	local className = "OnlineEnvironmentConsoleUrl"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "urls", s_Instance.urls, "List<OnlineEnvironmentConsoleUrlData)>")
end

function Type:OnlineEnvironmentConsoleUrlData (p_class, p_guid)
	local s_Instance = OnlineEnvironmentConsoleUrlData(p_class) 
 	local className = "OnlineEnvironmentConsoleUrlData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "url", s_Instance.url, "OnlineEnvironmentUrl")
end

function Type:OnlineEnvironmentUrl (p_class, p_guid)
	local s_Instance = OnlineEnvironmentUrl(p_class) 
 	local className = "OnlineEnvironmentUrl"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "urls", s_Instance.urls, "List<OnlineEnvironmentUrlData)>")
end

function Type:OnlineEnvironmentUrlData (p_class, p_guid)
	local s_Instance = OnlineEnvironmentUrlData(p_class) 
 	local className = "OnlineEnvironmentUrlData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "environment", s_Instance.environment, "OnlineEnvironment")
	Something(className, s_guid, "url", s_Instance.url, "string")
end

function Type:OnlinePlatformConfiguration (p_class, p_guid)
	local s_Instance = OnlinePlatformConfiguration(p_class) 
 	local className = "OnlinePlatformConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientBackends", s_Instance.clientBackends, "List<CtrRef)>")
	Something(className, s_guid, "isFallback", s_Instance.isFallback, "bool")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "serverBackends", s_Instance.serverBackends, "List<CtrRef)>")
	Something(className, s_guid, "services", s_Instance.services, "CtrRef")
end

function Type:OnlineProviderAsset (p_class, p_guid)
	local s_Instance = OnlineProviderAsset(p_class) 
 	local className = "OnlineProviderAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "configurations", s_Instance.configurations, "List<OnlineProviderConfiguration)>")
end

function Type:OnlineProviderConfiguration (p_class, p_guid)
	local s_Instance = OnlineProviderConfiguration(p_class) 
 	local className = "OnlineProviderConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "client", s_Instance.client, "string")
	Something(className, s_guid, "isServer", s_Instance.isServer, "bool")
	Something(className, s_guid, "platform", s_Instance.platform, "GamePlatform")
	Something(className, s_guid, "serverSocketPacketSize", s_Instance.serverSocketPacketSize, "uint")
	Something(className, s_guid, "serviceName", s_Instance.serviceName, "string")
	Something(className, s_guid, "sKU", s_Instance.sKU, "string")
	Something(className, s_guid, "version", s_Instance.version, "string")
end

function Type:OnlineServicesAsset (p_class, p_guid)
	local s_Instance = OnlineServicesAsset(p_class) 
 	local className = "OnlineServicesAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "onlineServices", s_Instance.onlineServices, "List<CtrRef)>")
end

function Type:OnlineSettings (p_class, p_guid)
	local s_Instance = OnlineSettings(p_class) 
 	local className = "OnlineSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "backend", s_Instance.backend, "BackendType")
	Something(className, s_guid, "chatSettings", s_Instance.chatSettings, "CtrRef")
	Something(className, s_guid, "country", s_Instance.country, "string")
	Something(className, s_guid, "environment", s_Instance.environment, "OnlineEnvironment")
	Something(className, s_guid, "isSecure", s_Instance.isSecure, "bool")
	Something(className, s_guid, "matchmakeImmediately", s_Instance.matchmakeImmediately, "bool")
	Something(className, s_guid, "matchmakingMode", s_Instance.matchmakingMode, "string")
	Something(className, s_guid, "matchmakingOptions", s_Instance.matchmakingOptions, "string")
	Something(className, s_guid, "matchmakingToken", s_Instance.matchmakingToken, "string")
	Something(className, s_guid, "negativeUserCacheRefreshPeriod", s_Instance.negativeUserCacheRefreshPeriod, "uint")
	Something(className, s_guid, "peerBackend", s_Instance.peerBackend, "BackendType")
	Something(className, s_guid, "provider", s_Instance.provider, "CtrRef")
	Something(className, s_guid, "region", s_Instance.region, "string")
	Something(className, s_guid, "richPresence", s_Instance.richPresence, "CtrRef")
	Something(className, s_guid, "supportHostMigration", s_Instance.supportHostMigration, "bool")
end

function Type:OperandLogicNode (p_class, p_guid)
	local s_Instance = OperandLogicNode(p_class) 
 	local className = "OperandLogicNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "leftDataSourceInfo", s_Instance.leftDataSourceInfo, "UIDataSourceInfo")
	Something(className, s_guid, "operator", s_Instance.operator, "UILogicOperator")
	Something(className, s_guid, "rightDataSourceInfo", s_Instance.rightDataSourceInfo, "UIDataSourceInfo")
	Something(className, s_guid, "rightLiteralOperand", s_Instance.rightLiteralOperand, "double")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:Or4EntityData (p_class, p_guid)
	local s_Instance = Or4EntityData(p_class) 
 	local className = "Or4EntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "bool")
	Something(className, s_guid, "in2", s_Instance.in2, "bool")
	Something(className, s_guid, "in3", s_Instance.in3, "bool")
	Something(className, s_guid, "in4", s_Instance.in4, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:OrderEntityData (p_class, p_guid)
	local s_Instance = OrderEntityData(p_class) 
 	local className = "OrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugName", s_Instance.debugName, "string")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "issueOrderDelay", s_Instance.issueOrderDelay, "float")
	Something(className, s_guid, "onCompleteTimeOut", s_Instance.onCompleteTimeOut, "float")
	Something(className, s_guid, "onFailedTimeOut", s_Instance.onFailedTimeOut, "float")
	Something(className, s_guid, "readinessOnStart", s_Instance.readinessOnStart, "ReadinessLevel")
end

function Type:OrderReadiness (p_class, p_guid)
	local s_Instance = OrderReadiness(p_class) 
 	local className = "OrderReadiness"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minimumReadiness", s_Instance.minimumReadiness, "ReadinessState")
	Something(className, s_guid, "orderType", s_Instance.orderType, "string")
end

function Type:OrderSettings (p_class, p_guid)
	local s_Instance = OrderSettings(p_class) 
 	local className = "OrderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "orders", s_Instance.orders, "List<CtrRef)>")
end

function Type:OrEntityData (p_class, p_guid)
	local s_Instance = OrEntityData(p_class) 
 	local className = "OrEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "bool")
	Something(className, s_guid, "in2", s_Instance.in2, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:OrientationNodeData (p_class, p_guid)
	local s_Instance = OrientationNodeData(p_class) 
 	local className = "OrientationNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "listenerRelativePitch", s_Instance.listenerRelativePitch, "AudioGraphNodePort")
	Something(className, s_guid, "listenerRelativeRoll", s_Instance.listenerRelativeRoll, "AudioGraphNodePort")
	Something(className, s_guid, "listenerRelativeYaw", s_Instance.listenerRelativeYaw, "AudioGraphNodePort")
end

function Type:OutdoorLightComponentData (p_class, p_guid)
	local s_Instance = OutdoorLightComponentData(p_class) 
 	local className = "OutdoorLightComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cloudShadowCoverage", s_Instance.cloudShadowCoverage, "float")
	Something(className, s_guid, "cloudShadowEnable", s_Instance.cloudShadowEnable, "bool")
	Something(className, s_guid, "cloudShadowExponent", s_Instance.cloudShadowExponent, "float")
	Something(className, s_guid, "cloudShadowSize", s_Instance.cloudShadowSize, "float")
	Something(className, s_guid, "cloudShadowSpeed", s_Instance.cloudShadowSpeed, "Vec2")
	Something(className, s_guid, "cloudShadowTexture", s_Instance.cloudShadowTexture, "CtrRef")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "groundColor", s_Instance.groundColor, "Vec3")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "skyColor", s_Instance.skyColor, "Vec3")
	Something(className, s_guid, "skyEnvmapShadowScale", s_Instance.skyEnvmapShadowScale, "float")
	Something(className, s_guid, "skyLightAngleFactor", s_Instance.skyLightAngleFactor, "float")
	Something(className, s_guid, "sunColor", s_Instance.sunColor, "Vec3")
	Something(className, s_guid, "sunRotationX", s_Instance.sunRotationX, "float")
	Something(className, s_guid, "sunRotationY", s_Instance.sunRotationY, "float")
	Something(className, s_guid, "sunShadowHeightScale", s_Instance.sunShadowHeightScale, "float")
	Something(className, s_guid, "sunSpecularScale", s_Instance.sunSpecularScale, "float")
	Something(className, s_guid, "translucencyAmbient", s_Instance.translucencyAmbient, "float")
	Something(className, s_guid, "translucencyDistortion", s_Instance.translucencyDistortion, "float")
	Something(className, s_guid, "translucencyPower", s_Instance.translucencyPower, "float")
	Something(className, s_guid, "translucencyScale", s_Instance.translucencyScale, "float")
end

function Type:OutdoorLightEffectState (p_class, p_guid)
	local s_Instance = OutdoorLightEffectState(p_class) 
 	local className = "OutdoorLightEffectState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cloudShadowCoverage", s_Instance.cloudShadowCoverage, "float")
	Something(className, s_guid, "cloudShadowEnable", s_Instance.cloudShadowEnable, "bool")
	Something(className, s_guid, "cloudShadowExponent", s_Instance.cloudShadowExponent, "float")
	Something(className, s_guid, "cloudShadowSize", s_Instance.cloudShadowSize, "float")
	Something(className, s_guid, "cloudShadowSpeed", s_Instance.cloudShadowSpeed, "Vec2")
	Something(className, s_guid, "cloudShadowTexture", s_Instance.cloudShadowTexture, "CtrRef")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "groundColor", s_Instance.groundColor, "Vec3")
	Something(className, s_guid, "skyColor", s_Instance.skyColor, "Vec3")
	Something(className, s_guid, "skyLightAngleFactor", s_Instance.skyLightAngleFactor, "float")
	Something(className, s_guid, "sunColor", s_Instance.sunColor, "Vec3")
	Something(className, s_guid, "sunRotationX", s_Instance.sunRotationX, "float")
	Something(className, s_guid, "sunRotationY", s_Instance.sunRotationY, "float")
	Something(className, s_guid, "sunShadowHeightScale", s_Instance.sunShadowHeightScale, "float")
end

function Type:OutputNodeData (p_class, p_guid)
	local s_Instance = OutputNodeData(p_class) 
 	local className = "OutputNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attenuationCurve", s_Instance.attenuationCurve, "AudioCurve")
	Something(className, s_guid, "bypassHeadroom", s_Instance.bypassHeadroom, "AudioGraphNodePort")
	Something(className, s_guid, "enableHdr", s_Instance.enableHdr, "bool")
	Something(className, s_guid, "gain", s_Instance.gain, "float")
	Something(className, s_guid, "hFDampingDistance", s_Instance.hFDampingDistance, "float")
	Something(className, s_guid, "hFDampingObstruction", s_Instance.hFDampingObstruction, "float")
	Something(className, s_guid, "hFDampingOcclusion", s_Instance.hFDampingOcclusion, "float")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "lowPassPlugin", s_Instance.lowPassPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "mainSend", s_Instance.mainSend, "CtrRef")
	Something(className, s_guid, "mainSendPlugin", s_Instance.mainSendPlugin, "SoundGraphPluginRef")
	Something(className, s_guid, "minDistance", s_Instance.minDistance, "float")
	Something(className, s_guid, "outputName", s_Instance.outputName, "string")
	Something(className, s_guid, "outputNameHash", s_Instance.outputNameHash, "uint")
	Something(className, s_guid, "solo", s_Instance.solo, "bool")
	Something(className, s_guid, "transformSource", s_Instance.transformSource, "OutputTransformSource")
	Something(className, s_guid, "vuPlugin", s_Instance.vuPlugin, "SoundGraphPluginRef")
end

function Type:OverHeatData (p_class, p_guid)
	local s_Instance = OverHeatData(p_class) 
 	local className = "OverHeatData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heatDropPerSecond", s_Instance.heatDropPerSecond, "float")
	Something(className, s_guid, "heatPerBullet", s_Instance.heatPerBullet, "float")
	Something(className, s_guid, "overHeatEffect", s_Instance.overHeatEffect, "FireEffectData")
	Something(className, s_guid, "overHeatPenaltyTime", s_Instance.overHeatPenaltyTime, "float")
	Something(className, s_guid, "overHeatThreshold", s_Instance.overHeatThreshold, "float")
end

function Type:PackagingCellData (p_class, p_guid)
	local s_Instance = PackagingCellData(p_class) 
 	local className = "PackagingCellData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rules", s_Instance.rules, "List<CtrRef)>")
	Something(className, s_guid, "shape", s_Instance.shape, "List<Vec2)>")
	Something(className, s_guid, "targets", s_Instance.targets, "List<CtrRef)>")
end

function Type:PackagingDetailInfo (p_class, p_guid)
	local s_Instance = PackagingDetailInfo(p_class) 
 	local className = "PackagingDetailInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "includeAnimation", s_Instance.includeAnimation, "bool")
	Something(className, s_guid, "includeMeshes", s_Instance.includeMeshes, "bool")
	Something(className, s_guid, "includeSounds", s_Instance.includeSounds, "bool")
	Something(className, s_guid, "includeTextures", s_Instance.includeTextures, "bool")
	Something(className, s_guid, "lodsToSkip", s_Instance.lodsToSkip, "int")
	Something(className, s_guid, "mipsToSkip", s_Instance.mipsToSkip, "int")
end

function Type:PackagingRule (p_class, p_guid)
	local s_Instance = PackagingRule(p_class) 
 	local className = "PackagingRule"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "canTargetSelf", s_Instance.canTargetSelf, "bool")
	Something(className, s_guid, "debugColor", s_Instance.debugColor, "Vec3")
end

function Type:PadInputActionData (p_class, p_guid)
	local s_Instance = PadInputActionData(p_class) 
 	local className = "PadInputActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "button", s_Instance.button, "InputDevicePadButtons")
	Something(className, s_guid, "pov", s_Instance.pov, "InputDevicePOVs")
	Something(className, s_guid, "pS3AlternativeButton", s_Instance.pS3AlternativeButton, "InputDevicePadButtons")
	Something(className, s_guid, "useSquareInput", s_Instance.useSquareInput, "bool")
end

function Type:PadRumbleNodeData (p_class, p_guid)
	local s_Instance = PadRumbleNodeData(p_class) 
 	local className = "PadRumbleNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rumbleHigh", s_Instance.rumbleHigh, "AudioGraphNodePort")
	Something(className, s_guid, "rumbleLow", s_Instance.rumbleLow, "AudioGraphNodePort")
end

function Type:ParachuteStateData (p_class, p_guid)
	local s_Instance = ParachuteStateData(p_class) 
 	local className = "ParachuteStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angleOfAttack", s_Instance.angleOfAttack, "float")
	Something(className, s_guid, "bankOffset", s_Instance.bankOffset, "float")
	Something(className, s_guid, "brakeOffset", s_Instance.brakeOffset, "float")
	Something(className, s_guid, "deployTime", s_Instance.deployTime, "float")
	Something(className, s_guid, "forwardDragCoefficient", s_Instance.forwardDragCoefficient, "float")
	Something(className, s_guid, "maxPitchVelocity", s_Instance.maxPitchVelocity, "float")
	Something(className, s_guid, "maxRollVelocity", s_Instance.maxRollVelocity, "float")
	Something(className, s_guid, "maxYawVelocity", s_Instance.maxYawVelocity, "float")
	Something(className, s_guid, "terminalVelocity", s_Instance.terminalVelocity, "float")
	Something(className, s_guid, "throttleOffset", s_Instance.throttleOffset, "float")
end

function Type:ParameterFilterLinearNodeData (p_class, p_guid)
	local s_Instance = ParameterFilterLinearNodeData(p_class) 
 	local className = "ParameterFilterLinearNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackSpeed", s_Instance.attackSpeed, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "releaseSpeed", s_Instance.releaseSpeed, "AudioGraphNodePort")
end

function Type:ParameterFilterLpNodeData (p_class, p_guid)
	local s_Instance = ParameterFilterLpNodeData(p_class) 
 	local className = "ParameterFilterLpNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hz", s_Instance.hz, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
end

function Type:PartComponentData (p_class, p_guid)
	local s_Instance = PartComponentData(p_class) 
 	local className = "PartComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatePhysics", s_Instance.animatePhysics, "bool")
	Something(className, s_guid, "healthStates", s_Instance.healthStates, "List<CtrRef)>")
	Something(className, s_guid, "isFragile", s_Instance.isFragile, "bool")
	Something(className, s_guid, "isNetworkable", s_Instance.isNetworkable, "bool")
	Something(className, s_guid, "isSupported", s_Instance.isSupported, "bool")
	Something(className, s_guid, "isWindow", s_Instance.isWindow, "bool")
	Something(className, s_guid, "partLinks", s_Instance.partLinks, "List<CtrRef)>")
end

function Type:PartInfoData (p_class, p_guid)
	local s_Instance = PartInfoData(p_class) 
 	local className = "PartInfoData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aabb", s_Instance.aabb, "AxisAlignedBox")
	Something(className, s_guid, "translation", s_Instance.translation, "Vec3")
end

function Type:PartLinkData (p_class, p_guid)
	local s_Instance = PartLinkData(p_class) 
 	local className = "PartLinkData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "partComponentIndex1", s_Instance.partComponentIndex1, "uint")
	Something(className, s_guid, "partComponentIndex2", s_Instance.partComponentIndex2, "uint")
end

function Type:PathfindingBlob (p_class, p_guid)
	local s_Instance = PathfindingBlob(p_class) 
 	local className = "PathfindingBlob"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blobId", s_Instance.blobId, "GUID")
	Something(className, s_guid, "blobSize", s_Instance.blobSize, "uint")
	Something(className, s_guid, "chunkSizes", s_Instance.chunkSizes, "List<uint)>")
end

function Type:PathfindingBuildSettingsAsset (p_class, p_guid)
	local s_Instance = PathfindingBuildSettingsAsset(p_class) 
 	local className = "PathfindingBuildSettingsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalInwardsSmoothingDist", s_Instance.additionalInwardsSmoothingDist, "float")
	Something(className, s_guid, "entityHeight", s_Instance.entityHeight, "float")
	Something(className, s_guid, "entityRadius", s_Instance.entityRadius, "float")
	Something(className, s_guid, "gridSideLength", s_Instance.gridSideLength, "float")
	Something(className, s_guid, "leaveSmallIslandsTouchingPortals", s_Instance.leaveSmallIslandsTouchingPortals, "bool")
	Something(className, s_guid, "maxStep", s_Instance.maxStep, "float")
	Something(className, s_guid, "maxWalkableSlope", s_Instance.maxWalkableSlope, "float")
	Something(className, s_guid, "minIslandSurfaceArea", s_Instance.minIslandSurfaceArea, "float")
	Something(className, s_guid, "optimizeForAxisAligned", s_Instance.optimizeForAxisAligned, "bool")
	Something(className, s_guid, "terrainSamplingStep", s_Instance.terrainSamplingStep, "uint")
	Something(className, s_guid, "tesselateForPathingAccuracy", s_Instance.tesselateForPathingAccuracy, "bool")
	Something(className, s_guid, "useEnhancedTerrainTracking", s_Instance.useEnhancedTerrainTracking, "bool")
	Something(className, s_guid, "voxSize", s_Instance.voxSize, "float")
end

function Type:PathfindingDebugSettings (p_class, p_guid)
	local s_Instance = PathfindingDebugSettings(p_class) 
 	local className = "PathfindingDebugSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawConnections", s_Instance.drawConnections, "bool")
	Something(className, s_guid, "drawFilledPolygons", s_Instance.drawFilledPolygons, "bool")
	Something(className, s_guid, "drawMemory", s_Instance.drawMemory, "bool")
	Something(className, s_guid, "drawObstacles", s_Instance.drawObstacles, "bool")
	Something(className, s_guid, "drawPolygonOutline", s_Instance.drawPolygonOutline, "bool")
	Something(className, s_guid, "drawStats", s_Instance.drawStats, "bool")
	Something(className, s_guid, "drawTimings", s_Instance.drawTimings, "bool")
	Something(className, s_guid, "originalPaths", s_Instance.originalPaths, "bool")
	Something(className, s_guid, "potentialObstacles", s_Instance.potentialObstacles, "bool")
	Something(className, s_guid, "randomPositions", s_Instance.randomPositions, "bool")
	Something(className, s_guid, "replayMode", s_Instance.replayMode, "PathfindingReplayMode")
	Something(className, s_guid, "textOffsetY", s_Instance.textOffsetY, "int")
	Something(className, s_guid, "textStartX", s_Instance.textStartX, "int")
	Something(className, s_guid, "textStartY", s_Instance.textStartY, "int")
	Something(className, s_guid, "typesToDrawMask", s_Instance.typesToDrawMask, "int")
end

function Type:PathfindingObjectCategoryRepresentation (p_class, p_guid)
	local s_Instance = PathfindingObjectCategoryRepresentation(p_class) 
 	local className = "PathfindingObjectCategoryRepresentation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "CtrRef")
	Something(className, s_guid, "representation", s_Instance.representation, "PathfindingRepresentation")
end

function Type:PathfindingSandboxAsset (p_class, p_guid)
	local s_Instance = PathfindingSandboxAsset(p_class) 
 	local className = "PathfindingSandboxAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "system", s_Instance.system, "CtrRef")
end

function Type:PathfindingSystemEntityData (p_class, p_guid)
	local s_Instance = PathfindingSystemEntityData(p_class) 
 	local className = "PathfindingSystemEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pathfindingTypesOnLevel", s_Instance.pathfindingTypesOnLevel, "List<uint)>")
end

function Type:PathfindingTypeAsset (p_class, p_guid)
	local s_Instance = PathfindingTypeAsset(p_class) 
 	local className = "PathfindingTypeAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "uint")
end

function Type:PathFollowingComponentData (p_class, p_guid)
	local s_Instance = PathFollowingComponentData(p_class) 
 	local className = "PathFollowingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alternatePathfindingIndices", s_Instance.alternatePathfindingIndices, "List<uint)>")
	Something(className, s_guid, "movementCorridorRadius", s_Instance.movementCorridorRadius, "float")
	Something(className, s_guid, "preferredPathfindingIndex", s_Instance.preferredPathfindingIndex, "uint")
	Something(className, s_guid, "updatePathAtDistancePercent", s_Instance.updatePathAtDistancePercent, "float")
end

function Type:PatrolOrderEntityData (p_class, p_guid)
	local s_Instance = PatrolOrderEntityData(p_class) 
 	local className = "PatrolOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "combatMode", s_Instance.combatMode, "CombatPatrolMode")
	Something(className, s_guid, "startAtGeometricallyClosestWaypoint", s_Instance.startAtGeometricallyClosestWaypoint, "bool")
	Something(className, s_guid, "startingWaypoint", s_Instance.startingWaypoint, "CtrRef")
	Something(className, s_guid, "typeOfRoute", s_Instance.typeOfRoute, "RouteType")
	Something(className, s_guid, "usePathFinding", s_Instance.usePathFinding, "bool")
end

function Type:PeakingIir2NodeData (p_class, p_guid)
	local s_Instance = PeakingIir2NodeData(p_class) 
 	local className = "PeakingIir2NodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "frequency", s_Instance.frequency, "AudioGraphNodePort")
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "q", s_Instance.q, "AudioGraphNodePort")
end

function Type:PeerCreateGameParameters (p_class, p_guid)
	local s_Instance = PeerCreateGameParameters(p_class) 
 	local className = "PeerCreateGameParameters"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "base", s_Instance.base, "MatchmakingCreateGameParameters")
	Something(className, s_guid, "playerCapacity", s_Instance.playerCapacity, "uint")
end

function Type:PeerServerBackendData (p_class, p_guid)
	local s_Instance = PeerServerBackendData(p_class) 
 	local className = "PeerServerBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "createParameters", s_Instance.createParameters, "PeerCreateGameParameters")
end

function Type:PerformanceEvent (p_class, p_guid)
	local s_Instance = PerformanceEvent(p_class) 
 	local className = "PerformanceEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allocCPUMemory", s_Instance.allocCPUMemory, "float")
	Something(className, s_guid, "allocGPUMemory", s_Instance.allocGPUMemory, "float")
	Something(className, s_guid, "cPUAverage", s_Instance.cPUAverage, "float")
	Something(className, s_guid, "drawCallCount", s_Instance.drawCallCount, "int")
	Something(className, s_guid, "freeCPUMemory", s_Instance.freeCPUMemory, "float")
	Something(className, s_guid, "freeGPUMemory", s_Instance.freeGPUMemory, "float")
	Something(className, s_guid, "gPUAverage", s_Instance.gPUAverage, "float")
	Something(className, s_guid, "performanceLink", s_Instance.performanceLink, "GUID")
	Something(className, s_guid, "performanceLocation", s_Instance.performanceLocation, "string")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "primitiveCount", s_Instance.primitiveCount, "int")
end

function Type:PerformanceFpsHistogram (p_class, p_guid)
	local s_Instance = PerformanceFpsHistogram(p_class) 
 	local className = "PerformanceFpsHistogram"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "above60", s_Instance.above60, "float")
	Something(className, s_guid, "below10", s_Instance.below10, "float")
	Something(className, s_guid, "below15", s_Instance.below15, "float")
	Something(className, s_guid, "below20", s_Instance.below20, "float")
	Something(className, s_guid, "below25", s_Instance.below25, "float")
	Something(className, s_guid, "below30", s_Instance.below30, "float")
	Something(className, s_guid, "below5", s_Instance.below5, "float")
	Something(className, s_guid, "below60", s_Instance.below60, "float")
end

function Type:PerformanceProfileState (p_class, p_guid)
	local s_Instance = PerformanceProfileState(p_class) 
 	local className = "PerformanceProfileState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gpuMemMB", s_Instance.gpuMemMB, "uint")
	Something(className, s_guid, "graphicAdapterName", s_Instance.graphicAdapterName, "string")
	Something(className, s_guid, "platform", s_Instance.platform, "string")
	Something(className, s_guid, "processorClock", s_Instance.processorClock, "uint")
	Something(className, s_guid, "processorCoreCount", s_Instance.processorCoreCount, "uint")
	Something(className, s_guid, "processorCount", s_Instance.processorCount, "uint")
	Something(className, s_guid, "totalMemMB", s_Instance.totalMemMB, "uint")
end

function Type:PerformanceTrackerSettings (p_class, p_guid)
	local s_Instance = PerformanceTrackerSettings(p_class) 
 	local className = "PerformanceTrackerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "interval", s_Instance.interval, "float")
	Something(className, s_guid, "juiceLogPerformance", s_Instance.juiceLogPerformance, "bool")
	Something(className, s_guid, "supressPerformanceStatsOnIdle", s_Instance.supressPerformanceStatsOnIdle, "bool")
	Something(className, s_guid, "supressPerformanceStatsUntilSpawned", s_Instance.supressPerformanceStatsUntilSpawned, "bool")
end

function Type:PersistenceConfiguration (p_class, p_guid)
	local s_Instance = PersistenceConfiguration(p_class) 
 	local className = "PersistenceConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coopProfile", s_Instance.coopProfile, "CtrRef")
	Something(className, s_guid, "licenseConfig", s_Instance.licenseConfig, "CtrRef")
	Something(className, s_guid, "mPProfile", s_Instance.mPProfile, "CtrRef")
	Something(className, s_guid, "pointSystemParams", s_Instance.pointSystemParams, "CtrRef")
	Something(className, s_guid, "sPProfile", s_Instance.sPProfile, "CtrRef")
	Something(className, s_guid, "statCategoryTreeCollection", s_Instance.statCategoryTreeCollection, "CtrRef")
end

function Type:PersistenceConsumableMapping (p_class, p_guid)
	local s_Instance = PersistenceConsumableMapping(p_class) 
 	local className = "PersistenceConsumableMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "group", s_Instance.group, "ConsumableGroup")
end

function Type:PersistenceData (p_class, p_guid)
	local s_Instance = PersistenceData(p_class) 
 	local className = "PersistenceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientDefaultGroup", s_Instance.clientDefaultGroup, "CtrRef")
	Something(className, s_guid, "clubPersistenceName", s_Instance.clubPersistenceName, "string")
	Something(className, s_guid, "consumableMappings", s_Instance.consumableMappings, "List<PersistenceConsumableMapping)>")
	Something(className, s_guid, "customReportValues", s_Instance.customReportValues, "List<CustomReportValueData)>")
	Something(className, s_guid, "deltaGameReports", s_Instance.deltaGameReports, "bool")
	Something(className, s_guid, "historyDaily", s_Instance.historyDaily, "bool")
	Something(className, s_guid, "historyMonthly", s_Instance.historyMonthly, "bool")
	Something(className, s_guid, "historyWeekly", s_Instance.historyWeekly, "bool")
	Something(className, s_guid, "outputProperties", s_Instance.outputProperties, "bool")
	Something(className, s_guid, "persistenceName", s_Instance.persistenceName, "string")
	Something(className, s_guid, "retentionPolicy", s_Instance.retentionPolicy, "CtrRef")
	Something(className, s_guid, "serverDefaultGroup", s_Instance.serverDefaultGroup, "CtrRef")
	Something(className, s_guid, "values", s_Instance.values, "List<PersistentValueTemplateData)>")
end

function Type:PersistenceGameData (p_class, p_guid)
	local s_Instance = PersistenceGameData(p_class) 
 	local className = "PersistenceGameData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assets", s_Instance.assets, "List<CtrRef)>")
end

function Type:PersistenceRetentionPolicy (p_class, p_guid)
	local s_Instance = PersistenceRetentionPolicy(p_class) 
 	local className = "PersistenceRetentionPolicy"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dailyHistoryCount", s_Instance.dailyHistoryCount, "int")
	Something(className, s_guid, "monthlyHistoryCount", s_Instance.monthlyHistoryCount, "int")
	Something(className, s_guid, "weeklyHistoryCount", s_Instance.weeklyHistoryCount, "int")
end

function Type:PersistenceSettings (p_class, p_guid)
	local s_Instance = PersistenceSettings(p_class) 
 	local className = "PersistenceSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coopProfile", s_Instance.coopProfile, "CtrRef")
	Something(className, s_guid, "licenseConfig", s_Instance.licenseConfig, "CtrRef")
	Something(className, s_guid, "mPProfile", s_Instance.mPProfile, "CtrRef")
	Something(className, s_guid, "pointSystemParams", s_Instance.pointSystemParams, "CtrRef")
	Something(className, s_guid, "sPProfile", s_Instance.sPProfile, "CtrRef")
	Something(className, s_guid, "statCategoryTreeCollection", s_Instance.statCategoryTreeCollection, "CtrRef")
end

function Type:PersistenceStatGroup (p_class, p_guid)
	local s_Instance = PersistenceStatGroup(p_class) 
 	local className = "PersistenceStatGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "groupName", s_Instance.groupName, "string")
end

function Type:PersistenceStatTable (p_class, p_guid)
	local s_Instance = PersistenceStatTable(p_class) 
 	local className = "PersistenceStatTable"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ownerPersistenceData", s_Instance.ownerPersistenceData, "CtrRef")
	Something(className, s_guid, "tableName", s_Instance.tableName, "string")
end

function Type:PersistentAwardDataStatRef (p_class, p_guid)
	local s_Instance = PersistentAwardDataStatRef(p_class) 
 	local className = "PersistentAwardDataStatRef"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "definition", s_Instance.definition, "CtrRef")
end

function Type:PersistentCriteriaStatRef (p_class, p_guid)
	local s_Instance = PersistentCriteriaStatRef(p_class) 
 	local className = "PersistentCriteriaStatRef"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criteria", s_Instance.criteria, "CtrRef")
	Something(className, s_guid, "criteriaOwner", s_Instance.criteriaOwner, "CtrRef")
	Something(className, s_guid, "paramX", s_Instance.paramX, "CtrRef")
	Something(className, s_guid, "paramY", s_Instance.paramY, "CtrRef")
end

function Type:PersistentValueTemplate (p_class, p_guid)
	local s_Instance = PersistentValueTemplate(p_class) 
 	local className = "PersistentValueTemplate"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "PersistentValueTemplateData")
	Something(className, s_guid, "derivedFormulaRefs", s_Instance.derivedFormulaRefs, "List<CtrRef)>")
end

function Type:PersistentValueTemplateData (p_class, p_guid)
	local s_Instance = PersistentValueTemplateData(p_class) 
 	local className = "PersistentValueTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clubStat", s_Instance.clubStat, "bool")
	Something(className, s_guid, "dataType", s_Instance.dataType, "PersistentValueDataType")
	Something(className, s_guid, "defaultFloatValue", s_Instance.defaultFloatValue, "float")
	Something(className, s_guid, "defaultIntValue", s_Instance.defaultIntValue, "int")
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "string")
	Something(className, s_guid, "forceIntoTemplate", s_Instance.forceIntoTemplate, "bool")
	Something(className, s_guid, "group", s_Instance.group, "AwardGroup")
	Something(className, s_guid, "historyType", s_Instance.historyType, "PersistentValueHistoryType")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "valueType", s_Instance.valueType, "PersistentValueType")
end

function Type:PersistentValueTemplateStatRef (p_class, p_guid)
	local s_Instance = PersistentValueTemplateStatRef(p_class) 
 	local className = "PersistentValueTemplateStatRef"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "definition", s_Instance.definition, "CtrRef")
end

function Type:PhantomComponentData (p_class, p_guid)
	local s_Instance = PhantomComponentData(p_class) 
 	local className = "PhantomComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asyncQueryPointerAsset", s_Instance.asyncQueryPointerAsset, "AntRef")
	Something(className, s_guid, "boxSize", s_Instance.boxSize, "Vec3")
	Something(className, s_guid, "enableTrajectoryOverride", s_Instance.enableTrajectoryOverride, "AntRef")
	Something(className, s_guid, "trajectoryOverride", s_Instance.trajectoryOverride, "AntRef")
end

function Type:PhysicsConeConstraintData (p_class, p_guid)
	local s_Instance = PhysicsConeConstraintData(p_class) 
 	local className = "PhysicsConeConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularFriction", s_Instance.angularFriction, "float")
	Something(className, s_guid, "hasLimits", s_Instance.hasLimits, "bool")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:PhysicsConstraintData (p_class, p_guid)
	local s_Instance = PhysicsConstraintData(p_class) 
 	local className = "PhysicsConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "breakThreshold", s_Instance.breakThreshold, "float")
	Something(className, s_guid, "constrainedObject", s_Instance.constrainedObject, "CtrRef")
	Something(className, s_guid, "isBreakable", s_Instance.isBreakable, "bool")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:PhysicsDebugSettings (p_class, p_guid)
	local s_Instance = PhysicsDebugSettings(p_class) 
 	local className = "PhysicsDebugSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugHingeConstraints", s_Instance.debugHingeConstraints, "bool")
	Something(className, s_guid, "timingRecursionDepth", s_Instance.timingRecursionDepth, "uint")
	Something(className, s_guid, "usePhysicsCpuTimers", s_Instance.usePhysicsCpuTimers, "bool")
end

function Type:PhysicsDrivenAnimationEntityBinding (p_class, p_guid)
	local s_Instance = PhysicsDrivenAnimationEntityBinding(p_class) 
 	local className = "PhysicsDrivenAnimationEntityBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimLeftRight", s_Instance.aimLeftRight, "AntRef")
	Something(className, s_guid, "aimUpDown", s_Instance.aimUpDown, "AntRef")
	Something(className, s_guid, "crouch", s_Instance.crouch, "AntRef")
	Something(className, s_guid, "customizationScreen", s_Instance.customizationScreen, "AntRef")
	Something(className, s_guid, "falseSignal", s_Instance.falseSignal, "AntRef")
	Something(className, s_guid, "forceSetTrajectory", s_Instance.forceSetTrajectory, "AntRef")
	Something(className, s_guid, "groundAngleFromNormal", s_Instance.groundAngleFromNormal, "AntRef")
	Something(className, s_guid, "groundAngleX", s_Instance.groundAngleX, "AntRef")
	Something(className, s_guid, "groundAngleZ", s_Instance.groundAngleZ, "AntRef")
	Something(className, s_guid, "groundDistance", s_Instance.groundDistance, "AntRef")
	Something(className, s_guid, "groundNormal", s_Instance.groundNormal, "AntRef")
	Something(className, s_guid, "groundSupported", s_Instance.groundSupported, "AntRef")
	Something(className, s_guid, "inAir", s_Instance.inAir, "AntRef")
	Something(className, s_guid, "inputBackward", s_Instance.inputBackward, "AntRef")
	Something(className, s_guid, "inputForward", s_Instance.inputForward, "AntRef")
	Something(className, s_guid, "inputLeft", s_Instance.inputLeft, "AntRef")
	Something(className, s_guid, "inputRight", s_Instance.inputRight, "AntRef")
	Something(className, s_guid, "isClientAnimatable", s_Instance.isClientAnimatable, "AntRef")
	Something(className, s_guid, "isEnemy", s_Instance.isEnemy, "AntRef")
	Something(className, s_guid, "jump", s_Instance.jump, "AntRef")
	Something(className, s_guid, "leanLeftRight", s_Instance.leanLeftRight, "AntRef")
	Something(className, s_guid, "lockArmsToCameraWeight", s_Instance.lockArmsToCameraWeight, "AntRef")
	Something(className, s_guid, "minimal3pServer", s_Instance.minimal3pServer, "AntRef")
	Something(className, s_guid, "parachute", s_Instance.parachute, "AntRef")
	Something(className, s_guid, "prone", s_Instance.prone, "AntRef")
	Something(className, s_guid, "skydive", s_Instance.skydive, "AntRef")
	Something(className, s_guid, "sprint", s_Instance.sprint, "AntRef")
	Something(className, s_guid, "swim", s_Instance.swim, "AntRef")
	Something(className, s_guid, "verticalImpact", s_Instance.verticalImpact, "AntRef")
end

function Type:PhysicsDrivenAnimationEntityData (p_class, p_guid)
	local s_Instance = PhysicsDrivenAnimationEntityData(p_class) 
 	local className = "PhysicsDrivenAnimationEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "binding", s_Instance.binding, "PhysicsDrivenAnimationEntityBinding")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:PhysicsEntityData (p_class, p_guid)
	local s_Instance = PhysicsEntityData(p_class) 
 	local className = "PhysicsEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularVelocityDamping", s_Instance.angularVelocityDamping, "float")
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
	Something(className, s_guid, "constraints", s_Instance.constraints, "List<CtrRef)>")
	Something(className, s_guid, "encapsulatePartsInLists", s_Instance.encapsulatePartsInLists, "bool")
	Something(className, s_guid, "floatPhysics", s_Instance.floatPhysics, "CtrRef")
	Something(className, s_guid, "friction", s_Instance.friction, "float")
	Something(className, s_guid, "inertiaModifier", s_Instance.inertiaModifier, "Vec3")
	Something(className, s_guid, "linearVelocityDamping", s_Instance.linearVelocityDamping, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
	Something(className, s_guid, "movableParts", s_Instance.movableParts, "bool")
	Something(className, s_guid, "proximity", s_Instance.proximity, "CtrRef")
	Something(className, s_guid, "restitution", s_Instance.restitution, "float")
	Something(className, s_guid, "rigidBodies", s_Instance.rigidBodies, "List<CtrRef)>")
	Something(className, s_guid, "scaledAssets", s_Instance.scaledAssets, "List<CtrRef)>")
end

function Type:PhysicsEntry (p_class, p_guid)
	local s_Instance = PhysicsEntry(p_class) 
 	local className = "PhysicsEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "azimuth", s_Instance.azimuth, "AudioGraphNodePort")
	Something(className, s_guid, "distance", s_Instance.distance, "AudioGraphNodePort")
	Something(className, s_guid, "elevationAngle", s_Instance.elevationAngle, "AudioGraphNodePort")
	Something(className, s_guid, "output", s_Instance.output, "CtrRef")
end

function Type:PhysicsHingeConstraintData (p_class, p_guid)
	local s_Instance = PhysicsHingeConstraintData(p_class) 
 	local className = "PhysicsHingeConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularFriction", s_Instance.angularFriction, "float")
	Something(className, s_guid, "hasLimits", s_Instance.hasLimits, "bool")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:PhysicsNodeData (p_class, p_guid)
	local s_Instance = PhysicsNodeData(p_class) 
 	local className = "PhysicsNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "azimuth", s_Instance.azimuth, "AudioGraphNodePort")
	Something(className, s_guid, "distance", s_Instance.distance, "AudioGraphNodePort")
	Something(className, s_guid, "elevationAngle", s_Instance.elevationAngle, "AudioGraphNodePort")
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
	Something(className, s_guid, "relativeVelocity", s_Instance.relativeVelocity, "AudioGraphNodePort")
	Something(className, s_guid, "velocity", s_Instance.velocity, "AudioGraphNodePort")
end

function Type:PhysicsPartInfo (p_class, p_guid)
	local s_Instance = PhysicsPartInfo(p_class) 
 	local className = "PhysicsPartInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healthStateIndex", s_Instance.healthStateIndex, "uint")
	Something(className, s_guid, "partComponentIndex", s_Instance.partComponentIndex, "uint")
end

function Type:PhysicsRenderSettings (p_class, p_guid)
	local s_Instance = PhysicsRenderSettings(p_class) 
 	local className = "PhysicsRenderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collisionSpawnDebug", s_Instance.collisionSpawnDebug, "bool")
	Something(className, s_guid, "renderActiveConstraintCount", s_Instance.renderActiveConstraintCount, "bool")
	Something(className, s_guid, "renderBroadphaseHandles", s_Instance.renderBroadphaseHandles, "bool")
	Something(className, s_guid, "renderCenterOfMass", s_Instance.renderCenterOfMass, "bool")
	Something(className, s_guid, "renderCharacterCollision", s_Instance.renderCharacterCollision, "bool")
	Something(className, s_guid, "renderClient", s_Instance.renderClient, "bool")
	Something(className, s_guid, "renderCollidesWithTerrain", s_Instance.renderCollidesWithTerrain, "bool")
	Something(className, s_guid, "renderCollisionSpheres", s_Instance.renderCollisionSpheres, "bool")
	Something(className, s_guid, "renderConstraintCount", s_Instance.renderConstraintCount, "bool")
	Something(className, s_guid, "renderConstraints", s_Instance.renderConstraints, "bool")
	Something(className, s_guid, "renderDestructionConnections", s_Instance.renderDestructionConnections, "bool")
	Something(className, s_guid, "renderDetail", s_Instance.renderDetail, "bool")
	Something(className, s_guid, "renderEffectWorld", s_Instance.renderEffectWorld, "bool")
	Something(className, s_guid, "renderEntityStats", s_Instance.renderEntityStats, "bool")
	Something(className, s_guid, "renderGroup", s_Instance.renderGroup, "bool")
	Something(className, s_guid, "renderInertia", s_Instance.renderInertia, "bool")
	Something(className, s_guid, "renderLinearVelocity", s_Instance.renderLinearVelocity, "bool")
	Something(className, s_guid, "renderMemoryUsed", s_Instance.renderMemoryUsed, "bool")
	Something(className, s_guid, "renderOnlyBoundingBoxes", s_Instance.renderOnlyBoundingBoxes, "bool")
	Something(className, s_guid, "renderOnlyContactConstraints", s_Instance.renderOnlyContactConstraints, "bool")
	Something(className, s_guid, "renderPartBoundingBoxes", s_Instance.renderPartBoundingBoxes, "bool")
	Something(className, s_guid, "renderPhantoms", s_Instance.renderPhantoms, "bool")
	Something(className, s_guid, "renderRagdoll", s_Instance.renderRagdoll, "bool")
	Something(className, s_guid, "renderServer", s_Instance.renderServer, "bool")
	Something(className, s_guid, "renderSimulationIslands", s_Instance.renderSimulationIslands, "bool")
	Something(className, s_guid, "renderSolidGeometry", s_Instance.renderSolidGeometry, "bool")
	Something(className, s_guid, "renderSpecificPart", s_Instance.renderSpecificPart, "int")
	Something(className, s_guid, "renderStatic", s_Instance.renderStatic, "bool")
	Something(className, s_guid, "renderUngrouped", s_Instance.renderUngrouped, "bool")
	Something(className, s_guid, "renderWater", s_Instance.renderWater, "bool")
	Something(className, s_guid, "renderWorldStats", s_Instance.renderWorldStats, "bool")
	Something(className, s_guid, "showContactsInWorldStats", s_Instance.showContactsInWorldStats, "bool")
	Something(className, s_guid, "showFixedObjectsInWorldStats", s_Instance.showFixedObjectsInWorldStats, "bool")
	Something(className, s_guid, "showInactiveContactsInWorldStats", s_Instance.showInactiveContactsInWorldStats, "bool")
	Something(className, s_guid, "showPhantomsInWorldStats", s_Instance.showPhantomsInWorldStats, "bool")
	Something(className, s_guid, "useShapeCache", s_Instance.useShapeCache, "bool")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
end

function Type:PhysicsSettings (p_class, p_guid)
	local s_Instance = PhysicsSettings(p_class) 
 	local className = "PhysicsSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clientEffectWorldThreadCount", s_Instance.clientEffectWorldThreadCount, "uint")
	Something(className, s_guid, "clientWorldThreadCount", s_Instance.clientWorldThreadCount, "uint")
	Something(className, s_guid, "collideJobCount", s_Instance.collideJobCount, "uint")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "enableAIRigidBody", s_Instance.enableAIRigidBody, "bool")
	Something(className, s_guid, "enableASyncWheelRaycasts", s_Instance.enableASyncWheelRaycasts, "bool")
	Something(className, s_guid, "enableClientWheelRaycasts", s_Instance.enableClientWheelRaycasts, "bool")
	Something(className, s_guid, "enableFollowWheelRaycasts", s_Instance.enableFollowWheelRaycasts, "bool")
	Something(className, s_guid, "enableJobs", s_Instance.enableJobs, "bool")
	Something(className, s_guid, "forceSingleStepCharacterInSP", s_Instance.forceSingleStepCharacterInSP, "bool")
	Something(className, s_guid, "forestEnable", s_Instance.forestEnable, "bool")
	Something(className, s_guid, "integrateJobCount", s_Instance.integrateJobCount, "uint")
	Something(className, s_guid, "removeFromWorldOnCollisionOverflow", s_Instance.removeFromWorldOnCollisionOverflow, "bool")
	Something(className, s_guid, "removeRagdollWhenWoken", s_Instance.removeRagdollWhenWoken, "bool")
	Something(className, s_guid, "serverWorldThreadCount", s_Instance.serverWorldThreadCount, "uint")
	Something(className, s_guid, "singleStepCharacter", s_Instance.singleStepCharacter, "bool")
	Something(className, s_guid, "suppressDebrisSpawnUntilReady", s_Instance.suppressDebrisSpawnUntilReady, "bool")
	Something(className, s_guid, "useDelayedWakeUpClient", s_Instance.useDelayedWakeUpClient, "bool")
	Something(className, s_guid, "useDelayedWakeUpServer", s_Instance.useDelayedWakeUpServer, "bool")
end

function Type:PickupEntityAsset (p_class, p_guid)
	local s_Instance = PickupEntityAsset(p_class) 
 	local className = "PickupEntityAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "CtrRef")
end

function Type:PickupEntityData (p_class, p_guid)
	local s_Instance = PickupEntityData(p_class) 
 	local className = "PickupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowPickup", s_Instance.allowPickup, "bool")
	Something(className, s_guid, "contentIsStatic", s_Instance.contentIsStatic, "bool")
	Something(className, s_guid, "displayInMiniMap", s_Instance.displayInMiniMap, "bool")
	Something(className, s_guid, "forceWeaponSlotSelection", s_Instance.forceWeaponSlotSelection, "bool")
	Something(className, s_guid, "hasAutomaticAmmoPickup", s_Instance.hasAutomaticAmmoPickup, "bool")
	Something(className, s_guid, "ignoreNullWeaponSlots", s_Instance.ignoreNullWeaponSlots, "bool")
	Something(className, s_guid, "interactionRadius", s_Instance.interactionRadius, "float")
	Something(className, s_guid, "maxRandomClipAmmoPercent", s_Instance.maxRandomClipAmmoPercent, "int")
	Something(className, s_guid, "maxRandomSpareAmmoPercent", s_Instance.maxRandomSpareAmmoPercent, "int")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "minRandomClipAmmoPercent", s_Instance.minRandomClipAmmoPercent, "int")
	Something(className, s_guid, "minRandomSpareAmmoPercent", s_Instance.minRandomSpareAmmoPercent, "int")
	Something(className, s_guid, "physicsBlueprint", s_Instance.physicsBlueprint, "CtrRef")
	Something(className, s_guid, "positionIsStatic", s_Instance.positionIsStatic, "bool")
	Something(className, s_guid, "preferredWeaponSlot", s_Instance.preferredWeaponSlot, "uint")
	Something(className, s_guid, "randomizeAmmoOnDropForPlayer", s_Instance.randomizeAmmoOnDropForPlayer, "PickupPlayerEnum")
	Something(className, s_guid, "removeWeaponOnDrop", s_Instance.removeWeaponOnDrop, "bool")
	Something(className, s_guid, "replaceAllContent", s_Instance.replaceAllContent, "bool")
	Something(className, s_guid, "sendPlayerInEventOnPickup", s_Instance.sendPlayerInEventOnPickup, "bool")
	Something(className, s_guid, "timeToLive", s_Instance.timeToLive, "float")
	Something(className, s_guid, "unspawnOnAmmoPickup", s_Instance.unspawnOnAmmoPickup, "bool")
	Something(className, s_guid, "unspawnOnPickup", s_Instance.unspawnOnPickup, "bool")
	Something(className, s_guid, "useWeaponMesh", s_Instance.useWeaponMesh, "bool")
end

function Type:PickupSettingsData (p_class, p_guid)
	local s_Instance = PickupSettingsData(p_class) 
 	local className = "PickupSettingsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshRenderOffset", s_Instance.meshRenderOffset, "Vec3")
	Something(className, s_guid, "meshRenderRotation", s_Instance.meshRenderRotation, "Vec3")
end

function Type:PitchModifier (p_class, p_guid)
	local s_Instance = PitchModifier(p_class) 
 	local className = "PitchModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "pitchAngle", s_Instance.pitchAngle, "float")
	Something(className, s_guid, "pitchVal", s_Instance.pitchVal, "float")
end

function Type:PlanarReflectionComponentData (p_class, p_guid)
	local s_Instance = PlanarReflectionComponentData(p_class) 
 	local className = "PlanarReflectionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "groundHeight", s_Instance.groundHeight, "float")
	Something(className, s_guid, "horizontalBlurFilter", s_Instance.horizontalBlurFilter, "BlurFilter")
	Something(className, s_guid, "horizontalDeviation", s_Instance.horizontalDeviation, "float")
	Something(className, s_guid, "skyRenderEnable", s_Instance.skyRenderEnable, "bool")
	Something(className, s_guid, "verticalBlurFilter", s_Instance.verticalBlurFilter, "BlurFilter")
	Something(className, s_guid, "verticalDeviation", s_Instance.verticalDeviation, "float")
end

function Type:PlatformSplitterEntityData (p_class, p_guid)
	local s_Instance = PlatformSplitterEntityData(p_class) 
 	local className = "PlatformSplitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
end

function Type:PlayerCameraEntityData (p_class, p_guid)
	local s_Instance = PlayerCameraEntityData(p_class) 
 	local className = "PlayerCameraEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "releaseControlIfTargetLost", s_Instance.releaseControlIfTargetLost, "bool")
	Something(className, s_guid, "shouldTargetControllable", s_Instance.shouldTargetControllable, "bool")
	Something(className, s_guid, "shouldTargetExtraPlayerInDoublePlayerEvent", s_Instance.shouldTargetExtraPlayerInDoublePlayerEvent, "bool")
	Something(className, s_guid, "shouldTargetVehicleDriverEntry", s_Instance.shouldTargetVehicleDriverEntry, "bool")
	Something(className, s_guid, "soldierCameraIndex", s_Instance.soldierCameraIndex, "uint")
	Something(className, s_guid, "soldierTargetMode", s_Instance.soldierTargetMode, "TargetMode")
	Something(className, s_guid, "vehicleCameraIndex", s_Instance.vehicleCameraIndex, "uint")
	Something(className, s_guid, "vehicleTargetMode", s_Instance.vehicleTargetMode, "TargetMode")
end

function Type:PlayerData (p_class, p_guid)
	local s_Instance = PlayerData(p_class) 
 	local className = "PlayerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputConceptDefinition", s_Instance.inputConceptDefinition, "CtrRef")
	Something(className, s_guid, "inputMapping", s_Instance.inputMapping, "CtrRef")
	Something(className, s_guid, "playerView", s_Instance.playerView, "CtrRef")
end

function Type:PlayerEntryComponentData (p_class, p_guid)
	local s_Instance = PlayerEntryComponentData(p_class) 
 	local className = "PlayerEntryComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationAccelerationMultiplier", s_Instance.animationAccelerationMultiplier, "Vec3")
	Something(className, s_guid, "antEntryEnumeration", s_Instance.antEntryEnumeration, "CtrRef")
	Something(className, s_guid, "antEntryId", s_Instance.antEntryId, "AntEntryIdEnum")
	Something(className, s_guid, "antEntryID", s_Instance.antEntryID, "string")
	Something(className, s_guid, "shieldedTransitionExitTime", s_Instance.shieldedTransitionExitTime, "float")
end

function Type:PlayerFilterEntityData (p_class, p_guid)
	local s_Instance = PlayerFilterEntityData(p_class) 
 	local className = "PlayerFilterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forwardToSpectators", s_Instance.forwardToSpectators, "bool")
	Something(className, s_guid, "invertFilter", s_Instance.invertFilter, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:PlayerInputTriggerEntityData (p_class, p_guid)
	local s_Instance = PlayerInputTriggerEntityData(p_class) 
 	local className = "PlayerInputTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accumulatedValueAtStart", s_Instance.accumulatedValueAtStart, "float")
	Something(className, s_guid, "enabledFromStart", s_Instance.enabledFromStart, "bool")
	Something(className, s_guid, "entryInputActions", s_Instance.entryInputActions, "EntryInputActionEnum")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "sendTriggerEvents", s_Instance.sendTriggerEvents, "bool")
	Something(className, s_guid, "trailingValueAtStart", s_Instance.trailingValueAtStart, "float")
	Something(className, s_guid, "valueModifier", s_Instance.valueModifier, "float")
end

function Type:PlayerLookAtEntityData (p_class, p_guid)
	local s_Instance = PlayerLookAtEntityData(p_class) 
 	local className = "PlayerLookAtEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "targetTransform", s_Instance.targetTransform, "LinearTransform")
end

function Type:PlayerOrderTrackerData (p_class, p_guid)
	local s_Instance = PlayerOrderTrackerData(p_class) 
 	local className = "PlayerOrderTrackerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackIcon", s_Instance.attackIcon, "UIHudIcon")
	Something(className, s_guid, "defendIcon", s_Instance.defendIcon, "UIHudIcon")
	Something(className, s_guid, "moveToIcon", s_Instance.moveToIcon, "UIHudIcon")
end

function Type:PlayerScore (p_class, p_guid)
	local s_Instance = PlayerScore(p_class) 
 	local className = "PlayerScore"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deaths", s_Instance.deaths, "uint")
	Something(className, s_guid, "globalScoreOriginal", s_Instance.globalScoreOriginal, "int")
	Something(className, s_guid, "globalScoreUpdated", s_Instance.globalScoreUpdated, "int")
	Something(className, s_guid, "gunMasterLevel", s_Instance.gunMasterLevel, "uint")
	Something(className, s_guid, "kills", s_Instance.kills, "uint")
	Something(className, s_guid, "rank", s_Instance.rank, "int")
	Something(className, s_guid, "score", s_Instance.score, "int")
	Something(className, s_guid, "scoreMultiplier", s_Instance.scoreMultiplier, "uint")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:PlayerState (p_class, p_guid)
	local s_Instance = PlayerState(p_class) 
 	local className = "PlayerState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "onlineId", s_Instance.onlineId, "ulong")
end

function Type:PlayerTakeOverTriggerEntityData (p_class, p_guid)
	local s_Instance = PlayerTakeOverTriggerEntityData(p_class) 
 	local className = "PlayerTakeOverTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "timeToLoseControl", s_Instance.timeToLoseControl, "float")
end

function Type:PlayerTypeProfile (p_class, p_guid)
	local s_Instance = PlayerTypeProfile(p_class) 
 	local className = "PlayerTypeProfile"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "awards", s_Instance.awards, "CtrRef")
	Something(className, s_guid, "dogTags", s_Instance.dogTags, "CtrRef")
	Something(className, s_guid, "eloParams", s_Instance.eloParams, "EloParameters")
	Something(className, s_guid, "orderedUnlockNames", s_Instance.orderedUnlockNames, "List<string)>")
	Something(className, s_guid, "rankParams", s_Instance.rankParams, "CtrRef")
	Something(className, s_guid, "scoring", s_Instance.scoring, "CtrRef")
	Something(className, s_guid, "spamSettings", s_Instance.spamSettings, "CtrRef")
	Something(className, s_guid, "staticUnlocks", s_Instance.staticUnlocks, "CtrRef")
	Something(className, s_guid, "values", s_Instance.values, "CtrRef")
end

function Type:PlayerViewData (p_class, p_guid)
	local s_Instance = PlayerViewData(p_class) 
 	local className = "PlayerViewData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "subViews", s_Instance.subViews, "List<CtrRef)>")
end

function Type:PlayFromHereAsset (p_class, p_guid)
	local s_Instance = PlayFromHereAsset(p_class) 
 	local className = "PlayFromHereAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatedSkeletonDatabase", s_Instance.animatedSkeletonDatabase, "CtrRef")
	Something(className, s_guid, "antProject", s_Instance.antProject, "CtrRef")
	Something(className, s_guid, "soldier", s_Instance.soldier, "CtrRef")
end

function Type:PlayVideoEntityData (p_class, p_guid)
	local s_Instance = PlayVideoEntityData(p_class) 
 	local className = "PlayVideoEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowSkip", s_Instance.allowSkip, "bool")
	Something(className, s_guid, "keepBlackScreen", s_Instance.keepBlackScreen, "bool")
	Something(className, s_guid, "movie", s_Instance.movie, "CtrRef")
end

function Type:PointEnvelope (p_class, p_guid)
	local s_Instance = PointEnvelope(p_class) 
 	local className = "PointEnvelope"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "points", s_Instance.points, "List<PointEnvelopePoint)>")
end

function Type:PointEnvelopePoint (p_class, p_guid)
	local s_Instance = PointEnvelopePoint(p_class) 
 	local className = "PointEnvelopePoint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "x", s_Instance.x, "float")
	Something(className, s_guid, "y", s_Instance.y, "float")
end

function Type:PointLightEntityData (p_class, p_guid)
	local s_Instance = PointLightEntityData(p_class) 
 	local className = "PointLightEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "translucencyAmbient", s_Instance.translucencyAmbient, "float")
	Something(className, s_guid, "translucencyDistortion", s_Instance.translucencyDistortion, "float")
	Something(className, s_guid, "translucencyPower", s_Instance.translucencyPower, "uint")
	Something(className, s_guid, "translucencyScale", s_Instance.translucencyScale, "float")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:PointSystemParamsAsset (p_class, p_guid)
	local s_Instance = PointSystemParamsAsset(p_class) 
 	local className = "PointSystemParamsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dnfTimeout", s_Instance.dnfTimeout, "float")
	Something(className, s_guid, "freefallHeight", s_Instance.freefallHeight, "float")
	Something(className, s_guid, "killStreakX", s_Instance.killStreakX, "uint")
	Something(className, s_guid, "multiKillTimeLimit", s_Instance.multiKillTimeLimit, "float")
	Something(className, s_guid, "nemesisKillX", s_Instance.nemesisKillX, "uint")
end

function Type:PoissonRadialBlurData (p_class, p_guid)
	local s_Instance = PoissonRadialBlurData(p_class) 
 	local className = "PoissonRadialBlurData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blendFactor", s_Instance.blendFactor, "float")
	Something(className, s_guid, "poissonDiscScale", s_Instance.poissonDiscScale, "Vec2")
	Something(className, s_guid, "radialExponent", s_Instance.radialExponent, "float")
	Something(className, s_guid, "radialScale", s_Instance.radialScale, "float")
end

function Type:PolynomialColorInterpData (p_class, p_guid)
	local s_Instance = PolynomialColorInterpData(p_class) 
 	local className = "PolynomialColorInterpData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coefficients", s_Instance.coefficients, "Vec4")
	Something(className, s_guid, "color0", s_Instance.color0, "Vec3")
	Something(className, s_guid, "color1", s_Instance.color1, "Vec3")
end

function Type:PolynomialData (p_class, p_guid)
	local s_Instance = PolynomialData(p_class) 
 	local className = "PolynomialData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coefficients", s_Instance.coefficients, "Vec4")
	Something(className, s_guid, "maxClamp", s_Instance.maxClamp, "float")
	Something(className, s_guid, "minClamp", s_Instance.minClamp, "float")
	Something(className, s_guid, "scaleValue", s_Instance.scaleValue, "float")
end

function Type:PolynomialOperatorData (p_class, p_guid)
	local s_Instance = PolynomialOperatorData(p_class) 
 	local className = "PolynomialOperatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "firstOperand", s_Instance.firstOperand, "PolynomialTempData")
	Something(className, s_guid, "maxClampResult", s_Instance.maxClampResult, "float")
	Something(className, s_guid, "minClampResult", s_Instance.minClampResult, "float")
	Something(className, s_guid, "operation", s_Instance.operation, "PolynomialOperation")
	Something(className, s_guid, "secondOperand", s_Instance.secondOperand, "PolynomialTempData")
end

function Type:PolynomialTempData (p_class, p_guid)
	local s_Instance = PolynomialTempData(p_class) 
 	local className = "PolynomialTempData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coefficients", s_Instance.coefficients, "Vec4")
	Something(className, s_guid, "maxClamp", s_Instance.maxClamp, "float")
	Something(className, s_guid, "minClamp", s_Instance.minClamp, "float")
	Something(className, s_guid, "scaleValue", s_Instance.scaleValue, "float")
end

function Type:PoseConstraintsData (p_class, p_guid)
	local s_Instance = PoseConstraintsData(p_class) 
 	local className = "PoseConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchPose", s_Instance.crouchPose, "bool")
	Something(className, s_guid, "pronePose", s_Instance.pronePose, "bool")
	Something(className, s_guid, "standPose", s_Instance.standPose, "bool")
end

function Type:PoseTransitionTime (p_class, p_guid)
	local s_Instance = PoseTransitionTime(p_class) 
 	local className = "PoseTransitionTime"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "toPose", s_Instance.toPose, "CharacterPoseType")
	Something(className, s_guid, "transitionTime", s_Instance.transitionTime, "float")
end

function Type:PositionEvaluationConstantData (p_class, p_guid)
	local s_Instance = PositionEvaluationConstantData(p_class) 
 	local className = "PositionEvaluationConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "leaderRandomPositionsRadius", s_Instance.leaderRandomPositionsRadius, "float")
	Something(className, s_guid, "ownRandomPositionsRadius", s_Instance.ownRandomPositionsRadius, "float")
end

function Type:PowerToolWeaponData (p_class, p_guid)
	local s_Instance = PowerToolWeaponData(p_class) 
 	local className = "PowerToolWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageSound", s_Instance.damageSound, "CtrRef")
	Something(className, s_guid, "playFireEffectOnRepairOnly", s_Instance.playFireEffectOnRepairOnly, "bool")
	Something(className, s_guid, "repairCompletedSound", s_Instance.repairCompletedSound, "CtrRef")
	Something(className, s_guid, "repairMaterialPair", s_Instance.repairMaterialPair, "CtrRef")
	Something(className, s_guid, "repairSound", s_Instance.repairSound, "CtrRef")
end

function Type:PrecomputeCache (p_class, p_guid)
	local s_Instance = PrecomputeCache(p_class) 
 	local className = "PrecomputeCache"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cachedDataEnable", s_Instance.cachedDataEnable, "bool")
	Something(className, s_guid, "guid", s_Instance.guid, "GUID")
	Something(className, s_guid, "key", s_Instance.key, "string")
end

function Type:PredestructionEntityData (p_class, p_guid)
	local s_Instance = PredestructionEntityData(p_class) 
 	local className = "PredestructionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "radius", s_Instance.radius, "float")
end

function Type:PrefabBlueprint (p_class, p_guid)
	local s_Instance = PrefabBlueprint(p_class) 
 	local className = "PrefabBlueprint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "objects", s_Instance.objects, "List<CtrRef)>")
end

function Type:PreRoundEntityData (p_class, p_guid)
	local s_Instance = PreRoundEntityData(p_class) 
 	local className = "PreRoundEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "roundMaxPlayerCount", s_Instance.roundMaxPlayerCount, "int")
	Something(className, s_guid, "roundMinPlayerCount", s_Instance.roundMinPlayerCount, "int")
	Something(className, s_guid, "roundRestartCountdown", s_Instance.roundRestartCountdown, "uint")
end

function Type:PresenceBackendData (p_class, p_guid)
	local s_Instance = PresenceBackendData(p_class) 
 	local className = "PresenceBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "requests", s_Instance.requests, "List<PresenceRequest)>")
	Something(className, s_guid, "presenceBackendData", s_Instance.presenceBackendData,  "readonly")
	Something(className, s_guid, "presenceRequest", s_Instance.presenceRequest,  "uint")
end

function Type:PresenceGameConfigurationServiceData (p_class, p_guid)
	local s_Instance = PresenceGameConfigurationServiceData(p_class) 
 	local className = "PresenceGameConfigurationServiceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "configUrl", s_Instance.configUrl, "OnlineEnvironmentConsoleUrl")
end

function Type:PresenceServerBrowserServiceData (p_class, p_guid)
	local s_Instance = PresenceServerBrowserServiceData(p_class) 
 	local className = "PresenceServerBrowserServiceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "filterCriterias", s_Instance.filterCriterias, "MatchmakingCriteria")
	Something(className, s_guid, "listCapacity", s_Instance.listCapacity, "uint")
end

function Type:PresetTypeConfig (p_class, p_guid)
	local s_Instance = PresetTypeConfig(p_class) 
 	local className = "PresetTypeConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "descSid", s_Instance.descSid, "string")
	Something(className, s_guid, "key", s_Instance.key, "string")
	Something(className, s_guid, "lockedSettings", s_Instance.lockedSettings, "List<LockedSettingConfig)>")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "predefined", s_Instance.predefined, "bool")
	Something(className, s_guid, "presetId", s_Instance.presetId, "int")
end

function Type:PrintDebugTextEntityData (p_class, p_guid)
	local s_Instance = PrintDebugTextEntityData(p_class) 
 	local className = "PrintDebugTextEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "text", s_Instance.text, "string")
	Something(className, s_guid, "textColor", s_Instance.textColor, "Vec3")
end

function Type:ProceduralAwarenessAntRefs (p_class, p_guid)
	local s_Instance = ProceduralAwarenessAntRefs(p_class) 
 	local className = "ProceduralAwarenessAntRefs"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "proceduralAwarenessActive", s_Instance.proceduralAwarenessActive, "AntRef")
	Something(className, s_guid, "proceduralAwarenessData", s_Instance.proceduralAwarenessData, "AntRef")
	Something(className, s_guid, "proceduralAwarenessHumanIKActive", s_Instance.proceduralAwarenessHumanIKActive, "AntRef")
end

function Type:ProcessorData (p_class, p_guid)
	local s_Instance = ProcessorData(p_class) 
 	local className = "ProcessorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValues", s_Instance.defaultValues, "Vec4")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "evaluatorInput", s_Instance.evaluatorInput, "EmittableField")
	Something(className, s_guid, "nextProcessor", s_Instance.nextProcessor, "CtrRef")
	Something(className, s_guid, "pre", s_Instance.pre, "CtrRef")
end

function Type:ProfileEntityData (p_class, p_guid)
	local s_Instance = ProfileEntityData(p_class) 
 	local className = "ProfileEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "profileName", s_Instance.profileName, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ProfileOptionData (p_class, p_guid)
	local s_Instance = ProfileOptionData(p_class) 
 	local className = "ProfileOptionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "ProfileOptionsType")
	Something(className, s_guid, "uniqueId", s_Instance.uniqueId, "string")
end

function Type:ProfileOptionDataBinary (p_class, p_guid)
	local s_Instance = ProfileOptionDataBinary(p_class) 
 	local className = "ProfileOptionDataBinary"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxLength", s_Instance.maxLength, "int")
end

function Type:ProfileOptionDataBool (p_class, p_guid)
	local s_Instance = ProfileOptionDataBool(p_class) 
 	local className = "ProfileOptionDataBool"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "bool")
end

function Type:ProfileOptionDataEnum (p_class, p_guid)
	local s_Instance = ProfileOptionDataEnum(p_class) 
 	local className = "ProfileOptionDataEnum"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "items", s_Instance.items, "List<ProfileOptionDataEnumItem)>")
end

function Type:ProfileOptionDataEnumItem (p_class, p_guid)
	local s_Instance = ProfileOptionDataEnumItem(p_class) 
 	local className = "ProfileOptionDataEnumItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "default", s_Instance.default, "bool")
	Something(className, s_guid, "displayName", s_Instance.displayName, "string")
end

function Type:ProfileOptionDataFloat (p_class, p_guid)
	local s_Instance = ProfileOptionDataFloat(p_class) 
 	local className = "ProfileOptionDataFloat"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "step", s_Instance.step, "float")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:ProfileOptionDataInt (p_class, p_guid)
	local s_Instance = ProfileOptionDataInt(p_class) 
 	local className = "ProfileOptionDataInt"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "int")
	Something(className, s_guid, "min", s_Instance.min, "int")
	Something(className, s_guid, "step", s_Instance.step, "int")
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:ProfileOptionDataString (p_class, p_guid)
	local s_Instance = ProfileOptionDataString(p_class) 
 	local className = "ProfileOptionDataString"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxLength", s_Instance.maxLength, "int")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:ProfileOptionsAsset (p_class, p_guid)
	local s_Instance = ProfileOptionsAsset(p_class) 
 	local className = "ProfileOptionsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoSaveOnQuit", s_Instance.autoSaveOnQuit, "bool")
	Something(className, s_guid, "contentName", s_Instance.contentName, "string")
	Something(className, s_guid, "fileName", s_Instance.fileName, "string")
	Something(className, s_guid, "fileSize", s_Instance.fileSize, "uint")
	Something(className, s_guid, "options", s_Instance.options, "List<CtrRef)>")
end

function Type:ProjectileEntityData (p_class, p_guid)
	local s_Instance = ProjectileEntityData(p_class) 
 	local className = "ProjectileEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammunitionType", s_Instance.ammunitionType, "string")
	Something(className, s_guid, "detonateOnTimeout", s_Instance.detonateOnTimeout, "bool")
	Something(className, s_guid, "explosion", s_Instance.explosion, "CtrRef")
	Something(className, s_guid, "hitReactionWeaponType", s_Instance.hitReactionWeaponType, "AntHitReactionWeaponType")
	Something(className, s_guid, "initialSpeed", s_Instance.initialSpeed, "float")
	Something(className, s_guid, "initMeshHideTime", s_Instance.initMeshHideTime, "float")
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "maxCount", s_Instance.maxCount, "uint")
	Something(className, s_guid, "serverProjectileDisabled", s_Instance.serverProjectileDisabled, "bool")
	Something(className, s_guid, "suppressionData", s_Instance.suppressionData, "CtrRef")
	Something(className, s_guid, "suppressOwnerVehicleDamage", s_Instance.suppressOwnerVehicleDamage, "bool")
	Something(className, s_guid, "timeToLive", s_Instance.timeToLive, "float")
	Something(className, s_guid, "visualConvergeDistance", s_Instance.visualConvergeDistance, "float")
end

function Type:PropellerEngineConfigData (p_class, p_guid)
	local s_Instance = PropellerEngineConfigData(p_class) 
 	local className = "PropellerEngineConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackAngleMod", s_Instance.attackAngleMod, "float")
	Something(className, s_guid, "bankingLimit", s_Instance.bankingLimit, "float")
	Something(className, s_guid, "bankingStrength", s_Instance.bankingStrength, "float")
	Something(className, s_guid, "collectiveBrakeInputScale", s_Instance.collectiveBrakeInputScale, "float")
	Something(className, s_guid, "collectiveInputIdle", s_Instance.collectiveInputIdle, "float")
	Something(className, s_guid, "collectiveThrottleInputScale", s_Instance.collectiveThrottleInputScale, "float")
	Something(className, s_guid, "cyclicInputScalePitch", s_Instance.cyclicInputScalePitch, "float")
	Something(className, s_guid, "cyclicInputScaleRoll", s_Instance.cyclicInputScaleRoll, "float")
	Something(className, s_guid, "cyclicPitchLiftMod", s_Instance.cyclicPitchLiftMod, "float")
	Something(className, s_guid, "cyclicPitchStrafeBrakeMod", s_Instance.cyclicPitchStrafeBrakeMod, "float")
	Something(className, s_guid, "cyclicPitchStrafeMod", s_Instance.cyclicPitchStrafeMod, "float")
	Something(className, s_guid, "cyclicRollLiftMod", s_Instance.cyclicRollLiftMod, "float")
	Something(className, s_guid, "cyclicRollStrafeMod", s_Instance.cyclicRollStrafeMod, "float")
	Something(className, s_guid, "defaultAngleOfAttack", s_Instance.defaultAngleOfAttack, "float")
	Something(className, s_guid, "directionVectorIndex", s_Instance.directionVectorIndex, "uint")
	Something(className, s_guid, "enableNewHelicopter", s_Instance.enableNewHelicopter, "bool")
	Something(className, s_guid, "forceMagnitudeInputType", s_Instance.forceMagnitudeInputType, "fb.ForceMagnitudeInputType)")
	Something(className, s_guid, "forceMagnitudeMultiplier", s_Instance.forceMagnitudeMultiplier, "float")
	Something(className, s_guid, "gravityMod", s_Instance.gravityMod, "float")
	Something(className, s_guid, "horisontalForceOffset", s_Instance.horisontalForceOffset, "Vec3")
	Something(className, s_guid, "horisontalMinEffectMod", s_Instance.horisontalMinEffectMod, "float")
	Something(className, s_guid, "horisontalMinEffectVelocity", s_Instance.horisontalMinEffectVelocity, "float")
	Something(className, s_guid, "liftForceDampingConstant", s_Instance.liftForceDampingConstant, "float")
	Something(className, s_guid, "liftForceSpringConstant", s_Instance.liftForceSpringConstant, "float")
	Something(className, s_guid, "pitchFromVel", s_Instance.pitchFromVel, "float")
	Something(className, s_guid, "pitchLimit", s_Instance.pitchLimit, "float")
	Something(className, s_guid, "pitchStrength", s_Instance.pitchStrength, "float")
	Something(className, s_guid, "pitchUpWhenBankLimit", s_Instance.pitchUpWhenBankLimit, "float")
	Something(className, s_guid, "pitchUpWhenBankStrength", s_Instance.pitchUpWhenBankStrength, "float")
	Something(className, s_guid, "propellerType", s_Instance.propellerType, "fb.PropellerType)")
	Something(className, s_guid, "rollStrength", s_Instance.rollStrength, "float")
	Something(className, s_guid, "rotorConfig", s_Instance.rotorConfig, "CtrRef")
	Something(className, s_guid, "sPAllowed", s_Instance.sPAllowed, "bool")
	Something(className, s_guid, "sPDefault", s_Instance.sPDefault, "bool")
	Something(className, s_guid, "sPForwardStrength", s_Instance.sPForwardStrength, "float")
	Something(className, s_guid, "sPSidewaysStrength", s_Instance.sPSidewaysStrength, "float")
	Something(className, s_guid, "sPVerticalStrength", s_Instance.sPVerticalStrength, "float")
	Something(className, s_guid, "stabilizerMod", s_Instance.stabilizerMod, "float")
	Something(className, s_guid, "velocityFromPitch", s_Instance.velocityFromPitch, "float")
end

function Type:PropertyCastEntityData (p_class, p_guid)
	local s_Instance = PropertyCastEntityData(p_class) 
 	local className = "PropertyCastEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolValue", s_Instance.boolValue, "bool")
	Something(className, s_guid, "floatValue", s_Instance.floatValue, "float")
	Something(className, s_guid, "intValue", s_Instance.intValue, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:PropertyConnection (p_class, p_guid)
	local s_Instance = PropertyConnection(p_class) 
 	local className = "PropertyConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "sourceFieldId", s_Instance.sourceFieldId, "int")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
	Something(className, s_guid, "targetFieldId", s_Instance.targetFieldId, "int")
end

function Type:PropertyDebugEntityData (p_class, p_guid)
	local s_Instance = PropertyDebugEntityData(p_class) 
 	local className = "PropertyDebugEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolValue", s_Instance.boolValue, "bool")
	Something(className, s_guid, "defaultVisible", s_Instance.defaultVisible, "bool")
	Something(className, s_guid, "floatValue", s_Instance.floatValue, "float")
	Something(className, s_guid, "intValue", s_Instance.intValue, "int")
	Something(className, s_guid, "multiline", s_Instance.multiline, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "screenPosition", s_Instance.screenPosition, "Vec2")
	Something(className, s_guid, "stringValue", s_Instance.stringValue, "string")
	Something(className, s_guid, "textColor", s_Instance.textColor, "Vec3")
	Something(className, s_guid, "textScale", s_Instance.textScale, "float")
	Something(className, s_guid, "transformValue", s_Instance.transformValue, "LinearTransform")
	Something(className, s_guid, "valuePrefix", s_Instance.valuePrefix, "string")
	Something(className, s_guid, "vec2Value", s_Instance.vec2Value, "Vec2")
	Something(className, s_guid, "vec3Value", s_Instance.vec3Value, "Vec3")
end

function Type:PropertyGateEntityData (p_class, p_guid)
	local s_Instance = PropertyGateEntityData(p_class) 
 	local className = "PropertyGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolIn", s_Instance.boolIn, "bool")
	Something(className, s_guid, "default", s_Instance.default, "bool")
	Something(className, s_guid, "floatIn", s_Instance.floatIn, "float")
	Something(className, s_guid, "intIn", s_Instance.intIn, "int")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "transformIn", s_Instance.transformIn, "LinearTransform")
	Something(className, s_guid, "vec3In", s_Instance.vec3In, "Vec3")
	Something(className, s_guid, "vec4In", s_Instance.vec4In, "Vec4")
end

function Type:PropertyRecordingData (p_class, p_guid)
	local s_Instance = PropertyRecordingData(p_class) 
 	local className = "PropertyRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "int")
end

function Type:PropertyTrackData (p_class, p_guid)
	local s_Instance = PropertyTrackData(p_class) 
 	local className = "PropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "int")
	Something(className, s_guid, "times", s_Instance.times, "List<int)>")
end

function Type:ProximityData (p_class, p_guid)
	local s_Instance = ProximityData(p_class) 
 	local className = "ProximityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "proximityType", s_Instance.proximityType, "ProximityObjectType")
end

function Type:Ps3AgeLevels (p_class, p_guid)
	local s_Instance = Ps3AgeLevels(p_class) 
 	local className = "Ps3AgeLevels"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ageLevel10", s_Instance.ageLevel10, "int")
	Something(className, s_guid, "ageLevel7", s_Instance.ageLevel7, "int")
	Something(className, s_guid, "ageLevel8", s_Instance.ageLevel8, "int")
	Something(className, s_guid, "ageLevel9", s_Instance.ageLevel9, "int")
end

function Type:Ps3ParentalLockAgeSettings (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettings(p_class) 
 	local className = "Ps3ParentalLockAgeSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ageLevels", s_Instance.ageLevels, "Ps3AgeLevels")
	Something(className, s_guid, "countryOverrides", s_Instance.countryOverrides, "CtrRef")
	Something(className, s_guid, "region", s_Instance.region, "string")
end

function Type:Ps3ParentalLockAgeSettingsForCountry (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettingsForCountry(p_class) 
 	local className = "Ps3ParentalLockAgeSettingsForCountry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ageLevels", s_Instance.ageLevels, "Ps3AgeLevels")
	Something(className, s_guid, "countryCode", s_Instance.countryCode, "string")
end

function Type:Ps3ParentalLockAgeSettingsOverrides (p_class, p_guid)
	local s_Instance = Ps3ParentalLockAgeSettingsOverrides(p_class) 
 	local className = "Ps3ParentalLockAgeSettingsOverrides"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "overrides", s_Instance.overrides, "List<Ps3ParentalLockAgeSettingsForCountry)>")
end

function Type:Ps3PresenceBackendData (p_class, p_guid)
	local s_Instance = Ps3PresenceBackendData(p_class) 
 	local className = "Ps3PresenceBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "communicationId", s_Instance.communicationId, "string")
	Something(className, s_guid, "communicationSignature", s_Instance.communicationSignature, "string")
	Something(className, s_guid, "parentalLockAgeSettings", s_Instance.parentalLockAgeSettings, "List<Ps3ParentalLockAgeSettings)>")
	Something(className, s_guid, "skuSettings", s_Instance.skuSettings, "List<Ps3SkuSettings)>")
end

function Type:Ps3SkuSettings (p_class, p_guid)
	local s_Instance = Ps3SkuSettings(p_class) 
 	local className = "Ps3SkuSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "grantsOnlinePass", s_Instance.grantsOnlinePass, "bool")
	Something(className, s_guid, "spId", s_Instance.spId, "string")
	Something(className, s_guid, "titleId", s_Instance.titleId, "string")
end

function Type:PS3StoreImageHD1080 (p_class, p_guid)
	local s_Instance = PS3StoreImageHD1080(p_class) 
 	local className = "PS3StoreImageHD1080"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "imagePath", s_Instance.imagePath, "string")
end

function Type:PS3StoreImageSD (p_class, p_guid)
	local s_Instance = PS3StoreImageSD(p_class) 
 	local className = "PS3StoreImageSD"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "imagePath", s_Instance.imagePath, "string")
end

function Type:QueryGetNode (p_class, p_guid)
	local s_Instance = QueryGetNode(p_class) 
 	local className = "QueryGetNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:RadarSweepComponentData (p_class, p_guid)
	local s_Instance = RadarSweepComponentData(p_class) 
 	local className = "RadarSweepComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "controllableSpeedThreshold", s_Instance.controllableSpeedThreshold, "float")
	Something(className, s_guid, "controllableSweepInterval", s_Instance.controllableSweepInterval, "float")
	Something(className, s_guid, "controllableSweepRadius", s_Instance.controllableSweepRadius, "float")
	Something(className, s_guid, "mineSweepInterval", s_Instance.mineSweepInterval, "float")
	Something(className, s_guid, "mineSweepRadius", s_Instance.mineSweepRadius, "float")
	Something(className, s_guid, "sweepForControllables", s_Instance.sweepForControllables, "bool")
	Something(className, s_guid, "sweepForMines", s_Instance.sweepForMines, "bool")
end

function Type:RadioAltitudeData (p_class, p_guid)
	local s_Instance = RadioAltitudeData(p_class) 
 	local className = "RadioAltitudeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "collisionMethod", s_Instance.collisionMethod, "CollisionMethodEnum")
	Something(className, s_guid, "range", s_Instance.range, "float")
	Something(className, s_guid, "updateFrequency", s_Instance.updateFrequency, "float")
end

function Type:RadioComponentData (p_class, p_guid)
	local s_Instance = RadioComponentData(p_class) 
 	local className = "RadioComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "soundEffect", s_Instance.soundEffect, "CtrRef")
end

function Type:RadiosityMaterial (p_class, p_guid)
	local s_Instance = RadiosityMaterial(p_class) 
 	local className = "RadiosityMaterial"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "Vec3")
	Something(className, s_guid, "emissive", s_Instance.emissive, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:RagdollAsset (p_class, p_guid)
	local s_Instance = RagdollAsset(p_class) 
 	local className = "RagdollAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "materialPair", s_Instance.materialPair, "CtrRef")
	Something(className, s_guid, "useServerRagdoll", s_Instance.useServerRagdoll, "bool")
end

function Type:RagdollBinding (p_class, p_guid)
	local s_Instance = RagdollBinding(p_class) 
 	local className = "RagdollBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ragdollActiveTime", s_Instance.ragdollActiveTime, "AntRef")
	Something(className, s_guid, "ragdollBlend", s_Instance.ragdollBlend, "AntRef")
	Something(className, s_guid, "ragdollForceBlendDisabled", s_Instance.ragdollForceBlendDisabled, "AntRef")
	Something(className, s_guid, "ragdollFullyBlendedIn", s_Instance.ragdollFullyBlendedIn, "AntRef")
	Something(className, s_guid, "ragdollOnBack", s_Instance.ragdollOnBack, "AntRef")
end

function Type:RagdollComponentData (p_class, p_guid)
	local s_Instance = RagdollComponentData(p_class) 
 	local className = "RagdollComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "RagdollBinding")
	Something(className, s_guid, "leftLegBoneName", s_Instance.leftLegBoneName, "string")
	Something(className, s_guid, "ragdollAsset", s_Instance.ragdollAsset, "CtrRef")
	Something(className, s_guid, "rightLegBoneName", s_Instance.rightLegBoneName, "string")
	Something(className, s_guid, "skeletonAsset", s_Instance.skeletonAsset, "CtrRef")
	Something(className, s_guid, "skeletonCollisionData", s_Instance.skeletonCollisionData, "CtrRef")
end

function Type:RandomDelayEntityData (p_class, p_guid)
	local s_Instance = RandomDelayEntityData(p_class) 
 	local className = "RandomDelayEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "maxDelay", s_Instance.maxDelay, "float")
	Something(className, s_guid, "minDelay", s_Instance.minDelay, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
end

function Type:RandomEvaluatorData (p_class, p_guid)
	local s_Instance = RandomEvaluatorData(p_class) 
 	local className = "RandomEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
end

function Type:RandomEventEntityData (p_class, p_guid)
	local s_Instance = RandomEventEntityData(p_class) 
 	local className = "RandomEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "probability", s_Instance.probability, "int")
	Something(className, s_guid, "randomizeFirstOnly", s_Instance.randomizeFirstOnly, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:RandomFloatEntityData (p_class, p_guid)
	local s_Instance = RandomFloatEntityData(p_class) 
 	local className = "RandomFloatEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "float")
	Something(className, s_guid, "min", s_Instance.min, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:RandomMultiEventEntityData (p_class, p_guid)
	local s_Instance = RandomMultiEventEntityData(p_class) 
 	local className = "RandomMultiEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "disableOutputOnTrigger", s_Instance.disableOutputOnTrigger, "bool")
	Something(className, s_guid, "randomEventWeight", s_Instance.randomEventWeight, "List<float)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "resetOutputsWhenAllHasTriggered", s_Instance.resetOutputsWhenAllHasTriggered, "bool")
	Something(className, s_guid, "uniformDistribution", s_Instance.uniformDistribution, "bool")
end

function Type:RandomWalkOrderEntityData (p_class, p_guid)
	local s_Instance = RandomWalkOrderEntityData(p_class) 
 	local className = "RandomWalkOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "combatForbidden", s_Instance.combatForbidden, "bool")
end

function Type:RandomXYZEvaluatorData (p_class, p_guid)
	local s_Instance = RandomXYZEvaluatorData(p_class) 
 	local className = "RandomXYZEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxX", s_Instance.maxX, "float")
	Something(className, s_guid, "maxY", s_Instance.maxY, "float")
	Something(className, s_guid, "maxZ", s_Instance.maxZ, "float")
	Something(className, s_guid, "minX", s_Instance.minX, "float")
	Something(className, s_guid, "minY", s_Instance.minY, "float")
	Something(className, s_guid, "minZ", s_Instance.minZ, "float")
end

function Type:RankLevelData (p_class, p_guid)
	local s_Instance = RankLevelData(p_class) 
 	local className = "RankLevelData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "iconName", s_Instance.iconName, "string")
	Something(className, s_guid, "imageName", s_Instance.imageName, "string")
	Something(className, s_guid, "pointsNeeded", s_Instance.pointsNeeded, "uint")
	Something(className, s_guid, "rankName", s_Instance.rankName, "string")
	Something(className, s_guid, "rankNumber", s_Instance.rankNumber, "int")
	Something(className, s_guid, "soundName", s_Instance.soundName, "string")
	Something(className, s_guid, "unlockInfos", s_Instance.unlockInfos, "List<BasicUnlockInfo)>")
end

function Type:RankParamsAsset (p_class, p_guid)
	local s_Instance = RankParamsAsset(p_class) 
 	local className = "RankParamsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ranks", s_Instance.ranks, "List<CtrRef)>")
end

function Type:RawFileDataAsset (p_class, p_guid)
	local s_Instance = RawFileDataAsset(p_class) 
 	local className = "RawFileDataAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rawData", s_Instance.rawData, "List<byte)>")
	Something(className, s_guid, "size", s_Instance.size, "uint")
end

function Type:RawFileImportActionParams (p_class, p_guid)
	local s_Instance = RawFileImportActionParams(p_class) 
 	local className = "RawFileImportActionParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sourceFile", s_Instance.sourceFile, "string")
end

function Type:ReadinessLevelCharacteristics (p_class, p_guid)
	local s_Instance = ReadinessLevelCharacteristics(p_class) 
 	local className = "ReadinessLevelCharacteristics"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxReactionTime", s_Instance.maxReactionTime, "float")
	Something(className, s_guid, "minReactionTime", s_Instance.minReactionTime, "float")
	Something(className, s_guid, "reductionTime", s_Instance.reductionTime, "float")
end

function Type:ReadinessLevels (p_class, p_guid)
	local s_Instance = ReadinessLevels(p_class) 
 	local className = "ReadinessLevels"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "combat", s_Instance.combat, "ReadinessLevelCharacteristics")
	Something(className, s_guid, "patrol", s_Instance.patrol, "ReadinessLevelCharacteristics")
	Something(className, s_guid, "ready", s_Instance.ready, "ReadinessLevelCharacteristics")
end

function Type:ReceivedAwardSurveyEvent (p_class, p_guid)
	local s_Instance = ReceivedAwardSurveyEvent(p_class) 
 	local className = "ReceivedAwardSurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "awardName", s_Instance.awardName, "string")
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
end

function Type:ReceiveEntry (p_class, p_guid)
	local s_Instance = ReceiveEntry(p_class) 
 	local className = "ReceiveEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "parameter", s_Instance.parameter, "float")
	Something(className, s_guid, "savedValue", s_Instance.savedValue, "float")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:ReceiveNodeData (p_class, p_guid)
	local s_Instance = ReceiveNodeData(p_class) 
 	local className = "ReceiveNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:RecoilData (p_class, p_guid)
	local s_Instance = RecoilData(p_class) 
 	local className = "RecoilData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxRecoilAngleX", s_Instance.maxRecoilAngleX, "float")
	Something(className, s_guid, "maxRecoilAngleY", s_Instance.maxRecoilAngleY, "float")
	Something(className, s_guid, "maxRecoilAngleZ", s_Instance.maxRecoilAngleZ, "float")
	Something(className, s_guid, "maxRecoilFov", s_Instance.maxRecoilFov, "float")
	Something(className, s_guid, "minRecoilAngleX", s_Instance.minRecoilAngleX, "float")
	Something(className, s_guid, "minRecoilAngleY", s_Instance.minRecoilAngleY, "float")
	Something(className, s_guid, "minRecoilAngleZ", s_Instance.minRecoilAngleZ, "float")
	Something(className, s_guid, "minRecoilFov", s_Instance.minRecoilFov, "float")
	Something(className, s_guid, "recoilFollowsDispersion", s_Instance.recoilFollowsDispersion, "bool")
end

function Type:RecordedInputData (p_class, p_guid)
	local s_Instance = RecordedInputData(p_class) 
 	local className = "RecordedInputData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "trackData", s_Instance.trackData, "List<InputRecorderTrackData)>")
end

function Type:ReferenceObjectData (p_class, p_guid)
	local s_Instance = ReferenceObjectData(p_class) 
 	local className = "ReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blueprint", s_Instance.blueprint, "CtrRef")
	Something(className, s_guid, "blueprintTransform", s_Instance.blueprintTransform, "LinearTransform")
	Something(className, s_guid, "castSunShadowEnable", s_Instance.castSunShadowEnable, "bool")
	Something(className, s_guid, "excluded", s_Instance.excluded, "bool")
	Something(className, s_guid, "objectVariation", s_Instance.objectVariation, "CtrRef")
	Something(className, s_guid, "streamRealm", s_Instance.streamRealm, "fb.StreamRealm)")
end

function Type:RefreshNode (p_class, p_guid)
	local s_Instance = RefreshNode(p_class) 
 	local className = "RefreshNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "out", s_Instance.outValue, "CtrRef")
end

function Type:RegistryContainer (p_class, p_guid)
	local s_Instance = RegistryContainer(p_class) 
 	local className = "RegistryContainer"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assetRegistry", s_Instance.assetRegistry, "List<CtrRef)>")
	Something(className, s_guid, "blueprintRegistry", s_Instance.blueprintRegistry, "List<CtrRef)>")
	Something(className, s_guid, "entityRegistry", s_Instance.entityRegistry, "List<CtrRef)>")
	Something(className, s_guid, "referenceObjectRegistry", s_Instance.referenceObjectRegistry, "List<CtrRef)>")
end

function Type:RegularCameraViewData (p_class, p_guid)
	local s_Instance = RegularCameraViewData(p_class) 
 	local className = "RegularCameraViewData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowFieldOfViewScaling", s_Instance.allowFieldOfViewScaling, "bool")
	Something(className, s_guid, "fieldOfView", s_Instance.fieldOfView, "float")
	Something(className, s_guid, "fLIREnabled", s_Instance.fLIREnabled, "bool")
	Something(className, s_guid, "inputSuppression", s_Instance.inputSuppression, "InputSuppressionData")
	Something(className, s_guid, "lockMeshToRenderView", s_Instance.lockMeshToRenderView, "bool")
	Something(className, s_guid, "maskMeshBlueprint", s_Instance.maskMeshBlueprint, "CtrRef")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "meshOffset", s_Instance.meshOffset, "Vec3")
	Something(className, s_guid, "screenExposureAreaScale", s_Instance.screenExposureAreaScale, "float")
end

function Type:RegularSocketObjectData (p_class, p_guid)
	local s_Instance = RegularSocketObjectData(p_class) 
 	local className = "RegularSocketObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh3pTransforms", s_Instance.mesh3pTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:RenderVolumeEntityData (p_class, p_guid)
	local s_Instance = RenderVolumeEntityData(p_class) 
 	local className = "RenderVolumeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "shader", s_Instance.shader, "SurfaceShaderInstanceDataStruct")
	Something(className, s_guid, "transformType", s_Instance.transformType, "RenderVolumeTransformType")
	Something(className, s_guid, "userMasks", s_Instance.userMasks, "Vec4")
end

function Type:RepairToolWeaponData (p_class, p_guid)
	local s_Instance = RepairToolWeaponData(p_class) 
 	local className = "RepairToolWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rechargeSpeed", s_Instance.rechargeSpeed, "float")
end

function Type:ResourceManagerSettings (p_class, p_guid)
	local s_Instance = ResourceManagerSettings(p_class) 
 	local className = "ResourceManagerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bundleProfilingEnable", s_Instance.bundleProfilingEnable, "bool")
	Something(className, s_guid, "casBundleDecompressBufferCount", s_Instance.casBundleDecompressBufferCount, "int")
	Something(className, s_guid, "casBundleDecompressBufferSizeKb", s_Instance.casBundleDecompressBufferSizeKb, "int")
	Something(className, s_guid, "casBundleReadBufferSizeKb", s_Instance.casBundleReadBufferSizeKb, "int")
	Something(className, s_guid, "sPUDecompressEnable", s_Instance.sPUDecompressEnable, "bool")
end

function Type:RibbonData (p_class, p_guid)
	local s_Instance = RibbonData(p_class) 
 	local className = "RibbonData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ribbonPoints", s_Instance.ribbonPoints, "List<RibbonPointData)>")
end

function Type:RibbonPointData (p_class, p_guid)
	local s_Instance = RibbonPointData(p_class) 
 	local className = "RibbonPointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "left", s_Instance.left, "float")
	Something(className, s_guid, "right", s_Instance.right, "float")
	Something(className, s_guid, "userMaskLeft", s_Instance.userMaskLeft, "Vec4")
	Something(className, s_guid, "userMaskRight", s_Instance.userMaskRight, "Vec4")
end

function Type:RichPresenceContext (p_class, p_guid)
	local s_Instance = RichPresenceContext(p_class) 
 	local className = "RichPresenceContext"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "CtrRef")
	Something(className, s_guid, "index", s_Instance.index, "sbyte")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "values", s_Instance.values, "List<CtrRef)>")
end

function Type:RichPresenceContextSetting (p_class, p_guid)
	local s_Instance = RichPresenceContextSetting(p_class) 
 	local className = "RichPresenceContextSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "context", s_Instance.context, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:RichPresenceContextValue (p_class, p_guid)
	local s_Instance = RichPresenceContextValue(p_class) 
 	local className = "RichPresenceContextValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "sbyte")
	Something(className, s_guid, "sID", s_Instance.sID, "string")
end

function Type:RichPresenceContextValueWithKey (p_class, p_guid)
	local s_Instance = RichPresenceContextValueWithKey(p_class) 
 	local className = "RichPresenceContextValueWithKey"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "key", s_Instance.key, "string")
end

function Type:RichPresenceData (p_class, p_guid)
	local s_Instance = RichPresenceData(p_class) 
 	local className = "RichPresenceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "contexts", s_Instance.contexts, "List<CtrRef)>")
	Something(className, s_guid, "defaultMode", s_Instance.defaultMode, "CtrRef")
	Something(className, s_guid, "inactiveMode", s_Instance.inactiveMode, "CtrRef")
	Something(className, s_guid, "presenceModes", s_Instance.presenceModes, "List<CtrRef)>")
	Something(className, s_guid, "properties", s_Instance.properties, "List<RichPresenceProperty)>")
end

function Type:RichPresencePresenceString (p_class, p_guid)
	local s_Instance = RichPresencePresenceString(p_class) 
 	local className = "RichPresencePresenceString"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "sbyte")
	Something(className, s_guid, "interpolated", s_Instance.interpolated, "bool")
	Something(className, s_guid, "sID", s_Instance.sID, "string")
end

function Type:RichPresenceProperty (p_class, p_guid)
	local s_Instance = RichPresenceProperty(p_class) 
 	local className = "RichPresenceProperty"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "propertyType", s_Instance.propertyType, "RichPresencePropertyType")
end

function Type:RigidBodyConeConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyConeConstraintData(p_class) 
 	local className = "RigidBodyConeConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularFriction", s_Instance.angularFriction, "float")
	Something(className, s_guid, "hasLimits", s_Instance.hasLimits, "bool")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:RigidBodyConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyConstraintData(p_class) 
 	local className = "RigidBodyConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "breakThreshold", s_Instance.breakThreshold, "float")
	Something(className, s_guid, "isBreakable", s_Instance.isBreakable, "bool")
	Something(className, s_guid, "parentBody", s_Instance.parentBody, "CtrRef")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:RigidBodyData (p_class, p_guid)
	local s_Instance = RigidBodyData(p_class) 
 	local className = "RigidBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularVelocityDamping", s_Instance.angularVelocityDamping, "float")
	Something(className, s_guid, "collisionLayer", s_Instance.collisionLayer, "RigidBodyCollisionLayer")
	Something(className, s_guid, "constraints", s_Instance.constraints, "List<CtrRef)>")
	Something(className, s_guid, "floatPhysics", s_Instance.floatPhysics, "CtrRef")
	Something(className, s_guid, "friction", s_Instance.friction, "float")
	Something(className, s_guid, "inertiaModifier", s_Instance.inertiaModifier, "Vec3")
	Something(className, s_guid, "interactionToolkitCollisionVolumeId", s_Instance.interactionToolkitCollisionVolumeId, "uint")
	Something(className, s_guid, "linearVelocityDamping", s_Instance.linearVelocityDamping, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
	Something(className, s_guid, "motionType", s_Instance.motionType, "RigidBodyMotionType")
	Something(className, s_guid, "qualityType", s_Instance.qualityType, "RigidBodyQualityType")
	Something(className, s_guid, "restitution", s_Instance.restitution, "float")
	Something(className, s_guid, "rigidBodyType", s_Instance.rigidBodyType, "fb.RigidBodyType)")
end

function Type:RigidBodyHingeConstraintData (p_class, p_guid)
	local s_Instance = RigidBodyHingeConstraintData(p_class) 
 	local className = "RigidBodyHingeConstraintData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularFriction", s_Instance.angularFriction, "float")
	Something(className, s_guid, "hasLimits", s_Instance.hasLimits, "bool")
	Something(className, s_guid, "maxAngle", s_Instance.maxAngle, "float")
	Something(className, s_guid, "minAngle", s_Instance.minAngle, "float")
end

function Type:RigidMeshEntityData (p_class, p_guid)
	local s_Instance = RigidMeshEntityData(p_class) 
 	local className = "RigidMeshEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
end

function Type:RigidMeshSocketTransform (p_class, p_guid)
	local s_Instance = RigidMeshSocketTransform(p_class) 
 	local className = "RigidMeshSocketTransform"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "socketObject", s_Instance.socketObject, "CtrRef")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:RoadData (p_class, p_guid)
	local s_Instance = RoadData(p_class) 
 	local className = "RoadData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shader2d", s_Instance.shader2d, "CtrRef")
	Something(className, s_guid, "shader3dZOnly", s_Instance.shader3dZOnly, "CtrRef")
	Something(className, s_guid, "stickToTerrain", s_Instance.stickToTerrain, "bool")
	Something(className, s_guid, "uvTileFactor", s_Instance.uvTileFactor, "float")
end

function Type:RotateToHitData (p_class, p_guid)
	local s_Instance = RotateToHitData(p_class) 
 	local className = "RotateToHitData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rotationSpeedFactor", s_Instance.rotationSpeedFactor, "float")
end

function Type:RotateVectorData (p_class, p_guid)
	local s_Instance = RotateVectorData(p_class) 
 	local className = "RotateVectorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "inputAffectsPhi", s_Instance.inputAffectsPhi, "bool")
	Something(className, s_guid, "rotateWithinPlane", s_Instance.rotateWithinPlane, "bool")
end

function Type:RotationBodyData (p_class, p_guid)
	local s_Instance = RotationBodyData(p_class) 
 	local className = "RotationBodyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularConstraintMax", s_Instance.angularConstraintMax, "float")
	Something(className, s_guid, "angularConstraintMin", s_Instance.angularConstraintMin, "float")
	Something(className, s_guid, "angularMomentumDamping", s_Instance.angularMomentumDamping, "float")
	Something(className, s_guid, "angularMomentumDampingAcc", s_Instance.angularMomentumDampingAcc, "float")
	Something(className, s_guid, "angularMomentumDampingDeacc", s_Instance.angularMomentumDampingDeacc, "float")
	Something(className, s_guid, "angularMomentumMultiplier", s_Instance.angularMomentumMultiplier, "float")
	Something(className, s_guid, "angularMomentumThreshold", s_Instance.angularMomentumThreshold, "float")
	Something(className, s_guid, "extendedConstraints", s_Instance.extendedConstraints, "CtrRef")
	Something(className, s_guid, "rotationAxis", s_Instance.rotationAxis, "int")
	Something(className, s_guid, "useAngularConstraint", s_Instance.useAngularConstraint, "bool")
	Something(className, s_guid, "useAngularMomentumDamping", s_Instance.useAngularMomentumDamping, "bool")
	Something(className, s_guid, "useAngularMomentumThreshold", s_Instance.useAngularMomentumThreshold, "bool")
	Something(className, s_guid, "usePostSatisfyConstraints", s_Instance.usePostSatisfyConstraints, "bool")
end

function Type:RotorComponentData (p_class, p_guid)
	local s_Instance = RotorComponentData(p_class) 
 	local className = "RotorComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blowEffect", s_Instance.blowEffect, "CtrRef")
	Something(className, s_guid, "changeModelRpm", s_Instance.changeModelRpm, "float")
	Something(className, s_guid, "criticalDamage", s_Instance.criticalDamage, "bool")
	Something(className, s_guid, "criticallyDamagedRotationForce", s_Instance.criticallyDamagedRotationForce, "float")
	Something(className, s_guid, "groundEffectOnTerrainOnly", s_Instance.groundEffectOnTerrainOnly, "bool")
	Something(className, s_guid, "highRpmModel", s_Instance.highRpmModel, "RotorModelData")
	Something(className, s_guid, "lowRpmModel", s_Instance.lowRpmModel, "RotorModelData")
	Something(className, s_guid, "onlyTriggerBlowEffectInWater", s_Instance.onlyTriggerBlowEffectInWater, "bool")
	Something(className, s_guid, "rotationAxis", s_Instance.rotationAxis, "fb.RotationAxis)")
	Something(className, s_guid, "rotationMultiplier", s_Instance.rotationMultiplier, "float")
	Something(className, s_guid, "triggerGroundEffectHeight", s_Instance.triggerGroundEffectHeight, "float")
end

function Type:RotorModelData (p_class, p_guid)
	local s_Instance = RotorModelData(p_class) 
 	local className = "RotorModelData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "partIndex", s_Instance.partIndex, "uint")
	Something(className, s_guid, "rotationRpm", s_Instance.rotationRpm, "float")
end

function Type:RotorParameters (p_class, p_guid)
	local s_Instance = RotorParameters(p_class) 
 	local className = "RotorParameters"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalGravityModifier", s_Instance.additionalGravityModifier, "float")
	Something(className, s_guid, "angleOfAttack", s_Instance.angleOfAttack, "List<Vec2)>")
	Something(className, s_guid, "collectiveBrakeInputScale", s_Instance.collectiveBrakeInputScale, "float")
	Something(className, s_guid, "collectiveInputIdle", s_Instance.collectiveInputIdle, "float")
	Something(className, s_guid, "collectiveThrottleInputScale", s_Instance.collectiveThrottleInputScale, "float")
	Something(className, s_guid, "cyclicFadeOutOffset", s_Instance.cyclicFadeOutOffset, "float")
	Something(className, s_guid, "cyclicInputScalePitch", s_Instance.cyclicInputScalePitch, "float")
	Something(className, s_guid, "cyclicInputScaleRoll", s_Instance.cyclicInputScaleRoll, "float")
	Something(className, s_guid, "enableHorisontalMinEffect", s_Instance.enableHorisontalMinEffect, "bool")
	Something(className, s_guid, "horisontalMinEffectMod", s_Instance.horisontalMinEffectMod, "float")
	Something(className, s_guid, "horisontalMinEffectVelocity", s_Instance.horisontalMinEffectVelocity, "float")
	Something(className, s_guid, "horizontalForceModifier", s_Instance.horizontalForceModifier, "float")
	Something(className, s_guid, "reverseThrottle", s_Instance.reverseThrottle, "bool")
end

function Type:RoundEvent (p_class, p_guid)
	local s_Instance = RoundEvent(p_class) 
 	local className = "RoundEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "juiceSessionId", s_Instance.juiceSessionId, "int")
	Something(className, s_guid, "levelName", s_Instance.levelName, "string")
end

function Type:RoundOverEntityData (p_class, p_guid)
	local s_Instance = RoundOverEntityData(p_class) 
 	local className = "RoundOverEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
end

function Type:RoundOverEvent (p_class, p_guid)
	local s_Instance = RoundOverEvent(p_class) 
 	local className = "RoundOverEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ticketsLeft", s_Instance.ticketsLeft, "int")
	Something(className, s_guid, "winningTeam", s_Instance.winningTeam, "int")
end

function Type:RouteEntry (p_class, p_guid)
	local s_Instance = RouteEntry(p_class) 
 	local className = "RouteEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "output", s_Instance.output, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:RouteNodeData (p_class, p_guid)
	local s_Instance = RouteNodeData(p_class) 
 	local className = "RouteNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "routes", s_Instance.routes, "List<CtrRef)>")
end

function Type:RumbleFiringData (p_class, p_guid)
	local s_Instance = RumbleFiringData(p_class) 
 	local className = "RumbleFiringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "highRumble", s_Instance.highRumble, "float")
	Something(className, s_guid, "lowRumble", s_Instance.lowRumble, "float")
	Something(className, s_guid, "rumbleDuration", s_Instance.rumbleDuration, "float")
end

function Type:SamplerNodeData (p_class, p_guid)
	local s_Instance = SamplerNodeData(p_class) 
 	local className = "SamplerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amplitude", s_Instance.amplitude, "AudioGraphNodePort")
	Something(className, s_guid, "basePitch", s_Instance.basePitch, "float")
	Something(className, s_guid, "buffer", s_Instance.buffer, "AudioGraphNodePort")
	Something(className, s_guid, "buffered", s_Instance.buffered, "AudioGraphNodePort")
	Something(className, s_guid, "delay", s_Instance.delay, "AudioGraphNodePort")
	Something(className, s_guid, "enableStep", s_Instance.enableStep, "AudioGraphNodePort")
	Something(className, s_guid, "externalWave", s_Instance.externalWave, "AudioGraphNodePort")
	Something(className, s_guid, "finished", s_Instance.finished, "AudioGraphNodePort")
	Something(className, s_guid, "loop", s_Instance.loop, "LoopType")
	Something(className, s_guid, "offset", s_Instance.offset, "AudioGraphNodePort")
	Something(className, s_guid, "output", s_Instance.output, "AudioGraphNodePort")
	Something(className, s_guid, "pitch", s_Instance.pitch, "AudioGraphNodePort")
	Something(className, s_guid, "plugins", s_Instance.plugins, "List<SamplerPlugins)>")
	Something(className, s_guid, "position", s_Instance.position, "AudioGraphNodePort")
	Something(className, s_guid, "release", s_Instance.release, "AudioGraphNodePort")
	Something(className, s_guid, "shuffleSegments", s_Instance.shuffleSegments, "bool")
	Something(className, s_guid, "step", s_Instance.step, "AudioGraphNodePort")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "variation", s_Instance.variation, "AudioGraphNodePort")
	Something(className, s_guid, "wave", s_Instance.wave, "CtrRef")
end

function Type:SamplerPlugins (p_class, p_guid)
	local s_Instance = SamplerPlugins(p_class) 
 	local className = "SamplerPlugins"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gain", s_Instance.gain, "SoundGraphPluginRef")
	Something(className, s_guid, "pause", s_Instance.pause, "SoundGraphPluginRef")
	Something(className, s_guid, "resample", s_Instance.resample, "SoundGraphPluginRef")
	Something(className, s_guid, "sndPlayer", s_Instance.sndPlayer, "SoundGraphPluginRef")
end

function Type:SampleTextureData (p_class, p_guid)
	local s_Instance = SampleTextureData(p_class) 
 	local className = "SampleTextureData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "colorIntensityMax", s_Instance.colorIntensityMax, "Vec3")
	Something(className, s_guid, "colorIntensityMin", s_Instance.colorIntensityMin, "Vec3")
	Something(className, s_guid, "gradientData", s_Instance.gradientData, "List<Vec4)>")
	Something(className, s_guid, "textureDimensions", s_Instance.textureDimensions, "Vec2")
	Something(className, s_guid, "textureOriginU", s_Instance.textureOriginU, "float")
	Something(className, s_guid, "textureOriginV", s_Instance.textureOriginV, "float")
end

function Type:SaveEntityData (p_class, p_guid)
	local s_Instance = SaveEntityData(p_class) 
 	local className = "SaveEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkForHumanPlayer", s_Instance.checkForHumanPlayer, "bool")
	Something(className, s_guid, "levelName", s_Instance.levelName, "string")
	Something(className, s_guid, "saveFileName", s_Instance.saveFileName, "string")
	Something(className, s_guid, "saveNameSID", s_Instance.saveNameSID, "string")
	Something(className, s_guid, "saveScreenTexture", s_Instance.saveScreenTexture, "CtrRef")
end

function Type:ScaleClampNodeData (p_class, p_guid)
	local s_Instance = ScaleClampNodeData(p_class) 
 	local className = "ScaleClampNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "inMax", s_Instance.inMax, "AudioGraphNodePort")
	Something(className, s_guid, "inMin", s_Instance.inMin, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "outMax", s_Instance.outMax, "AudioGraphNodePort")
	Something(className, s_guid, "outMin", s_Instance.outMin, "AudioGraphNodePort")
end

function Type:ScenarioTaskData (p_class, p_guid)
	local s_Instance = ScenarioTaskData(p_class) 
 	local className = "ScenarioTaskData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actorId", s_Instance.actorId, "int")
	Something(className, s_guid, "connectTransforms", s_Instance.connectTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "endPointWorldOffset", s_Instance.endPointWorldOffset, "Vec3")
	Something(className, s_guid, "levelId", s_Instance.levelId, "int")
	Something(className, s_guid, "partId", s_Instance.partId, "int")
	Something(className, s_guid, "scenarioId", s_Instance.scenarioId, "int")
	Something(className, s_guid, "startPoint", s_Instance.startPoint, "Vec3")
	Something(className, s_guid, "startTimerDistance", s_Instance.startTimerDistance, "float")
	Something(className, s_guid, "startTurnDistance", s_Instance.startTurnDistance, "float")
	Something(className, s_guid, "triggerScenario", s_Instance.triggerScenario, "bool")
	Something(className, s_guid, "triggerScenarioDelay", s_Instance.triggerScenarioDelay, "float")
	Something(className, s_guid, "useClientPosition", s_Instance.useClientPosition, "bool")
	Something(className, s_guid, "worldAngle", s_Instance.worldAngle, "float")
end

function Type:ScenarioWaypointData (p_class, p_guid)
	local s_Instance = ScenarioWaypointData(p_class) 
 	local className = "ScenarioWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scenarioAntRef", s_Instance.scenarioAntRef, "AntRef")
	Something(className, s_guid, "scenarioTask", s_Instance.scenarioTask, "ScenarioTaskData")
end

function Type:SceneRecordingData (p_class, p_guid)
	local s_Instance = SceneRecordingData(p_class) 
 	local className = "SceneRecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "List<CtrRef)>")
end

function Type:ScoreAggregate (p_class, p_guid)
	local s_Instance = ScoreAggregate(p_class) 
 	local className = "ScoreAggregate"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "totalScore", s_Instance.totalScore, "float")
end

function Type:ScoringBucketData (p_class, p_guid)
	local s_Instance = ScoringBucketData(p_class) 
 	local className = "ScoringBucketData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "addToEntry", s_Instance.addToEntry, "bool")
	Something(className, s_guid, "bucketType", s_Instance.bucketType, "ScoringBucketType")
	Something(className, s_guid, "connectedCategories", s_Instance.connectedCategories, "List<CtrRef)>")
	Something(className, s_guid, "destinationBucket", s_Instance.destinationBucket, "ScoringBucket")
	Something(className, s_guid, "globalScore", s_Instance.globalScore, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "roundScore", s_Instance.roundScore, "bool")
	Something(className, s_guid, "teamTotalBucket", s_Instance.teamTotalBucket, "CtrRef")
	Something(className, s_guid, "unlocks", s_Instance.unlocks, "List<ScoringBucketUnlockData)>")
end

function Type:ScoringBucketUnlockData (p_class, p_guid)
	local s_Instance = ScoringBucketUnlockData(p_class) 
 	local className = "ScoringBucketUnlockData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pointsNeeded", s_Instance.pointsNeeded, "uint")
	Something(className, s_guid, "unlockInfo", s_Instance.unlockInfo, "BasicUnlockInfo")
end

function Type:ScoringData (p_class, p_guid)
	local s_Instance = ScoringData(p_class) 
 	local className = "ScoringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buckets", s_Instance.buckets, "List<CtrRef)>")
	Something(className, s_guid, "scoringHandlers", s_Instance.scoringHandlers, "List<CtrRef)>")
	Something(className, s_guid, "scoringTypes", s_Instance.scoringTypes, "List<CtrRef)>")
end

function Type:ScoringTypeData (p_class, p_guid)
	local s_Instance = ScoringTypeData(p_class) 
 	local className = "ScoringTypeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "additionalValueMultiplier", s_Instance.additionalValueMultiplier, "float")
	Something(className, s_guid, "bucket", s_Instance.bucket, "ScoringBucket")
	Something(className, s_guid, "descriptionSid", s_Instance.descriptionSid, "string")
	Something(className, s_guid, "limit", s_Instance.limit, "float")
	Something(className, s_guid, "measuring", s_Instance.measuring, "StatEvent")
	Something(className, s_guid, "paramX", s_Instance.paramX, "CtrRef")
	Something(className, s_guid, "paramY", s_Instance.paramY, "CtrRef")
	Something(className, s_guid, "score", s_Instance.score, "float")
	Something(className, s_guid, "showForTeam", s_Instance.showForTeam, "bool")
	Something(className, s_guid, "visibilityType", s_Instance.visibilityType, "ScoringVisibilityType")
end

function Type:ScreenEffectComponentData (p_class, p_guid)
	local s_Instance = ScreenEffectComponentData(p_class) 
 	local className = "ScreenEffectComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "frameType", s_Instance.frameType, "ScreenEffectFrameType")
	Something(className, s_guid, "frameWidth", s_Instance.frameWidth, "float")
	Something(className, s_guid, "innerFrameOpacity", s_Instance.innerFrameOpacity, "float")
	Something(className, s_guid, "outerFrameOpacity", s_Instance.outerFrameOpacity, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "screenEffectParams", s_Instance.screenEffectParams, "Vec4")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
end

function Type:ScreenshotInfo (p_class, p_guid)
	local s_Instance = ScreenshotInfo(p_class) 
 	local className = "ScreenshotInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cropImage", s_Instance.cropImage, "bool")
	Something(className, s_guid, "cropImageX1", s_Instance.cropImageX1, "uint")
	Something(className, s_guid, "cropImageX2", s_Instance.cropImageX2, "uint")
	Something(className, s_guid, "cropImageY1", s_Instance.cropImageY1, "uint")
	Something(className, s_guid, "cropImageY2", s_Instance.cropImageY2, "uint")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "resizeOutputImage", s_Instance.resizeOutputImage, "bool")
	Something(className, s_guid, "resizeOutputImageHeight", s_Instance.resizeOutputImageHeight, "uint")
	Something(className, s_guid, "resizeOutputImageWidth", s_Instance.resizeOutputImageWidth, "uint")
end

function Type:ScriptEntityData (p_class, p_guid)
	local s_Instance = ScriptEntityData(p_class) 
 	local className = "ScriptEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "code", s_Instance.code, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:SearchAndDestroyConstantData (p_class, p_guid)
	local s_Instance = SearchAndDestroyConstantData(p_class) 
 	local className = "SearchAndDestroyConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultSearchAndDestroyRadius", s_Instance.defaultSearchAndDestroyRadius, "float")
	Something(className, s_guid, "timeToWaitMax", s_Instance.timeToWaitMax, "float")
	Something(className, s_guid, "timeToWaitMin", s_Instance.timeToWaitMin, "float")
end

function Type:SearchAndDestroyOrderEntityData (p_class, p_guid)
	local s_Instance = SearchAndDestroyOrderEntityData(p_class) 
 	local className = "SearchAndDestroyOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aggressive", s_Instance.aggressive, "bool")
	Something(className, s_guid, "findTargetTime", s_Instance.findTargetTime, "float")
	Something(className, s_guid, "targetAreaFollowsTarget", s_Instance.targetAreaFollowsTarget, "bool")
	Something(className, s_guid, "targetPosKnowledge", s_Instance.targetPosKnowledge, "TargetPosKnowledgeType")
end

function Type:SelectEventEntityData (p_class, p_guid)
	local s_Instance = SelectEventEntityData(p_class) 
 	local className = "SelectEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "List<string)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:SendEntry (p_class, p_guid)
	local s_Instance = SendEntry(p_class) 
 	local className = "SendEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
end

function Type:SendNodeData (p_class, p_guid)
	local s_Instance = SendNodeData(p_class) 
 	local className = "SendNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
end

function Type:SensingComponentData (p_class, p_guid)
	local s_Instance = SensingComponentData(p_class) 
 	local className = "SensingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
	Something(className, s_guid, "sharedPlayerMemory", s_Instance.sharedPlayerMemory, "bool")
	Something(className, s_guid, "template", s_Instance.template, "CtrRef")
	Something(className, s_guid, "useWeaponTransform", s_Instance.useWeaponTransform, "bool")
end

function Type:SensingLimits (p_class, p_guid)
	local s_Instance = SensingLimits(p_class) 
 	local className = "SensingLimits"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hearingCutoff", s_Instance.hearingCutoff, "float")
	Something(className, s_guid, "hearingDistance", s_Instance.hearingDistance, "float")
	Something(className, s_guid, "peripheralMovementCutoff", s_Instance.peripheralMovementCutoff, "float")
	Something(className, s_guid, "peripheralViewAngle", s_Instance.peripheralViewAngle, "float")
	Something(className, s_guid, "peripheralViewDistance", s_Instance.peripheralViewDistance, "float")
	Something(className, s_guid, "viewAngle", s_Instance.viewAngle, "float")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
end

function Type:SensingManagerEntityData (p_class, p_guid)
	local s_Instance = SensingManagerEntityData(p_class) 
 	local className = "SensingManagerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "senseTerrainAreas", s_Instance.senseTerrainAreas, "List<SensingSphere)>")
end

function Type:SensingSettings (p_class, p_guid)
	local s_Instance = SensingSettings(p_class) 
 	local className = "SensingSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attackerTrackTime", s_Instance.attackerTrackTime, "double")
	Something(className, s_guid, "backgroundLoudnessFactor", s_Instance.backgroundLoudnessFactor, "float")
	Something(className, s_guid, "characterVisionBoxSettings", s_Instance.characterVisionBoxSettings, "VisionBoxSettings")
	Something(className, s_guid, "closeExplosiveImpactDistance", s_Instance.closeExplosiveImpactDistance, "float")
	Something(className, s_guid, "closeFireImpactDistance", s_Instance.closeFireImpactDistance, "float")
	Something(className, s_guid, "closeTrajectoryDistance", s_Instance.closeTrajectoryDistance, "float")
	Something(className, s_guid, "defaultTemplate", s_Instance.defaultTemplate, "CtrRef")
	Something(className, s_guid, "impactSenseDistance", s_Instance.impactSenseDistance, "float")
	Something(className, s_guid, "lineOfSightTestTime", s_Instance.lineOfSightTestTime, "double")
	Something(className, s_guid, "luckModifier", s_Instance.luckModifier, "float")
	Something(className, s_guid, "maxRays", s_Instance.maxRays, "int")
	Something(className, s_guid, "maxSize", s_Instance.maxSize, "float")
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "maxVolume", s_Instance.maxVolume, "float")
	Something(className, s_guid, "motionDistanceFactor", s_Instance.motionDistanceFactor, "float")
	Something(className, s_guid, "motionPeripheralityFactor", s_Instance.motionPeripheralityFactor, "float")
	Something(className, s_guid, "motionSizeFactor", s_Instance.motionSizeFactor, "float")
	Something(className, s_guid, "motionSpeedFactor", s_Instance.motionSpeedFactor, "float")
	Something(className, s_guid, "movementModifier", s_Instance.movementModifier, "float")
	Something(className, s_guid, "sensingTimeSpan", s_Instance.sensingTimeSpan, "double")
	Something(className, s_guid, "smokeSphereDuration", s_Instance.smokeSphereDuration, "float")
	Something(className, s_guid, "smokeSphereRadius", s_Instance.smokeSphereRadius, "float")
	Something(className, s_guid, "spawnOutOfLOSRadius", s_Instance.spawnOutOfLOSRadius, "float")
	Something(className, s_guid, "spawnOutOfLOSRaycastDistance", s_Instance.spawnOutOfLOSRaycastDistance, "float")
	Something(className, s_guid, "spawnOutOfLOSRaycastHeight", s_Instance.spawnOutOfLOSRaycastHeight, "float")
	Something(className, s_guid, "spawnOutOfLOSTraceDistance", s_Instance.spawnOutOfLOSTraceDistance, "float")
	Something(className, s_guid, "vehicleVisionBoxSettings", s_Instance.vehicleVisionBoxSettings, "VisionBoxSettings")
	Something(className, s_guid, "volumeModifier", s_Instance.volumeModifier, "float")
end

function Type:SensingSphere (p_class, p_guid)
	local s_Instance = SensingSphere(p_class) 
 	local className = "SensingSphere"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "radiusSqr", s_Instance.radiusSqr, "float")
end

function Type:SensingTemplateData (p_class, p_guid)
	local s_Instance = SensingTemplateData(p_class) 
 	local className = "SensingTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "awareForgetTime", s_Instance.awareForgetTime, "double")
	Something(className, s_guid, "combatLimits", s_Instance.combatLimits, "SensingLimits")
	Something(className, s_guid, "debugText", s_Instance.debugText, "string")
	Something(className, s_guid, "lostForgetTime", s_Instance.lostForgetTime, "double")
	Something(className, s_guid, "maximumAlertDistance", s_Instance.maximumAlertDistance, "float")
	Something(className, s_guid, "maximumMergeDistance", s_Instance.maximumMergeDistance, "float")
	Something(className, s_guid, "maximumReadinessRaiseDistance", s_Instance.maximumReadinessRaiseDistance, "float")
	Something(className, s_guid, "noticeBullets", s_Instance.noticeBullets, "bool")
	Something(className, s_guid, "readyLimits", s_Instance.readyLimits, "SensingLimits")
	Something(className, s_guid, "relaxedLimits", s_Instance.relaxedLimits, "SensingLimits")
	Something(className, s_guid, "timeUntilUnseenIsLost", s_Instance.timeUntilUnseenIsLost, "double")
	Something(className, s_guid, "useSenseSharing", s_Instance.useSenseSharing, "bool")
end

function Type:SensitivityAtVelocity (p_class, p_guid)
	local s_Instance = SensitivityAtVelocity(p_class) 
 	local className = "SensitivityAtVelocity"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "steeringSensitivity", s_Instance.steeringSensitivity, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:SequenceEntityData (p_class, p_guid)
	local s_Instance = SequenceEntityData(p_class) 
 	local className = "SequenceEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoPlayFirstFrame", s_Instance.autoPlayFirstFrame, "bool")
	Something(className, s_guid, "autoStart", s_Instance.autoStart, "bool")
	Something(className, s_guid, "clientUpdatePass", s_Instance.clientUpdatePass, "UpdatePass")
	Something(className, s_guid, "customSequenceTracks", s_Instance.customSequenceTracks, "List<CtrRef)>")
	Something(className, s_guid, "events", s_Instance.events, "List<SequenceEventData)>")
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "looping", s_Instance.looping, "bool")
	Something(className, s_guid, "playInReverse", s_Instance.playInReverse, "bool")
	Something(className, s_guid, "propertyTracks", s_Instance.propertyTracks, "List<CtrRef)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "sequenceLength", s_Instance.sequenceLength, "int")
	Something(className, s_guid, "sequenceStartTime", s_Instance.sequenceStartTime, "int")
	Something(className, s_guid, "serverUpdatePass", s_Instance.serverUpdatePass, "UpdatePass")
end

function Type:SequenceEventData (p_class, p_guid)
	local s_Instance = SequenceEventData(p_class) 
 	local className = "SequenceEventData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "event", s_Instance.event, "EventSpec")
	Something(className, s_guid, "time", s_Instance.time, "int")
end

function Type:SequenceGeneratorNodeData (p_class, p_guid)
	local s_Instance = SequenceGeneratorNodeData(p_class) 
 	local className = "SequenceGeneratorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "AudioGraphNodePort")
	Something(className, s_guid, "min", s_Instance.min, "AudioGraphNodePort")
	Something(className, s_guid, "reset", s_Instance.reset, "AudioGraphNodePort")
	Something(className, s_guid, "step", s_Instance.step, "AudioGraphNodePort")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
end

function Type:ServerBackendAttributeMapping (p_class, p_guid)
	local s_Instance = ServerBackendAttributeMapping(p_class) 
 	local className = "ServerBackendAttributeMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attribute", s_Instance.attribute, "ServerBackendAttribute")
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "string")
	Something(className, s_guid, "setting", s_Instance.setting, "string")
end

function Type:ServerBackendData (p_class, p_guid)
	local s_Instance = ServerBackendData(p_class) 
 	local className = "ServerBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mappings", s_Instance.mappings, "List<ServerBackendAttributeMapping)>")
end

function Type:ServerInfoSetting (p_class, p_guid)
	local s_Instance = ServerInfoSetting(p_class) 
 	local className = "ServerInfoSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isBool", s_Instance.isBool, "bool")
	Something(className, s_guid, "key", s_Instance.key, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:ServerMetricsSettings (p_class, p_guid)
	local s_Instance = ServerMetricsSettings(p_class) 
 	local className = "ServerMetricsSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "compressTransactions", s_Instance.compressTransactions, "bool")
	Something(className, s_guid, "dbxReportEnabled", s_Instance.dbxReportEnabled, "bool")
	Something(className, s_guid, "developmentTelemetryEnabled", s_Instance.developmentTelemetryEnabled, "bool")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "juiceTelemetryEnabled", s_Instance.juiceTelemetryEnabled, "bool")
	Something(className, s_guid, "performanceProfileStateEnabled", s_Instance.performanceProfileStateEnabled, "bool")
	Something(className, s_guid, "performanceTelemetryEnabled", s_Instance.performanceTelemetryEnabled, "bool")
	Something(className, s_guid, "reportName", s_Instance.reportName, "string")
	Something(className, s_guid, "tickTelemetryEnabled", s_Instance.tickTelemetryEnabled, "bool")
	Something(className, s_guid, "transactionTelemetryEnabled", s_Instance.transactionTelemetryEnabled, "bool")
end

function Type:ServerPerformanceEvent (p_class, p_guid)
	local s_Instance = ServerPerformanceEvent(p_class) 
 	local className = "ServerPerformanceEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cPUAverage", s_Instance.cPUAverage, "float")
	Something(className, s_guid, "cPUMemory", s_Instance.cPUMemory, "float")
	Something(className, s_guid, "received", s_Instance.received, "uint")
	Something(className, s_guid, "receivedAverage", s_Instance.receivedAverage, "float")
	Something(className, s_guid, "sent", s_Instance.sent, "uint")
	Something(className, s_guid, "sentAverage", s_Instance.sentAverage, "float")
end

function Type:ServerSettings (p_class, p_guid)
	local s_Instance = ServerSettings(p_class) 
 	local className = "ServerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "administrationEnabled", s_Instance.administrationEnabled, "bool")
	Something(className, s_guid, "administrationEventsEnabled", s_Instance.administrationEventsEnabled, "bool")
	Something(className, s_guid, "administrationLogEnabled", s_Instance.administrationLogEnabled, "bool")
	Something(className, s_guid, "administrationPassword", s_Instance.administrationPassword, "string")
	Something(className, s_guid, "administrationServerNameRestricted", s_Instance.administrationServerNameRestricted, "bool")
	Something(className, s_guid, "administrationTimeStampLogNames", s_Instance.administrationTimeStampLogNames, "bool")
	Something(className, s_guid, "aILooksIntoCamera", s_Instance.aILooksIntoCamera, "bool")
	Something(className, s_guid, "allowIndestructibleParts", s_Instance.allowIndestructibleParts, "bool")
	Something(className, s_guid, "autoUnspawnBangers", s_Instance.autoUnspawnBangers, "bool")
	Something(className, s_guid, "corruptionChance", s_Instance.corruptionChance, "float")
	Something(className, s_guid, "deathmatchDebugInfo", s_Instance.deathmatchDebugInfo, "bool")
	Something(className, s_guid, "debrisClusterEnabled", s_Instance.debrisClusterEnabled, "bool")
	Something(className, s_guid, "debugMenuClick", s_Instance.debugMenuClick, "string")
	Something(className, s_guid, "dedicatedServerCpu", s_Instance.dedicatedServerCpu, "int")
	Something(className, s_guid, "disableCutscenes", s_Instance.disableCutscenes, "bool")
	Something(className, s_guid, "drawActivePhysicsObjects", s_Instance.drawActivePhysicsObjects, "bool")
	Something(className, s_guid, "dropSpikeChance", s_Instance.dropSpikeChance, "float")
	Something(className, s_guid, "duplicationChance", s_Instance.duplicationChance, "float")
	Something(className, s_guid, "enableAnimationCulling", s_Instance.enableAnimationCulling, "bool")
	Something(className, s_guid, "fallBackToSquadSpawn", s_Instance.fallBackToSquadSpawn, "bool")
	Something(className, s_guid, "forcePlaylist", s_Instance.forcePlaylist, "bool")
	Something(className, s_guid, "havokCaptureToFile", s_Instance.havokCaptureToFile, "bool")
	Something(className, s_guid, "havokVisualDebugger", s_Instance.havokVisualDebugger, "bool")
	Something(className, s_guid, "humanHealthMultiplier", s_Instance.humanHealthMultiplier, "float")
	Something(className, s_guid, "incomingRate", s_Instance.incomingRate, "uint")
	Something(className, s_guid, "ingameTimeout", s_Instance.ingameTimeout, "float")
	Something(className, s_guid, "instancePath", s_Instance.instancePath, "string")
	Something(className, s_guid, "isAiEnabled", s_Instance.isAiEnabled, "bool")
	Something(className, s_guid, "isDesertingAllowed", s_Instance.isDesertingAllowed, "bool")
	Something(className, s_guid, "isDestructionEnabled", s_Instance.isDestructionEnabled, "bool")
	Something(className, s_guid, "isInternetSimulationEnabled", s_Instance.isInternetSimulationEnabled, "bool")
	Something(className, s_guid, "isNetworkStatsEnabled", s_Instance.isNetworkStatsEnabled, "bool")
	Something(className, s_guid, "isPresenceEnabled", s_Instance.isPresenceEnabled, "bool")
	Something(className, s_guid, "isRanked", s_Instance.isRanked, "bool")
	Something(className, s_guid, "isReconfigurable", s_Instance.isReconfigurable, "bool")
	Something(className, s_guid, "isRenderDamageEvents", s_Instance.isRenderDamageEvents, "bool")
	Something(className, s_guid, "isSoldierAnimationEnabled", s_Instance.isSoldierAnimationEnabled, "bool")
	Something(className, s_guid, "isSoldierDetailedCollisionEnabled", s_Instance.isSoldierDetailedCollisionEnabled, "bool")
	Something(className, s_guid, "isStatsEnabled", s_Instance.isStatsEnabled, "bool")
	Something(className, s_guid, "isTreeDestructionEnabled", s_Instance.isTreeDestructionEnabled, "bool")
	Something(className, s_guid, "jobEnable", s_Instance.jobEnable, "bool")
	Something(className, s_guid, "loadingTimeout", s_Instance.loadingTimeout, "float")
	Something(className, s_guid, "loadSavePoint", s_Instance.loadSavePoint, "bool")
	Something(className, s_guid, "maxDropDuration", s_Instance.maxDropDuration, "float")
	Something(className, s_guid, "maxLatency", s_Instance.maxLatency, "float")
	Something(className, s_guid, "maxQueriesPerSecond", s_Instance.maxQueriesPerSecond, "uint")
	Something(className, s_guid, "minDropDuration", s_Instance.minDropDuration, "float")
	Something(className, s_guid, "minLatency", s_Instance.minLatency, "float")
	Something(className, s_guid, "outgoingFrequency", s_Instance.outgoingFrequency, "float")
	Something(className, s_guid, "outgoingRate", s_Instance.outgoingRate, "uint")
	Something(className, s_guid, "packetDrops", s_Instance.packetDrops, "float")
	Something(className, s_guid, "playerCountNeededForMultiplayer", s_Instance.playerCountNeededForMultiplayer, "uint")
	Something(className, s_guid, "playlist", s_Instance.playlist, "string")
	Something(className, s_guid, "queryProviderEnabled", s_Instance.queryProviderEnabled, "bool")
	Something(className, s_guid, "regulatedAIThrottle", s_Instance.regulatedAIThrottle, "bool")
	Something(className, s_guid, "remoteAdministrationPort", s_Instance.remoteAdministrationPort, "string")
	Something(className, s_guid, "remoteControlPort", s_Instance.remoteControlPort, "uint")
	Something(className, s_guid, "reorderingChance", s_Instance.reorderingChance, "float")
	Something(className, s_guid, "respawnOnDeathPosition", s_Instance.respawnOnDeathPosition, "bool")
	Something(className, s_guid, "respawnTimeModifier", s_Instance.respawnTimeModifier, "float")
	Something(className, s_guid, "saveGameVersion", s_Instance.saveGameVersion, "uint")
	Something(className, s_guid, "savePoint", s_Instance.savePoint, "string")
	Something(className, s_guid, "scoringLogEnabled", s_Instance.scoringLogEnabled, "bool")
	Something(className, s_guid, "serverName", s_Instance.serverName, "string")
	Something(className, s_guid, "serverPassword", s_Instance.serverPassword, "string")
	Something(className, s_guid, "showTriggerDebugText", s_Instance.showTriggerDebugText, "bool")
	Something(className, s_guid, "threadedLoadingEnable", s_Instance.threadedLoadingEnable, "bool")
	Something(className, s_guid, "threadingEnable", s_Instance.threadingEnable, "bool")
	Something(className, s_guid, "timeoutGame", s_Instance.timeoutGame, "bool")
	Something(className, s_guid, "timeoutTime", s_Instance.timeoutTime, "float")
	Something(className, s_guid, "unlockResolver", s_Instance.unlockResolver, "bool")
	Something(className, s_guid, "vegetationEnabled", s_Instance.vegetationEnabled, "bool")
	Something(className, s_guid, "vehicleSpawnAllowed", s_Instance.vehicleSpawnAllowed, "bool")
	Something(className, s_guid, "vehicleSpawnDelayModifier", s_Instance.vehicleSpawnDelayModifier, "float")
	Something(className, s_guid, "waterPhysicsEnabled", s_Instance.waterPhysicsEnabled, "bool")
end

function Type:SettingConfig (p_class, p_guid)
	local s_Instance = SettingConfig(p_class) 
 	local className = "SettingConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "default", s_Instance.default, "uint")
	Something(className, s_guid, "descSid", s_Instance.descSid, "string")
	Something(className, s_guid, "key", s_Instance.key, "string")
	Something(className, s_guid, "max", s_Instance.max, "uint")
	Something(className, s_guid, "min", s_Instance.min, "uint")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "ranked", s_Instance.ranked, "bool")
end

function Type:SettingEntityData (p_class, p_guid)
	local s_Instance = SettingEntityData(p_class) 
 	local className = "SettingEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolSettingName", s_Instance.boolSettingName, "string")
	Something(className, s_guid, "floatSettingName", s_Instance.floatSettingName, "string")
	Something(className, s_guid, "intSettingName", s_Instance.intSettingName, "string")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:SettingsBundleAsset (p_class, p_guid)
	local s_Instance = SettingsBundleAsset(p_class) 
 	local className = "SettingsBundleAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "List<CtrRef)>")
end

function Type:ShaderColorUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderColorUnlockPartCollection(p_class) 
 	local className = "ShaderColorUnlockPartCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultColorReference", s_Instance.defaultColorReference, "CtrRef")
	Something(className, s_guid, "unlockParts", s_Instance.unlockParts, "List<CtrRef)>")
end

function Type:ShaderCustomizationUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderCustomizationUnlockPartCollection(p_class) 
 	local className = "ShaderCustomizationUnlockPartCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshBlueprints", s_Instance.meshBlueprints, "List<CtrRef)>")
	Something(className, s_guid, "meshMaterials", s_Instance.meshMaterials, "List<CustomizedMeshMaterialsData)>")
	Something(className, s_guid, "shaderNodeName", s_Instance.shaderNodeName, "string")
end

function Type:ShaderDatabaseAsset (p_class, p_guid)
	local s_Instance = ShaderDatabaseAsset(p_class) 
 	local className = "ShaderDatabaseAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "levelName", s_Instance.levelName, "string")
end

function Type:ShaderGraph (p_class, p_guid)
	local s_Instance = ShaderGraph(p_class) 
 	local className = "ShaderGraph"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gammaCorrectionEnable", s_Instance.gammaCorrectionEnable, "bool")
	Something(className, s_guid, "maxSubMaterialCount", s_Instance.maxSubMaterialCount, "uint")
end

function Type:ShaderParameterComponentData (p_class, p_guid)
	local s_Instance = ShaderParameterComponentData(p_class) 
 	local className = "ShaderParameterComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shaderParameterVectors", s_Instance.shaderParameterVectors, "List<ShaderParameterVector)>")
end

function Type:ShaderParameterVector (p_class, p_guid)
	local s_Instance = ShaderParameterVector(p_class) 
 	local className = "ShaderParameterVector"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "value", s_Instance.value, "Vec4")
end

function Type:ShaderParamsComponentData (p_class, p_guid)
	local s_Instance = ShaderParamsComponentData(p_class) 
 	local className = "ShaderParamsComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "value", s_Instance.value, "Vec4")
end

function Type:ShaderSystemSettings (p_class, p_guid)
	local s_Instance = ShaderSystemSettings(p_class) 
 	local className = "ShaderSystemSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alphaBlendEnable", s_Instance.alphaBlendEnable, "bool")
	Something(className, s_guid, "boneConstantOptimizationEnable", s_Instance.boneConstantOptimizationEnable, "bool")
	Something(className, s_guid, "clipPlanesEnable", s_Instance.clipPlanesEnable, "bool")
	Something(className, s_guid, "databaseLoadingEnable", s_Instance.databaseLoadingEnable, "bool")
	Something(className, s_guid, "debugNonFiniteColor", s_Instance.debugNonFiniteColor, "Vec3")
	Something(className, s_guid, "depthEnable", s_Instance.depthEnable, "bool")
	Something(className, s_guid, "depthTestEnable", s_Instance.depthTestEnable, "bool")
	Something(className, s_guid, "depthWriteEnable", s_Instance.depthWriteEnable, "bool")
	Something(className, s_guid, "dispatchDirectEnable", s_Instance.dispatchDirectEnable, "bool")
	Something(className, s_guid, "dispatchExecuteEnable", s_Instance.dispatchExecuteEnable, "bool")
	Something(className, s_guid, "dispatchPrepareBlockEnable", s_Instance.dispatchPrepareBlockEnable, "bool")
	Something(className, s_guid, "dispatchPrepareJobCount", s_Instance.dispatchPrepareJobCount, "int")
	Something(className, s_guid, "drawAdvancedStats", s_Instance.drawAdvancedStats, "bool")
	Something(className, s_guid, "drawCallEnable", s_Instance.drawCallEnable, "bool")
	Something(className, s_guid, "drawCallMultiplier", s_Instance.drawCallMultiplier, "uint")
	Something(className, s_guid, "drawInlineBlocks", s_Instance.drawInlineBlocks, "bool")
	Something(className, s_guid, "drawInstancedBlocks", s_Instance.drawInstancedBlocks, "bool")
	Something(className, s_guid, "drawNonInstancedBlocks", s_Instance.drawNonInstancedBlocks, "bool")
	Something(className, s_guid, "drawNonStreamedTextureBlocks", s_Instance.drawNonStreamedTextureBlocks, "bool")
	Something(className, s_guid, "drawOpaque", s_Instance.drawOpaque, "bool")
	Something(className, s_guid, "drawOpaqueAlphaTest", s_Instance.drawOpaqueAlphaTest, "bool")
	Something(className, s_guid, "drawOpaqueAlphaTestSimple", s_Instance.drawOpaqueAlphaTestSimple, "bool")
	Something(className, s_guid, "drawStats", s_Instance.drawStats, "bool")
	Something(className, s_guid, "drawStreamedTextureBlocks", s_Instance.drawStreamedTextureBlocks, "bool")
	Something(className, s_guid, "drawTileClassifiedBlocks", s_Instance.drawTileClassifiedBlocks, "bool")
	Something(className, s_guid, "drawTransparent", s_Instance.drawTransparent, "bool")
	Something(className, s_guid, "drawTransparentDecal", s_Instance.drawTransparentDecal, "bool")
	Something(className, s_guid, "drawZOnly", s_Instance.drawZOnly, "bool")
	Something(className, s_guid, "dxBatchedSamplerStatesEnable", s_Instance.dxBatchedSamplerStatesEnable, "bool")
	Something(className, s_guid, "dxBatchedTexturesEnable", s_Instance.dxBatchedTexturesEnable, "bool")
	Something(className, s_guid, "dxDelayedShaderLoadingEnable", s_Instance.dxDelayedShaderLoadingEnable, "bool")
	Something(className, s_guid, "dxDispatchJobBlocksPerCommandList", s_Instance.dxDispatchJobBlocksPerCommandList, "uint")
	Something(className, s_guid, "dxDispatchJobCount", s_Instance.dxDispatchJobCount, "int")
	Something(className, s_guid, "dxDispatchJobMinBlockCount", s_Instance.dxDispatchJobMinBlockCount, "uint")
	Something(className, s_guid, "dxFrameVertexBufferPoolSize", s_Instance.dxFrameVertexBufferPoolSize, "uint")
	Something(className, s_guid, "dxInstancingBufferHandlingMethod", s_Instance.dxInstancingBufferHandlingMethod, "uint")
	Something(className, s_guid, "dxMaxInstanceCount", s_Instance.dxMaxInstanceCount, "uint")
	Something(className, s_guid, "dxMaxInstructionCount", s_Instance.dxMaxInstructionCount, "uint")
	Something(className, s_guid, "dxMultisampleEnable", s_Instance.dxMultisampleEnable, "bool")
	Something(className, s_guid, "dxParallelShaderLoadingEnable", s_Instance.dxParallelShaderLoadingEnable, "bool")
	Something(className, s_guid, "dxPsExternalConstantBufferSize", s_Instance.dxPsExternalConstantBufferSize, "uint")
	Something(className, s_guid, "dxPsFunctionConstantBufferSize", s_Instance.dxPsFunctionConstantBufferSize, "uint")
	Something(className, s_guid, "dxSamplerStatesEnable", s_Instance.dxSamplerStatesEnable, "bool")
	Something(className, s_guid, "dxStatesEnable", s_Instance.dxStatesEnable, "bool")
	Something(className, s_guid, "dxTransparencySupersamplingEnable", s_Instance.dxTransparencySupersamplingEnable, "bool")
	Something(className, s_guid, "dxVsExternalConstantBufferSize", s_Instance.dxVsExternalConstantBufferSize, "uint")
	Something(className, s_guid, "dxVsFunctionConstantBufferSize", s_Instance.dxVsFunctionConstantBufferSize, "uint")
	Something(className, s_guid, "flushEnable", s_Instance.flushEnable, "bool")
	Something(className, s_guid, "forceDoubleSided", s_Instance.forceDoubleSided, "bool")
	Something(className, s_guid, "forcePointFiltering", s_Instance.forcePointFiltering, "bool")
	Something(className, s_guid, "frameMemoryBufferSize", s_Instance.frameMemoryBufferSize, "uint")
	Something(className, s_guid, "gcmReplayMarkersEnable", s_Instance.gcmReplayMarkersEnable, "bool")
	Something(className, s_guid, "logEnable", s_Instance.logEnable, "bool")
	Something(className, s_guid, "maxAnisotropy", s_Instance.maxAnisotropy, "uint")
	Something(className, s_guid, "mipmapBias", s_Instance.mipmapBias, "float")
	Something(className, s_guid, "onDemandBuildingEnable", s_Instance.onDemandBuildingEnable, "bool")
	Something(className, s_guid, "onDemandMonitoringEnable", s_Instance.onDemandMonitoringEnable, "bool")
	Something(className, s_guid, "onDemandPrimingEnable", s_Instance.onDemandPrimingEnable, "bool")
	Something(className, s_guid, "overdrawMaxLayerCount", s_Instance.overdrawMaxLayerCount, "uint")
	Something(className, s_guid, "pixBlockEventsEnable", s_Instance.pixBlockEventsEnable, "bool")
	Something(className, s_guid, "pixelConstantRedundancyCheckingEnable", s_Instance.pixelConstantRedundancyCheckingEnable, "bool")
	Something(className, s_guid, "pixelConstantsEnable", s_Instance.pixelConstantsEnable, "bool")
	Something(className, s_guid, "ps3CmdBufClearEnable", s_Instance.ps3CmdBufClearEnable, "bool")
	Something(className, s_guid, "ps3CmdBufVertexShaderInlineEnable", s_Instance.ps3CmdBufVertexShaderInlineEnable, "bool")
	Something(className, s_guid, "ps3DispatchBlocksPerJob", s_Instance.ps3DispatchBlocksPerJob, "uint")
	Something(className, s_guid, "ps3DispatchFrameBlockEnable", s_Instance.ps3DispatchFrameBlockEnable, "bool")
	Something(className, s_guid, "ps3DispatchJobCount", s_Instance.ps3DispatchJobCount, "uint")
	Something(className, s_guid, "ps3DispatchJobEnable", s_Instance.ps3DispatchJobEnable, "bool")
	Something(className, s_guid, "ps3DispatchJobPriority", s_Instance.ps3DispatchJobPriority, "uint")
	Something(className, s_guid, "ps3DispatchJobSpuCount", s_Instance.ps3DispatchJobSpuCount, "uint")
	Something(className, s_guid, "ps3DispatchOnlyJob", s_Instance.ps3DispatchOnlyJob, "int")
	Something(className, s_guid, "ps3DispatchPrepareSpuJobEnable", s_Instance.ps3DispatchPrepareSpuJobEnable, "bool")
	Something(className, s_guid, "ps3DispatchSetupSpuJobEnable", s_Instance.ps3DispatchSetupSpuJobEnable, "bool")
	Something(className, s_guid, "ps3DispatchSpuBufferLinkingEnable", s_Instance.ps3DispatchSpuBufferLinkingEnable, "bool")
	Something(className, s_guid, "ps3DispatchYieldGranularity", s_Instance.ps3DispatchYieldGranularity, "float")
	Something(className, s_guid, "ps3DrawBlockCullEnable", s_Instance.ps3DrawBlockCullEnable, "bool")
	Something(className, s_guid, "ps3DrawEdgeGeometryEnable", s_Instance.ps3DrawEdgeGeometryEnable, "bool")
	Something(className, s_guid, "ps3DrawNonEdgeGeometryEnable", s_Instance.ps3DrawNonEdgeGeometryEnable, "bool")
	Something(className, s_guid, "ps3FinishEnable", s_Instance.ps3FinishEnable, "bool")
	Something(className, s_guid, "ps3FlushEnable", s_Instance.ps3FlushEnable, "bool")
	Something(className, s_guid, "ps3GeometryDebugRenderEnable", s_Instance.ps3GeometryDebugRenderEnable, "bool")
	Something(className, s_guid, "ps3GeometryJobCount", s_Instance.ps3GeometryJobCount, "uint")
	Something(className, s_guid, "ps3GeometryJobEnable", s_Instance.ps3GeometryJobEnable, "bool")
	Something(className, s_guid, "ps3GeometryJobPriority", s_Instance.ps3GeometryJobPriority, "uint")
	Something(className, s_guid, "ps3GeometryJobSpuCount", s_Instance.ps3GeometryJobSpuCount, "uint")
	Something(className, s_guid, "ps3GeometryJobWithoutDispatchJobEnable", s_Instance.ps3GeometryJobWithoutDispatchJobEnable, "bool")
	Something(className, s_guid, "ps3GeometryYieldGranularity", s_Instance.ps3GeometryYieldGranularity, "float")
	Something(className, s_guid, "ps3MaxMipmap", s_Instance.ps3MaxMipmap, "uint")
	Something(className, s_guid, "ps3MinMipmap", s_Instance.ps3MinMipmap, "uint")
	Something(className, s_guid, "ps3PartitionClipPlaneCullEnable", s_Instance.ps3PartitionClipPlaneCullEnable, "bool")
	Something(className, s_guid, "ps3PartitionFrustumCullEnable", s_Instance.ps3PartitionFrustumCullEnable, "bool")
	Something(className, s_guid, "ps3PartitionVolumeCullEnable", s_Instance.ps3PartitionVolumeCullEnable, "bool")
	Something(className, s_guid, "ps3PixelShaderHashStoreEnable", s_Instance.ps3PixelShaderHashStoreEnable, "bool")
	Something(className, s_guid, "ps3PixelShaderRedundancyCheckingEnable", s_Instance.ps3PixelShaderRedundancyCheckingEnable, "bool")
	Something(className, s_guid, "ps3SCullEnable", s_Instance.ps3SCullEnable, "bool")
	Something(className, s_guid, "ps3SpuClipPlaneRejectEnable", s_Instance.ps3SpuClipPlaneRejectEnable, "bool")
	Something(className, s_guid, "ps3SpuCullVolumesEnable", s_Instance.ps3SpuCullVolumesEnable, "bool")
	Something(className, s_guid, "ps3SpuInstancingEnable", s_Instance.ps3SpuInstancingEnable, "bool")
	Something(className, s_guid, "ps3SpuYieldingEnable", s_Instance.ps3SpuYieldingEnable, "bool")
	Something(className, s_guid, "ps3TriangleBackfaceCullEnable", s_Instance.ps3TriangleBackfaceCullEnable, "bool")
	Something(className, s_guid, "ps3TriangleCull1BoneSkinningEnable", s_Instance.ps3TriangleCull1BoneSkinningEnable, "bool")
	Something(className, s_guid, "ps3TriangleCull4BoneSkinningEnable", s_Instance.ps3TriangleCull4BoneSkinningEnable, "bool")
	Something(className, s_guid, "ps3TriangleCullDoubleSidedEnable", s_Instance.ps3TriangleCullDoubleSidedEnable, "bool")
	Something(className, s_guid, "ps3TriangleCullEnable", s_Instance.ps3TriangleCullEnable, "bool")
	Something(className, s_guid, "ps3TriangleCullZPassEnable", s_Instance.ps3TriangleCullZPassEnable, "bool")
	Something(className, s_guid, "ps3TriangleFrustumCullEnable", s_Instance.ps3TriangleFrustumCullEnable, "bool")
	Something(className, s_guid, "ps3TrianglePartCullEnable", s_Instance.ps3TrianglePartCullEnable, "bool")
	Something(className, s_guid, "ps3TxpDemotionEnable", s_Instance.ps3TxpDemotionEnable, "bool")
	Something(className, s_guid, "ps3ZCullBehindLimit", s_Instance.ps3ZCullBehindLimit, "uint")
	Something(className, s_guid, "ps3ZCullEnable", s_Instance.ps3ZCullEnable, "bool")
	Something(className, s_guid, "ps3ZCullInFrontLimit", s_Instance.ps3ZCullInFrontLimit, "uint")
	Something(className, s_guid, "pseudoInstancingEnable", s_Instance.pseudoInstancingEnable, "bool")
	Something(className, s_guid, "shaderPixScopeEnable", s_Instance.shaderPixScopeEnable, "bool")
	Something(className, s_guid, "simplePixelShaderEnable", s_Instance.simplePixelShaderEnable, "bool")
	Something(className, s_guid, "simpleTextureFilteringEnable", s_Instance.simpleTextureFilteringEnable, "bool")
	Something(className, s_guid, "simpleTexturesEnable", s_Instance.simpleTexturesEnable, "bool")
	Something(className, s_guid, "simpleVertexShaderEnable", s_Instance.simpleVertexShaderEnable, "bool")
	Something(className, s_guid, "singleFrameBlockLogEnable", s_Instance.singleFrameBlockLogEnable, "bool")
	Something(className, s_guid, "singleFrameLogEnable", s_Instance.singleFrameLogEnable, "bool")
	Something(className, s_guid, "singleFrameLogOverwrite", s_Instance.singleFrameLogOverwrite, "bool")
	Something(className, s_guid, "singlePrimitiveEnable", s_Instance.singlePrimitiveEnable, "bool")
	Something(className, s_guid, "sortBlocksEnable", s_Instance.sortBlocksEnable, "bool")
	Something(className, s_guid, "statesEnable", s_Instance.statesEnable, "bool")
	Something(className, s_guid, "stencilEnable", s_Instance.stencilEnable, "bool")
	Something(className, s_guid, "textureGammaCorrectionEnable", s_Instance.textureGammaCorrectionEnable, "bool")
	Something(className, s_guid, "tileClassificationEnable", s_Instance.tileClassificationEnable, "bool")
	Something(className, s_guid, "vertexConstantRedundancyCheckingEnable", s_Instance.vertexConstantRedundancyCheckingEnable, "bool")
	Something(className, s_guid, "vertexConstantsEnable", s_Instance.vertexConstantsEnable, "bool")
	Something(className, s_guid, "xenonDispatchBlockOnCmdBufEnable", s_Instance.xenonDispatchBlockOnCmdBufEnable, "bool")
	Something(className, s_guid, "xenonDispatchBlocksPerJob", s_Instance.xenonDispatchBlocksPerJob, "uint")
	Something(className, s_guid, "xenonDispatchCmdBufferSegmentSize", s_Instance.xenonDispatchCmdBufferSegmentSize, "uint")
	Something(className, s_guid, "xenonDispatchCmdBufferSize", s_Instance.xenonDispatchCmdBufferSize, "uint")
	Something(className, s_guid, "xenonDispatchJobCount", s_Instance.xenonDispatchJobCount, "uint")
	Something(className, s_guid, "xenonDispatchJobEnable", s_Instance.xenonDispatchJobEnable, "bool")
	Something(className, s_guid, "xenonDispatchMinJobBlockCount", s_Instance.xenonDispatchMinJobBlockCount, "uint")
	Something(className, s_guid, "xenonDispatchOnlyJob", s_Instance.xenonDispatchOnlyJob, "int")
	Something(className, s_guid, "xenonHiZEnable", s_Instance.xenonHiZEnable, "bool")
	Something(className, s_guid, "xenonTrilinearThreshold", s_Instance.xenonTrilinearThreshold, "uint")
	Something(className, s_guid, "zeroViewportEnable", s_Instance.zeroViewportEnable, "bool")
	Something(className, s_guid, "zOnlyMaxAnisotropy", s_Instance.zOnlyMaxAnisotropy, "uint")
end

function Type:ShaderTextureUnlockPartCollection (p_class, p_guid)
	local s_Instance = ShaderTextureUnlockPartCollection(p_class) 
 	local className = "ShaderTextureUnlockPartCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultTextureReference", s_Instance.defaultTextureReference, "CtrRef")
	Something(className, s_guid, "unlockParts", s_Instance.unlockParts, "List<CtrRef)>")
end

function Type:ShootAtFromCoverData (p_class, p_guid)
	local s_Instance = ShootAtFromCoverData(p_class) 
 	local className = "ShootAtFromCoverData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cycleTargets", s_Instance.cycleTargets, "bool")
	Something(className, s_guid, "preferAlternativeWeapon", s_Instance.preferAlternativeWeapon, "bool")
	Something(className, s_guid, "randomTargetOrder", s_Instance.randomTargetOrder, "bool")
	Something(className, s_guid, "shootType", s_Instance.shootType, "fb.ShootType)")
	Something(className, s_guid, "strengthType", s_Instance.strengthType, "fb.StrengthType)")
end

function Type:ShootOrderEntityData (p_class, p_guid)
	local s_Instance = ShootOrderEntityData(p_class) 
 	local className = "ShootOrderEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "completeWhenHumanIsSensed", s_Instance.completeWhenHumanIsSensed, "bool")
	Something(className, s_guid, "cycleTargets", s_Instance.cycleTargets, "bool")
	Something(className, s_guid, "pose", s_Instance.pose, "PoseType")
	Something(className, s_guid, "preferAlternativeWeapon", s_Instance.preferAlternativeWeapon, "bool")
	Something(className, s_guid, "randomTargetOrder", s_Instance.randomTargetOrder, "bool")
	Something(className, s_guid, "shootType", s_Instance.shootType, "fb.ShootType)")
	Something(className, s_guid, "strengthType", s_Instance.strengthType, "fb.StrengthType)")
end

function Type:ShotConfigData (p_class, p_guid)
	local s_Instance = ShotConfigData(p_class) 
 	local className = "ShotConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeForceSpawnToCamera", s_Instance.activeForceSpawnToCamera, "bool")
	Something(className, s_guid, "alternateProjectiles", s_Instance.alternateProjectiles, "List<UnlockableProjectile)>")
	Something(className, s_guid, "forceSpawnToCamera", s_Instance.forceSpawnToCamera, "bool")
	Something(className, s_guid, "inheritWeaponSpeedAmount", s_Instance.inheritWeaponSpeedAmount, "float")
	Something(className, s_guid, "initialDirection", s_Instance.initialDirection, "Vec3")
	Something(className, s_guid, "initialPosition", s_Instance.initialPosition, "Vec3")
	Something(className, s_guid, "initialSpeed", s_Instance.initialSpeed, "Vec3")
	Something(className, s_guid, "muzzleExplosion", s_Instance.muzzleExplosion, "CtrRef")
	Something(className, s_guid, "numberOfBulletsPerBurst", s_Instance.numberOfBulletsPerBurst, "uint")
	Something(className, s_guid, "numberOfBulletsPerShell", s_Instance.numberOfBulletsPerShell, "uint")
	Something(className, s_guid, "numberOfBulletsPerShot", s_Instance.numberOfBulletsPerShot, "uint")
	Something(className, s_guid, "projectile", s_Instance.projectile, "CtrRef")
	Something(className, s_guid, "projectileData", s_Instance.projectileData, "CtrRef")
	Something(className, s_guid, "relativeTargetAiming", s_Instance.relativeTargetAiming, "bool")
	Something(className, s_guid, "secondaryProjectile", s_Instance.secondaryProjectile, "CtrRef")
	Something(className, s_guid, "secondaryProjectileData", s_Instance.secondaryProjectileData, "CtrRef")
	Something(className, s_guid, "spawnDelay", s_Instance.spawnDelay, "float")
	Something(className, s_guid, "spawnVisualAtWeaponBone", s_Instance.spawnVisualAtWeaponBone, "bool")
end

function Type:SimpleAnimationControlBinding (p_class, p_guid)
	local s_Instance = SimpleAnimationControlBinding(p_class) 
 	local className = "SimpleAnimationControlBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "locoTarget", s_Instance.locoTarget, "AntRef")
end

function Type:SimpleAnimationControlComponentData (p_class, p_guid)
	local s_Instance = SimpleAnimationControlComponentData(p_class) 
 	local className = "SimpleAnimationControlComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "binding", s_Instance.binding, "SimpleAnimationControlBinding")
	Something(className, s_guid, "run", s_Instance.run, "bool")
end

function Type:SimpleMovementActionBaseData (p_class, p_guid)
	local s_Instance = SimpleMovementActionBaseData(p_class) 
 	local className = "SimpleMovementActionBaseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "runTimeInfo", s_Instance.runTimeInfo, "SimpleMovementActionTimeData")
	Something(className, s_guid, "startTimeInfo", s_Instance.startTimeInfo, "SimpleMovementActionTimeData")
end

function Type:SimpleMovementActionData (p_class, p_guid)
	local s_Instance = SimpleMovementActionData(p_class) 
 	local className = "SimpleMovementActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "action", s_Instance.action, "EntryInputActionEnum")
	Something(className, s_guid, "level", s_Instance.level, "float")
	Something(className, s_guid, "respawn", s_Instance.respawn, "bool")
	Something(className, s_guid, "specialAnimationIndex", s_Instance.specialAnimationIndex, "int")
	Something(className, s_guid, "teleport", s_Instance.teleport, "bool")
end

function Type:SimpleMovementActionTimeData (p_class, p_guid)
	local s_Instance = SimpleMovementActionTimeData(p_class) 
 	local className = "SimpleMovementActionTimeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxVariation", s_Instance.maxVariation, "float")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:SimplePropertyTrackData (p_class, p_guid)
	local s_Instance = SimplePropertyTrackData(p_class) 
 	local className = "SimplePropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "interpolationType", s_Instance.interpolationType, "fb.InterpolationType)")
end

function Type:SimpleTransformNodeData (p_class, p_guid)
	local s_Instance = SimpleTransformNodeData(p_class) 
 	local className = "SimpleTransformNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angleUnit", s_Instance.angleUnit, "fb.AngleUnit)")
	Something(className, s_guid, "operation", s_Instance.operation, "SimpleTransformOperation")
	Something(className, s_guid, "x", s_Instance.x, "AudioGraphNodePort")
	Something(className, s_guid, "y", s_Instance.y, "AudioGraphNodePort")
	Something(className, s_guid, "z", s_Instance.z, "AudioGraphNodePort")
end

function Type:SimpleValueSelectorNodeData (p_class, p_guid)
	local s_Instance = SimpleValueSelectorNodeData(p_class) 
 	local className = "SimpleValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "outValues", s_Instance.outValues, "List<float)>")
end

function Type:SkeletonAsset (p_class, p_guid)
	local s_Instance = SkeletonAsset(p_class) 
 	local className = "SkeletonAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneNames", s_Instance.boneNames, "List<string)>")
	Something(className, s_guid, "cameraBoneName", s_Instance.cameraBoneName, "string")
	Something(className, s_guid, "headBoneName", s_Instance.headBoneName, "string")
	Something(className, s_guid, "hierarchy", s_Instance.hierarchy, "List<int)>")
	Something(className, s_guid, "hipBoneName", s_Instance.hipBoneName, "string")
	Something(className, s_guid, "localPose", s_Instance.localPose, "List<LinearTransform)>")
	Something(className, s_guid, "modelPose", s_Instance.modelPose, "List<LinearTransform)>")
	Something(className, s_guid, "weaponBoneName", s_Instance.weaponBoneName, "string")
end

function Type:SkeletonCollisionData (p_class, p_guid)
	local s_Instance = SkeletonCollisionData(p_class) 
 	local className = "SkeletonCollisionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneCollisionData", s_Instance.boneCollisionData, "List<fb).BoneCollisionData>")
	Something(className, s_guid, "skeletonAsset", s_Instance.skeletonAsset, "CtrRef")
end

function Type:SkinnedMeshAsset (p_class, p_guid)
	local s_Instance = SkinnedMeshAsset(p_class) 
 	local className = "SkinnedMeshAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boundingBoxPositionOffset", s_Instance.boundingBoxPositionOffset, "Vec3")
	Something(className, s_guid, "boundingBoxSizeOffset", s_Instance.boundingBoxSizeOffset, "Vec3")
end

function Type:SkinnedSocketObjectData (p_class, p_guid)
	local s_Instance = SkinnedSocketObjectData(p_class) 
 	local className = "SkinnedSocketObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "faceposerLibraryIndex", s_Instance.faceposerLibraryIndex, "int")
end

function Type:SkyCloudLayer (p_class, p_guid)
	local s_Instance = SkyCloudLayer(p_class) 
 	local className = "SkyCloudLayer"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alphaMul", s_Instance.alphaMul, "float")
	Something(className, s_guid, "altitude", s_Instance.altitude, "float")
	Something(className, s_guid, "ambientLightIntensity", s_Instance.ambientLightIntensity, "float")
	Something(className, s_guid, "color", s_Instance.color, "Vec3")
	Something(className, s_guid, "rotation", s_Instance.rotation, "float")
	Something(className, s_guid, "speed", s_Instance.speed, "float")
	Something(className, s_guid, "sunLightIntensity", s_Instance.sunLightIntensity, "float")
	Something(className, s_guid, "sunLightPower", s_Instance.sunLightPower, "float")
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
	Something(className, s_guid, "tileFactor", s_Instance.tileFactor, "float")
end

function Type:SkyComponentData (p_class, p_guid)
	local s_Instance = SkyComponentData(p_class) 
 	local className = "SkyComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "brightnessScale", s_Instance.brightnessScale, "float")
	Something(className, s_guid, "cloudLayer1AlphaMul", s_Instance.cloudLayer1AlphaMul, "float")
	Something(className, s_guid, "cloudLayer1Altitude", s_Instance.cloudLayer1Altitude, "float")
	Something(className, s_guid, "cloudLayer1AmbientLightIntensity", s_Instance.cloudLayer1AmbientLightIntensity, "float")
	Something(className, s_guid, "cloudLayer1Color", s_Instance.cloudLayer1Color, "Vec3")
	Something(className, s_guid, "cloudLayer1Rotation", s_Instance.cloudLayer1Rotation, "float")
	Something(className, s_guid, "cloudLayer1Speed", s_Instance.cloudLayer1Speed, "float")
	Something(className, s_guid, "cloudLayer1SunLightIntensity", s_Instance.cloudLayer1SunLightIntensity, "float")
	Something(className, s_guid, "cloudLayer1SunLightPower", s_Instance.cloudLayer1SunLightPower, "float")
	Something(className, s_guid, "cloudLayer1Texture", s_Instance.cloudLayer1Texture, "CtrRef")
	Something(className, s_guid, "cloudLayer1TileFactor", s_Instance.cloudLayer1TileFactor, "float")
	Something(className, s_guid, "cloudLayer2AlphaMul", s_Instance.cloudLayer2AlphaMul, "float")
	Something(className, s_guid, "cloudLayer2Altitude", s_Instance.cloudLayer2Altitude, "float")
	Something(className, s_guid, "cloudLayer2AmbientLightIntensity", s_Instance.cloudLayer2AmbientLightIntensity, "float")
	Something(className, s_guid, "cloudLayer2Color", s_Instance.cloudLayer2Color, "Vec3")
	Something(className, s_guid, "cloudLayer2Rotation", s_Instance.cloudLayer2Rotation, "float")
	Something(className, s_guid, "cloudLayer2Speed", s_Instance.cloudLayer2Speed, "float")
	Something(className, s_guid, "cloudLayer2SunLightIntensity", s_Instance.cloudLayer2SunLightIntensity, "float")
	Something(className, s_guid, "cloudLayer2SunLightPower", s_Instance.cloudLayer2SunLightPower, "float")
	Something(className, s_guid, "cloudLayer2Texture", s_Instance.cloudLayer2Texture, "CtrRef")
	Something(className, s_guid, "cloudLayer2TileFactor", s_Instance.cloudLayer2TileFactor, "float")
	Something(className, s_guid, "cloudLayerMaskTexture", s_Instance.cloudLayerMaskTexture, "CtrRef")
	Something(className, s_guid, "cloudLayerSunColor", s_Instance.cloudLayerSunColor, "Vec3")
	Something(className, s_guid, "customEnvmapAmbient", s_Instance.customEnvmapAmbient, "float")
	Something(className, s_guid, "customEnvmapScale", s_Instance.customEnvmapScale, "float")
	Something(className, s_guid, "customEnvmapTexture", s_Instance.customEnvmapTexture, "CtrRef")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "panoramicAlphaTexture", s_Instance.panoramicAlphaTexture, "CtrRef")
	Something(className, s_guid, "panoramicRotation", s_Instance.panoramicRotation, "float")
	Something(className, s_guid, "panoramicTexture", s_Instance.panoramicTexture, "CtrRef")
	Something(className, s_guid, "panoramicTileFactor", s_Instance.panoramicTileFactor, "float")
	Something(className, s_guid, "panoramicUVMaxX", s_Instance.panoramicUVMaxX, "float")
	Something(className, s_guid, "panoramicUVMaxY", s_Instance.panoramicUVMaxY, "float")
	Something(className, s_guid, "panoramicUVMinX", s_Instance.panoramicUVMinX, "float")
	Something(className, s_guid, "panoramicUVMinY", s_Instance.panoramicUVMinY, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "skyEnvmap8BitTexScale", s_Instance.skyEnvmap8BitTexScale, "float")
	Something(className, s_guid, "skyGradientTexture", s_Instance.skyGradientTexture, "CtrRef")
	Something(className, s_guid, "skyVisibilityExponent", s_Instance.skyVisibilityExponent, "float")
	Something(className, s_guid, "staticEnvmapScale", s_Instance.staticEnvmapScale, "float")
	Something(className, s_guid, "staticEnvmapTexture", s_Instance.staticEnvmapTexture, "CtrRef")
	Something(className, s_guid, "sunScale", s_Instance.sunScale, "float")
	Something(className, s_guid, "sunSize", s_Instance.sunSize, "float")
end

function Type:SkyEffectState (p_class, p_guid)
	local s_Instance = SkyEffectState(p_class) 
 	local className = "SkyEffectState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cloudLayer1", s_Instance.cloudLayer1, "SkyCloudLayer")
	Something(className, s_guid, "cloudLayer2", s_Instance.cloudLayer2, "SkyCloudLayer")
	Something(className, s_guid, "cloudLayerMaskTexture", s_Instance.cloudLayerMaskTexture, "CtrRef")
	Something(className, s_guid, "cloudLayerSunColor", s_Instance.cloudLayerSunColor, "Vec3")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "panoramicAlphaTexture", s_Instance.panoramicAlphaTexture, "CtrRef")
	Something(className, s_guid, "panoramicRotation", s_Instance.panoramicRotation, "float")
	Something(className, s_guid, "panoramicTexture", s_Instance.panoramicTexture, "CtrRef")
	Something(className, s_guid, "panoramicTileFactor", s_Instance.panoramicTileFactor, "float")
	Something(className, s_guid, "panoramicUVMaxX", s_Instance.panoramicUVMaxX, "float")
	Something(className, s_guid, "panoramicUVMaxY", s_Instance.panoramicUVMaxY, "float")
	Something(className, s_guid, "panoramicUVMinX", s_Instance.panoramicUVMinX, "float")
	Something(className, s_guid, "panoramicUVMinY", s_Instance.panoramicUVMinY, "float")
	Something(className, s_guid, "skyGradientScale", s_Instance.skyGradientScale, "float")
	Something(className, s_guid, "skyGradientTexture", s_Instance.skyGradientTexture, "CtrRef")
	Something(className, s_guid, "staticEnvmapTexture", s_Instance.staticEnvmapTexture, "CtrRef")
	Something(className, s_guid, "sunScale", s_Instance.sunScale, "float")
	Something(className, s_guid, "sunSize", s_Instance.sunSize, "float")
	Something(className, s_guid, "windDirection", s_Instance.windDirection, "float")
end

function Type:SlidingStateData (p_class, p_guid)
	local s_Instance = SlidingStateData(p_class) 
 	local className = "SlidingStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "gravityScale", s_Instance.gravityScale, "float")
	Something(className, s_guid, "horizontalInputScale", s_Instance.horizontalInputScale, "float")
end

function Type:SlowMotionEntityData (p_class, p_guid)
	local s_Instance = SlowMotionEntityData(p_class) 
 	local className = "SlowMotionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scaleDownTransitionTime", s_Instance.scaleDownTransitionTime, "float")
	Something(className, s_guid, "scaleUpTransitionTime", s_Instance.scaleUpTransitionTime, "float")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
end

function Type:SmokeJammingData (p_class, p_guid)
	local s_Instance = SmokeJammingData(p_class) 
 	local className = "SmokeJammingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enableSmokeJamming", s_Instance.enableSmokeJamming, "bool")
	Something(className, s_guid, "jammingPositionIsLocationDependent", s_Instance.jammingPositionIsLocationDependent, "bool")
	Something(className, s_guid, "jammingTime", s_Instance.jammingTime, "float")
	Something(className, s_guid, "maxRadius", s_Instance.maxRadius, "float")
	Something(className, s_guid, "minRadius", s_Instance.minRadius, "float")
	Something(className, s_guid, "reportJammedBasedOnStartPosition", s_Instance.reportJammedBasedOnStartPosition, "bool")
	Something(className, s_guid, "targetUpdateTime", s_Instance.targetUpdateTime, "float")
end

function Type:SniperLensScopeFilterData (p_class, p_guid)
	local s_Instance = SniperLensScopeFilterData(p_class) 
 	local className = "SniperLensScopeFilterData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurCenter", s_Instance.blurCenter, "Vec2")
	Something(className, s_guid, "blurScale", s_Instance.blurScale, "float")
	Something(className, s_guid, "chromaticAberrationColor1", s_Instance.chromaticAberrationColor1, "Vec3")
	Something(className, s_guid, "chromaticAberrationColor2", s_Instance.chromaticAberrationColor2, "Vec3")
	Something(className, s_guid, "chromaticAberrationDisplacement1", s_Instance.chromaticAberrationDisplacement1, "Vec2")
	Something(className, s_guid, "chromaticAberrationDisplacement2", s_Instance.chromaticAberrationDisplacement2, "Vec2")
	Something(className, s_guid, "chromaticAberrationStrengths", s_Instance.chromaticAberrationStrengths, "Vec2")
	Something(className, s_guid, "colorTintData", s_Instance.colorTintData, "fb.ColorTintData)")
	Something(className, s_guid, "radialBlendDistanceCoefficients", s_Instance.radialBlendDistanceCoefficients, "Vec2")
end

function Type:SocketData (p_class, p_guid)
	local s_Instance = SocketData(p_class) 
 	local className = "SocketData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "availableObjects", s_Instance.availableObjects, "List<CtrRef)>")
	Something(className, s_guid, "boneId", s_Instance.boneId, "int")
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
	Something(className, s_guid, "boneRigidTransform", s_Instance.boneRigidTransform, "LinearTransform")
	Something(className, s_guid, "defaultEnableSocketEntities", s_Instance.defaultEnableSocketEntities, "bool")
	Something(className, s_guid, "excluded", s_Instance.excluded, "bool")
	Something(className, s_guid, "forceSocketEntitiesEnabled", s_Instance.forceSocketEntitiesEnabled, "bool")
	Something(className, s_guid, "gearSlot", s_Instance.gearSlot, "fb.GearSlot)")
	Something(className, s_guid, "hideByLightToggle", s_Instance.hideByLightToggle, "bool")
	Something(className, s_guid, "hideByZoomTransition", s_Instance.hideByZoomTransition, "bool")
	Something(className, s_guid, "socketType", s_Instance.socketType, "fb.SocketType)")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
	Something(className, s_guid, "unlockAsset", s_Instance.unlockAsset, "CtrRef")
	Something(className, s_guid, "usesDefaultObject", s_Instance.usesDefaultObject, "bool")
end

function Type:SocketObjectData (p_class, p_guid)
	local s_Instance = SocketObjectData(p_class) 
 	local className = "SocketObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset1pGuid", s_Instance.asset1pGuid, "GUID")
	Something(className, s_guid, "asset1pZoomGuid", s_Instance.asset1pZoomGuid, "GUID")
	Something(className, s_guid, "asset3pGuid", s_Instance.asset3pGuid, "GUID")
	Something(className, s_guid, "customizedMaterials", s_Instance.customizedMaterials, "List<CtrRef)>")
	Something(className, s_guid, "variation1pGuids", s_Instance.variation1pGuids, "List<GUID)>")
	Something(className, s_guid, "variation1pZoomGuids", s_Instance.variation1pZoomGuids, "List<GUID)>")
	Something(className, s_guid, "variation3pGuids", s_Instance.variation3pGuids, "List<GUID)>")
end

function Type:SoldierAimAssistData (p_class, p_guid)
	local s_Instance = SoldierAimAssistData(p_class) 
 	local className = "SoldierAimAssistData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accelerationDamping", s_Instance.accelerationDamping, "float")
	Something(className, s_guid, "accelerationInputThreshold", s_Instance.accelerationInputThreshold, "float")
	Something(className, s_guid, "accelerationMultiplier", s_Instance.accelerationMultiplier, "float")
	Something(className, s_guid, "accelerationTimeThreshold", s_Instance.accelerationTimeThreshold, "float")
	Something(className, s_guid, "attractDistanceFallOff", s_Instance.attractDistanceFallOff, "List<float)>")
	Something(className, s_guid, "attractOwnRequiredMovementForMaximumAttract", s_Instance.attractOwnRequiredMovementForMaximumAttract, "float")
	Something(className, s_guid, "attractOwnSpeedInfluence", s_Instance.attractOwnSpeedInfluence, "float")
	Something(className, s_guid, "attractPitchStrength", s_Instance.attractPitchStrength, "float")
	Something(className, s_guid, "attractSoftZone", s_Instance.attractSoftZone, "float")
	Something(className, s_guid, "attractStartInputThreshold", s_Instance.attractStartInputThreshold, "float")
	Something(className, s_guid, "attractTargetSpeedInfluence", s_Instance.attractTargetSpeedInfluence, "float")
	Something(className, s_guid, "attractUserInputMultiplier", s_Instance.attractUserInputMultiplier, "float")
	Something(className, s_guid, "attractYawStrength", s_Instance.attractYawStrength, "float")
	Something(className, s_guid, "attractZoomingMultiplier", s_Instance.attractZoomingMultiplier, "float")
	Something(className, s_guid, "attractZoomingPostTime", s_Instance.attractZoomingPostTime, "float")
	Something(className, s_guid, "eyePosOffset", s_Instance.eyePosOffset, "Vec3")
	Something(className, s_guid, "inputPolynomial", s_Instance.inputPolynomial, "List<float)>")
	Something(className, s_guid, "maxAcceleration", s_Instance.maxAcceleration, "Vec2")
	Something(className, s_guid, "pitchSpeedStrength", s_Instance.pitchSpeedStrength, "float")
	Something(className, s_guid, "snapBoxScale", s_Instance.snapBoxScale, "Vec3")
	Something(className, s_guid, "snapDistanceScale", s_Instance.snapDistanceScale, "Vec3")
	Something(className, s_guid, "squaredAcceleration", s_Instance.squaredAcceleration, "float")
	Something(className, s_guid, "stickyBoxScale", s_Instance.stickyBoxScale, "Vec3")
	Something(className, s_guid, "stickyDistanceScale", s_Instance.stickyDistanceScale, "Vec3")
	Something(className, s_guid, "usePitchAcceleration", s_Instance.usePitchAcceleration, "bool")
	Something(className, s_guid, "useYawAcceleration", s_Instance.useYawAcceleration, "bool")
	Something(className, s_guid, "yawSpeedStrength", s_Instance.yawSpeedStrength, "float")
	Something(className, s_guid, "zoomedInputPolynomial", s_Instance.zoomedInputPolynomial, "List<float)>")
end

function Type:SoldierAimingConstraintsData (p_class, p_guid)
	local s_Instance = SoldierAimingConstraintsData(p_class) 
 	local className = "SoldierAimingConstraintsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "swimmingConstraints", s_Instance.swimmingConstraints, "AimingConstraintsData")
end

function Type:SoldierAimingSimulationData (p_class, p_guid)
	local s_Instance = SoldierAimingSimulationData(p_class) 
 	local className = "SoldierAimingSimulationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimAssist", s_Instance.aimAssist, "CtrRef")
	Something(className, s_guid, "aimingRange", s_Instance.aimingRange, "float")
	Something(className, s_guid, "crouchPose", s_Instance.crouchPose, "AimingPoseData")
	Something(className, s_guid, "fovDelayTime", s_Instance.fovDelayTime, "float")
	Something(className, s_guid, "fovTransitionTime", s_Instance.fovTransitionTime, "float")
	Something(className, s_guid, "lockAimToTargetSpeed", s_Instance.lockAimToTargetSpeed, "float")
	Something(className, s_guid, "modifiers", s_Instance.modifiers, "List<CtrRef)>")
	Something(className, s_guid, "pronePose", s_Instance.pronePose, "AimingPoseData")
	Something(className, s_guid, "returnToZoomAfterReload", s_Instance.returnToZoomAfterReload, "bool")
	Something(className, s_guid, "standPose", s_Instance.standPose, "AimingPoseData")
	Something(className, s_guid, "zoomLevels", s_Instance.zoomLevels, "List<CtrRef)>")
	Something(className, s_guid, "zoomTransitionTime", s_Instance.zoomTransitionTime, "float")
	Something(className, s_guid, "zoomTransitionTimeArray", s_Instance.zoomTransitionTimeArray, "List<ZoomLevelSpecificTransitionTime)>")
end

function Type:SoldierAnimatedCameraData (p_class, p_guid)
	local s_Instance = SoldierAnimatedCameraData(p_class) 
 	local className = "SoldierAnimatedCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraTransitionTime", s_Instance.cameraTransitionTime, "float")
	Something(className, s_guid, "enableFeature", s_Instance.enableFeature, "bool")
end

function Type:SoldierAutoAimData (p_class, p_guid)
	local s_Instance = SoldierAutoAimData(p_class) 
 	local className = "SoldierAutoAimData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "poses", s_Instance.poses, "List<AutoAimData)>")
end

function Type:SoldierBodyComponentData (p_class, p_guid)
	local s_Instance = SoldierBodyComponentData(p_class) 
 	local className = "SoldierBodyComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "overrideGravity", s_Instance.overrideGravity, "bool")
	Something(className, s_guid, "overrideGravityValue", s_Instance.overrideGravityValue, "float")
	Something(className, s_guid, "overrideVelocity", s_Instance.overrideVelocity, "bool")
	Something(className, s_guid, "overrideVelocityY", s_Instance.overrideVelocityY, "float")
	Something(className, s_guid, "sprintMultiplier", s_Instance.sprintMultiplier, "float")
end

function Type:SoldierCameraComponentData (p_class, p_guid)
	local s_Instance = SoldierCameraComponentData(p_class) 
 	local className = "SoldierCameraComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "authoritativeEyePosition", s_Instance.authoritativeEyePosition, "bool")
	Something(className, s_guid, "cameraBinding", s_Instance.cameraBinding, "fb.CameraBinding)")
	Something(className, s_guid, "cameras", s_Instance.cameras, "List<CtrRef)>")
	Something(className, s_guid, "disableAiming", s_Instance.disableAiming, "bool")
	Something(className, s_guid, "explosionImpulseMultiplier", s_Instance.explosionImpulseMultiplier, "float")
	Something(className, s_guid, "forceFieldOfView", s_Instance.forceFieldOfView, "float")
	Something(className, s_guid, "pitchTiltStrength", s_Instance.pitchTiltStrength, "float")
	Something(className, s_guid, "strafeTiltStrength", s_Instance.strafeTiltStrength, "float")
end

function Type:SoldierCustomizationAsset (p_class, p_guid)
	local s_Instance = SoldierCustomizationAsset(p_class) 
 	local className = "SoldierCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponTable", s_Instance.weaponTable, "CtrRef")
end

function Type:SoldierDecalComponentData (p_class, p_guid)
	local s_Instance = SoldierDecalComponentData(p_class) 
 	local className = "SoldierDecalComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "poolDecal", s_Instance.poolDecal, "CtrRef")
	Something(className, s_guid, "poolRayLength", s_Instance.poolRayLength, "float")
	Something(className, s_guid, "poolRayYOffset", s_Instance.poolRayYOffset, "float")
	Something(className, s_guid, "splashDecal", s_Instance.splashDecal, "CtrRef")
	Something(className, s_guid, "splashRayLength", s_Instance.splashRayLength, "float")
end

function Type:SoldierDetonationData (p_class, p_guid)
	local s_Instance = SoldierDetonationData(p_class) 
 	local className = "SoldierDetonationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angle", s_Instance.angle, "float")
	Something(className, s_guid, "hasSoldierDetonation", s_Instance.hasSoldierDetonation, "bool")
	Something(className, s_guid, "minSpeedForActivation", s_Instance.minSpeedForActivation, "float")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "soldierDetonationActivationDelay", s_Instance.soldierDetonationActivationDelay, "float")
	Something(className, s_guid, "useAngle", s_Instance.useAngle, "bool")
end

function Type:SoldierEmoteBinding (p_class, p_guid)
	local s_Instance = SoldierEmoteBinding(p_class) 
 	local className = "SoldierEmoteBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emoteAttackCapturePoint", s_Instance.emoteAttackCapturePoint, "AntRef")
	Something(className, s_guid, "emoteDefendCapturePoint", s_Instance.emoteDefendCapturePoint, "AntRef")
	Something(className, s_guid, "emoteFollowMe", s_Instance.emoteFollowMe, "AntRef")
	Something(className, s_guid, "emoteGoGoGo", s_Instance.emoteGoGoGo, "AntRef")
	Something(className, s_guid, "emoteMoveToPosition", s_Instance.emoteMoveToPosition, "AntRef")
	Something(className, s_guid, "emoteNeedAmmo", s_Instance.emoteNeedAmmo, "AntRef")
	Something(className, s_guid, "emoteNeedARide", s_Instance.emoteNeedARide, "AntRef")
	Something(className, s_guid, "emoteNeedBackup", s_Instance.emoteNeedBackup, "AntRef")
	Something(className, s_guid, "emoteNeedMedic", s_Instance.emoteNeedMedic, "AntRef")
	Something(className, s_guid, "emoteNo", s_Instance.emoteNo, "AntRef")
	Something(className, s_guid, "emoteOk", s_Instance.emoteOk, "AntRef")
	Something(className, s_guid, "emoteSorry", s_Instance.emoteSorry, "AntRef")
	Something(className, s_guid, "emoteSpot", s_Instance.emoteSpot, "AntRef")
	Something(className, s_guid, "emoteThanks", s_Instance.emoteThanks, "AntRef")
	Something(className, s_guid, "isSquadLeader", s_Instance.isSquadLeader, "AntRef")
	Something(className, s_guid, "speak", s_Instance.speak, "AntRef")
end

function Type:SoldierEmoteComponentData (p_class, p_guid)
	local s_Instance = SoldierEmoteComponentData(p_class) 
 	local className = "SoldierEmoteComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "SoldierEmoteBinding")
	Something(className, s_guid, "networkedMessageMappings", s_Instance.networkedMessageMappings, "List<CtrRef)>")
end

function Type:SoldierEmoteNetworkedMessageMapping (p_class, p_guid)
	local s_Instance = SoldierEmoteNetworkedMessageMapping(p_class) 
 	local className = "SoldierEmoteNetworkedMessageMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "emote", s_Instance.emote, "SoldierEmote")
	Something(className, s_guid, "messages", s_Instance.messages, "List<UIMessageType)>")
	Something(className, s_guid, "soldierEmoteNetworkedMessageMapping", s_Instance.soldierEmoteNetworkedMessageMapping,  "readonly")
	Something(className, s_guid, "uIMessageType", s_Instance.uIMessageType,  "uint")
end

function Type:SoldierEntityData (p_class, p_guid)
	local s_Instance = SoldierEntityData(p_class) 
 	local className = "SoldierEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "CtrRef")
	Something(className, s_guid, "autoAim", s_Instance.autoAim, "CtrRef")
	Something(className, s_guid, "boneFakePhysics", s_Instance.boneFakePhysics, "List<CtrRef)>")
	Something(className, s_guid, "breathControl", s_Instance.breathControl, "List<CtrRef)>")
	Something(className, s_guid, "characterPhysics", s_Instance.characterPhysics, "CtrRef")
	Something(className, s_guid, "collisionEnabled", s_Instance.collisionEnabled, "bool")
	Something(className, s_guid, "collisionInfo", s_Instance.collisionInfo, "CtrRef")
	Something(className, s_guid, "enableGroundmapLighting", s_Instance.enableGroundmapLighting, "bool")
	Something(className, s_guid, "explosionDamageModifier", s_Instance.explosionDamageModifier, "float")
	Something(className, s_guid, "fLIRKeyColor", s_Instance.fLIRKeyColor, "Vec3")
	Something(className, s_guid, "fLIRValue", s_Instance.fLIRValue, "float")
	Something(className, s_guid, "footMaterialPair", s_Instance.footMaterialPair, "CtrRef")
	Something(className, s_guid, "freeSpaceCheck", s_Instance.freeSpaceCheck, "bool")
	Something(className, s_guid, "headCollision", s_Instance.headCollision, "CtrRef")
	Something(className, s_guid, "headMaterialPair", s_Instance.headMaterialPair, "CtrRef")
	Something(className, s_guid, "healthModule", s_Instance.healthModule, "CtrRef")
	Something(className, s_guid, "hidableMeshParts", s_Instance.hidableMeshParts, "List<HidableSoldierMeshWeaponPart)>")
	Something(className, s_guid, "humanPlayerControlled", s_Instance.humanPlayerControlled, "bool")
	Something(className, s_guid, "impulseReactionTime", s_Instance.impulseReactionTime, "float")
	Something(className, s_guid, "interactiveManDownAllowed", s_Instance.interactiveManDownAllowed, "bool")
	Something(className, s_guid, "isPushable", s_Instance.isPushable, "bool")
	Something(className, s_guid, "lowerGunOnOwnTeam", s_Instance.lowerGunOnOwnTeam, "bool")
	Something(className, s_guid, "maxHealth", s_Instance.maxHealth, "float")
	Something(className, s_guid, "meshes1p", s_Instance.meshes1p, "List<SoldierMeshData)>")
	Something(className, s_guid, "meshes3p", s_Instance.meshes3p, "List<SoldierMeshData)>")
	Something(className, s_guid, "physicsControlled", s_Instance.physicsControlled, "bool")
	Something(className, s_guid, "proximityCheck", s_Instance.proximityCheck, "bool")
	Something(className, s_guid, "regenerationDelayModifier", s_Instance.regenerationDelayModifier, "float")
	Something(className, s_guid, "showNametag", s_Instance.showNametag, "bool")
	Something(className, s_guid, "showWeaponWhenDead", s_Instance.showWeaponWhenDead, "bool")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
	Something(className, s_guid, "sprintSettings", s_Instance.sprintSettings, "CtrRef")
	Something(className, s_guid, "streamGroup1p", s_Instance.streamGroup1p, "CtrRef")
	Something(className, s_guid, "uIParts", s_Instance.uIParts, "List<CtrRef)>")
	Something(className, s_guid, "useSpineXRotation", s_Instance.useSpineXRotation, "bool")
	Something(className, s_guid, "voiceOverInfo", s_Instance.voiceOverInfo, "CtrRef")
end

function Type:SoldierEntryComponentData (p_class, p_guid)
	local s_Instance = SoldierEntryComponentData(p_class) 
 	local className = "SoldierEntryComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "AimingConstraintsData")
	Something(className, s_guid, "alignConstraintsToEntity", s_Instance.alignConstraintsToEntity, "bool")
	Something(className, s_guid, "antEntryEnumeration", s_Instance.antEntryEnumeration, "CtrRef")
end

function Type:SoldierFootplantEffectComponentData (p_class, p_guid)
	local s_Instance = SoldierFootplantEffectComponentData(p_class) 
 	local className = "SoldierFootplantEffectComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "footMaterialPair", s_Instance.footMaterialPair, "CtrRef")
	Something(className, s_guid, "footVelocityThreshold", s_Instance.footVelocityThreshold, "float")
	Something(className, s_guid, "fullFootplantingEnabled", s_Instance.fullFootplantingEnabled, "bool")
	Something(className, s_guid, "heightOverGroundThreshold", s_Instance.heightOverGroundThreshold, "float")
	Something(className, s_guid, "lodDistance", s_Instance.lodDistance, "float")
end

function Type:SoldierHeadCollisionData (p_class, p_guid)
	local s_Instance = SoldierHeadCollisionData(p_class) 
 	local className = "SoldierHeadCollisionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "headRadius", s_Instance.headRadius, "float")
	Something(className, s_guid, "poseStates", s_Instance.poseStates, "List<SoldierHeadCollisionPoseData)>")
end

function Type:SoldierHeadCollisionPoseData (p_class, p_guid)
	local s_Instance = SoldierHeadCollisionPoseData(p_class) 
 	local className = "SoldierHeadCollisionPoseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "idleOffset", s_Instance.idleOffset, "Vec3")
	Something(className, s_guid, "movingForwardOffset", s_Instance.movingForwardOffset, "Vec3")
end

function Type:SoldierHealthModuleBinding (p_class, p_guid)
	local s_Instance = SoldierHealthModuleBinding(p_class) 
 	local className = "SoldierHealthModuleBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criticallyHit", s_Instance.criticallyHit, "AntRef")
	Something(className, s_guid, "dead", s_Instance.dead, "AntRef")
	Something(className, s_guid, "deathAnimationTriggered", s_Instance.deathAnimationTriggered, "AntRef")
	Something(className, s_guid, "deathHitDirection", s_Instance.deathHitDirection, "AntRef")
	Something(className, s_guid, "explosion", s_Instance.explosion, "AntRef")
	Something(className, s_guid, "forwardSpeed", s_Instance.forwardSpeed, "AntRef")
	Something(className, s_guid, "headShot", s_Instance.headShot, "AntRef")
	Something(className, s_guid, "hitBack", s_Instance.hitBack, "AntRef")
	Something(className, s_guid, "hitFront", s_Instance.hitFront, "AntRef")
	Something(className, s_guid, "hitLeft", s_Instance.hitLeft, "AntRef")
	Something(className, s_guid, "hitRight", s_Instance.hitRight, "AntRef")
	Something(className, s_guid, "interactiveManDown", s_Instance.interactiveManDown, "AntRef")
	Something(className, s_guid, "leftArmHit", s_Instance.leftArmHit, "AntRef")
	Something(className, s_guid, "leftLegHit", s_Instance.leftLegHit, "AntRef")
	Something(className, s_guid, "onGround", s_Instance.onGround, "AntRef")
	Something(className, s_guid, "pose", s_Instance.pose, "AntRef")
	Something(className, s_guid, "randomAnimationIndex", s_Instance.randomAnimationIndex, "AntRef")
	Something(className, s_guid, "randomValue", s_Instance.randomValue, "AntRef")
	Something(className, s_guid, "revived", s_Instance.revived, "AntRef")
	Something(className, s_guid, "rightArmHit", s_Instance.rightArmHit, "AntRef")
	Something(className, s_guid, "rightLegHit", s_Instance.rightLegHit, "AntRef")
	Something(className, s_guid, "rightSpeed", s_Instance.rightSpeed, "AntRef")
	Something(className, s_guid, "sprinting", s_Instance.sprinting, "AntRef")
end

function Type:SoldierMeshData (p_class, p_guid)
	local s_Instance = SoldierMeshData(p_class) 
 	local className = "SoldierMeshData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "meshBlueprint", s_Instance.meshBlueprint, "CtrRef")
	Something(className, s_guid, "randomGroup", s_Instance.randomGroup, "int")
end

function Type:SoldierMovementSequenceData (p_class, p_guid)
	local s_Instance = SoldierMovementSequenceData(p_class) 
 	local className = "SoldierMovementSequenceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ignoreRecordingIndexFilter", s_Instance.ignoreRecordingIndexFilter, "bool")
	Something(className, s_guid, "inputRecordingIndex", s_Instance.inputRecordingIndex, "int")
	Something(className, s_guid, "recordedInput", s_Instance.recordedInput, "CtrRef")
	Something(className, s_guid, "reportWhenFinished", s_Instance.reportWhenFinished, "bool")
end

function Type:SoldierParachuteBinding (p_class, p_guid)
	local s_Instance = SoldierParachuteBinding(p_class) 
 	local className = "SoldierParachuteBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accelerateBrake", s_Instance.accelerateBrake, "AntRef")
	Something(className, s_guid, "enabled", s_Instance.enabled, "AntRef")
	Something(className, s_guid, "pitch", s_Instance.pitch, "AntRef")
	Something(className, s_guid, "roll", s_Instance.roll, "AntRef")
	Something(className, s_guid, "steerLeftRight", s_Instance.steerLeftRight, "AntRef")
end

function Type:SoldierParachuteComponentData (p_class, p_guid)
	local s_Instance = SoldierParachuteComponentData(p_class) 
 	local className = "SoldierParachuteComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "AimingConstraintsData")
	Something(className, s_guid, "binding", s_Instance.binding, "SoldierParachuteBinding")
	Something(className, s_guid, "undeployTime", s_Instance.undeployTime, "float")
end

function Type:SoldierSoundComponentData (p_class, p_guid)
	local s_Instance = SoldierSoundComponentData(p_class) 
 	local className = "SoldierSoundComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "runPeriod", s_Instance.runPeriod, "float")
	Something(className, s_guid, "runVelocityThreshold", s_Instance.runVelocityThreshold, "float")
	Something(className, s_guid, "walkPeriod", s_Instance.walkPeriod, "float")
	Something(className, s_guid, "walkVelocityThreshold", s_Instance.walkVelocityThreshold, "float")
end

function Type:SoldierSoundData (p_class, p_guid)
	local s_Instance = SoldierSoundData(p_class) 
 	local className = "SoldierSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "breathControl", s_Instance.breathControl, "CtrRef")
	Something(className, s_guid, "bulletImpact", s_Instance.bulletImpact, "CtrRef")
	Something(className, s_guid, "death", s_Instance.death, "CtrRef")
	Something(className, s_guid, "healing", s_Instance.healing, "CtrRef")
	Something(className, s_guid, "hitIndicator", s_Instance.hitIndicator, "CtrRef")
	Something(className, s_guid, "minHealSoundTime", s_Instance.minHealSoundTime, "float")
	Something(className, s_guid, "movement", s_Instance.movement, "CtrRef")
	Something(className, s_guid, "movementThreshold", s_Instance.movementThreshold, "float")
	Something(className, s_guid, "pickupAmmo", s_Instance.pickupAmmo, "CtrRef")
	Something(className, s_guid, "pickupKit", s_Instance.pickupKit, "CtrRef")
	Something(className, s_guid, "sprintTimeForRecovery", s_Instance.sprintTimeForRecovery, "float")
end

function Type:SoldierSpawnAppearanceTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnAppearanceTemplateData(p_class) 
 	local className = "SoldierSpawnAppearanceTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "body", s_Instance.body, "uint")
end

function Type:SoldierSpawnKitTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnKitTemplateData(p_class) 
 	local className = "SoldierSpawnKitTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "kit", s_Instance.kit, "uint")
	Something(className, s_guid, "mainGun", s_Instance.mainGun, "uint")
end

function Type:SoldierSpawnTemplateData (p_class, p_guid)
	local s_Instance = SoldierSpawnTemplateData(p_class) 
 	local className = "SoldierSpawnTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationTemplate", s_Instance.animationTemplate, "CtrRef")
	Something(className, s_guid, "behaviour", s_Instance.behaviour, "CtrRef")
	Something(className, s_guid, "customizeSoldierData", s_Instance.customizeSoldierData, "CtrRef")
	Something(className, s_guid, "sensing", s_Instance.sensing, "CtrRef")
	Something(className, s_guid, "voiceOverLabels", s_Instance.voiceOverLabels, "List<CtrRef)>")
end

function Type:SoldierSprintSettingsData (p_class, p_guid)
	local s_Instance = SoldierSprintSettingsData(p_class) 
 	local className = "SoldierSprintSettingsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fov", s_Instance.fov, "float")
	Something(className, s_guid, "fovInDelay", s_Instance.fovInDelay, "float")
	Something(className, s_guid, "fovInTime", s_Instance.fovInTime, "float")
	Something(className, s_guid, "fovOutDelay", s_Instance.fovOutDelay, "float")
	Something(className, s_guid, "fovOutTime", s_Instance.fovOutTime, "float")
	Something(className, s_guid, "interruptingActions", s_Instance.interruptingActions, "List<EntryInputActionEnum)>")
	Something(className, s_guid, "recoverTime", s_Instance.recoverTime, "float")
	Something(className, s_guid, "sprintToProneRecoverTime", s_Instance.sprintToProneRecoverTime, "float")
	Something(className, s_guid, "soldierSprintSettingsData", s_Instance.soldierSprintSettingsData,  "readonly")
	Something(className, s_guid, "entryInputActionEnum", s_Instance.entryInputActionEnum,  "uint")
end

function Type:SoldierSuppressionComponentData (p_class, p_guid)
	local s_Instance = SoldierSuppressionComponentData(p_class) 
 	local className = "SoldierSuppressionComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkLineOfSight", s_Instance.checkLineOfSight, "bool")
	Something(className, s_guid, "fallOffDelay", s_Instance.fallOffDelay, "float")
	Something(className, s_guid, "fallOffMultiplier", s_Instance.fallOffMultiplier, "float")
	Something(className, s_guid, "reactionToSuppression", s_Instance.reactionToSuppression, "SuppressionReactionData")
	Something(className, s_guid, "suppressionAbortsHealthRegeneration", s_Instance.suppressionAbortsHealthRegeneration, "bool")
	Something(className, s_guid, "suppressionBoostModifier", s_Instance.suppressionBoostModifier, "float")
	Something(className, s_guid, "suppressionDecay", s_Instance.suppressionDecay, "float")
	Something(className, s_guid, "suppressionResistModifier", s_Instance.suppressionResistModifier, "float")
	Something(className, s_guid, "suppressionSphereRadius", s_Instance.suppressionSphereRadius, "float")
end

function Type:SoldierTestEntityData (p_class, p_guid)
	local s_Instance = SoldierTestEntityData(p_class) 
 	local className = "SoldierTestEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeInputRecording", s_Instance.activeInputRecording, "float")
	Something(className, s_guid, "authoritativeAimingActive", s_Instance.authoritativeAimingActive, "float")
	Something(className, s_guid, "authoritativePitch", s_Instance.authoritativePitch, "float")
	Something(className, s_guid, "authoritativeYaw", s_Instance.authoritativeYaw, "float")
	Something(className, s_guid, "cameraMovementsFilename", s_Instance.cameraMovementsFilename, "string")
	Something(className, s_guid, "fireCounterMeasure", s_Instance.fireCounterMeasure, "float")
	Something(className, s_guid, "fireInputVal", s_Instance.fireInputVal, "float")
	Something(className, s_guid, "inputRecorder", s_Instance.inputRecorder, "CtrRef")
	Something(className, s_guid, "jumpInputVal", s_Instance.jumpInputVal, "float")
	Something(className, s_guid, "pitchInputVal", s_Instance.pitchInputVal, "float")
	Something(className, s_guid, "proneInputVal", s_Instance.proneInputVal, "float")
	Something(className, s_guid, "randomSeed", s_Instance.randomSeed, "int")
	Something(className, s_guid, "rollInputVal", s_Instance.rollInputVal, "float")
	Something(className, s_guid, "runAutomatically", s_Instance.runAutomatically, "bool")
	Something(className, s_guid, "specialAnimationIndex", s_Instance.specialAnimationIndex, "float")
	Something(className, s_guid, "sprintInputVal", s_Instance.sprintInputVal, "bool")
	Something(className, s_guid, "startSequence", s_Instance.startSequence, "CtrRef")
	Something(className, s_guid, "startSequenceRoot", s_Instance.startSequenceRoot, "CtrRef")
	Something(className, s_guid, "strafeInputVal", s_Instance.strafeInputVal, "float")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
	Something(className, s_guid, "template", s_Instance.template, "CtrRef")
	Something(className, s_guid, "testSoldier", s_Instance.testSoldier, "CtrRef")
	Something(className, s_guid, "testVehicle", s_Instance.testVehicle, "CtrRef")
	Something(className, s_guid, "throttleInputVal", s_Instance.throttleInputVal, "float")
	Something(className, s_guid, "unlocksProfile", s_Instance.unlocksProfile, "CtrRef")
	Something(className, s_guid, "useUnlocksProfile", s_Instance.useUnlocksProfile, "bool")
	Something(className, s_guid, "yawInputVal", s_Instance.yawInputVal, "float")
	Something(className, s_guid, "zoomInputVal", s_Instance.zoomInputVal, "float")
end

function Type:SoldierWeaponCustomizationAsset (p_class, p_guid)
	local s_Instance = SoldierWeaponCustomizationAsset(p_class) 
 	local className = "SoldierWeaponCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customization", s_Instance.customization, "CtrRef")
end

function Type:SoldierWeaponData (p_class, p_guid)
	local s_Instance = SoldierWeaponData(p_class) 
 	local className = "SoldierWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingController", s_Instance.aimingController, "CtrRef")
	Something(className, s_guid, "allowSwitchingToWeaponInVehicles", s_Instance.allowSwitchingToWeaponInVehicles, "bool")
	Something(className, s_guid, "allowSwitchingToWeaponOutOfAmmo", s_Instance.allowSwitchingToWeaponOutOfAmmo, "bool")
	Something(className, s_guid, "allowSwitchingToWeaponReloading", s_Instance.allowSwitchingToWeaponReloading, "bool")
	Something(className, s_guid, "animationData", s_Instance.animationData, "CtrRef")
	Something(className, s_guid, "animBaseSet", s_Instance.animBaseSet, "WeaponAnimBaseSetEnum")
	Something(className, s_guid, "canBeInSupportedShooting", s_Instance.canBeInSupportedShooting, "bool")
	Something(className, s_guid, "customization", s_Instance.customization, "CtrRef")
	Something(className, s_guid, "damageGiverName", s_Instance.damageGiverName, "string")
	Something(className, s_guid, "enableBreathControl", s_Instance.enableBreathControl, "bool")
	Something(className, s_guid, "firstPersonCamera", s_Instance.firstPersonCamera, "CtrRef")
	Something(className, s_guid, "hideWhenOutOfAmmo", s_Instance.hideWhenOutOfAmmo, "bool")
	Something(className, s_guid, "hud", s_Instance.hud, "HudData")
	Something(className, s_guid, "interactionOffset", s_Instance.interactionOffset, "Vec3")
	Something(className, s_guid, "isSilenced", s_Instance.isSilenced, "bool")
	Something(className, s_guid, "lowerOnOwnTeam", s_Instance.lowerOnOwnTeam, "bool")
	Something(className, s_guid, "persistenceId", s_Instance.persistenceId, "string")
	Something(className, s_guid, "pickupSettings", s_Instance.pickupSettings, "PickupSettingsData")
	Something(className, s_guid, "quickThrowType", s_Instance.quickThrowType, "QuickThrowTypeEnum")
	Something(className, s_guid, "redeployWhenSwitchingWeaponStates", s_Instance.redeployWhenSwitchingWeaponStates, "bool")
	Something(className, s_guid, "renderFov", s_Instance.renderFov, "float")
	Something(className, s_guid, "sockets", s_Instance.sockets, "List<CtrRef)>")
	Something(className, s_guid, "soldierWeaponBlueprint", s_Instance.soldierWeaponBlueprint, "CtrRef")
	Something(className, s_guid, "streamGroup1p", s_Instance.streamGroup1p, "CtrRef")
	Something(className, s_guid, "switchToPrimaryWhenOutOfAmmo", s_Instance.switchToPrimaryWhenOutOfAmmo, "bool")
	Something(className, s_guid, "switchWeaponStateInputAction", s_Instance.switchWeaponStateInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "useQuickThrowOnAutomaticSwitchback", s_Instance.useQuickThrowOnAutomaticSwitchback, "bool")
	Something(className, s_guid, "voiceOverInfo", s_Instance.voiceOverInfo, "CtrRef")
	Something(className, s_guid, "weaponFloatParam", s_Instance.weaponFloatParam, "float")
	Something(className, s_guid, "weaponModifierData", s_Instance.weaponModifierData, "List<fb).WeaponModifierData>")
	Something(className, s_guid, "zoomRenderFov", s_Instance.zoomRenderFov, "float")
end

function Type:SoldierWeaponDispersion (p_class, p_guid)
	local s_Instance = SoldierWeaponDispersion(p_class) 
 	local className = "SoldierWeaponDispersion"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "crouchDispersion", s_Instance.crouchDispersion, "FiringDispersionData")
	Something(className, s_guid, "decreasePerSecond", s_Instance.decreasePerSecond, "float")
	Something(className, s_guid, "jumpDispersionAngle", s_Instance.jumpDispersionAngle, "float")
	Something(className, s_guid, "moveDispersionAngle", s_Instance.moveDispersionAngle, "float")
	Something(className, s_guid, "moveZoomedDispersionAngle", s_Instance.moveZoomedDispersionAngle, "float")
	Something(className, s_guid, "proneDispersion", s_Instance.proneDispersion, "FiringDispersionData")
	Something(className, s_guid, "proneTransitionDispersionAngle", s_Instance.proneTransitionDispersionAngle, "float")
	Something(className, s_guid, "standDispersion", s_Instance.standDispersion, "FiringDispersionData")
end

function Type:SoldierWeaponMultiUnlock (p_class, p_guid)
	local s_Instance = SoldierWeaponMultiUnlock(p_class) 
 	local className = "SoldierWeaponMultiUnlock"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "first", s_Instance.first, "CtrRef")
	Something(className, s_guid, "unlockAssetPairs", s_Instance.unlockAssetPairs, "List<UnlockAssetPair)>")
end

function Type:SoldierWeaponOverrideData (p_class, p_guid)
	local s_Instance = SoldierWeaponOverrideData(p_class) 
 	local className = "SoldierWeaponOverrideData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "overrides", s_Instance.overrides, "List<CtrRef)>")
end

function Type:SoldierWeaponsComponentData (p_class, p_guid)
	local s_Instance = SoldierWeaponsComponentData(p_class) 
 	local className = "SoldierWeaponsComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimDir", s_Instance.aimDir, "LinearTransform")
	Something(className, s_guid, "ammoClipIncreaseMultiplier", s_Instance.ammoClipIncreaseMultiplier, "float")
	Something(className, s_guid, "animated1pOnlyWeaponBinding", s_Instance.animated1pOnlyWeaponBinding, "fb.Animated1pOnlyWeaponBinding)")
	Something(className, s_guid, "animated3pOnlyWeaponBinding", s_Instance.animated3pOnlyWeaponBinding, "fb.Animated3pOnlyWeaponBinding)")
	Something(className, s_guid, "animatedWeaponBinding", s_Instance.animatedWeaponBinding, "fb.AnimatedWeaponBinding)")
	Something(className, s_guid, "explosiveIncreaseMultiplier", s_Instance.explosiveIncreaseMultiplier, "float")
	Something(className, s_guid, "grenadeIncrease", s_Instance.grenadeIncrease, "int")
	Something(className, s_guid, "lockTimeMultiplier", s_Instance.lockTimeMultiplier, "float")
	Something(className, s_guid, "primaryWeaponId", s_Instance.primaryWeaponId, "int")
	Something(className, s_guid, "underslungGrenadeIncrease", s_Instance.underslungGrenadeIncrease, "int")
	Something(className, s_guid, "unlimitedAmmo", s_Instance.unlimitedAmmo, "bool")
	Something(className, s_guid, "unlimitedMags", s_Instance.unlimitedMags, "bool")
	Something(className, s_guid, "useExternalAimDir", s_Instance.useExternalAimDir, "bool")
	Something(className, s_guid, "weaponSkeleton", s_Instance.weaponSkeleton, "CtrRef")
end

function Type:SoldierWeaponSwitchingData (p_class, p_guid)
	local s_Instance = SoldierWeaponSwitchingData(p_class) 
 	local className = "SoldierWeaponSwitchingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "directSwitchMap", s_Instance.directSwitchMap, "List<DirectWeaponSwitchingMapData)>")
	Something(className, s_guid, "switchMap", s_Instance.switchMap, "List<WeaponSwitchingMapData)>")
	Something(className, s_guid, "switchToGadgetCooldownTime", s_Instance.switchToGadgetCooldownTime, "float")
end

function Type:SoldierWeaponUnlockAsset (p_class, p_guid)
	local s_Instance = SoldierWeaponUnlockAsset(p_class) 
 	local className = "SoldierWeaponUnlockAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "extra", s_Instance.extra, "CtrRef")
	Something(className, s_guid, "weapon", s_Instance.weapon, "CtrRef")
	Something(className, s_guid, "weaponIdentifier", s_Instance.weaponIdentifier, "uint")
end

function Type:SoundAreaEntityData (p_class, p_guid)
	local s_Instance = SoundAreaEntityData(p_class) 
 	local className = "SoundAreaEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bigWorld", s_Instance.bigWorld, "CtrRef")
	Something(className, s_guid, "fadeCurve", s_Instance.fadeCurve, "FadeCurveType")
	Something(className, s_guid, "fadeWidth", s_Instance.fadeWidth, "float")
	Something(className, s_guid, "proximityMultiplier", s_Instance.proximityMultiplier, "float")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:SoundAsset (p_class, p_guid)
	local s_Instance = SoundAsset(p_class) 
 	local className = "SoundAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scope", s_Instance.scope, "CtrRef")
end

function Type:SoundBusData (p_class, p_guid)
	local s_Instance = SoundBusData(p_class) 
 	local className = "SoundBusData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "busName", s_Instance.busName, "string")
	Something(className, s_guid, "channelCount", s_Instance.channelCount, "sbyte")
	Something(className, s_guid, "submixPlugin", s_Instance.submixPlugin, "SoundGraphPluginRef")
end

function Type:SoundDataAsset (p_class, p_guid)
	local s_Instance = SoundDataAsset(p_class) 
 	local className = "SoundDataAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chunks", s_Instance.chunks, "List<SoundDataChunk)>")
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
end

function Type:SoundDataChunk (p_class, p_guid)
	local s_Instance = SoundDataChunk(p_class) 
 	local className = "SoundDataChunk"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chunkId", s_Instance.chunkId, "GUID")
	Something(className, s_guid, "chunkSize", s_Instance.chunkSize, "uint")
end

function Type:SoundEffectEntityData (p_class, p_guid)
	local s_Instance = SoundEffectEntityData(p_class) 
 	local className = "SoundEffectEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:SoundEntityData (p_class, p_guid)
	local s_Instance = SoundEntityData(p_class) 
 	local className = "SoundEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "obstructionHandle", s_Instance.obstructionHandle, "int")
	Something(className, s_guid, "playOnCreation", s_Instance.playOnCreation, "bool")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:SoundEnvironmentConstantData (p_class, p_guid)
	local s_Instance = SoundEnvironmentConstantData(p_class) 
 	local className = "SoundEnvironmentConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "humanPlayerSoldierMovementVolumeOverride", s_Instance.humanPlayerSoldierMovementVolumeOverride, "float")
	Something(className, s_guid, "memoryTime", s_Instance.memoryTime, "float")
	Something(className, s_guid, "minimumLoudness", s_Instance.minimumLoudness, "float")
end

function Type:SoundGraphAsset (p_class, p_guid)
	local s_Instance = SoundGraphAsset(p_class) 
 	local className = "SoundGraphAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "graph", s_Instance.graph, "CtrRef")
	Something(className, s_guid, "mixer", s_Instance.mixer, "CtrRef")
end

function Type:SoundGraphData (p_class, p_guid)
	local s_Instance = SoundGraphData(p_class) 
 	local className = "SoundGraphData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "info", s_Instance.info, "SoundGraphInfo")
	Something(className, s_guid, "inputEvents", s_Instance.inputEvents, "List<CtrRef)>")
	Something(className, s_guid, "inputParameters", s_Instance.inputParameters, "List<CtrRef)>")
	Something(className, s_guid, "outputEvents", s_Instance.outputEvents, "List<CtrRef)>")
	Something(className, s_guid, "outputParameters", s_Instance.outputParameters, "List<CtrRef)>")
end

function Type:SoundGraphInfo (p_class, p_guid)
	local s_Instance = SoundGraphInfo(p_class) 
 	local className = "SoundGraphInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "connections", s_Instance.connections, "List<SoundGraphPluginConnection)>")
	Something(className, s_guid, "constructParams", s_Instance.constructParams, "List<SoundGraphPluginConstructParam)>")
	Something(className, s_guid, "linkedPluginAttributes", s_Instance.linkedPluginAttributes, "List<SoundGraphLinkedPluginAttribute)>")
	Something(className, s_guid, "pluginCount", s_Instance.pluginCount, "uint")
	Something(className, s_guid, "pluginsParamCount", s_Instance.pluginsParamCount, "uint")
	Something(className, s_guid, "voices", s_Instance.voices, "List<SoundGraphVoiceInfo)>")
end

function Type:SoundGraphLinkedPluginAttribute (p_class, p_guid)
	local s_Instance = SoundGraphLinkedPluginAttribute(p_class) 
 	local className = "SoundGraphLinkedPluginAttribute"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowExtremeValues", s_Instance.allowExtremeValues, "bool")
	Something(className, s_guid, "attributeIndex", s_Instance.attributeIndex, "sbyte")
	Something(className, s_guid, "node", s_Instance.node, "CtrRef")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
	Something(className, s_guid, "port", s_Instance.port, "AudioGraphNodePort")
end

function Type:SoundGraphPluginConnection (p_class, p_guid)
	local s_Instance = SoundGraphPluginConnection(p_class) 
 	local className = "SoundGraphPluginConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bus", s_Instance.bus, "CtrRef")
	Something(className, s_guid, "connectionType", s_Instance.connectionType, "SoundGraphPluginConnectionType")
	Something(className, s_guid, "parameters", s_Instance.parameters, "List<SoundGraphPluginConnectionParam)>")
	Something(className, s_guid, "voiceIndex", s_Instance.voiceIndex, "sbyte")
end

function Type:SoundGraphPluginConnectionParam (p_class, p_guid)
	local s_Instance = SoundGraphPluginConnectionParam(p_class) 
 	local className = "SoundGraphPluginConnectionParam"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "sbyte")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:SoundGraphPluginConstructParam (p_class, p_guid)
	local s_Instance = SoundGraphPluginConstructParam(p_class) 
 	local className = "SoundGraphPluginConstructParam"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "index", s_Instance.index, "sbyte")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:SoundGraphPluginInfo (p_class, p_guid)
	local s_Instance = SoundGraphPluginInfo(p_class) 
 	local className = "SoundGraphPluginInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "connectionIndex", s_Instance.connectionIndex, "sbyte")
	Something(className, s_guid, "constructParamCount", s_Instance.constructParamCount, "sbyte")
	Something(className, s_guid, "constructParamsIndex", s_Instance.constructParamsIndex, "sbyte")
	Something(className, s_guid, "enableAttributeReadMask", s_Instance.enableAttributeReadMask, "uint")
	Something(className, s_guid, "id", s_Instance.id, "uint")
	Something(className, s_guid, "outputChannelCount", s_Instance.outputChannelCount, "sbyte")
end

function Type:SoundGraphPluginRef (p_class, p_guid)
	local s_Instance = SoundGraphPluginRef(p_class) 
 	local className = "SoundGraphPluginRef"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isValid", s_Instance.isValid, "bool")
	Something(className, s_guid, "pluginIndex", s_Instance.pluginIndex, "sbyte")
	Something(className, s_guid, "voiceIndex", s_Instance.voiceIndex, "sbyte")
end

function Type:SoundGraphVoiceInfo (p_class, p_guid)
	local s_Instance = SoundGraphVoiceInfo(p_class) 
 	local className = "SoundGraphVoiceInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "plugins", s_Instance.plugins, "List<SoundGraphPluginInfo)>")
	Something(className, s_guid, "processingStage", s_Instance.processingStage, "sbyte")
end

function Type:SoundMasterPatchAsset (p_class, p_guid)
	local s_Instance = SoundMasterPatchAsset(p_class) 
 	local className = "SoundMasterPatchAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "busses", s_Instance.busses, "List<CtrRef)>")
	Something(className, s_guid, "rwMovieBus", s_Instance.rwMovieBus, "CtrRef")
end

function Type:SoundPatchAsset (p_class, p_guid)
	local s_Instance = SoundPatchAsset(p_class) 
 	local className = "SoundPatchAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aILoudness", s_Instance.aILoudness, "float")
	Something(className, s_guid, "defaultEnterScopeEvent", s_Instance.defaultEnterScopeEvent, "CtrRef")
	Something(className, s_guid, "defaultForceInitEvent", s_Instance.defaultForceInitEvent, "CtrRef")
	Something(className, s_guid, "defaultStartEvent", s_Instance.defaultStartEvent, "CtrRef")
	Something(className, s_guid, "defaultStopEvent", s_Instance.defaultStopEvent, "CtrRef")
	Something(className, s_guid, "dopplerFactor", s_Instance.dopplerFactor, "float")
	Something(className, s_guid, "isLooping", s_Instance.isLooping, "bool")
	Something(className, s_guid, "isPersistent", s_Instance.isPersistent, "bool")
	Something(className, s_guid, "loudness", s_Instance.loudness, "float")
	Something(className, s_guid, "masterPitch", s_Instance.masterPitch, "float")
	Something(className, s_guid, "mixGroup", s_Instance.mixGroup, "CtrRef")
	Something(className, s_guid, "outputNodes", s_Instance.outputNodes, "List<CtrRef)>")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
end

function Type:SoundPatchConfigurationAsset (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationAsset(p_class) 
 	local className = "SoundPatchConfigurationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entries", s_Instance.entries, "List<CtrRef)>")
	Something(className, s_guid, "loudness", s_Instance.loudness, "float")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:SoundPatchConfigurationAssetEntry (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationAssetEntry(p_class) 
 	local className = "SoundPatchConfigurationAssetEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:SoundPatchConfigurationParameterEntry (p_class, p_guid)
	local s_Instance = SoundPatchConfigurationParameterEntry(p_class) 
 	local className = "SoundPatchConfigurationParameterEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameHash", s_Instance.nameHash, "uint")
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:SoundPatchPublicNode (p_class, p_guid)
	local s_Instance = SoundPatchPublicNode(p_class) 
 	local className = "SoundPatchPublicNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "uint")
	Something(className, s_guid, "node", s_Instance.node, "CtrRef")
end

function Type:SoundPrimeEntityData (p_class, p_guid)
	local s_Instance = SoundPrimeEntityData(p_class) 
 	local className = "SoundPrimeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataAssets", s_Instance.dataAssets, "List<CtrRef)>")
end

function Type:SoundScopeData (p_class, p_guid)
	local s_Instance = SoundScopeData(p_class) 
 	local className = "SoundScopeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultStrategy", s_Instance.defaultStrategy, "CtrRef")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:SoundScopeSetupData (p_class, p_guid)
	local s_Instance = SoundScopeSetupData(p_class) 
 	local className = "SoundScopeSetupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mappings", s_Instance.mappings, "List<SoundScopeStrategyMapping)>")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:SoundScopeSetupEntityData (p_class, p_guid)
	local s_Instance = SoundScopeSetupEntityData(p_class) 
 	local className = "SoundScopeSetupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "setup", s_Instance.setup, "CtrRef")
end

function Type:SoundScopeStrategyData (p_class, p_guid)
	local s_Instance = SoundScopeStrategyData(p_class) 
 	local className = "SoundScopeStrategyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:SoundScopeStrategyMapping (p_class, p_guid)
	local s_Instance = SoundScopeStrategyMapping(p_class) 
 	local className = "SoundScopeStrategyMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scope", s_Instance.scope, "CtrRef")
	Something(className, s_guid, "strategy", s_Instance.strategy, "CtrRef")
end

function Type:SoundSettings (p_class, p_guid)
	local s_Instance = SoundSettings(p_class) 
 	local className = "SoundSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "audioSystemUri", s_Instance.audioSystemUri, "string")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "vOCommon", s_Instance.vOCommon, "string")
	Something(className, s_guid, "vOEnglish", s_Instance.vOEnglish, "string")
	Something(className, s_guid, "vOFrench", s_Instance.vOFrench, "string")
	Something(className, s_guid, "vOGerman", s_Instance.vOGerman, "string")
	Something(className, s_guid, "vOItalian", s_Instance.vOItalian, "string")
	Something(className, s_guid, "vOSpanish", s_Instance.vOSpanish, "string")
end

function Type:SoundState (p_class, p_guid)
	local s_Instance = SoundState(p_class) 
 	local className = "SoundState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bypassSound", s_Instance.bypassSound, "CtrRef")
	Something(className, s_guid, "duration", s_Instance.duration, "float")
	Something(className, s_guid, "fadeInTime", s_Instance.fadeInTime, "float")
	Something(className, s_guid, "fadeOutTime", s_Instance.fadeOutTime, "float")
	Something(className, s_guid, "fadeSound", s_Instance.fadeSound, "bool")
	Something(className, s_guid, "hdrSetting", s_Instance.hdrSetting, "CtrRef")
	Something(className, s_guid, "lpCutoffFrequency", s_Instance.lpCutoffFrequency, "float")
	Something(className, s_guid, "mixer", s_Instance.mixer, "CtrRef")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:SoundStateEntityData (p_class, p_guid)
	local s_Instance = SoundStateEntityData(p_class) 
 	local className = "SoundStateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "soundState", s_Instance.soundState, "CtrRef")
end

function Type:SoundStateSettingsAsset (p_class, p_guid)
	local s_Instance = SoundStateSettingsAsset(p_class) 
 	local className = "SoundStateSettingsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "impairedHearingImpulseThreshold", s_Instance.impairedHearingImpulseThreshold, "float")
	Something(className, s_guid, "screamThreshold", s_Instance.screamThreshold, "float")
	Something(className, s_guid, "soundStates", s_Instance.soundStates, "List<CtrRef)>")
	Something(className, s_guid, "supressionThreshold", s_Instance.supressionThreshold, "float")
end

function Type:SoundTestAsset (p_class, p_guid)
	local s_Instance = SoundTestAsset(p_class) 
 	local className = "SoundTestAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suites", s_Instance.suites, "List<CtrRef)>")
	Something(className, s_guid, "taskSpecs", s_Instance.taskSpecs, "List<CtrRef)>")
	Something(className, s_guid, "testSpecs", s_Instance.testSpecs, "List<CtrRef)>")
end

function Type:SoundTestEventTask (p_class, p_guid)
	local s_Instance = SoundTestEventTask(p_class) 
 	local className = "SoundTestEventTask"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventName", s_Instance.eventName, "string")
end

function Type:SoundTestParamTask (p_class, p_guid)
	local s_Instance = SoundTestParamTask(p_class) 
 	local className = "SoundTestParamTask"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "behavior", s_Instance.behavior, "SoundTestParamBehavior")
	Something(className, s_guid, "initialValue", s_Instance.initialValue, "float")
	Something(className, s_guid, "paramName", s_Instance.paramName, "string")
	Something(className, s_guid, "rangeMax", s_Instance.rangeMax, "float")
	Something(className, s_guid, "rangeMin", s_Instance.rangeMin, "float")
end

function Type:SoundTestSpec (p_class, p_guid)
	local s_Instance = SoundTestSpec(p_class) 
 	local className = "SoundTestSpec"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "duration", s_Instance.duration, "float")
	Something(className, s_guid, "mainStartTask", s_Instance.mainStartTask, "CtrRef")
	Something(className, s_guid, "mainStopTask", s_Instance.mainStopTask, "CtrRef")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "tasks", s_Instance.tasks, "List<CtrRef)>")
end

function Type:SoundTestSuite (p_class, p_guid)
	local s_Instance = SoundTestSuite(p_class) 
 	local className = "SoundTestSuite"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assets", s_Instance.assets, "List<CtrRef)>")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "profileTests", s_Instance.profileTests, "bool")
	Something(className, s_guid, "tests", s_Instance.tests, "List<CtrRef)>")
end

function Type:SoundTestTask (p_class, p_guid)
	local s_Instance = SoundTestTask(p_class) 
 	local className = "SoundTestTask"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "param", s_Instance.param, "CtrRef")
	Something(className, s_guid, "repetitions", s_Instance.repetitions, "uint")
	Something(className, s_guid, "spec", s_Instance.spec, "CtrRef")
	Something(className, s_guid, "startTime", s_Instance.startTime, "float")
end

function Type:SoundTestTaskSpec (p_class, p_guid)
	local s_Instance = SoundTestTaskSpec(p_class) 
 	local className = "SoundTestTaskSpec"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "duration", s_Instance.duration, "float")
end

function Type:SoundTestTransformTask (p_class, p_guid)
	local s_Instance = SoundTestTransformTask(p_class) 
 	local className = "SoundTestTransformTask"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "behavior", s_Instance.behavior, "SoundTestTransformBehavior")
	Something(className, s_guid, "initialPosition", s_Instance.initialPosition, "Vec3")
	Something(className, s_guid, "relativeListener", s_Instance.relativeListener, "bool")
end

function Type:SoundWaveAsset (p_class, p_guid)
	local s_Instance = SoundWaveAsset(p_class) 
 	local className = "SoundWaveAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "channelCount", s_Instance.channelCount, "sbyte")
	Something(className, s_guid, "localization", s_Instance.localization, "List<SoundWaveLocalizationInfo)>")
	Something(className, s_guid, "persistentVariationCount", s_Instance.persistentVariationCount, "sbyte")
	Something(className, s_guid, "preferAvailableVariations", s_Instance.preferAvailableVariations, "bool")
	Something(className, s_guid, "primePriority", s_Instance.primePriority, "sbyte")
	Something(className, s_guid, "requestPriority", s_Instance.requestPriority, "sbyte")
	Something(className, s_guid, "seekable", s_Instance.seekable, "bool")
	Something(className, s_guid, "selection", s_Instance.selection, "SoundWaveVariationSelection")
	Something(className, s_guid, "streamPool", s_Instance.streamPool, "CtrRef")
	Something(className, s_guid, "subtitleStringIds", s_Instance.subtitleStringIds, "List<string)>")
	Something(className, s_guid, "variations", s_Instance.variations, "List<CtrRef)>")
	Something(className, s_guid, "voicePriority", s_Instance.voicePriority, "sbyte")
end

function Type:SoundWaveLocalizationInfo (p_class, p_guid)
	local s_Instance = SoundWaveLocalizationInfo(p_class) 
 	local className = "SoundWaveLocalizationInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "firstVariationIndex", s_Instance.firstVariationIndex, "ushort")
	Something(className, s_guid, "language", s_Instance.language, "CtrRef")
	Something(className, s_guid, "variationCount", s_Instance.variationCount, "ushort")
end

function Type:SoundWaveSubtitle (p_class, p_guid)
	local s_Instance = SoundWaveSubtitle(p_class) 
 	local className = "SoundWaveSubtitle"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "stringIndex", s_Instance.stringIndex, "sbyte")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:SoundWaveVariation (p_class, p_guid)
	local s_Instance = SoundWaveVariation(p_class) 
 	local className = "SoundWaveVariation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chunkIndex", s_Instance.chunkIndex, "sbyte")
	Something(className, s_guid, "firstLoopSegmentIndex", s_Instance.firstLoopSegmentIndex, "sbyte")
	Something(className, s_guid, "lastLoopSegmentIndex", s_Instance.lastLoopSegmentIndex, "sbyte")
	Something(className, s_guid, "seekTablesSize", s_Instance.seekTablesSize, "uint")
	Something(className, s_guid, "segments", s_Instance.segments, "List<SoundWaveVariationSegment)>")
	Something(className, s_guid, "subtitles", s_Instance.subtitles, "List<SoundWaveSubtitle)>")
end

function Type:SoundWaveVariationSegment (p_class, p_guid)
	local s_Instance = SoundWaveVariationSegment(p_class) 
 	local className = "SoundWaveVariationSegment"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "samplesOffset", s_Instance.samplesOffset, "uint")
	Something(className, s_guid, "seekTableOffset", s_Instance.seekTableOffset, "uint")
	Something(className, s_guid, "segmentLength", s_Instance.segmentLength, "float")
end

function Type:SpatialEntityData (p_class, p_guid)
	local s_Instance = SpatialEntityData(p_class) 
 	local className = "SpatialEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:SpawnAnimationData (p_class, p_guid)
	local s_Instance = SpawnAnimationData(p_class) 
 	local className = "SpawnAnimationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationSpeed", s_Instance.animationSpeed, "float")
end

function Type:SpawnAnimationFrameData (p_class, p_guid)
	local s_Instance = SpawnAnimationFrameData(p_class) 
 	local className = "SpawnAnimationFrameData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationFrame", s_Instance.animationFrame, "uint")
end

function Type:SpawnDirectionData (p_class, p_guid)
	local s_Instance = SpawnDirectionData(p_class) 
 	local className = "SpawnDirectionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "directionFromEmitterOrigin", s_Instance.directionFromEmitterOrigin, "float")
	Something(className, s_guid, "inheritSpeedAndDirectionFromEmitter", s_Instance.inheritSpeedAndDirectionFromEmitter, "bool")
end

function Type:SpawnEvent (p_class, p_guid)
	local s_Instance = SpawnEvent(p_class) 
 	local className = "SpawnEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:SpawnPointManagerData (p_class, p_guid)
	local s_Instance = SpawnPointManagerData(p_class) 
 	local className = "SpawnPointManagerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "useAiLodSystem", s_Instance.useAiLodSystem, "bool")
end

function Type:SpawnRateData (p_class, p_guid)
	local s_Instance = SpawnRateData(p_class) 
 	local className = "SpawnRateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distributeOverDistance", s_Instance.distributeOverDistance, "bool")
	Something(className, s_guid, "distributeOverTime", s_Instance.distributeOverTime, "bool")
	Something(className, s_guid, "spawnRate", s_Instance.spawnRate, "float")
	Something(className, s_guid, "trailSegmentLength", s_Instance.trailSegmentLength, "float")
end

function Type:SpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = SpawnReferenceObjectData(p_class) 
 	local className = "SpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "airdropTransform", s_Instance.airdropTransform, "LinearTransform")
	Something(className, s_guid, "autoSpawn", s_Instance.autoSpawn, "bool")
	Something(className, s_guid, "clearBangersOnSpawn", s_Instance.clearBangersOnSpawn, "bool")
	Something(className, s_guid, "controllableInput", s_Instance.controllableInput, "LinearTransform")
	Something(className, s_guid, "controllableTransform", s_Instance.controllableTransform, "LinearTransform")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "initialAutoSpawn", s_Instance.initialAutoSpawn, "bool")
	Something(className, s_guid, "initialSpawnDelay", s_Instance.initialSpawnDelay, "float")
	Something(className, s_guid, "initialVelocity", s_Instance.initialVelocity, "float")
	Something(className, s_guid, "isDynamicSpawn", s_Instance.isDynamicSpawn, "bool")
	Something(className, s_guid, "locationNameSid", s_Instance.locationNameSid, "string")
	Something(className, s_guid, "locationTextSid", s_Instance.locationTextSid, "string")
	Something(className, s_guid, "lockedTeam", s_Instance.lockedTeam, "bool")
	Something(className, s_guid, "maxCount", s_Instance.maxCount, "int")
	Something(className, s_guid, "maxCountSimultaneously", s_Instance.maxCountSimultaneously, "int")
	Something(className, s_guid, "onlySendEventForHumanPlayers", s_Instance.onlySendEventForHumanPlayers, "bool")
	Something(className, s_guid, "overwriteThrottle", s_Instance.overwriteThrottle, "bool")
	Something(className, s_guid, "returnControlOnIdle", s_Instance.returnControlOnIdle, "bool")
	Something(className, s_guid, "rotationPitch", s_Instance.rotationPitch, "float")
	Something(className, s_guid, "rotationRoll", s_Instance.rotationRoll, "float")
	Something(className, s_guid, "rotationYaw", s_Instance.rotationYaw, "float")
	Something(className, s_guid, "sendWeaponEvents", s_Instance.sendWeaponEvents, "bool")
	Something(className, s_guid, "spawnAreaRadius", s_Instance.spawnAreaRadius, "float")
	Something(className, s_guid, "spawnDelay", s_Instance.spawnDelay, "float")
	Something(className, s_guid, "spawnProtectionCheckAllTeams", s_Instance.spawnProtectionCheckAllTeams, "bool")
	Something(className, s_guid, "spawnProtectionFriendlyKilledCount", s_Instance.spawnProtectionFriendlyKilledCount, "uint")
	Something(className, s_guid, "spawnProtectionFriendlyKilledTime", s_Instance.spawnProtectionFriendlyKilledTime, "float")
	Something(className, s_guid, "spawnProtectionRadius", s_Instance.spawnProtectionRadius, "float")
	Something(className, s_guid, "takeControlEntryIndex", s_Instance.takeControlEntryIndex, "int")
	Something(className, s_guid, "takeControlOnTransformChange", s_Instance.takeControlOnTransformChange, "bool")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
	Something(className, s_guid, "throttle", s_Instance.throttle, "float")
	Something(className, s_guid, "totalCountSimultaneouslyOfType", s_Instance.totalCountSimultaneouslyOfType, "int")
	Something(className, s_guid, "tryToSpawnOutOfSight", s_Instance.tryToSpawnOutOfSight, "bool")
	Something(className, s_guid, "useAsSpawnPoint", s_Instance.useAsSpawnPoint, "bool")
end

function Type:SpawnRotationData (p_class, p_guid)
	local s_Instance = SpawnRotationData(p_class) 
 	local className = "SpawnRotationData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rotation", s_Instance.rotation, "float")
end

function Type:SpawnRotationSpeedData (p_class, p_guid)
	local s_Instance = SpawnRotationSpeedData(p_class) 
 	local className = "SpawnRotationSpeedData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rotationSpeed", s_Instance.rotationSpeed, "float")
end

function Type:SpawnScreenWeaponData (p_class, p_guid)
	local s_Instance = SpawnScreenWeaponData(p_class) 
 	local className = "SpawnScreenWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
	Something(className, s_guid, "weaponName", s_Instance.weaponName, "string")
end

function Type:SpawnSizeData (p_class, p_guid)
	local s_Instance = SpawnSizeData(p_class) 
 	local className = "SpawnSizeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "size", s_Instance.size, "float")
end

function Type:SpawnSpeedData (p_class, p_guid)
	local s_Instance = SpawnSpeedData(p_class) 
 	local className = "SpawnSpeedData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "speed", s_Instance.speed, "float")
end

function Type:SpawnState (p_class, p_guid)
	local s_Instance = SpawnState(p_class) 
 	local className = "SpawnState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "team", s_Instance.team, "int")
end

function Type:SpawnSurveyEvent (p_class, p_guid)
	local s_Instance = SpawnSurveyEvent(p_class) 
 	local className = "SpawnSurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
end

function Type:SpecialMoveInterpolatedPoint (p_class, p_guid)
	local s_Instance = SpecialMoveInterpolatedPoint(p_class) 
 	local className = "SpecialMoveInterpolatedPoint"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "time", s_Instance.time, "float")
	Something(className, s_guid, "value", s_Instance.value, "Vec3")
end

function Type:SpecialMovesBinding (p_class, p_guid)
	local s_Instance = SpecialMovesBinding(p_class) 
 	local className = "SpecialMovesBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cancelAnimation", s_Instance.cancelAnimation, "AntRef")
	Something(className, s_guid, "objectDistance", s_Instance.objectDistance, "AntRef")
	Something(className, s_guid, "objectHeight", s_Instance.objectHeight, "AntRef")
	Something(className, s_guid, "specialAnimationIndex", s_Instance.specialAnimationIndex, "AntRef")
	Something(className, s_guid, "startObjectDistanceTimer", s_Instance.startObjectDistanceTimer, "AntRef")
	Something(className, s_guid, "triggerHighVault", s_Instance.triggerHighVault, "AntRef")
	Something(className, s_guid, "triggerLowVault", s_Instance.triggerLowVault, "AntRef")
	Something(className, s_guid, "triggerSlideIntoProne", s_Instance.triggerSlideIntoProne, "AntRef")
	Something(className, s_guid, "triggerSpecialAnimation", s_Instance.triggerSpecialAnimation, "AntRef")
	Something(className, s_guid, "triggerUpVault", s_Instance.triggerUpVault, "AntRef")
	Something(className, s_guid, "vaultObjectPositionX", s_Instance.vaultObjectPositionX, "AntRef")
	Something(className, s_guid, "vaultObjectPositionZ", s_Instance.vaultObjectPositionZ, "AntRef")
end

function Type:SpecialMovesComponentData (p_class, p_guid)
	local s_Instance = SpecialMovesComponentData(p_class) 
 	local className = "SpecialMovesComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "SpecialMovesBinding")
	Something(className, s_guid, "deathState", s_Instance.deathState, "SpecialMoveStateData")
	Something(className, s_guid, "indexedDeathStates", s_Instance.indexedDeathStates, "List<SpecialMoveStateData)>")
	Something(className, s_guid, "indexedSpecialAnimationStates", s_Instance.indexedSpecialAnimationStates, "List<SpecialMoveStateData)>")
	Something(className, s_guid, "indexedVaultOverHighStates", s_Instance.indexedVaultOverHighStates, "List<SpecialMoveVaultStateCriteria)>")
	Something(className, s_guid, "indexedVaultOverLowStates", s_Instance.indexedVaultOverLowStates, "List<SpecialMoveVaultStateCriteria)>")
	Something(className, s_guid, "indexedVaultUpStates", s_Instance.indexedVaultUpStates, "List<SpecialMoveVaultStateCriteria)>")
	Something(className, s_guid, "specialAnimationState", s_Instance.specialAnimationState, "SpecialMoveStateData")
	Something(className, s_guid, "sprintToProneState", s_Instance.sprintToProneState, "SpecialMoveStateData")
	Something(className, s_guid, "vaultOverHighState", s_Instance.vaultOverHighState, "SpecialMoveStateData")
	Something(className, s_guid, "vaultOverLowState", s_Instance.vaultOverLowState, "SpecialMoveStateData")
	Something(className, s_guid, "vaultUpHighState", s_Instance.vaultUpHighState, "SpecialMoveStateData")
end

function Type:SpecialMoveStateData (p_class, p_guid)
	local s_Instance = SpecialMoveStateData(p_class) 
 	local className = "SpecialMoveStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "exitAnimationDrivenStateVelocity", s_Instance.exitAnimationDrivenStateVelocity, "float")
	Something(className, s_guid, "gravityPoints", s_Instance.gravityPoints, "List<SpecialMoveInterpolatedPoint)>")
	Something(className, s_guid, "keepInitialSoldierDirection", s_Instance.keepInitialSoldierDirection, "bool")
	Something(className, s_guid, "maxDistanceScale", s_Instance.maxDistanceScale, "float")
	Something(className, s_guid, "maxHeightScale", s_Instance.maxHeightScale, "float")
	Something(className, s_guid, "maxObjectLengthScale", s_Instance.maxObjectLengthScale, "float")
	Something(className, s_guid, "minDistanceScale", s_Instance.minDistanceScale, "float")
	Something(className, s_guid, "minHeightScale", s_Instance.minHeightScale, "float")
	Something(className, s_guid, "minObjectLengthScale", s_Instance.minObjectLengthScale, "float")
	Something(className, s_guid, "motionPoints", s_Instance.motionPoints, "List<SpecialMoveInterpolatedPoint)>")
	Something(className, s_guid, "optimumDistanceFromObject", s_Instance.optimumDistanceFromObject, "float")
	Something(className, s_guid, "optimumHeightOfObject", s_Instance.optimumHeightOfObject, "float")
	Something(className, s_guid, "optimumLengthOfObject", s_Instance.optimumLengthOfObject, "float")
	Something(className, s_guid, "overridePose", s_Instance.overridePose, "SpecialMovesPoseType")
	Something(className, s_guid, "resetPose", s_Instance.resetPose, "SpecialMovesPoseType")
	Something(className, s_guid, "scaleWithDistanceToObject", s_Instance.scaleWithDistanceToObject, "bool")
end

function Type:SpecialMoveVaultStateCriteria (p_class, p_guid)
	local s_Instance = SpecialMoveVaultStateCriteria(p_class) 
 	local className = "SpecialMoveVaultStateCriteria"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distToObject", s_Instance.distToObject, "float")
	Something(className, s_guid, "distToObjectTolerance", s_Instance.distToObjectTolerance, "float")
	Something(className, s_guid, "heightOfObject", s_Instance.heightOfObject, "float")
	Something(className, s_guid, "heightOfObjectTolerance", s_Instance.heightOfObjectTolerance, "float")
	Something(className, s_guid, "lengthOfObject", s_Instance.lengthOfObject, "float")
	Something(className, s_guid, "lengthOfObjectTolerance", s_Instance.lengthOfObjectTolerance, "float")
	Something(className, s_guid, "specialMoveState", s_Instance.specialMoveState, "SpecialMoveStateData")
end

function Type:SpeedEventGateEntityData (p_class, p_guid)
	local s_Instance = SpeedEventGateEntityData(p_class) 
 	local className = "SpeedEventGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "minSpeed", s_Instance.minSpeed, "float")
end

function Type:SpeedModifierData (p_class, p_guid)
	local s_Instance = SpeedModifierData(p_class) 
 	local className = "SpeedModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "backwardConstant", s_Instance.backwardConstant, "float")
	Something(className, s_guid, "forwardConstant", s_Instance.forwardConstant, "float")
	Something(className, s_guid, "leftConstant", s_Instance.leftConstant, "float")
	Something(className, s_guid, "rightConstant", s_Instance.rightConstant, "float")
end

function Type:SphereCollisionData (p_class, p_guid)
	local s_Instance = SphereCollisionData(p_class) 
 	local className = "SphereCollisionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "counterNormalBrakeForceMod", s_Instance.counterNormalBrakeForceMod, "float")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "extraRadius", s_Instance.extraRadius, "float")
end

function Type:SphereData (p_class, p_guid)
	local s_Instance = SphereData(p_class) 
 	local className = "SphereData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
end

function Type:SphereEvaluatorData (p_class, p_guid)
	local s_Instance = SphereEvaluatorData(p_class) 
 	local className = "SphereEvaluatorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pivot", s_Instance.pivot, "Vec3")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "scale", s_Instance.scale, "Vec3")
end

function Type:SplitterNode (p_class, p_guid)
	local s_Instance = SplitterNode(p_class) 
 	local className = "SplitterNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
end

function Type:SpotLightEntityData (p_class, p_guid)
	local s_Instance = SpotLightEntityData(p_class) 
 	local className = "SpotLightEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "castShadowsEnable", s_Instance.castShadowsEnable, "bool")
	Something(className, s_guid, "castShadowsMinLevel", s_Instance.castShadowsMinLevel, "QualityLevel")
	Something(className, s_guid, "coneInnerAngle", s_Instance.coneInnerAngle, "float")
	Something(className, s_guid, "coneOuterAngle", s_Instance.coneOuterAngle, "float")
	Something(className, s_guid, "frustumAspect", s_Instance.frustumAspect, "float")
	Something(className, s_guid, "frustumFov", s_Instance.frustumFov, "float")
	Something(className, s_guid, "orthoHeight", s_Instance.orthoHeight, "float")
	Something(className, s_guid, "orthoWidth", s_Instance.orthoWidth, "float")
	Something(className, s_guid, "shape", s_Instance.shape, "SpotLightShape")
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
end

function Type:SpottingComponentData (p_class, p_guid)
	local s_Instance = SpottingComponentData(p_class) 
 	local className = "SpottingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammoOrderDistance", s_Instance.ammoOrderDistance, "float")
	Something(className, s_guid, "coolDownAllowedSpotsWithinHistory", s_Instance.coolDownAllowedSpotsWithinHistory, "int")
	Something(className, s_guid, "coolDownHistoryTime", s_Instance.coolDownHistoryTime, "float")
	Something(className, s_guid, "healOrderDistance", s_Instance.healOrderDistance, "float")
	Something(className, s_guid, "onlyAllowedToHaveOneSpottedPlayer", s_Instance.onlyAllowedToHaveOneSpottedPlayer, "bool")
	Something(className, s_guid, "orderHealPercentage", s_Instance.orderHealPercentage, "float")
	Something(className, s_guid, "orderNeedAmmoPercentage", s_Instance.orderNeedAmmoPercentage, "float")
	Something(className, s_guid, "orderRepairPercentage", s_Instance.orderRepairPercentage, "float")
	Something(className, s_guid, "passiveSpottingTimeInterval", s_Instance.passiveSpottingTimeInterval, "float")
	Something(className, s_guid, "pickupOrderDistance", s_Instance.pickupOrderDistance, "float")
	Something(className, s_guid, "repairOrderDistance", s_Instance.repairOrderDistance, "float")
	Something(className, s_guid, "spottingDistance", s_Instance.spottingDistance, "float")
	Something(className, s_guid, "spottingFov", s_Instance.spottingFov, "float")
	Something(className, s_guid, "teamOrderFov", s_Instance.teamOrderFov, "float")
	Something(className, s_guid, "timeRequiredToPassiveSpot", s_Instance.timeRequiredToPassiveSpot, "float")
end

function Type:SpottingEntityData (p_class, p_guid)
	local s_Instance = SpottingEntityData(p_class) 
 	local className = "SpottingEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "teamToSpot", s_Instance.teamToSpot, "TeamId")
end

function Type:SpottingTargetComponentData (p_class, p_guid)
	local s_Instance = SpottingTargetComponentData(p_class) 
 	local className = "SpottingTargetComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeSpottedTime", s_Instance.activeSpottedTime, "float")
	Something(className, s_guid, "activeSpottedTimeMultiplier", s_Instance.activeSpottedTimeMultiplier, "float")
	Something(className, s_guid, "passiveSpottedTime", s_Instance.passiveSpottedTime, "float")
	Something(className, s_guid, "passiveSpottedTimeMultiplier", s_Instance.passiveSpottedTimeMultiplier, "float")
	Something(className, s_guid, "spotOnFireMultiplier", s_Instance.spotOnFireMultiplier, "float")
	Something(className, s_guid, "targetBoundingBoxCenter", s_Instance.targetBoundingBoxCenter, "bool")
end

function Type:SpringData (p_class, p_guid)
	local s_Instance = SpringData(p_class) 
 	local className = "SpringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "attachOffsetY", s_Instance.attachOffsetY, "float")
	Something(className, s_guid, "damping", s_Instance.damping, "float")
	Something(className, s_guid, "disabledStrenghModifier", s_Instance.disabledStrenghModifier, "float")
	Something(className, s_guid, "length", s_Instance.length, "float")
	Something(className, s_guid, "maxSpringForce", s_Instance.maxSpringForce, "float")
	Something(className, s_guid, "progressiveExponent", s_Instance.progressiveExponent, "float")
	Something(className, s_guid, "progressiveStartRatio", s_Instance.progressiveStartRatio, "float")
	Something(className, s_guid, "stiffness", s_Instance.stiffness, "float")
	Something(className, s_guid, "visualClipOffset", s_Instance.visualClipOffset, "float")
end

function Type:StabilizerData (p_class, p_guid)
	local s_Instance = StabilizerData(p_class) 
 	local className = "StabilizerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "advanced", s_Instance.advanced, "bool")
	Something(className, s_guid, "advancedYaw", s_Instance.advancedYaw, "bool")
	Something(className, s_guid, "pitchStrength", s_Instance.pitchStrength, "float")
	Something(className, s_guid, "rollStrength", s_Instance.rollStrength, "float")
	Something(className, s_guid, "verticalVelocityStrength", s_Instance.verticalVelocityStrength, "float")
	Something(className, s_guid, "yawStrength", s_Instance.yawStrength, "float")
end

function Type:StabilizerSettings (p_class, p_guid)
	local s_Instance = StabilizerSettings(p_class) 
 	local className = "StabilizerSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "advanced", s_Instance.advanced, "bool")
	Something(className, s_guid, "property", s_Instance.property, "StabilizerProperty")
	Something(className, s_guid, "strength", s_Instance.strength, "float")
end

function Type:StanceCameraData (p_class, p_guid)
	local s_Instance = StanceCameraData(p_class) 
 	local className = "StanceCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultCameraForStances", s_Instance.defaultCameraForStances, "List<int)>")
	Something(className, s_guid, "validStances", s_Instance.validStances, "List<int)>")
end

function Type:StanceFilterComponentData (p_class, p_guid)
	local s_Instance = StanceFilterComponentData(p_class) 
 	local className = "StanceFilterComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionsToFilter", s_Instance.actionsToFilter, "List<ActionSuppressor)>")
	Something(className, s_guid, "filterSpecificActions", s_Instance.filterSpecificActions, "bool")
	Something(className, s_guid, "stanceChangeTime", s_Instance.stanceChangeTime, "float")
	Something(className, s_guid, "undoParentStanceFilter", s_Instance.undoParentStanceFilter, "bool")
	Something(className, s_guid, "validStances", s_Instance.validStances, "List<int)>")
end

function Type:StanceSwitchSoundData (p_class, p_guid)
	local s_Instance = StanceSwitchSoundData(p_class) 
 	local className = "StanceSwitchSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "stanceSwitchSound", s_Instance.stanceSwitchSound, "CtrRef")
	Something(className, s_guid, "validStances", s_Instance.validStances, "List<int)>")
end

function Type:StandardMoveWaypointData (p_class, p_guid)
	local s_Instance = StandardMoveWaypointData(p_class) 
 	local className = "StandardMoveWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "moveTask", s_Instance.moveTask, "AILocoMoveTaskData")
end

function Type:StartEntityData (p_class, p_guid)
	local s_Instance = StartEntityData(p_class) 
 	local className = "StartEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isDefault", s_Instance.isDefault, "bool")
	Something(className, s_guid, "sortIndex", s_Instance.sortIndex, "float")
	Something(className, s_guid, "startName", s_Instance.startName, "string")
end

function Type:StatCategoriesBaseTree (p_class, p_guid)
	local s_Instance = StatCategoriesBaseTree(p_class) 
 	local className = "StatCategoriesBaseTree"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "paramX", s_Instance.paramX, "List<CtrRef)>")
	Something(className, s_guid, "paramY", s_Instance.paramY, "List<CtrRef)>")
	Something(className, s_guid, "processAllLevelsInTree", s_Instance.processAllLevelsInTree, "bool")
	Something(className, s_guid, "rootBaseCategories", s_Instance.rootBaseCategories, "List<CtrRef)>")
end

function Type:StatCategoriesTree (p_class, p_guid)
	local s_Instance = StatCategoriesTree(p_class) 
 	local className = "StatCategoriesTree"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "categories", s_Instance.categories, "List<CtrRef)>")
end

function Type:StatCategoryTreeCollection (p_class, p_guid)
	local s_Instance = StatCategoryTreeCollection(p_class) 
 	local className = "StatCategoryTreeCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "categoryTrees", s_Instance.categoryTrees, "List<CtrRef)>")
end

function Type:StateEventGateEntityData (p_class, p_guid)
	local s_Instance = StateEventGateEntityData(p_class) 
 	local className = "StateEventGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkedState", s_Instance.checkedState, "EventGateState")
end

function Type:StateNode (p_class, p_guid)
	local s_Instance = StateNode(p_class) 
 	local className = "StateNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hide", s_Instance.hide, "CtrRef")
	Something(className, s_guid, "in", s_Instance.inValue, "CtrRef")
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "renderToTexture", s_Instance.renderToTexture, "bool")
	Something(className, s_guid, "screen", s_Instance.screen, "CtrRef")
	Something(className, s_guid, "show", s_Instance.show, "CtrRef")
end

function Type:StateRenderSettings (p_class, p_guid)
	local s_Instance = StateRenderSettings(p_class) 
 	local className = "StateRenderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ps3PixelShaderConstantsEnable", s_Instance.ps3PixelShaderConstantsEnable, "bool")
end

function Type:StatEventTriggerEntityData (p_class, p_guid)
	local s_Instance = StatEventTriggerEntityData(p_class) 
 	local className = "StatEventTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "miscParamX", s_Instance.miscParamX, "string")
	Something(className, s_guid, "miscParamY", s_Instance.miscParamY, "string")
	Something(className, s_guid, "sendToAll", s_Instance.sendToAll, "bool")
	Something(className, s_guid, "statEvent", s_Instance.statEvent, "fb.StatEvent)")
end

function Type:StaticCameraData (p_class, p_guid)
	local s_Instance = StaticCameraData(p_class) 
 	local className = "StaticCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accumulateInput", s_Instance.accumulateInput, "bool")
	Something(className, s_guid, "averageFilterFrames", s_Instance.averageFilterFrames, "int")
	Something(className, s_guid, "downCurve", s_Instance.downCurve, "List<Vec3)>")
	Something(className, s_guid, "downPitchAngle", s_Instance.downPitchAngle, "float")
	Something(className, s_guid, "leftCurve", s_Instance.leftCurve, "List<Vec3)>")
	Something(className, s_guid, "leftYawAngle", s_Instance.leftYawAngle, "float")
	Something(className, s_guid, "loosePartPhysics", s_Instance.loosePartPhysics, "List<CtrRef)>")
	Something(className, s_guid, "mirrorHorizontalCurves", s_Instance.mirrorHorizontalCurves, "bool")
	Something(className, s_guid, "mirrorVerticalCurves", s_Instance.mirrorVerticalCurves, "bool")
	Something(className, s_guid, "pitchInputAction", s_Instance.pitchInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "pitchSensitivityNonZoomed", s_Instance.pitchSensitivityNonZoomed, "float")
	Something(className, s_guid, "pitchSensitivityZoomed", s_Instance.pitchSensitivityZoomed, "float")
	Something(className, s_guid, "resetAccumulatedInputOnViewChange", s_Instance.resetAccumulatedInputOnViewChange, "bool")
	Something(className, s_guid, "rightCurve", s_Instance.rightCurve, "List<Vec3)>")
	Something(className, s_guid, "rightYawAngle", s_Instance.rightYawAngle, "float")
	Something(className, s_guid, "upCurve", s_Instance.upCurve, "List<Vec3)>")
	Something(className, s_guid, "upPitchAngle", s_Instance.upPitchAngle, "float")
	Something(className, s_guid, "yawInputAction", s_Instance.yawInputAction, "EntryInputActionEnum")
	Something(className, s_guid, "yawSensitivityNonZoomed", s_Instance.yawSensitivityNonZoomed, "float")
	Something(className, s_guid, "yawSensitivityZoomed", s_Instance.yawSensitivityZoomed, "float")
end

function Type:StaticEnlightenData (p_class, p_guid)
	local s_Instance = StaticEnlightenData(p_class) 
 	local className = "StaticEnlightenData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "staticDirectionTexture", s_Instance.staticDirectionTexture, "CtrRef")
	Something(className, s_guid, "staticIrradianceChromaTexture", s_Instance.staticIrradianceChromaTexture, "CtrRef")
	Something(className, s_guid, "staticIrradianceLumaTexture", s_Instance.staticIrradianceLumaTexture, "CtrRef")
end

function Type:StaticEnlightenEntityData (p_class, p_guid)
	local s_Instance = StaticEnlightenEntityData(p_class) 
 	local className = "StaticEnlightenEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dynamicEnlightenData", s_Instance.dynamicEnlightenData, "CtrRef")
	Something(className, s_guid, "enlightenData", s_Instance.enlightenData, "CtrRef")
end

function Type:StaticListItem (p_class, p_guid)
	local s_Instance = StaticListItem(p_class) 
 	local className = "StaticListItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "appendPlatformToSID", s_Instance.appendPlatformToSID, "bool")
	Something(className, s_guid, "dynamicDisable", s_Instance.dynamicDisable, "UIDataSourceInfo")
	Something(className, s_guid, "dynamicNewContent", s_Instance.dynamicNewContent, "UIDataSourceInfo")
	Something(className, s_guid, "excludeInRetail", s_Instance.excludeInRetail, "bool")
	Something(className, s_guid, "itemName", s_Instance.itemName, "string")
end

function Type:StaticModelEntityData (p_class, p_guid)
	local s_Instance = StaticModelEntityData(p_class) 
 	local className = "StaticModelEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatePhysics", s_Instance.animatePhysics, "bool")
	Something(className, s_guid, "basePoseTransforms", s_Instance.basePoseTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "boneCount", s_Instance.boneCount, "uint")
	Something(className, s_guid, "excludeFromNearbyObjectDestruction", s_Instance.excludeFromNearbyObjectDestruction, "bool")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "networkInfo", s_Instance.networkInfo, "StaticModelNetworkInfo")
	Something(className, s_guid, "partLinks", s_Instance.partLinks, "List<CtrRef)>")
	Something(className, s_guid, "physicsPartInfos", s_Instance.physicsPartInfos, "List<PhysicsPartInfo)>")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:StaticModelGroupEntityData (p_class, p_guid)
	local s_Instance = StaticModelGroupEntityData(p_class) 
 	local className = "StaticModelGroupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hackToSolveRealTimeTweakingIssue", s_Instance.hackToSolveRealTimeTweakingIssue, "GUID")
	Something(className, s_guid, "memberDatas", s_Instance.memberDatas, "List<StaticModelGroupMemberData)>")
	Something(className, s_guid, "networkIdCount", s_Instance.networkIdCount, "uint")
end

function Type:StaticModelGroupMemberData (p_class, p_guid)
	local s_Instance = StaticModelGroupMemberData(p_class) 
 	local className = "StaticModelGroupMemberData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healthStateEntityManagerId", s_Instance.healthStateEntityManagerId, "uint")
	Something(className, s_guid, "instanceCastSunShadow", s_Instance.instanceCastSunShadow, "List<bool)>")
	Something(className, s_guid, "instanceCount", s_Instance.instanceCount, "uint")
	Something(className, s_guid, "instanceObjectVariation", s_Instance.instanceObjectVariation, "List<uint)>")
	Something(className, s_guid, "instanceScale", s_Instance.instanceScale, "List<float)>")
	Something(className, s_guid, "instanceTransforms", s_Instance.instanceTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "memberType", s_Instance.memberType, "CtrRef")
	Something(className, s_guid, "meshEntityType", s_Instance.meshEntityType, "CtrRef")
	Something(className, s_guid, "networkIdCountPerInstance", s_Instance.networkIdCountPerInstance, "uint")
	Something(className, s_guid, "networkIdRange", s_Instance.networkIdRange, "IndexRange")
	Something(className, s_guid, "physicsPartCountPerInstance", s_Instance.physicsPartCountPerInstance, "uint")
	Something(className, s_guid, "physicsPartRange", s_Instance.physicsPartRange, "IndexRange")
end

function Type:StaticModelNetworkInfo (p_class, p_guid)
	local s_Instance = StaticModelNetworkInfo(p_class) 
 	local className = "StaticModelNetworkInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "childNetworkIdCount", s_Instance.childNetworkIdCount, "uint")
	Something(className, s_guid, "childNetworkInfos", s_Instance.childNetworkInfos, "List<ChildStaticModelNetworkInfo)>")
	Something(className, s_guid, "networkIdCount", s_Instance.networkIdCount, "uint")
	Something(className, s_guid, "partNetworkIdRanges", s_Instance.partNetworkIdRanges, "List<IndexRange)>")
end

function Type:StaticUnlockList (p_class, p_guid)
	local s_Instance = StaticUnlockList(p_class) 
 	local className = "StaticUnlockList"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "unlockInfos", s_Instance.unlockInfos, "List<BasicUnlockInfo)>")
end

function Type:StatsCategoryBaseData (p_class, p_guid)
	local s_Instance = StatsCategoryBaseData(p_class) 
 	local className = "StatsCategoryBaseData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "baseSubCategories", s_Instance.baseSubCategories, "List<CtrRef)>")
	Something(className, s_guid, "code", s_Instance.code, "string")
end

function Type:StatsCategoryData (p_class, p_guid)
	local s_Instance = StatsCategoryData(p_class) 
 	local className = "StatsCategoryData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "categories", s_Instance.categories, "List<CtrRef)>")
	Something(className, s_guid, "members", s_Instance.members, "List<string)>")
end

function Type:StatsCategoryGuidData (p_class, p_guid)
	local s_Instance = StatsCategoryGuidData(p_class) 
 	local className = "StatsCategoryGuidData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "objectInstanceGuids", s_Instance.objectInstanceGuids, "List<GUID)>")
end

function Type:StatsCategoryPlayerRoleData (p_class, p_guid)
	local s_Instance = StatsCategoryPlayerRoleData(p_class) 
 	local className = "StatsCategoryPlayerRoleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "roles", s_Instance.roles, "List<PlayerRole)>")
	Something(className, s_guid, "statsCategoryPlayerRoleData", s_Instance.statsCategoryPlayerRoleData,  "readonly")
	Something(className, s_guid, "playerRole", s_Instance.playerRole,  "uint")
end

function Type:StatsCategoryScoreboardPositionData (p_class, p_guid)
	local s_Instance = StatsCategoryScoreboardPositionData(p_class) 
 	local className = "StatsCategoryScoreboardPositionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "positions", s_Instance.positions, "List<ScoreboardPosition)>")
	Something(className, s_guid, "statsCategoryScoreboardPositionData", s_Instance.statsCategoryScoreboardPositionData,  "readonly")
	Something(className, s_guid, "scoreboardPosition", s_Instance.scoreboardPosition,  "uint")
end

function Type:StatsCategoryVehicleData (p_class, p_guid)
	local s_Instance = StatsCategoryVehicleData(p_class) 
 	local className = "StatsCategoryVehicleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "firstVehicleId", s_Instance.firstVehicleId, "uint")
end

function Type:StatsCategoryVehicleStateTypeData (p_class, p_guid)
	local s_Instance = StatsCategoryVehicleStateTypeData(p_class) 
 	local className = "StatsCategoryVehicleStateTypeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "states", s_Instance.states, "List<VehicleStateType)>")
	Something(className, s_guid, "statsCategoryVehicleStateTypeData", s_Instance.statsCategoryVehicleStateTypeData,  "readonly")
	Something(className, s_guid, "vehicleStateType", s_Instance.vehicleStateType,  "uint")
end

function Type:StatsCategoryWeaponData (p_class, p_guid)
	local s_Instance = StatsCategoryWeaponData(p_class) 
 	local className = "StatsCategoryWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accessoryUnlockGates", s_Instance.accessoryUnlockGates, "CtrRef")
	Something(className, s_guid, "soldierWeaponId", s_Instance.soldierWeaponId, "uint")
	Something(className, s_guid, "unlocksInfo", s_Instance.unlocksInfo, "List<BasicUnlockInfo)>")
end

function Type:StatSpamSetting (p_class, p_guid)
	local s_Instance = StatSpamSetting(p_class) 
 	local className = "StatSpamSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "amountLimit", s_Instance.amountLimit, "uint")
	Something(className, s_guid, "event", s_Instance.event, "StatEvent")
	Something(className, s_guid, "playerToPlayer", s_Instance.playerToPlayer, "bool")
	Something(className, s_guid, "timeLimit", s_Instance.timeLimit, "float")
end

function Type:StatSpamSettings (p_class, p_guid)
	local s_Instance = StatSpamSettings(p_class) 
 	local className = "StatSpamSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "spamList", s_Instance.spamList, "List<StatSpamSetting)>")
end

function Type:StatSurveyEvent (p_class, p_guid)
	local s_Instance = StatSurveyEvent(p_class) 
 	local className = "StatSurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
end

function Type:StopWatchEntityData (p_class, p_guid)
	local s_Instance = StopWatchEntityData(p_class) 
 	local className = "StopWatchEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "multiplier", s_Instance.multiplier, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "triggerOnTime", s_Instance.triggerOnTime, "float")
	Something(className, s_guid, "updatePass", s_Instance.updatePass, "fb.UpdatePass)")
end

function Type:StreamGridCell (p_class, p_guid)
	local s_Instance = StreamGridCell(p_class) 
 	local className = "StreamGridCell"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "referenceData", s_Instance.referenceData, "CtrRef")
	Something(className, s_guid, "x", s_Instance.x, "int")
	Something(className, s_guid, "z", s_Instance.z, "int")
end

function Type:StreamGridEntityData (p_class, p_guid)
	local s_Instance = StreamGridEntityData(p_class) 
 	local className = "StreamGridEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cells", s_Instance.cells, "List<StreamGridCell)>")
	Something(className, s_guid, "cellSize", s_Instance.cellSize, "float")
	Something(className, s_guid, "maxStreamInCountPerFrame", s_Instance.maxStreamInCountPerFrame, "int")
	Something(className, s_guid, "maxStreamOutCountPerFrame", s_Instance.maxStreamOutCountPerFrame, "int")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
end

function Type:StreamGroupData (p_class, p_guid)
	local s_Instance = StreamGroupData(p_class) 
 	local className = "StreamGroupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "assets", s_Instance.assets, "List<CtrRef)>")
end

function Type:StreamingGateEntityData (p_class, p_guid)
	local s_Instance = StreamingGateEntityData(p_class) 
 	local className = "StreamingGateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "timeout", s_Instance.timeout, "float")
end

function Type:StreamPoolAsset (p_class, p_guid)
	local s_Instance = StreamPoolAsset(p_class) 
 	local className = "StreamPoolAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "streamBufferSizePs3", s_Instance.streamBufferSizePs3, "uint")
	Something(className, s_guid, "streamBufferSizeWin32", s_Instance.streamBufferSizeWin32, "uint")
	Something(className, s_guid, "streamBufferSizeXenon", s_Instance.streamBufferSizeXenon, "uint")
	Something(className, s_guid, "streamCountPs3", s_Instance.streamCountPs3, "uint")
	Something(className, s_guid, "streamCountWin32", s_Instance.streamCountWin32, "uint")
	Something(className, s_guid, "streamCountXenon", s_Instance.streamCountXenon, "uint")
	Something(className, s_guid, "streamPoolId", s_Instance.streamPoolId, "uint")
	Something(className, s_guid, "streamReadBlockSizePs3", s_Instance.streamReadBlockSizePs3, "uint")
	Something(className, s_guid, "streamReadBlockSizeWin32", s_Instance.streamReadBlockSizeWin32, "uint")
	Something(className, s_guid, "streamReadBlockSizeXenon", s_Instance.streamReadBlockSizeXenon, "uint")
	Something(className, s_guid, "streamStarveMode", s_Instance.streamStarveMode, "fb.StreamStarveMode)")
end

function Type:Strengths (p_class, p_guid)
	local s_Instance = Strengths(p_class) 
 	local className = "Strengths"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heavyArmour", s_Instance.heavyArmour, "float")
	Something(className, s_guid, "helicopter", s_Instance.helicopter, "float")
	Something(className, s_guid, "infantry", s_Instance.infantry, "float")
	Something(className, s_guid, "lightArmour", s_Instance.lightArmour, "float")
end

function Type:StringOption (p_class, p_guid)
	local s_Instance = StringOption(p_class) 
 	local className = "StringOption"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:SubScreenData (p_class, p_guid)
	local s_Instance = SubScreenData(p_class) 
 	local className = "SubScreenData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "iconSize", s_Instance.iconSize, "float")
	Something(className, s_guid, "projectionAngleX", s_Instance.projectionAngleX, "float")
	Something(className, s_guid, "projectionAngleY", s_Instance.projectionAngleY, "float")
	Something(className, s_guid, "projectionAngleZ", s_Instance.projectionAngleZ, "float")
	Something(className, s_guid, "renderTargetApectRatio", s_Instance.renderTargetApectRatio, "float")
	Something(className, s_guid, "renderTargetIndex", s_Instance.renderTargetIndex, "int")
	Something(className, s_guid, "scaleIconSizeByDepthStrength", s_Instance.scaleIconSizeByDepthStrength, "float")
	Something(className, s_guid, "screenPosition", s_Instance.screenPosition, "Vec3")
	Something(className, s_guid, "screenSize", s_Instance.screenSize, "float")
	Something(className, s_guid, "useRenderTarget", s_Instance.useRenderTarget, "bool")
end

function Type:SubSkeleton (p_class, p_guid)
	local s_Instance = SubSkeleton(p_class) 
 	local className = "SubSkeleton"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneMap", s_Instance.boneMap, "List<int)>")
	Something(className, s_guid, "skeleton", s_Instance.skeleton, "CtrRef")
	Something(className, s_guid, "transformMap", s_Instance.transformMap, "List<LinearTransform)>")
end

function Type:SubsystemTimingConfigData (p_class, p_guid)
	local s_Instance = SubsystemTimingConfigData(p_class) 
 	local className = "SubsystemTimingConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "behaviourExecution", s_Instance.behaviourExecution, "float")
	Something(className, s_guid, "behaviourSelection", s_Instance.behaviourSelection, "float")
	Something(className, s_guid, "evaluation", s_Instance.evaluation, "float")
	Something(className, s_guid, "goalUpdates", s_Instance.goalUpdates, "float")
	Something(className, s_guid, "intentUpdates", s_Instance.intentUpdates, "float")
	Something(className, s_guid, "sensing", s_Instance.sensing, "float")
end

function Type:SubtitleDataNode (p_class, p_guid)
	local s_Instance = SubtitleDataNode(p_class) 
 	local className = "SubtitleDataNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "sID1", s_Instance.sID1, "string")
	Something(className, s_guid, "sID2", s_Instance.sID2, "string")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:SubtitleDataTree (p_class, p_guid)
	local s_Instance = SubtitleDataTree(p_class) 
 	local className = "SubtitleDataTree"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "subtitles", s_Instance.subtitles, "List<CtrRef)>")
end

function Type:SubtitleMainDataNode (p_class, p_guid)
	local s_Instance = SubtitleMainDataNode(p_class) 
 	local className = "SubtitleMainDataNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "language", s_Instance.language, "LanguageFormat")
	Something(className, s_guid, "subtitles", s_Instance.subtitles, "List<CtrRef)>")
end

function Type:SubWorldData (p_class, p_guid)
	local s_Instance = SubWorldData(p_class) 
 	local className = "SubWorldData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isPs3SubLevel", s_Instance.isPs3SubLevel, "bool")
	Something(className, s_guid, "isWin32SubLevel", s_Instance.isWin32SubLevel, "bool")
	Something(className, s_guid, "isXenonSubLevel", s_Instance.isXenonSubLevel, "bool")
	Something(className, s_guid, "registryContainer", s_Instance.registryContainer, "CtrRef")
	Something(className, s_guid, "rememberStateOnStreamOut", s_Instance.rememberStateOnStreamOut, "bool")
end

function Type:SubWorldInclusion (p_class, p_guid)
	local s_Instance = SubWorldInclusion(p_class) 
 	local className = "SubWorldInclusion"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criteria", s_Instance.criteria, "List<CtrRef)>")
end

function Type:SubWorldInclusionCriterion (p_class, p_guid)
	local s_Instance = SubWorldInclusionCriterion(p_class) 
 	local className = "SubWorldInclusionCriterion"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "options", s_Instance.options, "List<string)>")
end

function Type:SubWorldInclusionSetting (p_class, p_guid)
	local s_Instance = SubWorldInclusionSetting(p_class) 
 	local className = "SubWorldInclusionSetting"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criterion", s_Instance.criterion, "CtrRef")
	Something(className, s_guid, "enabledOptions", s_Instance.enabledOptions, "List<string)>")
end

function Type:SubWorldInclusionSettings (p_class, p_guid)
	local s_Instance = SubWorldInclusionSettings(p_class) 
 	local className = "SubWorldInclusionSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "List<CtrRef)>")
end

function Type:SubWorldReferenceObjectData (p_class, p_guid)
	local s_Instance = SubWorldReferenceObjectData(p_class) 
 	local className = "SubWorldReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoLoad", s_Instance.autoLoad, "bool")
	Something(className, s_guid, "bundleName", s_Instance.bundleName, "string")
	Something(className, s_guid, "inclusionSettings", s_Instance.inclusionSettings, "CtrRef")
	Something(className, s_guid, "isPs3SubLevel", s_Instance.isPs3SubLevel, "bool")
	Something(className, s_guid, "isWin32SubLevel", s_Instance.isWin32SubLevel, "bool")
	Something(className, s_guid, "isXenonSubLevel", s_Instance.isXenonSubLevel, "bool")
end

function Type:SunFlareComponentData (p_class, p_guid)
	local s_Instance = SunFlareComponentData(p_class) 
 	local className = "SunFlareComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugDrawOccluder", s_Instance.debugDrawOccluder, "bool")
	Something(className, s_guid, "element1AlphaOccluderCurve", s_Instance.element1AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element1AlphaScreenPosCurve", s_Instance.element1AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element1Enable", s_Instance.element1Enable, "bool")
	Something(className, s_guid, "element1RayDistance", s_Instance.element1RayDistance, "float")
	Something(className, s_guid, "element1Shader", s_Instance.element1Shader, "CtrRef")
	Something(className, s_guid, "element1Size", s_Instance.element1Size, "Vec2")
	Something(className, s_guid, "element1SizeOccluderCurve", s_Instance.element1SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element1SizeScreenPosCurve", s_Instance.element1SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element2AlphaOccluderCurve", s_Instance.element2AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element2AlphaScreenPosCurve", s_Instance.element2AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element2Enable", s_Instance.element2Enable, "bool")
	Something(className, s_guid, "element2RayDistance", s_Instance.element2RayDistance, "float")
	Something(className, s_guid, "element2Shader", s_Instance.element2Shader, "CtrRef")
	Something(className, s_guid, "element2Size", s_Instance.element2Size, "Vec2")
	Something(className, s_guid, "element2SizeOccluderCurve", s_Instance.element2SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element2SizeScreenPosCurve", s_Instance.element2SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element3AlphaOccluderCurve", s_Instance.element3AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element3AlphaScreenPosCurve", s_Instance.element3AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element3Enable", s_Instance.element3Enable, "bool")
	Something(className, s_guid, "element3RayDistance", s_Instance.element3RayDistance, "float")
	Something(className, s_guid, "element3Shader", s_Instance.element3Shader, "CtrRef")
	Something(className, s_guid, "element3Size", s_Instance.element3Size, "Vec2")
	Something(className, s_guid, "element3SizeOccluderCurve", s_Instance.element3SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element3SizeScreenPosCurve", s_Instance.element3SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element4AlphaOccluderCurve", s_Instance.element4AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element4AlphaScreenPosCurve", s_Instance.element4AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element4Enable", s_Instance.element4Enable, "bool")
	Something(className, s_guid, "element4RayDistance", s_Instance.element4RayDistance, "float")
	Something(className, s_guid, "element4Shader", s_Instance.element4Shader, "CtrRef")
	Something(className, s_guid, "element4Size", s_Instance.element4Size, "Vec2")
	Something(className, s_guid, "element4SizeOccluderCurve", s_Instance.element4SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element4SizeScreenPosCurve", s_Instance.element4SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element5AlphaOccluderCurve", s_Instance.element5AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element5AlphaScreenPosCurve", s_Instance.element5AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element5Enable", s_Instance.element5Enable, "bool")
	Something(className, s_guid, "element5RayDistance", s_Instance.element5RayDistance, "float")
	Something(className, s_guid, "element5Shader", s_Instance.element5Shader, "CtrRef")
	Something(className, s_guid, "element5Size", s_Instance.element5Size, "Vec2")
	Something(className, s_guid, "element5SizeOccluderCurve", s_Instance.element5SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element5SizeScreenPosCurve", s_Instance.element5SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "occluderSize", s_Instance.occluderSize, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:SunFlareEffectState (p_class, p_guid)
	local s_Instance = SunFlareEffectState(p_class) 
 	local className = "SunFlareEffectState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugDrawOccluder", s_Instance.debugDrawOccluder, "bool")
	Something(className, s_guid, "element1AlphaOccluderCurve", s_Instance.element1AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element1AlphaScreenPosCurve", s_Instance.element1AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element1Enable", s_Instance.element1Enable, "bool")
	Something(className, s_guid, "element1RayDistance", s_Instance.element1RayDistance, "float")
	Something(className, s_guid, "element1Shader", s_Instance.element1Shader, "CtrRef")
	Something(className, s_guid, "element1Size", s_Instance.element1Size, "Vec2")
	Something(className, s_guid, "element1SizeOccluderCurve", s_Instance.element1SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element1SizeScreenPosCurve", s_Instance.element1SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element2AlphaOccluderCurve", s_Instance.element2AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element2AlphaScreenPosCurve", s_Instance.element2AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element2Enable", s_Instance.element2Enable, "bool")
	Something(className, s_guid, "element2RayDistance", s_Instance.element2RayDistance, "float")
	Something(className, s_guid, "element2Shader", s_Instance.element2Shader, "CtrRef")
	Something(className, s_guid, "element2Size", s_Instance.element2Size, "Vec2")
	Something(className, s_guid, "element2SizeOccluderCurve", s_Instance.element2SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element2SizeScreenPosCurve", s_Instance.element2SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element3AlphaOccluderCurve", s_Instance.element3AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element3AlphaScreenPosCurve", s_Instance.element3AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element3Enable", s_Instance.element3Enable, "bool")
	Something(className, s_guid, "element3RayDistance", s_Instance.element3RayDistance, "float")
	Something(className, s_guid, "element3Shader", s_Instance.element3Shader, "CtrRef")
	Something(className, s_guid, "element3Size", s_Instance.element3Size, "Vec2")
	Something(className, s_guid, "element3SizeOccluderCurve", s_Instance.element3SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element3SizeScreenPosCurve", s_Instance.element3SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element4AlphaOccluderCurve", s_Instance.element4AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element4AlphaScreenPosCurve", s_Instance.element4AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element4Enable", s_Instance.element4Enable, "bool")
	Something(className, s_guid, "element4RayDistance", s_Instance.element4RayDistance, "float")
	Something(className, s_guid, "element4Shader", s_Instance.element4Shader, "CtrRef")
	Something(className, s_guid, "element4Size", s_Instance.element4Size, "Vec2")
	Something(className, s_guid, "element4SizeOccluderCurve", s_Instance.element4SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element4SizeScreenPosCurve", s_Instance.element4SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "element5AlphaOccluderCurve", s_Instance.element5AlphaOccluderCurve, "Vec4")
	Something(className, s_guid, "element5AlphaScreenPosCurve", s_Instance.element5AlphaScreenPosCurve, "Vec4")
	Something(className, s_guid, "element5Enable", s_Instance.element5Enable, "bool")
	Something(className, s_guid, "element5RayDistance", s_Instance.element5RayDistance, "float")
	Something(className, s_guid, "element5Shader", s_Instance.element5Shader, "CtrRef")
	Something(className, s_guid, "element5Size", s_Instance.element5Size, "Vec2")
	Something(className, s_guid, "element5SizeOccluderCurve", s_Instance.element5SizeOccluderCurve, "Vec4")
	Something(className, s_guid, "element5SizeScreenPosCurve", s_Instance.element5SizeScreenPosCurve, "Vec4")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "occluderSize", s_Instance.occluderSize, "float")
end

function Type:SupplyData (p_class, p_guid)
	local s_Instance = SupplyData(p_class) 
 	local className = "SupplyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammo", s_Instance.ammo, "SupplyUnitSphereData")
	Something(className, s_guid, "excludeSelf", s_Instance.excludeSelf, "bool")
	Something(className, s_guid, "healing", s_Instance.healing, "SupplyUnitSphereData")
	Something(className, s_guid, "supplySoldiers", s_Instance.supplySoldiers, "bool")
	Something(className, s_guid, "supplyVehicles", s_Instance.supplyVehicles, "bool")
	Something(className, s_guid, "teamSpecific", s_Instance.teamSpecific, "bool")
end

function Type:SupplySphereComponentData (p_class, p_guid)
	local s_Instance = SupplySphereComponentData(p_class) 
 	local className = "SupplySphereComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "supplyData", s_Instance.supplyData, "fb.SupplyData)")
end

function Type:SupplySphereEntityData (p_class, p_guid)
	local s_Instance = SupplySphereEntityData(p_class) 
 	local className = "SupplySphereEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "supplyData", s_Instance.supplyData, "fb.SupplyData)")
end

function Type:SupplySphereWeaponData (p_class, p_guid)
	local s_Instance = SupplySphereWeaponData(p_class) 
 	local className = "SupplySphereWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "supplyData", s_Instance.supplyData, "fb.SupplyData)")
end

function Type:SupplyUnitSphereData (p_class, p_guid)
	local s_Instance = SupplyUnitSphereData(p_class) 
 	local className = "SupplyUnitSphereData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "infiniteCapacity", s_Instance.infiniteCapacity, "bool")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "supplyIncSpeed", s_Instance.supplyIncSpeed, "float")
	Something(className, s_guid, "supplyPointsCapacity", s_Instance.supplyPointsCapacity, "float")
	Something(className, s_guid, "supplyPointsRefillSpeed", s_Instance.supplyPointsRefillSpeed, "float")
end

function Type:SupportedShootingBinding (p_class, p_guid)
	local s_Instance = SupportedShootingBinding(p_class) 
 	local className = "SupportedShootingBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatedCamera", s_Instance.animatedCamera, "AntRef")
	Something(className, s_guid, "distToObject", s_Instance.distToObject, "AntRef")
	Something(className, s_guid, "forwardVector", s_Instance.forwardVector, "AntRef")
	Something(className, s_guid, "heightOfObject", s_Instance.heightOfObject, "AntRef")
	Something(className, s_guid, "pitch", s_Instance.pitch, "AntRef")
	Something(className, s_guid, "supported", s_Instance.supported, "AntRef")
	Something(className, s_guid, "supportedPos", s_Instance.supportedPos, "AntRef")
	Something(className, s_guid, "undeploying", s_Instance.undeploying, "AntRef")
	Something(className, s_guid, "yaw", s_Instance.yaw, "AntRef")
end

function Type:SupportedShootingCommonData (p_class, p_guid)
	local s_Instance = SupportedShootingCommonData(p_class) 
 	local className = "SupportedShootingCommonData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "AimingConstraintsData")
	Something(className, s_guid, "binding", s_Instance.binding, "SupportedShootingBinding")
	Something(className, s_guid, "crouch", s_Instance.crouch, "SupportedShootingProximityChecking")
	Something(className, s_guid, "enterSupportedShootingAction", s_Instance.enterSupportedShootingAction, "EntryInputActionEnum")
	Something(className, s_guid, "stand", s_Instance.stand, "SupportedShootingProximityChecking")
end

function Type:SupportedShootingComponentData (p_class, p_guid)
	local s_Instance = SupportedShootingComponentData(p_class) 
 	local className = "SupportedShootingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "commonData", s_Instance.commonData, "CtrRef")
end

function Type:SupportedShootingProximityChecking (p_class, p_guid)
	local s_Instance = SupportedShootingProximityChecking(p_class) 
 	local className = "SupportedShootingProximityChecking"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rayAboveGunHeightOffset", s_Instance.rayAboveGunHeightOffset, "float")
	Something(className, s_guid, "rayAboveLength", s_Instance.rayAboveLength, "float")
	Something(className, s_guid, "rayBelowGunHeightOffset", s_Instance.rayBelowGunHeightOffset, "float")
	Something(className, s_guid, "rayBelowLength", s_Instance.rayBelowLength, "float")
end

function Type:SuppressionReactionData (p_class, p_guid)
	local s_Instance = SuppressionReactionData(p_class) 
 	local className = "SuppressionReactionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suppressionHighThreshold", s_Instance.suppressionHighThreshold, "float")
	Something(className, s_guid, "suppressionLowThreshold", s_Instance.suppressionLowThreshold, "float")
	Something(className, s_guid, "suppressionUIThreshold", s_Instance.suppressionUIThreshold, "float")
end

function Type:SuppressionScoringHandlerData (p_class, p_guid)
	local s_Instance = SuppressionScoringHandlerData(p_class) 
 	local className = "SuppressionScoringHandlerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suppressionAmountLimit", s_Instance.suppressionAmountLimit, "float")
	Something(className, s_guid, "timeSinceSuppressionLimit", s_Instance.timeSinceSuppressionLimit, "float")
end

function Type:SurfaceShaderInstanceData (p_class, p_guid)
	local s_Instance = SurfaceShaderInstanceData(p_class) 
 	local className = "SurfaceShaderInstanceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
end

function Type:SurfaceShaderInstanceDataStruct (p_class, p_guid)
	local s_Instance = SurfaceShaderInstanceDataStruct(p_class) 
 	local className = "SurfaceShaderInstanceDataStruct"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolParameters", s_Instance.boolParameters, "List<BoolShaderParameter)>")
	Something(className, s_guid, "shader", s_Instance.shader, "CtrRef")
	Something(className, s_guid, "textureParameters", s_Instance.textureParameters, "List<TextureShaderParameter)>")
	Something(className, s_guid, "vectorArrayParameters", s_Instance.vectorArrayParameters, "List<VectorArrayShaderParameter)>")
	Something(className, s_guid, "vectorParameters", s_Instance.vectorParameters, "List<VectorShaderParameter)>")
end

function Type:SurroundingGeometryEntityData (p_class, p_guid)
	local s_Instance = SurroundingGeometryEntityData(p_class) 
 	local className = "SurroundingGeometryEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowedVehicleList", s_Instance.allowedVehicleList, "CtrRef")
	Something(className, s_guid, "combatArea", s_Instance.combatArea, "CtrRef")
	Something(className, s_guid, "combatAreaIndex", s_Instance.combatAreaIndex, "uint")
end

function Type:SurveyEvent (p_class, p_guid)
	local s_Instance = SurveyEvent(p_class) 
 	local className = "SurveyEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "answerQuestion1", s_Instance.answerQuestion1, "int")
	Something(className, s_guid, "answerQuestion2", s_Instance.answerQuestion2, "int")
	Something(className, s_guid, "answerQuestion3", s_Instance.answerQuestion3, "int")
	Something(className, s_guid, "answerQuestion4", s_Instance.answerQuestion4, "int")
	Something(className, s_guid, "answerQuestion5", s_Instance.answerQuestion5, "int")
	Something(className, s_guid, "freeTextField", s_Instance.freeTextField, "string")
	Something(className, s_guid, "surveyMetricLink", s_Instance.surveyMetricLink, "GUID")
	Something(className, s_guid, "surveyName", s_Instance.surveyName, "string")
end

function Type:SurveySuppressedEvent (p_class, p_guid)
	local s_Instance = SurveySuppressedEvent(p_class) 
 	local className = "SurveySuppressedEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suppressReason", s_Instance.suppressReason, "string")
end

function Type:SwimmingStateData (p_class, p_guid)
	local s_Instance = SwimmingStateData(p_class) 
 	local className = "SwimmingStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bodyUnderWater", s_Instance.bodyUnderWater, "float")
end

function Type:SwitcherEntry (p_class, p_guid)
	local s_Instance = SwitcherEntry(p_class) 
 	local className = "SwitcherEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "caseTrigger", s_Instance.caseTrigger, "AudioGraphNodePort")
	Something(className, s_guid, "caseValue", s_Instance.caseValue, "float")
end

function Type:SwitcherNodeData (p_class, p_guid)
	local s_Instance = SwitcherNodeData(p_class) 
 	local className = "SwitcherNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultCaseValue", s_Instance.defaultCaseValue, "float")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "trigger", s_Instance.trigger, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
end

function Type:SwitchPropertyStringEntityData (p_class, p_guid)
	local s_Instance = SwitchPropertyStringEntityData(p_class) 
 	local className = "SwitchPropertyStringEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "stringProperties", s_Instance.stringProperties, "List<string)>")
end

function Type:SyncAnimationsEntityData (p_class, p_guid)
	local s_Instance = SyncAnimationsEntityData(p_class) 
 	local className = "SyncAnimationsEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "externalTime", s_Instance.externalTime, "float")
	Something(className, s_guid, "nearEndEventTime", s_Instance.nearEndEventTime, "float")
	Something(className, s_guid, "startServerPaused", s_Instance.startServerPaused, "bool")
end

function Type:SyncedBFSettings (p_class, p_guid)
	local s_Instance = SyncedBFSettings(p_class) 
 	local className = "SyncedBFSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allUnlocksUnlocked", s_Instance.allUnlocksUnlocked, "bool")
	Something(className, s_guid, "gameModeCounterModifier", s_Instance.gameModeCounterModifier, "float")
	Something(className, s_guid, "memoryDefragGlobal", s_Instance.memoryDefragGlobal, "bool")
	Something(className, s_guid, "memoryDefragUI", s_Instance.memoryDefragUI, "bool")
	Something(className, s_guid, "memoryGarbageCollectHavok", s_Instance.memoryGarbageCollectHavok, "bool")
	Something(className, s_guid, "no3dSpotting", s_Instance.no3dSpotting, "bool")
	Something(className, s_guid, "noHud", s_Instance.noHud, "bool")
	Something(className, s_guid, "noMinimap", s_Instance.noMinimap, "bool")
	Something(className, s_guid, "noMinimapSpotting", s_Instance.noMinimapSpotting, "bool")
	Something(className, s_guid, "noNameTag", s_Instance.noNameTag, "bool")
	Something(className, s_guid, "onlySquadLeaderSpawn", s_Instance.onlySquadLeaderSpawn, "bool")
	Something(className, s_guid, "teamSwitchingAllowed", s_Instance.teamSwitchingAllowed, "bool")
	Something(className, s_guid, "unlicensedUnlocksUnlocked", s_Instance.unlicensedUnlocksUnlocked, "bool")
end

function Type:SyncedBoolEntityData (p_class, p_guid)
	local s_Instance = SyncedBoolEntityData(p_class) 
 	local className = "SyncedBoolEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "bool")
end

function Type:SyncedFloatEntityData (p_class, p_guid)
	local s_Instance = SyncedFloatEntityData(p_class) 
 	local className = "SyncedFloatEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "float")
end

function Type:SyncedGameSettings (p_class, p_guid)
	local s_Instance = SyncedGameSettings(p_class) 
 	local className = "SyncedGameSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowClientSideDamageArbitration", s_Instance.allowClientSideDamageArbitration, "bool")
	Something(className, s_guid, "bulletDamageModifier", s_Instance.bulletDamageModifier, "float")
	Something(className, s_guid, "difficultyIndex", s_Instance.difficultyIndex, "uint")
	Something(className, s_guid, "disableRegenerateHealth", s_Instance.disableRegenerateHealth, "bool")
	Something(className, s_guid, "disableToggleEntryCamera", s_Instance.disableToggleEntryCamera, "bool")
	Something(className, s_guid, "enableFriendlyFire", s_Instance.enableFriendlyFire, "bool")
	Something(className, s_guid, "manDownTimeModifier", s_Instance.manDownTimeModifier, "float")
	Something(className, s_guid, "maxAllowedLatency", s_Instance.maxAllowedLatency, "float")
end

function Type:SyncedIntEntityData (p_class, p_guid)
	local s_Instance = SyncedIntEntityData(p_class) 
 	local className = "SyncedIntEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "int")
end

function Type:SyncedSequenceEntityData (p_class, p_guid)
	local s_Instance = SyncedSequenceEntityData(p_class) 
 	local className = "SyncedSequenceEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "interpolateTime", s_Instance.interpolateTime, "bool")
end

function Type:SyncedTransformEntityData (p_class, p_guid)
	local s_Instance = SyncedTransformEntityData(p_class) 
 	local className = "SyncedTransformEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "LinearTransform")
	Something(className, s_guid, "interpolate", s_Instance.interpolate, "bool")
end

function Type:SystemSettings (p_class, p_guid)
	local s_Instance = SystemSettings(p_class) 
 	local className = "SystemSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:TacticalObjectiveEntityData (p_class, p_guid)
	local s_Instance = TacticalObjectiveEntityData(p_class) 
 	local className = "TacticalObjectiveEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "briefingSidTeam1", s_Instance.briefingSidTeam1, "string")
	Something(className, s_guid, "briefingSidTeam2", s_Instance.briefingSidTeam2, "string")
	Something(className, s_guid, "missionSid", s_Instance.missionSid, "string")
	Something(className, s_guid, "team1Timer", s_Instance.team1Timer, "float")
	Something(className, s_guid, "team2Timer", s_Instance.team2Timer, "float")
end

function Type:TargetCameraData (p_class, p_guid)
	local s_Instance = TargetCameraData(p_class) 
 	local className = "TargetCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hud", s_Instance.hud, "HudData")
	Something(className, s_guid, "uIParts", s_Instance.uIParts, "List<CtrRef)>")
end

function Type:TargetCameraEntityData (p_class, p_guid)
	local s_Instance = TargetCameraEntityData(p_class) 
 	local className = "TargetCameraEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "camera", s_Instance.camera, "CtrRef")
end

function Type:TargetEvaluationConstantData (p_class, p_guid)
	local s_Instance = TargetEvaluationConstantData(p_class) 
 	local className = "TargetEvaluationConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultHumanTargetPreference", s_Instance.defaultHumanTargetPreference, "float")
	Something(className, s_guid, "maxBattleStrength", s_Instance.maxBattleStrength, "float")
	Something(className, s_guid, "otherSquadAttackerFactorUsage", s_Instance.otherSquadAttackerFactorUsage, "float")
	Something(className, s_guid, "targetFlipFactorUsage", s_Instance.targetFlipFactorUsage, "float")
end

function Type:TargetEvaluatorComponentData (p_class, p_guid)
	local s_Instance = TargetEvaluatorComponentData(p_class) 
 	local className = "TargetEvaluatorComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "updateInterval", s_Instance.updateInterval, "float")
end

function Type:TeamData (p_class, p_guid)
	local s_Instance = TeamData(p_class) 
 	local className = "TeamData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "faction", s_Instance.faction, "FactionId")
	Something(className, s_guid, "soldier", s_Instance.soldier, "CtrRef")
	Something(className, s_guid, "soldierCustomization", s_Instance.soldierCustomization, "List<CtrRef)>")
	Something(className, s_guid, "vehicleCustomization", s_Instance.vehicleCustomization, "List<CtrRef)>")
end

function Type:TeamEntityData (p_class, p_guid)
	local s_Instance = TeamEntityData(p_class) 
 	local className = "TeamEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "TeamId")
	Something(className, s_guid, "team", s_Instance.team, "CtrRef")
end

function Type:TeamFilterEntityData (p_class, p_guid)
	local s_Instance = TeamFilterEntityData(p_class) 
 	local className = "TeamFilterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "generateEventForEveryMatchingTeamMember", s_Instance.generateEventForEveryMatchingTeamMember, "bool")
	Something(className, s_guid, "invertFilter", s_Instance.invertFilter, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "team", s_Instance.team, "TeamId")
end

function Type:TelemetryTriggerEntityData (p_class, p_guid)
	local s_Instance = TelemetryTriggerEntityData(p_class) 
 	local className = "TelemetryTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:TerrainEntityData (p_class, p_guid)
	local s_Instance = TerrainEntityData(p_class) 
 	local className = "TerrainEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "terrainAsset", s_Instance.terrainAsset, "CtrRef")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
	Something(className, s_guid, "waterMaterial", s_Instance.waterMaterial, "CtrRef")
end

function Type:TerrainFillDecalData (p_class, p_guid)
	local s_Instance = TerrainFillDecalData(p_class) 
 	local className = "TerrainFillDecalData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shader2d", s_Instance.shader2d, "CtrRef")
	Something(className, s_guid, "shader3dZOnly", s_Instance.shader3dZOnly, "CtrRef")
end

function Type:TerrainLayerProceduralMask (p_class, p_guid)
	local s_Instance = TerrainLayerProceduralMask(p_class) 
 	local className = "TerrainLayerProceduralMask"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altitudeMin", s_Instance.altitudeMin, "float")
end

function Type:TerrainQuadDecalAtlasTile (p_class, p_guid)
	local s_Instance = TerrainQuadDecalAtlasTile(p_class) 
 	local className = "TerrainQuadDecalAtlasTile"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flipX", s_Instance.flipX, "bool")
	Something(className, s_guid, "flipY", s_Instance.flipY, "bool")
	Something(className, s_guid, "tileCountX", s_Instance.tileCountX, "uint")
	Something(className, s_guid, "tileCountY", s_Instance.tileCountY, "uint")
	Something(className, s_guid, "tileIndexX", s_Instance.tileIndexX, "uint")
	Something(className, s_guid, "tileIndexY", s_Instance.tileIndexY, "uint")
end

function Type:TerrainQuadDecalAtlasTileTemplateData (p_class, p_guid)
	local s_Instance = TerrainQuadDecalAtlasTileTemplateData(p_class) 
 	local className = "TerrainQuadDecalAtlasTileTemplateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasTile", s_Instance.atlasTile, "TerrainQuadDecalAtlasTile")
end

function Type:TerrainQuadDecalData (p_class, p_guid)
	local s_Instance = TerrainQuadDecalData(p_class) 
 	local className = "TerrainQuadDecalData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "atlasTile", s_Instance.atlasTile, "TerrainQuadDecalAtlasTile")
	Something(className, s_guid, "atlasTileTemplate", s_Instance.atlasTileTemplate, "CtrRef")
	Something(className, s_guid, "shader2d", s_Instance.shader2d, "CtrRef")
	Something(className, s_guid, "shader3dZOnly", s_Instance.shader3dZOnly, "CtrRef")
	Something(className, s_guid, "userMasks", s_Instance.userMasks, "Vec4")
end

function Type:TerrainSettings (p_class, p_guid)
	local s_Instance = TerrainSettings(p_class) 
 	local className = "TerrainSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heightQueryCacheSize", s_Instance.heightQueryCacheSize, "uint")
	Something(className, s_guid, "intersectingModifiersMax", s_Instance.intersectingModifiersMax, "uint")
	Something(className, s_guid, "modifierDepthFactor", s_Instance.modifierDepthFactor, "float")
	Something(className, s_guid, "modifiersCapacity", s_Instance.modifiersCapacity, "uint")
	Something(className, s_guid, "modifiersEnable", s_Instance.modifiersEnable, "bool")
	Something(className, s_guid, "modifierSlopeMax", s_Instance.modifierSlopeMax, "float")
end

function Type:TerrainStreamingSettings (p_class, p_guid)
	local s_Instance = TerrainStreamingSettings(p_class) 
 	local className = "TerrainStreamingSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeFreeStreamingDataLoadJobCount", s_Instance.activeFreeStreamingDataLoadJobCount, "uint")
	Something(className, s_guid, "additionalBlurriness", s_Instance.additionalBlurriness, "uint")
	Something(className, s_guid, "colorAdditionalBlurriness", s_Instance.colorAdditionalBlurriness, "uint")
	Something(className, s_guid, "colorAtlasSampleCountXFactor", s_Instance.colorAtlasSampleCountXFactor, "uint")
	Something(className, s_guid, "colorAtlasSampleCountYFactor", s_Instance.colorAtlasSampleCountYFactor, "uint")
	Something(className, s_guid, "dataLoadJobCount", s_Instance.dataLoadJobCount, "uint")
	Something(className, s_guid, "heightfieldAtlasSampleCountXFactor", s_Instance.heightfieldAtlasSampleCountXFactor, "uint")
	Something(className, s_guid, "heightfieldAtlasSampleCountYFactor", s_Instance.heightfieldAtlasSampleCountYFactor, "uint")
	Something(className, s_guid, "invisibleDetailReductionFactor", s_Instance.invisibleDetailReductionFactor, "float")
	Something(className, s_guid, "keepPoolFullEnable", s_Instance.keepPoolFullEnable, "bool")
	Something(className, s_guid, "loadOccluderDataEnable", s_Instance.loadOccluderDataEnable, "bool")
	Something(className, s_guid, "maskAdditionalBlurriness", s_Instance.maskAdditionalBlurriness, "uint")
	Something(className, s_guid, "maskAtlasSampleCountXFactor", s_Instance.maskAtlasSampleCountXFactor, "uint")
	Something(className, s_guid, "maskAtlasSampleCountYFactor", s_Instance.maskAtlasSampleCountYFactor, "uint")
	Something(className, s_guid, "occludedDetailReductionFactor", s_Instance.occludedDetailReductionFactor, "float")
end

function Type:TestCaseEntityData (p_class, p_guid)
	local s_Instance = TestCaseEntityData(p_class) 
 	local className = "TestCaseEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "stable", s_Instance.stable, "bool")
	Something(className, s_guid, "testCaseName", s_Instance.testCaseName, "string")
	Something(className, s_guid, "testGroup", s_Instance.testGroup, "string")
	Something(className, s_guid, "timeOut", s_Instance.timeOut, "float")
end

function Type:TestPointEntityData (p_class, p_guid)
	local s_Instance = TestPointEntityData(p_class) 
 	local className = "TestPointEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outputName", s_Instance.outputName, "string")
end

function Type:TextUnlockPartData (p_class, p_guid)
	local s_Instance = TextUnlockPartData(p_class) 
 	local className = "TextUnlockPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "meshBlueprint", s_Instance.meshBlueprint, "CtrRef")
	Something(className, s_guid, "shaderNodeName", s_Instance.shaderNodeName, "string")
end

function Type:TextureAssetUnlockPartData (p_class, p_guid)
	local s_Instance = TextureAssetUnlockPartData(p_class) 
 	local className = "TextureAssetUnlockPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
end

function Type:TextureCompressSettings (p_class, p_guid)
	local s_Instance = TextureCompressSettings(p_class) 
 	local className = "TextureCompressSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debugDrawAlphaOverlayScale", s_Instance.debugDrawAlphaOverlayScale, "float")
	Something(className, s_guid, "debugDrawEnable", s_Instance.debugDrawEnable, "bool")
	Something(className, s_guid, "textureCompressJobPoolSize", s_Instance.textureCompressJobPoolSize, "uint")
	Something(className, s_guid, "viewMode", s_Instance.viewMode, "TextureCompressQualityMode")
end

function Type:TextureReference (p_class, p_guid)
	local s_Instance = TextureReference(p_class) 
 	local className = "TextureReference"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
end

function Type:TextureSettings (p_class, p_guid)
	local s_Instance = TextureSettings(p_class) 
 	local className = "TextureSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "loadingEnabled", s_Instance.loadingEnabled, "bool")
	Something(className, s_guid, "renderTexturesEnabled", s_Instance.renderTexturesEnabled, "bool")
	Something(className, s_guid, "skipMipmapCount", s_Instance.skipMipmapCount, "uint")
end

function Type:TextureShaderParameter (p_class, p_guid)
	local s_Instance = TextureShaderParameter(p_class) 
 	local className = "TextureShaderParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:TextureSliceUnlockPartData (p_class, p_guid)
	local s_Instance = TextureSliceUnlockPartData(p_class) 
 	local className = "TextureSliceUnlockPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sliceIndex", s_Instance.sliceIndex, "int")
end

function Type:TextureStreamingSettings (p_class, p_guid)
	local s_Instance = TextureStreamingSettings(p_class) 
 	local className = "TextureStreamingSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asyncCreatesEnable", s_Instance.asyncCreatesEnable, "bool")
	Something(className, s_guid, "chunkLoadEnable", s_Instance.chunkLoadEnable, "bool")
	Something(className, s_guid, "defragEnable", s_Instance.defragEnable, "bool")
	Something(className, s_guid, "defragFrameTransferLimit", s_Instance.defragFrameTransferLimit, "uint")
	Something(className, s_guid, "defragTransfersEnable", s_Instance.defragTransfersEnable, "bool")
	Something(className, s_guid, "drawLoadingListEnable", s_Instance.drawLoadingListEnable, "bool")
	Something(className, s_guid, "drawPriorityListEnable", s_Instance.drawPriorityListEnable, "bool")
	Something(className, s_guid, "drawStatsEnable", s_Instance.drawStatsEnable, "bool")
	Something(className, s_guid, "drawTextureFormatStatsEnable", s_Instance.drawTextureFormatStatsEnable, "bool")
	Something(className, s_guid, "drawTextureGroupStatsEnable", s_Instance.drawTextureGroupStatsEnable, "bool")
	Something(className, s_guid, "dumpLoadedList", s_Instance.dumpLoadedList, "bool")
	Something(className, s_guid, "dxImmutableUsageEnable", s_Instance.dxImmutableUsageEnable, "bool")
	Something(className, s_guid, "dynamicLoadingEnable", s_Instance.dynamicLoadingEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "fadeMipmapsEnable", s_Instance.fadeMipmapsEnable, "bool")
	Something(className, s_guid, "fadeMipmapTime", s_Instance.fadeMipmapTime, "float")
	Something(className, s_guid, "forceMipmap", s_Instance.forceMipmap, "int")
	Something(className, s_guid, "forceWantedEnable", s_Instance.forceWantedEnable, "bool")
	Something(className, s_guid, "instantUnloadingEnable", s_Instance.instantUnloadingEnable, "bool")
	Something(className, s_guid, "listViewPageIndex", s_Instance.listViewPageIndex, "uint")
	Something(className, s_guid, "loadMipmapsEnable", s_Instance.loadMipmapsEnable, "bool")
	Something(className, s_guid, "maxFrameTextureCreateCount", s_Instance.maxFrameTextureCreateCount, "uint")
	Something(className, s_guid, "maxFrameTextureCreateSize", s_Instance.maxFrameTextureCreateSize, "uint")
	Something(className, s_guid, "maxMipmapCount", s_Instance.maxMipmapCount, "uint")
	Something(className, s_guid, "maxPendingLoadCount", s_Instance.maxPendingLoadCount, "uint")
	Something(className, s_guid, "maxTextureSizeKb", s_Instance.maxTextureSizeKb, "uint")
	Something(className, s_guid, "minMipmapCount", s_Instance.minMipmapCount, "uint")
	Something(className, s_guid, "minTextureSize", s_Instance.minTextureSize, "uint")
	Something(className, s_guid, "mipmapBias", s_Instance.mipmapBias, "float")
	Something(className, s_guid, "mipmapsEnable", s_Instance.mipmapsEnable, "bool")
	Something(className, s_guid, "onDemandPoolSize", s_Instance.onDemandPoolSize, "uint")
	Something(className, s_guid, "onlyWantedInPool", s_Instance.onlyWantedInPool, "bool")
	Something(className, s_guid, "overridePoolSize", s_Instance.overridePoolSize, "bool")
	Something(className, s_guid, "poolEnable", s_Instance.poolEnable, "bool")
	Something(className, s_guid, "poolHeadroomSize", s_Instance.poolHeadroomSize, "uint")
	Something(className, s_guid, "poolSize", s_Instance.poolSize, "uint")
	Something(className, s_guid, "priorityThreshold", s_Instance.priorityThreshold, "float")
	Something(className, s_guid, "textureUpdateEnable", s_Instance.textureUpdateEnable, "bool")
	Something(className, s_guid, "updateEnable", s_Instance.updateEnable, "bool")
	Something(className, s_guid, "uploadMipmapsEnable", s_Instance.uploadMipmapsEnable, "bool")
	Something(className, s_guid, "useConditionalStreaming", s_Instance.useConditionalStreaming, "bool")
	Something(className, s_guid, "xenonFinalPoolSizeAdjustment", s_Instance.xenonFinalPoolSizeAdjustment, "uint")
	Something(className, s_guid, "xenonRetailPoolSizeAdjustment", s_Instance.xenonRetailPoolSizeAdjustment, "uint")
end

function Type:TextureUnlockPartData (p_class, p_guid)
	local s_Instance = TextureUnlockPartData(p_class) 
 	local className = "TextureUnlockPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "textureReference", s_Instance.textureReference, "CtrRef")
end

function Type:TicketCounterEntityData (p_class, p_guid)
	local s_Instance = TicketCounterEntityData(p_class) 
 	local className = "TicketCounterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decreaseTickets", s_Instance.decreaseTickets, "TicketDecreaseType")
	Something(className, s_guid, "haltTicketLossOnEqualPointCount", s_Instance.haltTicketLossOnEqualPointCount, "bool")
	Something(className, s_guid, "initialTicketCount", s_Instance.initialTicketCount, "int")
	Something(className, s_guid, "resetCapturePointsOnReset", s_Instance.resetCapturePointsOnReset, "bool")
	Something(className, s_guid, "setBestSquadSpawner", s_Instance.setBestSquadSpawner, "bool")
	Something(className, s_guid, "spawnAlwaysAllowed", s_Instance.spawnAlwaysAllowed, "bool")
	Something(className, s_guid, "teamId", s_Instance.teamId, "fb.TeamId)")
	Something(className, s_guid, "ticketLossPerMin", s_Instance.ticketLossPerMin, "int")
	Something(className, s_guid, "ticketLossStart", s_Instance.ticketLossStart, "int")
	Something(className, s_guid, "ticketLossWhenLostAll", s_Instance.ticketLossWhenLostAll, "int")
	Something(className, s_guid, "ticketLossWhenLostAllControlsPoint", s_Instance.ticketLossWhenLostAllControlsPoint, "int")
	Something(className, s_guid, "ticketPercentages", s_Instance.ticketPercentages, "List<TicketCountPercentage)>")
end

function Type:TicketCountPercentage (p_class, p_guid)
	local s_Instance = TicketCountPercentage(p_class) 
 	local className = "TicketCountPercentage"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxPercentOfTicketsLeft", s_Instance.maxPercentOfTicketsLeft, "int")
	Something(className, s_guid, "ticketLossPerMin", s_Instance.ticketLossPerMin, "int")
end

function Type:TickEvent (p_class, p_guid)
	local s_Instance = TickEvent(p_class) 
 	local className = "TickEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
	Something(className, s_guid, "time", s_Instance.time, "float")
end

function Type:TimerNodeData (p_class, p_guid)
	local s_Instance = TimerNodeData(p_class) 
 	local className = "TimerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mode", s_Instance.mode, "TimerMode")
	Something(className, s_guid, "period", s_Instance.period, "AudioGraphNodePort")
	Something(className, s_guid, "progress", s_Instance.progress, "AudioGraphNodePort")
	Something(className, s_guid, "start", s_Instance.start, "AudioGraphNodePort")
	Something(className, s_guid, "stop", s_Instance.stop, "AudioGraphNodePort")
	Something(className, s_guid, "tick", s_Instance.tick, "AudioGraphNodePort")
end

function Type:TimingConstantData (p_class, p_guid)
	local s_Instance = TimingConstantData(p_class) 
 	local className = "TimingConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "priorityClasses", s_Instance.priorityClasses, "List<CtrRef)>")
	Something(className, s_guid, "subsystemTimeParts", s_Instance.subsystemTimeParts, "SubsystemTimingConfigData")
	Something(className, s_guid, "updateTimePerFrame", s_Instance.updateTimePerFrame, "float")
end

function Type:TimingViewCategories (p_class, p_guid)
	local s_Instance = TimingViewCategories(p_class) 
 	local className = "TimingViewCategories"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "timingCategories", s_Instance.timingCategories, "List<CtrRef)>")
end

function Type:TimingViewCategory (p_class, p_guid)
	local s_Instance = TimingViewCategory(p_class) 
 	local className = "TimingViewCategory"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "categoryName", s_Instance.categoryName, "string")
	Something(className, s_guid, "cpuBudget", s_Instance.cpuBudget, "float")
	Something(className, s_guid, "gpuBudget", s_Instance.gpuBudget, "float")
	Something(className, s_guid, "keywords", s_Instance.keywords, "List<string)>")
	Something(className, s_guid, "spuBudget", s_Instance.spuBudget, "float")
end

function Type:TimingViewSettings (p_class, p_guid)
	local s_Instance = TimingViewSettings(p_class) 
 	local className = "TimingViewSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autolockNameFilter", s_Instance.autolockNameFilter, "string")
	Something(className, s_guid, "autolockThreshold", s_Instance.autolockThreshold, "float")
	Something(className, s_guid, "averageFrameCount", s_Instance.averageFrameCount, "int")
	Something(className, s_guid, "barHeight", s_Instance.barHeight, "uint")
	Something(className, s_guid, "barMinTime", s_Instance.barMinTime, "double")
	Something(className, s_guid, "barPad", s_Instance.barPad, "uint")
	Something(className, s_guid, "barSyncProcessor", s_Instance.barSyncProcessor, "int")
	Something(className, s_guid, "drawBarsEnable", s_Instance.drawBarsEnable, "bool")
	Something(className, s_guid, "drawCpuLegendEnable", s_Instance.drawCpuLegendEnable, "bool")
	Something(className, s_guid, "drawEnable", s_Instance.drawEnable, "bool")
	Something(className, s_guid, "drawGpuLegendEnable", s_Instance.drawGpuLegendEnable, "bool")
	Something(className, s_guid, "drawLegendEnable", s_Instance.drawLegendEnable, "bool")
	Something(className, s_guid, "drawOnlySummaryEnable", s_Instance.drawOnlySummaryEnable, "bool")
	Something(className, s_guid, "drawSpuLegendEnable", s_Instance.drawSpuLegendEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "filterEnable", s_Instance.filterEnable, "bool")
	Something(className, s_guid, "filterEventName", s_Instance.filterEventName, "string")
	Something(className, s_guid, "frameCount", s_Instance.frameCount, "uint")
	Something(className, s_guid, "frameDelayCount", s_Instance.frameDelayCount, "uint")
	Something(className, s_guid, "gpuBarFrameOffset", s_Instance.gpuBarFrameOffset, "int")
	Something(className, s_guid, "legendColumnWidth", s_Instance.legendColumnWidth, "int")
	Something(className, s_guid, "legendDisplayMode", s_Instance.legendDisplayMode, "int")
	Something(className, s_guid, "legendScreenOffset", s_Instance.legendScreenOffset, "int")
	Something(className, s_guid, "maxCpuLegendColumnCount", s_Instance.maxCpuLegendColumnCount, "int")
	Something(className, s_guid, "maxFrameEventCount", s_Instance.maxFrameEventCount, "uint")
	Something(className, s_guid, "maxGpuLegendColumnCount", s_Instance.maxGpuLegendColumnCount, "int")
	Something(className, s_guid, "maxSpuLegendColumnCount", s_Instance.maxSpuLegendColumnCount, "int")
	Something(className, s_guid, "snoopEnable", s_Instance.snoopEnable, "bool")
	Something(className, s_guid, "snoopEventName", s_Instance.snoopEventName, "string")
	Something(className, s_guid, "snoopOnly", s_Instance.snoopOnly, "bool")
	Something(className, s_guid, "sortByTime", s_Instance.sortByTime, "bool")
	Something(className, s_guid, "timeOffset", s_Instance.timeOffset, "float")
	Something(className, s_guid, "timeRange", s_Instance.timeRange, "float")
end

function Type:TonemapComponentData (p_class, p_guid)
	local s_Instance = TonemapComponentData(p_class) 
 	local className = "TonemapComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bloomScale", s_Instance.bloomScale, "Vec3")
	Something(className, s_guid, "chromostereopsisEnable", s_Instance.chromostereopsisEnable, "bool")
	Something(className, s_guid, "chromostereopsisOffset", s_Instance.chromostereopsisOffset, "float")
	Something(className, s_guid, "chromostereopsisScale", s_Instance.chromostereopsisScale, "float")
	Something(className, s_guid, "exposureAdjustTime", s_Instance.exposureAdjustTime, "float")
	Something(className, s_guid, "maxExposure", s_Instance.maxExposure, "float")
	Something(className, s_guid, "middleGray", s_Instance.middleGray, "float")
	Something(className, s_guid, "minExposure", s_Instance.minExposure, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "tonemapMethod", s_Instance.tonemapMethod, "fb.TonemapMethod)")
end

function Type:ToolData (p_class, p_guid)
	local s_Instance = ToolData(p_class) 
 	local className = "ToolData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isAlwaysActive", s_Instance.isAlwaysActive, "bool")
end

function Type:ToWorldSpaceTransformEntityData (p_class, p_guid)
	local s_Instance = ToWorldSpaceTransformEntityData(p_class) 
 	local className = "ToWorldSpaceTransformEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TrackComponentData (p_class, p_guid)
	local s_Instance = TrackComponentData(p_class) 
 	local className = "TrackComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "scrollFactor", s_Instance.scrollFactor, "float")
end

function Type:TrackPlayerEntityData (p_class, p_guid)
	local s_Instance = TrackPlayerEntityData(p_class) 
 	local className = "TrackPlayerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkPlayerAlive", s_Instance.checkPlayerAlive, "bool")
	Something(className, s_guid, "enforceSharedCombatArea", s_Instance.enforceSharedCombatArea, "bool")
	Something(className, s_guid, "randomizeTracker", s_Instance.randomizeTracker, "bool")
	Something(className, s_guid, "reseted", s_Instance.reseted, "bool")
	Something(className, s_guid, "snapHeightOffsetY", s_Instance.snapHeightOffsetY, "float")
	Something(className, s_guid, "snapHeightOnKilledDestroyed", s_Instance.snapHeightOnKilledDestroyed, "bool")
	Something(className, s_guid, "trackMultiplePlayers", s_Instance.trackMultiplePlayers, "bool")
	Something(className, s_guid, "updateFlagComponent", s_Instance.updateFlagComponent, "bool")
end

function Type:TrackWheelComponentData (p_class, p_guid)
	local s_Instance = TrackWheelComponentData(p_class) 
 	local className = "TrackWheelComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boneName", s_Instance.boneName, "string")
end

function Type:TrajectoryEntityData (p_class, p_guid)
	local s_Instance = TrajectoryEntityData(p_class) 
 	local className = "TrajectoryEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outTransform", s_Instance.outTransform, "LinearTransform")
end

function Type:TransformBlendEntityData (p_class, p_guid)
	local s_Instance = TransformBlendEntityData(p_class) 
 	local className = "TransformBlendEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blendValue", s_Instance.blendValue, "float")
	Something(className, s_guid, "blendValue2", s_Instance.blendValue2, "float")
	Something(className, s_guid, "in1", s_Instance.in1, "LinearTransform")
	Something(className, s_guid, "in2", s_Instance.in2, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TransformEntityData (p_class, p_guid)
	local s_Instance = TransformEntityData(p_class) 
 	local className = "TransformEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultTransform", s_Instance.defaultTransform, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TransformHubEntityData (p_class, p_guid)
	local s_Instance = TransformHubEntityData(p_class) 
 	local className = "TransformHubEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "LinearTransform")
	Something(className, s_guid, "in2", s_Instance.in2, "LinearTransform")
	Something(className, s_guid, "in3", s_Instance.in3, "LinearTransform")
	Something(className, s_guid, "in4", s_Instance.in4, "LinearTransform")
	Something(className, s_guid, "in5", s_Instance.in5, "LinearTransform")
	Something(className, s_guid, "in6", s_Instance.in6, "LinearTransform")
	Something(className, s_guid, "in7", s_Instance.in7, "LinearTransform")
	Something(className, s_guid, "in8", s_Instance.in8, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TransformModifierEntityData (p_class, p_guid)
	local s_Instance = TransformModifierEntityData(p_class) 
 	local className = "TransformModifierEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forward", s_Instance.forward, "ModifierAxis")
	Something(className, s_guid, "in", s_Instance.inValue, "LinearTransform")
	Something(className, s_guid, "invertForward", s_Instance.invertForward, "bool")
	Something(className, s_guid, "invertLeft", s_Instance.invertLeft, "bool")
	Something(className, s_guid, "invertUp", s_Instance.invertUp, "bool")
	Something(className, s_guid, "left", s_Instance.left, "ModifierAxis")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "up", s_Instance.up, "ModifierAxis")
end

function Type:TransformMultiplierEntityData (p_class, p_guid)
	local s_Instance = TransformMultiplierEntityData(p_class) 
 	local className = "TransformMultiplierEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "LinearTransform")
	Something(className, s_guid, "in2", s_Instance.in2, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TransformPartPropertyTrackData (p_class, p_guid)
	local s_Instance = TransformPartPropertyTrackData(p_class) 
 	local className = "TransformPartPropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isStatic", s_Instance.isStatic, "bool")
	Something(className, s_guid, "keyCount", s_Instance.keyCount, "uint")
	Something(className, s_guid, "keyStartIndex", s_Instance.keyStartIndex, "uint")
	Something(className, s_guid, "postInfinity", s_Instance.postInfinity, "CurveInfinityType")
	Something(className, s_guid, "preInfinity", s_Instance.preInfinity, "CurveInfinityType")
	Something(className, s_guid, "resourceName", s_Instance.resourceName, "string")
	Something(className, s_guid, "transformPart", s_Instance.transformPart, "fb.TransformPart)")
	Something(className, s_guid, "weighted", s_Instance.weighted, "bool")
end

function Type:TransformPropertyTrackData (p_class, p_guid)
	local s_Instance = TransformPropertyTrackData(p_class) 
 	local className = "TransformPropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<LinearTransform)>")
end

function Type:TransformSelectorEntityData (p_class, p_guid)
	local s_Instance = TransformSelectorEntityData(p_class) 
 	local className = "TransformSelectorEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "LinearTransform")
	Something(className, s_guid, "in2", s_Instance.in2, "LinearTransform")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "selection", s_Instance.selection, "bool")
end

function Type:TransformSnapToGroundEntityData (p_class, p_guid)
	local s_Instance = TransformSnapToGroundEntityData(p_class) 
 	local className = "TransformSnapToGroundEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alignWithGroundNormal", s_Instance.alignWithGroundNormal, "bool")
	Something(className, s_guid, "distanceToGround", s_Instance.distanceToGround, "float")
	Something(className, s_guid, "in", s_Instance.inValue, "LinearTransform")
	Something(className, s_guid, "rayCastLength", s_Instance.rayCastLength, "float")
	Something(className, s_guid, "rayCastUpOffset", s_Instance.rayCastUpOffset, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:TransformSplitterEntityData (p_class, p_guid)
	local s_Instance = TransformSplitterEntityData(p_class) 
 	local className = "TransformSplitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:TreeNodeBase (p_class, p_guid)
	local s_Instance = TreeNodeBase(p_class) 
 	local className = "TreeNodeBase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nodeName", s_Instance.nodeName, "string")
end

function Type:TriggerEntityData (p_class, p_guid)
	local s_Instance = TriggerEntityData(p_class) 
 	local className = "TriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delay", s_Instance.delay, "float")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
end

function Type:TurbulanceData (p_class, p_guid)
	local s_Instance = TurbulanceData(p_class) 
 	local className = "TurbulanceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "intensity", s_Instance.intensity, "float")
end

function Type:TurnEffectData (p_class, p_guid)
	local s_Instance = TurnEffectData(p_class) 
 	local className = "TurnEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "beginTime", s_Instance.beginTime, "float")
	Something(className, s_guid, "endTime", s_Instance.endTime, "float")
	Something(className, s_guid, "holdTime", s_Instance.holdTime, "float")
	Something(className, s_guid, "maxPitchAngle", s_Instance.maxPitchAngle, "float")
	Something(className, s_guid, "maxRollAngle", s_Instance.maxRollAngle, "float")
	Something(className, s_guid, "safeTime", s_Instance.safeTime, "float")
	Something(className, s_guid, "velocityThreshhold", s_Instance.velocityThreshhold, "float")
	Something(className, s_guid, "yawVelocityThreshhold", s_Instance.yawVelocityThreshhold, "float")
end

function Type:TurretControlConstantData (p_class, p_guid)
	local s_Instance = TurretControlConstantData(p_class) 
 	local className = "TurretControlConstantData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fastLookSpeed", s_Instance.fastLookSpeed, "float")
	Something(className, s_guid, "normalLookSpeed", s_Instance.normalLookSpeed, "float")
	Something(className, s_guid, "searchLookSpeed", s_Instance.searchLookSpeed, "float")
	Something(className, s_guid, "slowLookSpeed", s_Instance.slowLookSpeed, "float")
end

function Type:TurretData (p_class, p_guid)
	local s_Instance = TurretData(p_class) 
 	local className = "TurretData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingConstraints", s_Instance.aimingConstraints, "CtrRef")
	Something(className, s_guid, "fakeShootSpaceMaxDistance", s_Instance.fakeShootSpaceMaxDistance, "float")
	Something(className, s_guid, "fakeShootSpaceMinDistance", s_Instance.fakeShootSpaceMinDistance, "float")
	Something(className, s_guid, "pitchP", s_Instance.pitchP, "float")
	Something(className, s_guid, "yawP", s_Instance.yawP, "float")
end

function Type:TurretRotationInfo (p_class, p_guid)
	local s_Instance = TurretRotationInfo(p_class) 
 	local className = "TurretRotationInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "channel", s_Instance.channel, "RotationChannel")
	Something(className, s_guid, "invertRotation", s_Instance.invertRotation, "bool")
	Something(className, s_guid, "maxRotation", s_Instance.maxRotation, "float")
	Something(className, s_guid, "minRotation", s_Instance.minRotation, "float")
	Something(className, s_guid, "normalizeRotation", s_Instance.normalizeRotation, "bool")
	Something(className, s_guid, "phaseOffset", s_Instance.phaseOffset, "float")
	Something(className, s_guid, "rotationAxis", s_Instance.rotationAxis, "fb.RotationAxis)")
end

function Type:UavCameraData (p_class, p_guid)
	local s_Instance = UavCameraData(p_class) 
 	local className = "UavCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "centerPoint", s_Instance.centerPoint, "UavCameraPointData")
	Something(className, s_guid, "focusPoint", s_Instance.focusPoint, "UavCameraPointData")
	Something(className, s_guid, "fov", s_Instance.fov, "float")
	Something(className, s_guid, "rotationSpeed", s_Instance.rotationSpeed, "float")
	Something(className, s_guid, "rotationSpeedCurve", s_Instance.rotationSpeedCurve, "List<CameraSineCurveData)>")
	Something(className, s_guid, "upWeightDistance", s_Instance.upWeightDistance, "float")
	Something(className, s_guid, "viewAngle", s_Instance.viewAngle, "float")
	Something(className, s_guid, "viewAngleCurve", s_Instance.viewAngleCurve, "List<CameraSineCurveData)>")
	Something(className, s_guid, "viewDistance", s_Instance.viewDistance, "float")
	Something(className, s_guid, "viewDistanceCurve", s_Instance.viewDistanceCurve, "List<CameraSineCurveData)>")
	Something(className, s_guid, "zoomDelay", s_Instance.zoomDelay, "float")
	Something(className, s_guid, "zoomFov", s_Instance.zoomFov, "float")
	Something(className, s_guid, "zoomTransitionTime", s_Instance.zoomTransitionTime, "float")
end

function Type:UavCameraPointData (p_class, p_guid)
	local s_Instance = UavCameraPointData(p_class) 
 	local className = "UavCameraPointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "accelerationTime", s_Instance.accelerationTime, "float")
	Something(className, s_guid, "maxTime", s_Instance.maxTime, "float")
	Something(className, s_guid, "minTime", s_Instance.minTime, "float")
	Something(className, s_guid, "speed", s_Instance.speed, "float")
end

function Type:UI3dIconCompData (p_class, p_guid)
	local s_Instance = UI3dIconCompData(p_class) 
 	local className = "UI3dIconCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "circularSnap", s_Instance.circularSnap, "bool")
	Something(className, s_guid, "drawDistance", s_Instance.drawDistance, "float")
	Something(className, s_guid, "fadeDistance", s_Instance.fadeDistance, "float")
	Something(className, s_guid, "fadeEndDistance", s_Instance.fadeEndDistance, "float")
	Something(className, s_guid, "horisontalOffset", s_Instance.horisontalOffset, "float")
	Something(className, s_guid, "iconSize", s_Instance.iconSize, "float")
	Something(className, s_guid, "maxCloseFade", s_Instance.maxCloseFade, "float")
	Something(className, s_guid, "maxFarFade", s_Instance.maxFarFade, "float")
	Something(className, s_guid, "maxLookAtThreshold", s_Instance.maxLookAtThreshold, "float")
	Something(className, s_guid, "maxScaleMod", s_Instance.maxScaleMod, "float")
	Something(className, s_guid, "maxTagUpdatesPerFrame", s_Instance.maxTagUpdatesPerFrame, "int")
	Something(className, s_guid, "maxXRotation", s_Instance.maxXRotation, "float")
	Something(className, s_guid, "maxYRotation", s_Instance.maxYRotation, "float")
	Something(className, s_guid, "minimumDrawDistance", s_Instance.minimumDrawDistance, "float")
	Something(className, s_guid, "minimumFadeDistance", s_Instance.minimumFadeDistance, "float")
	Something(className, s_guid, "minLookAtThreshold", s_Instance.minLookAtThreshold, "float")
	Something(className, s_guid, "minLookAtThresholdDistance", s_Instance.minLookAtThresholdDistance, "float")
	Something(className, s_guid, "onlyShowSnapped", s_Instance.onlyShowSnapped, "bool")
	Something(className, s_guid, "pixelOffset", s_Instance.pixelOffset, "Vec2")
	Something(className, s_guid, "scaleDistance", s_Instance.scaleDistance, "float")
	Something(className, s_guid, "showEngineerArmorThreshold", s_Instance.showEngineerArmorThreshold, "float")
	Something(className, s_guid, "showLabelRange", s_Instance.showLabelRange, "float")
	Something(className, s_guid, "showMedicHealthThreshold", s_Instance.showMedicHealthThreshold, "float")
	Something(className, s_guid, "showSupportAmmoThreshold", s_Instance.showSupportAmmoThreshold, "float")
	Something(className, s_guid, "shrinkSnapAnimationTime", s_Instance.shrinkSnapAnimationTime, "float")
	Something(className, s_guid, "snapCenterYOffset", s_Instance.snapCenterYOffset, "float")
	Something(className, s_guid, "snapIcons", s_Instance.snapIcons, "bool")
	Something(className, s_guid, "snapSafeZone", s_Instance.snapSafeZone, "float")
	Something(className, s_guid, "teamRadioDistance", s_Instance.teamRadioDistance, "float")
	Something(className, s_guid, "trackerHudRadiusX", s_Instance.trackerHudRadiusX, "float")
	Something(className, s_guid, "trackerHudRadiusY", s_Instance.trackerHudRadiusY, "float")
	Something(className, s_guid, "verticalOffset", s_Instance.verticalOffset, "float")
	Something(className, s_guid, "verticalOffsetMaxOffset", s_Instance.verticalOffsetMaxOffset, "float")
	Something(className, s_guid, "verticalOffsetScaleFactor", s_Instance.verticalOffsetScaleFactor, "float")
end

function Type:UIActionData (p_class, p_guid)
	local s_Instance = UIActionData(p_class) 
 	local className = "UIActionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionKeys", s_Instance.actionKeys, "List<string)>")
end

function Type:UIAnimatedTextureAsset (p_class, p_guid)
	local s_Instance = UIAnimatedTextureAsset(p_class) 
 	local className = "UIAnimatedTextureAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frameRate", s_Instance.frameRate, "float")
	Something(className, s_guid, "textureAtlas", s_Instance.textureAtlas, "CtrRef")
	Something(className, s_guid, "textureInfos", s_Instance.textureInfos, "List<UITextureAtlasInfo)>")
end

function Type:UIAudioEventAsset (p_class, p_guid)
	local s_Instance = UIAudioEventAsset(p_class) 
 	local className = "UIAudioEventAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "audioEventMappings", s_Instance.audioEventMappings, "List<UIAudioEventMapping)>")
end

function Type:UIAudioEventMapping (p_class, p_guid)
	local s_Instance = UIAudioEventMapping(p_class) 
 	local className = "UIAudioEventMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventName", s_Instance.eventName, "string")
	Something(className, s_guid, "soundAsset", s_Instance.soundAsset, "CtrRef")
end

function Type:UIAwardDescription (p_class, p_guid)
	local s_Instance = UIAwardDescription(p_class) 
 	local className = "UIAwardDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ignoreBuild", s_Instance.ignoreBuild, "bool")
end

function Type:UIAwardsScreenCompData (p_class, p_guid)
	local s_Instance = UIAwardsScreenCompData(p_class) 
 	local className = "UIAwardsScreenCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "trackableAwardCol", s_Instance.trackableAwardCol, "List<CtrRef)>")
	Something(className, s_guid, "trackableAwardRow", s_Instance.trackableAwardRow, "List<CtrRef)>")
end

function Type:UIBarDataBinding (p_class, p_guid)
	local s_Instance = UIBarDataBinding(p_class) 
 	local className = "UIBarDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "UIDataSourceInfo")
	Something(className, s_guid, "refresh", s_Instance.refresh, "bool")
	Something(className, s_guid, "value", s_Instance.value, "UIDataSourceInfo")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
end

function Type:UIBundleAssetState (p_class, p_guid)
	local s_Instance = UIBundleAssetState(p_class) 
 	local className = "UIBundleAssetState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "resourceBundleName", s_Instance.resourceBundleName, "string")
	Something(className, s_guid, "stateName", s_Instance.stateName, "string")
	Something(className, s_guid, "uIState", s_Instance.uIState, "fb.UIState)")
end

function Type:UIBundlesAsset (p_class, p_guid)
	local s_Instance = UIBundlesAsset(p_class) 
 	local className = "UIBundlesAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "uIBundleAssetStateList", s_Instance.uIBundleAssetStateList, "List<UIBundleAssetState)>")
end

function Type:UIButton (p_class, p_guid)
	local s_Instance = UIButton(p_class) 
 	local className = "UIButton"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buttonId", s_Instance.buttonId, "string")
	Something(className, s_guid, "buttonLabel", s_Instance.buttonLabel, "string")
	Something(className, s_guid, "isPremium", s_Instance.isPremium, "bool")
end

function Type:UIButtonDataBinding (p_class, p_guid)
	local s_Instance = UIButtonDataBinding(p_class) 
 	local className = "UIButtonDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buttonsDatasource", s_Instance.buttonsDatasource, "UIDataSourceInfo")
	Something(className, s_guid, "defaultButtonSet", s_Instance.defaultButtonSet, "UIButtonSet")
	Something(className, s_guid, "inputOnRelease", s_Instance.inputOnRelease, "bool")
	Something(className, s_guid, "invertVisible", s_Instance.invertVisible, "bool")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:UIButtonSet (p_class, p_guid)
	local s_Instance = UIButtonSet(p_class) 
 	local className = "UIButtonSet"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buttons", s_Instance.buttons, "List<UIButton)>")
end

function Type:UIChatCompData (p_class, p_guid)
	local s_Instance = UIChatCompData(p_class) 
 	local className = "UIChatCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
end

function Type:UIColor (p_class, p_guid)
	local s_Instance = UIColor(p_class) 
 	local className = "UIColor"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "Vec4")
	Something(className, s_guid, "colorType", s_Instance.colorType, "UIColorType")
end

function Type:UIColorTemplate (p_class, p_guid)
	local s_Instance = UIColorTemplate(p_class) 
 	local className = "UIColorTemplate"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "active", s_Instance.active, "bool")
	Something(className, s_guid, "colors", s_Instance.colors, "List<CtrRef)>")
end

function Type:UICombatAreaAsset (p_class, p_guid)
	local s_Instance = UICombatAreaAsset(p_class) 
 	local className = "UICombatAreaAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "prefix", s_Instance.prefix, "string")
end

function Type:UICombatAreaCompData (p_class, p_guid)
	local s_Instance = UICombatAreaCompData(p_class) 
 	local className = "UICombatAreaCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "outOfAreaSidPrefix", s_Instance.outOfAreaSidPrefix, "string")
end

function Type:UICombatAreaEntityData (p_class, p_guid)
	local s_Instance = UICombatAreaEntityData(p_class) 
 	local className = "UICombatAreaEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
end

function Type:UICompassDataBinding (p_class, p_guid)
	local s_Instance = UICompassDataBinding(p_class) 
 	local className = "UICompassDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heading", s_Instance.heading, "UIDataSourceInfo")
	Something(className, s_guid, "objectives", s_Instance.objectives, "UIDataSourceInfo")
	Something(className, s_guid, "radarSweepDegree", s_Instance.radarSweepDegree, "UIDataSourceInfo")
	Something(className, s_guid, "showAirRadar", s_Instance.showAirRadar, "UIDataSourceInfo")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
end

function Type:UIComponentData (p_class, p_guid)
	local s_Instance = UIComponentData(p_class) 
 	local className = "UIComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataSources", s_Instance.dataSources, "List<string)>")
	Something(className, s_guid, "shortName", s_Instance.shortName, "string")
	Something(className, s_guid, "updatesPerSecond", s_Instance.updatesPerSecond, "int")
	Something(className, s_guid, "updateType", s_Instance.updateType, "UIUpdateType")
end

function Type:UICoopLevelDescription (p_class, p_guid)
	local s_Instance = UICoopLevelDescription(p_class) 
 	local className = "UICoopLevelDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "debriefing", s_Instance.debriefing, "string")
	Something(className, s_guid, "devTime", s_Instance.devTime, "int")
	Something(className, s_guid, "unlockedByLevels", s_Instance.unlockedByLevels, "List<string)>")
end

function Type:UICreditsAsset (p_class, p_guid)
	local s_Instance = UICreditsAsset(p_class) 
 	local className = "UICreditsAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pages", s_Instance.pages, "List<UICreditsPage)>")
end

function Type:UICreditsLine (p_class, p_guid)
	local s_Instance = UICreditsLine(p_class) 
 	local className = "UICreditsLine"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "text", s_Instance.text, "string")
	Something(className, s_guid, "textType", s_Instance.textType, "UICreditsTextType")
end

function Type:UICreditsPage (p_class, p_guid)
	local s_Instance = UICreditsPage(p_class) 
 	local className = "UICreditsPage"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "header1", s_Instance.header1, "string")
	Something(className, s_guid, "header2", s_Instance.header2, "string")
	Something(className, s_guid, "lines", s_Instance.lines, "List<UICreditsLine)>")
end

function Type:UICrosshairDataBinding (p_class, p_guid)
	local s_Instance = UICrosshairDataBinding(p_class) 
 	local className = "UICrosshairDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dispersion", s_Instance.dispersion, "UIDataSourceInfo")
	Something(className, s_guid, "dispersionBaseOffset", s_Instance.dispersionBaseOffset, "float")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
	Something(className, s_guid, "zoomed", s_Instance.zoomed, "UIDataSourceInfo")
end

function Type:UICustomizationCompData (p_class, p_guid)
	local s_Instance = UICustomizationCompData(p_class) 
 	local className = "UICustomizationCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "networkThrottleTimer", s_Instance.networkThrottleTimer, "float")
	Something(className, s_guid, "soldierOffset", s_Instance.soldierOffset, "Vec3")
	Something(className, s_guid, "soldierRotation", s_Instance.soldierRotation, "Vec3")
	Something(className, s_guid, "vehicleRotation", s_Instance.vehicleRotation, "Vec3")
end

function Type:UIDamageIndicatorCompData (p_class, p_guid)
	local s_Instance = UIDamageIndicatorCompData(p_class) 
 	local className = "UIDamageIndicatorCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxUpdateTime", s_Instance.maxUpdateTime, "float")
end

function Type:UIDataSourceInfo (p_class, p_guid)
	local s_Instance = UIDataSourceInfo(p_class) 
 	local className = "UIDataSourceInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataCategory", s_Instance.dataCategory, "CtrRef")
	Something(className, s_guid, "dataKey", s_Instance.dataKey, "int")
	Something(className, s_guid, "dataName", s_Instance.dataName, "string")
	Something(className, s_guid, "updateOnInitialize", s_Instance.updateOnInitialize, "bool")
	Something(className, s_guid, "useDirectAccess", s_Instance.useDirectAccess, "bool")
end

function Type:UIDetailedServerInfoCompData (p_class, p_guid)
	local s_Instance = UIDetailedServerInfoCompData(p_class) 
 	local className = "UIDetailedServerInfoCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "List<ServerInfoSetting)>")
end

function Type:UIDistanceFieldAsset (p_class, p_guid)
	local s_Instance = UIDistanceFieldAsset(p_class) 
 	local className = "UIDistanceFieldAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceFieldTexture", s_Instance.distanceFieldTexture, "CtrRef")
end

function Type:UIDogTagDescription (p_class, p_guid)
	local s_Instance = UIDogTagDescription(p_class) 
 	local className = "UIDogTagDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ignoreBuild", s_Instance.ignoreBuild, "bool")
end

function Type:UIDynamicDataBinding (p_class, p_guid)
	local s_Instance = UIDynamicDataBinding(p_class) 
 	local className = "UIDynamicDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bindings", s_Instance.bindings, "List<UIDataSourceInfo)>")
	Something(className, s_guid, "refresh", s_Instance.refresh, "bool")
end

function Type:UIEndOfRoundEntityData (p_class, p_guid)
	local s_Instance = UIEndOfRoundEntityData(p_class) 
 	local className = "UIEndOfRoundEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eorTime", s_Instance.eorTime, "float")
	Something(className, s_guid, "preEorTime", s_Instance.preEorTime, "float")
end

function Type:UIEventAsset (p_class, p_guid)
	local s_Instance = UIEventAsset(p_class) 
 	local className = "UIEventAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "eventList", s_Instance.eventList, "List<string)>")
end

function Type:UIFontAsset (p_class, p_guid)
	local s_Instance = UIFontAsset(p_class) 
 	local className = "UIFontAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "completeJapanese", s_Instance.completeJapanese, "bool")
	Something(className, s_guid, "completeKorean", s_Instance.completeKorean, "bool")
	Something(className, s_guid, "completeTraditionalChinese", s_Instance.completeTraditionalChinese, "bool")
	Something(className, s_guid, "numericsOnly", s_Instance.numericsOnly, "bool")
	Something(className, s_guid, "scaleformFontName", s_Instance.scaleformFontName, "List<string)>")
	Something(className, s_guid, "sourceFile", s_Instance.sourceFile, "string")
	Something(className, s_guid, "textDatabase", s_Instance.textDatabase, "CtrRef")
end

function Type:UIFontCollection (p_class, p_guid)
	local s_Instance = UIFontCollection(p_class) 
 	local className = "UIFontCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bundleKind", s_Instance.bundleKind, "ResourceBundleKind")
	Something(className, s_guid, "fonts", s_Instance.fonts, "List<CtrRef)>")
	Something(className, s_guid, "language", s_Instance.language, "LanguageFormat")
	Something(className, s_guid, "textDatabase", s_Instance.textDatabase, "CtrRef")
end

function Type:UIFontMapping (p_class, p_guid)
	local s_Instance = UIFontMapping(p_class) 
 	local className = "UIFontMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fontLongName", s_Instance.fontLongName, "string")
	Something(className, s_guid, "scaleformFontName", s_Instance.scaleformFontName, "List<string)>")
end

function Type:UIFontMappingCollection (p_class, p_guid)
	local s_Instance = UIFontMappingCollection(p_class) 
 	local className = "UIFontMappingCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fonts", s_Instance.fonts, "List<UIFontMapping)>")
	Something(className, s_guid, "textDatabase", s_Instance.textDatabase, "List<CtrRef)>")
end

function Type:UIGameModeDescription (p_class, p_guid)
	local s_Instance = UIGameModeDescription(p_class) 
 	local className = "UIGameModeDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "abbreviation", s_Instance.abbreviation, "string")
	Something(className, s_guid, "battlelogId", s_Instance.battlelogId, "int")
	Something(className, s_guid, "desc", s_Instance.desc, "string")
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "variations", s_Instance.variations, "List<GameModeVariation)>")
end

function Type:UIGenericItemDescription (p_class, p_guid)
	local s_Instance = UIGenericItemDescription(p_class) 
 	local className = "UIGenericItemDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "imagePath", s_Instance.imagePath, "string")
end

function Type:UIGeoLatitude (p_class, p_guid)
	local s_Instance = UIGeoLatitude(p_class) 
 	local className = "UIGeoLatitude"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "degrees", s_Instance.degrees, "int")
	Something(className, s_guid, "minuites", s_Instance.minuites, "int")
	Something(className, s_guid, "seconds", s_Instance.seconds, "int")
end

function Type:UIGeoLongitude (p_class, p_guid)
	local s_Instance = UIGeoLongitude(p_class) 
 	local className = "UIGeoLongitude"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "degrees", s_Instance.degrees, "int")
	Something(className, s_guid, "minuites", s_Instance.minuites, "int")
	Something(className, s_guid, "seconds", s_Instance.seconds, "int")
end

function Type:UIGPSPosition (p_class, p_guid)
	local s_Instance = UIGPSPosition(p_class) 
 	local className = "UIGPSPosition"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "latitude", s_Instance.latitude, "double")
	Something(className, s_guid, "longitude", s_Instance.longitude, "double")
	Something(className, s_guid, "seaLevelOffset", s_Instance.seaLevelOffset, "double")
end

function Type:UIGraphAsset (p_class, p_guid)
	local s_Instance = UIGraphAsset(p_class) 
 	local className = "UIGraphAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "audioEventMappings", s_Instance.audioEventMappings, "CtrRef")
	Something(className, s_guid, "bundleAssetName", s_Instance.bundleAssetName, "string")
	Something(className, s_guid, "connections", s_Instance.connections, "List<CtrRef)>")
	Something(className, s_guid, "eventList", s_Instance.eventList, "List<CtrRef)>")
	Something(className, s_guid, "globalNode", s_Instance.globalNode, "CtrRef")
	Something(className, s_guid, "isPs3UIGraphAsset", s_Instance.isPs3UIGraphAsset, "bool")
	Something(className, s_guid, "isWin32UIGraphAsset", s_Instance.isWin32UIGraphAsset, "bool")
	Something(className, s_guid, "isXenonUIGraphAsset", s_Instance.isXenonUIGraphAsset, "bool")
	Something(className, s_guid, "modal", s_Instance.modal, "bool")
	Something(className, s_guid, "nodes", s_Instance.nodes, "List<CtrRef)>")
	Something(className, s_guid, "protectScreens", s_Instance.protectScreens, "bool")
end

function Type:UIGraphEntityData (p_class, p_guid)
	local s_Instance = UIGraphEntityData(p_class) 
 	local className = "UIGraphEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "List<EventSpec)>")
	Something(className, s_guid, "graphAsset", s_Instance.graphAsset, "CtrRef")
	Something(className, s_guid, "graphPriority", s_Instance.graphPriority, "UIGraphPriority")
	Something(className, s_guid, "popPreviousGraph", s_Instance.popPreviousGraph, "bool")
	Something(className, s_guid, "state", s_Instance.state, "UIState")
end

function Type:UIGraphPipelineSettings (p_class, p_guid)
	local s_Instance = UIGraphPipelineSettings(p_class) 
 	local className = "UIGraphPipelineSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "oneBundlePerGraph", s_Instance.oneBundlePerGraph, "bool")
end

function Type:UIHUDMessageBinding (p_class, p_guid)
	local s_Instance = UIHUDMessageBinding(p_class) 
 	local className = "UIHUDMessageBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "messageQuery", s_Instance.messageQuery, "UIDataSourceInfo")
	Something(className, s_guid, "numberOfRows", s_Instance.numberOfRows, "int")
	Something(className, s_guid, "visibilityQuery", s_Instance.visibilityQuery, "UIDataSourceInfo")
end

function Type:UIImageDataBinding (p_class, p_guid)
	local s_Instance = UIImageDataBinding(p_class) 
 	local className = "UIImageDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "imageData", s_Instance.imageData, "UIDataSourceInfo")
	Something(className, s_guid, "staticImageUrl", s_Instance.staticImageUrl, "string")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:UIInputEventNodePort (p_class, p_guid)
	local s_Instance = UIInputEventNodePort(p_class) 
 	local className = "UIInputEventNodePort"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputEventType", s_Instance.inputEventType, "UIInputAction")
end

function Type:UIInteractionCompData (p_class, p_guid)
	local s_Instance = UIInteractionCompData(p_class) 
 	local className = "UIInteractionCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pickupShrinkSnap", s_Instance.pickupShrinkSnap, "bool")
	Something(className, s_guid, "repairSnapCircle", s_Instance.repairSnapCircle, "bool")
	Something(className, s_guid, "repairSnapDistance", s_Instance.repairSnapDistance, "float")
end

function Type:UIInterruptFlow (p_class, p_guid)
	local s_Instance = UIInterruptFlow(p_class) 
 	local className = "UIInterruptFlow"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "interruptFlow", s_Instance.interruptFlow, "List<InterruptFlow)>")
end

function Type:UIItemDescription (p_class, p_guid)
	local s_Instance = UIItemDescription(p_class) 
 	local className = "UIItemDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ignoreBuild", s_Instance.ignoreBuild, "bool")
	Something(className, s_guid, "itemIds", s_Instance.itemIds, "List<uint)>")
end

function Type:UIItemDescriptionAsset (p_class, p_guid)
	local s_Instance = UIItemDescriptionAsset(p_class) 
 	local className = "UIItemDescriptionAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "children", s_Instance.children, "List<CtrRef)>")
	Something(className, s_guid, "items", s_Instance.items, "List<CtrRef)>")
end

function Type:UIKitItemDescription (p_class, p_guid)
	local s_Instance = UIKitItemDescription(p_class) 
 	local className = "UIKitItemDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "hiddenInProgression", s_Instance.hiddenInProgression, "bool")
	Something(className, s_guid, "hudIcon", s_Instance.hudIcon, "UIHudIcon")
	Something(className, s_guid, "iconTexturePath", s_Instance.iconTexturePath, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "notExplicitelySelectable", s_Instance.notExplicitelySelectable, "bool")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "unlockName", s_Instance.unlockName, "string")
	Something(className, s_guid, "unlockTexturePath", s_Instance.unlockTexturePath, "string")
end

function Type:UILeaderboardData (p_class, p_guid)
	local s_Instance = UILeaderboardData(p_class) 
 	local className = "UILeaderboardData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:UILevelDescription (p_class, p_guid)
	local s_Instance = UILevelDescription(p_class) 
 	local className = "UILevelDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "levelName", s_Instance.levelName, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "thumbnailTexturePath", s_Instance.thumbnailTexturePath, "string")
end

function Type:UILevelDescriptionComponent (p_class, p_guid)
	local s_Instance = UILevelDescriptionComponent(p_class) 
 	local className = "UILevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "creditsAssets", s_Instance.creditsAssets, "List<CtrRef)>")
	Something(className, s_guid, "gPSPosition", s_Instance.gPSPosition, "UIGPSPosition")
	Something(className, s_guid, "hintAsset", s_Instance.hintAsset, "CtrRef")
	Something(className, s_guid, "isMenuLevel", s_Instance.isMenuLevel, "bool")
	Something(className, s_guid, "levelCompledStatData", s_Instance.levelCompledStatData, "UILevelStatData")
	Something(className, s_guid, "levelImagePath", s_Instance.levelImagePath, "string")
	Something(className, s_guid, "levelScoreStatData", s_Instance.levelScoreStatData, "UILevelStatData")
	Something(className, s_guid, "loadingImagePath", s_Instance.loadingImagePath, "string")
	Something(className, s_guid, "loadingMusic", s_Instance.loadingMusic, "CtrRef")
	Something(className, s_guid, "loadingMusicPath", s_Instance.loadingMusicPath, "string")
	Something(className, s_guid, "minimapData", s_Instance.minimapData, "UIMinimapData")
	Something(className, s_guid, "mPLoadingAssetPath", s_Instance.mPLoadingAssetPath, "string")
	Something(className, s_guid, "sortIndex", s_Instance.sortIndex, "int")
	Something(className, s_guid, "sPLoadingAssetPath", s_Instance.sPLoadingAssetPath, "string")
end

function Type:UILevelLocationDescription (p_class, p_guid)
	local s_Instance = UILevelLocationDescription(p_class) 
 	local className = "UILevelLocationDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
end

function Type:UILevelSpecificPageHeader (p_class, p_guid)
	local s_Instance = UILevelSpecificPageHeader(p_class) 
 	local className = "UILevelSpecificPageHeader"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "header", s_Instance.header, "string")
	Something(className, s_guid, "levelNameSID", s_Instance.levelNameSID, "string")
	Something(className, s_guid, "subHeader", s_Instance.subHeader, "string")
end

function Type:UILevelStatData (p_class, p_guid)
	local s_Instance = UILevelStatData(p_class) 
 	local className = "UILevelStatData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "statEasy", s_Instance.statEasy, "string")
	Something(className, s_guid, "statHard", s_Instance.statHard, "string")
	Something(className, s_guid, "statHardcore", s_Instance.statHardcore, "string")
	Something(className, s_guid, "statMedium", s_Instance.statMedium, "string")
end

function Type:UILicenseDescription (p_class, p_guid)
	local s_Instance = UILicenseDescription(p_class) 
 	local className = "UILicenseDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "licenseId", s_Instance.licenseId, "string")
	Something(className, s_guid, "popupText", s_Instance.popupText, "string")
end

function Type:UIListDataBinding (p_class, p_guid)
	local s_Instance = UIListDataBinding(p_class) 
 	local className = "UIListDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clearListAtNavigationEvent", s_Instance.clearListAtNavigationEvent, "bool")
	Something(className, s_guid, "dataIncludesButtonLayout", s_Instance.dataIncludesButtonLayout, "bool")
	Something(className, s_guid, "defaultHighlightedRow", s_Instance.defaultHighlightedRow, "DefaultSelectionItem")
	Something(className, s_guid, "disabledRows", s_Instance.disabledRows, "string")
	Something(className, s_guid, "emptyRowType", s_Instance.emptyRowType, "UIListEmptyRowType")
	Something(className, s_guid, "fireHighlightOnMouseOut", s_Instance.fireHighlightOnMouseOut, "bool")
	Something(className, s_guid, "highLightOnUpdate", s_Instance.highLightOnUpdate, "bool")
	Something(className, s_guid, "keepScrollOffset", s_Instance.keepScrollOffset, "bool")
	Something(className, s_guid, "listIndex", s_Instance.listIndex, "int")
	Something(className, s_guid, "listQuery", s_Instance.listQuery, "UIDataSourceInfo")
	Something(className, s_guid, "navigationType", s_Instance.navigationType, "UIListNavigationType")
	Something(className, s_guid, "navigationTypeSource", s_Instance.navigationTypeSource, "UIDataSourceInfo")
	Something(className, s_guid, "rowSpacing", s_Instance.rowSpacing, "int")
	Something(className, s_guid, "rowType", s_Instance.rowType, "UIListRowType")
	Something(className, s_guid, "screenRotationEnabled", s_Instance.screenRotationEnabled, "bool")
	Something(className, s_guid, "sendIndexWithEvent", s_Instance.sendIndexWithEvent, "bool")
	Something(className, s_guid, "spinnerEnabled", s_Instance.spinnerEnabled, "bool")
	Something(className, s_guid, "staticItems", s_Instance.staticItems, "List<StaticListItem)>")
	Something(className, s_guid, "unFocusMode", s_Instance.unFocusMode, "UIListUnFocusMode")
	Something(className, s_guid, "use3DSelection", s_Instance.use3DSelection, "bool")
	Something(className, s_guid, "useScrollBar", s_Instance.useScrollBar, "bool")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:UIListItem (p_class, p_guid)
	local s_Instance = UIListItem(p_class) 
 	local className = "UIListItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dataUpdate", s_Instance.dataUpdate, "UIDataSourceInfo")
	Something(className, s_guid, "defaultIsEnabled", s_Instance.defaultIsEnabled, "bool")
	Something(className, s_guid, "defaultIsVisible", s_Instance.defaultIsVisible, "bool")
	Something(className, s_guid, "isEnabled", s_Instance.isEnabled, "UIDataSourceInfo")
	Something(className, s_guid, "isVisible", s_Instance.isVisible, "UIDataSourceInfo")
	Something(className, s_guid, "label", s_Instance.label, "string")
	Something(className, s_guid, "toggleItems", s_Instance.toggleItems, "UIDataSourceInfo")
end

function Type:UIManDownCompData (p_class, p_guid)
	local s_Instance = UIManDownCompData(p_class) 
 	local className = "UIManDownCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delayManDownTextTime", s_Instance.delayManDownTextTime, "float")
end

function Type:UIMapmarkerCompData (p_class, p_guid)
	local s_Instance = UIMapmarkerCompData(p_class) 
 	local className = "UIMapmarkerCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "proximityIntervals", s_Instance.proximityIntervals, "List<int)>")
end

function Type:UIMessageCompData (p_class, p_guid)
	local s_Instance = UIMessageCompData(p_class) 
 	local className = "UIMessageCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "chatMessageInfo", s_Instance.chatMessageInfo, "MessageInfo")
	Something(className, s_guid, "forceSubtitlesForTheseLevels", s_Instance.forceSubtitlesForTheseLevels, "List<string)>")
	Something(className, s_guid, "forceSubtitlesOffForTheseLevels", s_Instance.forceSubtitlesOffForTheseLevels, "List<string)>")
	Something(className, s_guid, "gameMessageInfo", s_Instance.gameMessageInfo, "MessageInfo")
	Something(className, s_guid, "gunMasterMessageInfo", s_Instance.gunMasterMessageInfo, "MessageInfo")
	Something(className, s_guid, "killMessageInfo", s_Instance.killMessageInfo, "MessageInfo")
	Something(className, s_guid, "killScoreMessageInfo", s_Instance.killScoreMessageInfo, "MessageInfo")
	Something(className, s_guid, "localKillMessageInfo", s_Instance.localKillMessageInfo, "MessageInfo")
	Something(className, s_guid, "logLinesMessageInfo", s_Instance.logLinesMessageInfo, "MessageInfo")
	Something(className, s_guid, "outOfBoundsMessageInfo", s_Instance.outOfBoundsMessageInfo, "MessageInfo")
	Something(className, s_guid, "rewardMessageInfo", s_Instance.rewardMessageInfo, "MessageInfo")
	Something(className, s_guid, "scoreAggregateTime", s_Instance.scoreAggregateTime, "float")
	Something(className, s_guid, "scoreMajorMessageInfo", s_Instance.scoreMajorMessageInfo, "MessageInfo")
	Something(className, s_guid, "scoreMessageInfo", s_Instance.scoreMessageInfo, "MessageInfo")
	Something(className, s_guid, "scoreMinorMessageInfo", s_Instance.scoreMinorMessageInfo, "MessageInfo")
	Something(className, s_guid, "serverAdminYellMessageInfo", s_Instance.serverAdminYellMessageInfo, "MessageInfo")
	Something(className, s_guid, "staticMessageInfo", s_Instance.staticMessageInfo, "MessageInfo")
	Something(className, s_guid, "subtitleMessageInfo", s_Instance.subtitleMessageInfo, "MessageInfo")
	Something(className, s_guid, "tooltipMessageInfo", s_Instance.tooltipMessageInfo, "MessageInfo")
end

function Type:UIMessageTriggerData (p_class, p_guid)
	local s_Instance = UIMessageTriggerData(p_class) 
 	local className = "UIMessageTriggerData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:UIMinimapConfig (p_class, p_guid)
	local s_Instance = UIMinimapConfig(p_class) 
 	local className = "UIMinimapConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cameraInterpolationTime", s_Instance.cameraInterpolationTime, "float")
	Something(className, s_guid, "cameraPanSensitivity", s_Instance.cameraPanSensitivity, "float")
	Something(className, s_guid, "combatAreaCameraDelay", s_Instance.combatAreaCameraDelay, "float")
	Something(className, s_guid, "combatAreaFadeSpeed", s_Instance.combatAreaFadeSpeed, "float")
	Something(className, s_guid, "disableDefaultState", s_Instance.disableDefaultState, "bool")
	Something(className, s_guid, "maxVelocity", s_Instance.maxVelocity, "float")
	Something(className, s_guid, "minVelocity", s_Instance.minVelocity, "float")
	Something(className, s_guid, "velocityModifier", s_Instance.velocityModifier, "float")
	Something(className, s_guid, "zoomStates", s_Instance.zoomStates, "List<UIMinimapZoomConfig)>")
end

function Type:UIMinimapData (p_class, p_guid)
	local s_Instance = UIMinimapData(p_class) 
 	local className = "UIMinimapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "airRadarFadeTexture", s_Instance.airRadarFadeTexture, "CtrRef")
	Something(className, s_guid, "airRadarRange", s_Instance.airRadarRange, "float")
	Something(className, s_guid, "combatAreaAlphaThreshold", s_Instance.combatAreaAlphaThreshold, "float")
	Something(className, s_guid, "combatAreaColor", s_Instance.combatAreaColor, "Vec4")
	Something(className, s_guid, "combatAreaDistanceScale", s_Instance.combatAreaDistanceScale, "float")
	Something(className, s_guid, "combatAreaFadeSpeed", s_Instance.combatAreaFadeSpeed, "float")
	Something(className, s_guid, "combatAreaMultiplyTexture", s_Instance.combatAreaMultiplyTexture, "CtrRef")
	Something(className, s_guid, "combatAreaMultiplyWrapAmount", s_Instance.combatAreaMultiplyWrapAmount, "Vec2")
	Something(className, s_guid, "combatAreaScale", s_Instance.combatAreaScale, "float")
	Something(className, s_guid, "detail", s_Instance.detail, "UIMinimapDistanceFieldParams")
	Something(className, s_guid, "detailTexture", s_Instance.detailTexture, "CtrRef")
	Something(className, s_guid, "detailTextureTint", s_Instance.detailTextureTint, "Vec4")
	Something(className, s_guid, "fadeTexture", s_Instance.fadeTexture, "CtrRef")
	Something(className, s_guid, "streamingMinimapDelay", s_Instance.streamingMinimapDelay, "float")
	Something(className, s_guid, "streamingMinimapTransitionSpeed", s_Instance.streamingMinimapTransitionSpeed, "float")
	Something(className, s_guid, "useCombatAreaTexture", s_Instance.useCombatAreaTexture, "bool")
	Something(className, s_guid, "useStreamingMinimap", s_Instance.useStreamingMinimap, "bool")
	Something(className, s_guid, "vegetation", s_Instance.vegetation, "UIMinimapDistanceFieldParams")
	Something(className, s_guid, "worldCenter", s_Instance.worldCenter, "Vec2")
	Something(className, s_guid, "worldRange", s_Instance.worldRange, "float")
	Something(className, s_guid, "worldRotation", s_Instance.worldRotation, "float")
	Something(className, s_guid, "worldSize", s_Instance.worldSize, "float")
end

function Type:UIMinimapDistanceFieldParams (p_class, p_guid)
	local s_Instance = UIMinimapDistanceFieldParams(p_class) 
 	local className = "UIMinimapDistanceFieldParams"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alphaThreshold", s_Instance.alphaThreshold, "float")
	Something(className, s_guid, "colorTint", s_Instance.colorTint, "Vec4")
	Something(className, s_guid, "distanceField", s_Instance.distanceField, "CtrRef")
	Something(className, s_guid, "distanceScale", s_Instance.distanceScale, "float")
	Something(className, s_guid, "outlineColor", s_Instance.outlineColor, "Vec4")
	Something(className, s_guid, "outlineInner", s_Instance.outlineInner, "float")
	Something(className, s_guid, "outlineOuter", s_Instance.outlineOuter, "float")
end

function Type:UIMinimapIconTexture (p_class, p_guid)
	local s_Instance = UIMinimapIconTexture(p_class) 
 	local className = "UIMinimapIconTexture"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "iconType", s_Instance.iconType, "UIHudIcon")
	Something(className, s_guid, "states", s_Instance.states, "List<UIMinimapIconTextureState)>")
end

function Type:UIMinimapIconTextureAtlasAsset (p_class, p_guid)
	local s_Instance = UIMinimapIconTextureAtlasAsset(p_class) 
 	local className = "UIMinimapIconTextureAtlasAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "icons", s_Instance.icons, "List<UIMinimapIconTexture)>")
	Something(className, s_guid, "textureAtlas", s_Instance.textureAtlas, "CtrRef")
end

function Type:UIMinimapIconTextureState (p_class, p_guid)
	local s_Instance = UIMinimapIconTextureState(p_class) 
 	local className = "UIMinimapIconTextureState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "frameRate", s_Instance.frameRate, "float")
	Something(className, s_guid, "shouldRotate", s_Instance.shouldRotate, "bool")
	Something(className, s_guid, "state", s_Instance.state, "UIIconState")
	Something(className, s_guid, "textureInfos", s_Instance.textureInfos, "List<UIMinimapIconUv)>")
end

function Type:UIMinimapIconUv (p_class, p_guid)
	local s_Instance = UIMinimapIconUv(p_class) 
 	local className = "UIMinimapIconUv"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxUv", s_Instance.maxUv, "Vec2")
	Something(className, s_guid, "minUv", s_Instance.minUv, "Vec2")
end

function Type:UIMinimapVolumeEntityData (p_class, p_guid)
	local s_Instance = UIMinimapVolumeEntityData(p_class) 
 	local className = "UIMinimapVolumeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
	Something(className, s_guid, "isDefault", s_Instance.isDefault, "bool")
end

function Type:UIMinimapZoomConfig (p_class, p_guid)
	local s_Instance = UIMinimapZoomConfig(p_class) 
 	local className = "UIMinimapZoomConfig"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "MinimapData")
	Something(className, s_guid, "state", s_Instance.state, "UIMinimapZoomState")
end

function Type:UIModDescription (p_class, p_guid)
	local s_Instance = UIModDescription(p_class) 
 	local className = "UIModDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "desc", s_Instance.desc, "string")
	Something(className, s_guid, "fullName", s_Instance.fullName, "string")
	Something(className, s_guid, "identifier", s_Instance.identifier, "string")
	Something(className, s_guid, "shortName", s_Instance.shortName, "string")
end

function Type:UINametag (p_class, p_guid)
	local s_Instance = UINametag(p_class) 
 	local className = "UINametag"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "healthFadeDistance", s_Instance.healthFadeDistance, "float")
	Something(className, s_guid, "healthMaxDistance", s_Instance.healthMaxDistance, "float")
	Something(className, s_guid, "icon", s_Instance.icon, "UIHudIcon")
	Something(className, s_guid, "iconFadeDistance", s_Instance.iconFadeDistance, "float")
	Something(className, s_guid, "iconMaxDistance", s_Instance.iconMaxDistance, "float")
	Something(className, s_guid, "targetInTimer", s_Instance.targetInTimer, "float")
	Something(className, s_guid, "targetOutTimer", s_Instance.targetOutTimer, "float")
	Something(className, s_guid, "textColor", s_Instance.textColor, "Vec3")
	Something(className, s_guid, "textFadeDistance", s_Instance.textFadeDistance, "float")
	Something(className, s_guid, "textMaxDistance", s_Instance.textMaxDistance, "float")
end

function Type:UINametagCompData (p_class, p_guid)
	local s_Instance = UINametagCompData(p_class) 
 	local className = "UINametagCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enemyTint", s_Instance.enemyTint, "Vec4")
	Something(className, s_guid, "friendlyTint", s_Instance.friendlyTint, "Vec4")
	Something(className, s_guid, "healthBarSize", s_Instance.healthBarSize, "float")
	Something(className, s_guid, "nameFontSize", s_Instance.nameFontSize, "float")
	Something(className, s_guid, "nameGlowSize", s_Instance.nameGlowSize, "float")
	Something(className, s_guid, "orderCooldown", s_Instance.orderCooldown, "int")
	Something(className, s_guid, "squadTint", s_Instance.squadTint, "Vec4")
	Something(className, s_guid, "tooltipCooldown", s_Instance.tooltipCooldown, "int")
end

function Type:UINestedListDataBinding (p_class, p_guid)
	local s_Instance = UINestedListDataBinding(p_class) 
 	local className = "UINestedListDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clearListAtNavigationEvent", s_Instance.clearListAtNavigationEvent, "bool")
	Something(className, s_guid, "dataIncludesButtonLayout", s_Instance.dataIncludesButtonLayout, "bool")
	Something(className, s_guid, "defaultHighlightedRow", s_Instance.defaultHighlightedRow, "DefaultSelectionItem")
	Something(className, s_guid, "emptyRowType", s_Instance.emptyRowType, "UIListEmptyRowType")
	Something(className, s_guid, "highLightOnUpdate", s_Instance.highLightOnUpdate, "bool")
	Something(className, s_guid, "invertVisible", s_Instance.invertVisible, "bool")
	Something(className, s_guid, "keepScrollOffset", s_Instance.keepScrollOffset, "bool")
	Something(className, s_guid, "listIndex", s_Instance.listIndex, "int")
	Something(className, s_guid, "navigationType", s_Instance.navigationType, "UIListNavigationType")
	Something(className, s_guid, "nestedLists", s_Instance.nestedLists, "List<NestedList)>")
	Something(className, s_guid, "rowSpacing", s_Instance.rowSpacing, "int")
	Something(className, s_guid, "rowType", s_Instance.rowType, "UIListRowType")
	Something(className, s_guid, "screenRotationEnabled", s_Instance.screenRotationEnabled, "bool")
	Something(className, s_guid, "selectorWidth", s_Instance.selectorWidth, "int")
	Something(className, s_guid, "sendIndexWithEvent", s_Instance.sendIndexWithEvent, "bool")
	Something(className, s_guid, "use3DSelection", s_Instance.use3DSelection, "bool")
	Something(className, s_guid, "useScrollBar", s_Instance.useScrollBar, "bool")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
	Something(className, s_guid, "visible", s_Instance.visible, "bool")
end

function Type:UINetworkTextInfo (p_class, p_guid)
	local s_Instance = UINetworkTextInfo(p_class) 
 	local className = "UINetworkTextInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "displayTime", s_Instance.displayTime, "float")
	Something(className, s_guid, "stringId", s_Instance.stringId, "string")
end

function Type:UINodeConnection (p_class, p_guid)
	local s_Instance = UINodeConnection(p_class) 
 	local className = "UINodeConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "numScreensToPop", s_Instance.numScreensToPop, "int")
	Something(className, s_guid, "sourceNode", s_Instance.sourceNode, "CtrRef")
	Something(className, s_guid, "sourcePort", s_Instance.sourcePort, "CtrRef")
	Something(className, s_guid, "targetNode", s_Instance.targetNode, "CtrRef")
	Something(className, s_guid, "targetPort", s_Instance.targetPort, "CtrRef")
end

function Type:UINodeData (p_class, p_guid)
	local s_Instance = UINodeData(p_class) 
 	local className = "UINodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isRootNode", s_Instance.isRootNode, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "parentGraph", s_Instance.parentGraph, "CtrRef")
	Something(className, s_guid, "parentIsScreen", s_Instance.parentIsScreen, "bool")
end

function Type:UINodePort (p_class, p_guid)
	local s_Instance = UINodePort(p_class) 
 	local className = "UINodePort"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowManualRemove", s_Instance.allowManualRemove, "bool")
	Something(className, s_guid, "instanceName", s_Instance.instanceName, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "query", s_Instance.query, "UIWidgetEventID")
end

function Type:UIntRange (p_class, p_guid)
	local s_Instance = UIntRange(p_class) 
 	local className = "UIntRange"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "max", s_Instance.max, "uint")
	Something(className, s_guid, "min", s_Instance.min, "uint")
end

function Type:UINumberDataBinding (p_class, p_guid)
	local s_Instance = UINumberDataBinding(p_class) 
 	local className = "UINumberDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "numValue", s_Instance.numValue, "int")
	Something(className, s_guid, "refresh", s_Instance.refresh, "bool")
	Something(className, s_guid, "value", s_Instance.value, "UIDataSourceInfo")
end

function Type:UIOnDemandFontComponentData (p_class, p_guid)
	local s_Instance = UIOnDemandFontComponentData(p_class) 
 	local className = "UIOnDemandFontComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fontCollections", s_Instance.fontCollections, "List<CtrRef)>")
end

function Type:UIPageHeaderBinding (p_class, p_guid)
	local s_Instance = UIPageHeaderBinding(p_class) 
 	local className = "UIPageHeaderBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "header", s_Instance.header, "UIDataSourceInfo")
	Something(className, s_guid, "icon", s_Instance.icon, "UIDataSourceInfo")
	Something(className, s_guid, "levelSpecificHeaders", s_Instance.levelSpecificHeaders, "List<UILevelSpecificPageHeader)>")
	Something(className, s_guid, "staticHeader", s_Instance.staticHeader, "string")
	Something(className, s_guid, "staticIcon", s_Instance.staticIcon, "string")
	Something(className, s_guid, "staticSubHeader", s_Instance.staticSubHeader, "string")
	Something(className, s_guid, "subHeader", s_Instance.subHeader, "UIDataSourceInfo")
end

function Type:UIPartProperties (p_class, p_guid)
	local s_Instance = UIPartProperties(p_class) 
 	local className = "UIPartProperties"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "compensateFreelook", s_Instance.compensateFreelook, "bool")
	Something(className, s_guid, "frequency", s_Instance.frequency, "float")
	Something(className, s_guid, "identifier", s_Instance.identifier, "UIPartIdentifier")
	Something(className, s_guid, "range", s_Instance.range, "float")
end

function Type:UIPartPropertyList (p_class, p_guid)
	local s_Instance = UIPartPropertyList(p_class) 
 	local className = "UIPartPropertyList"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hudPropertyList", s_Instance.hudPropertyList, "List<UIPartProperties)>")
end

function Type:UIPopupButton (p_class, p_guid)
	local s_Instance = UIPopupButton(p_class) 
 	local className = "UIPopupButton"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputConcept", s_Instance.inputConcept, "UIInputAction")
	Something(className, s_guid, "label", s_Instance.label, "string")
end

function Type:UIPopupTextInput (p_class, p_guid)
	local s_Instance = UIPopupTextInput(p_class) 
 	local className = "UIPopupTextInput"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "string")
	Something(className, s_guid, "id", s_Instance.id, "string")
	Something(className, s_guid, "isPassword", s_Instance.isPassword, "bool")
	Something(className, s_guid, "label", s_Instance.label, "string")
end

function Type:UIPostProcessComponentData (p_class, p_guid)
	local s_Instance = UIPostProcessComponentData(p_class) 
 	local className = "UIPostProcessComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bShift", s_Instance.bShift, "float")
	Something(className, s_guid, "distort", s_Instance.distort, "float")
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "gShift", s_Instance.gShift, "float")
	Something(className, s_guid, "highlight", s_Instance.highlight, "float")
	Something(className, s_guid, "highlightThreshold", s_Instance.highlightThreshold, "float")
	Something(className, s_guid, "noiseTexture", s_Instance.noiseTexture, "CtrRef")
	Something(className, s_guid, "rShift", s_Instance.rShift, "float")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
	Something(className, s_guid, "tweakMode", s_Instance.tweakMode, "bool")
	Something(className, s_guid, "xPower", s_Instance.xPower, "float")
	Something(className, s_guid, "yPower", s_Instance.yPower, "float")
end

function Type:UIQueuedEventsCompData (p_class, p_guid)
	local s_Instance = UIQueuedEventsCompData(p_class) 
 	local className = "UIQueuedEventsCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "initialQueueDelay", s_Instance.initialQueueDelay, "float")
	Something(className, s_guid, "showUnlocksBecomingAvailable", s_Instance.showUnlocksBecomingAvailable, "bool")
end

function Type:UIRankDescription (p_class, p_guid)
	local s_Instance = UIRankDescription(p_class) 
 	local className = "UIRankDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ignoreBuild", s_Instance.ignoreBuild, "bool")
end

function Type:UIRenderCompData (p_class, p_guid)
	local s_Instance = UIRenderCompData(p_class) 
 	local className = "UIRenderCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alphaAnimationSpeed", s_Instance.alphaAnimationSpeed, "float")
	Something(className, s_guid, "alphaMax", s_Instance.alphaMax, "float")
	Something(className, s_guid, "alphaMin", s_Instance.alphaMin, "float")
	Something(className, s_guid, "alphaOffset", s_Instance.alphaOffset, "float")
	Something(className, s_guid, "backgroundRect0", s_Instance.backgroundRect0, "Vec4")
	Something(className, s_guid, "backgroundRect1", s_Instance.backgroundRect1, "Vec4")
	Something(className, s_guid, "bgTexture1", s_Instance.bgTexture1, "CtrRef")
	Something(className, s_guid, "bgTexture2", s_Instance.bgTexture2, "CtrRef")
end

function Type:UIScoreboardCompData (p_class, p_guid)
	local s_Instance = UIScoreboardCompData(p_class) 
 	local className = "UIScoreboardCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxUpdateInterval", s_Instance.maxUpdateInterval, "float")
end

function Type:UIScreenshotCompData (p_class, p_guid)
	local s_Instance = UIScreenshotCompData(p_class) 
 	local className = "UIScreenshotCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoResizeImage", s_Instance.autoResizeImage, "bool")
	Something(className, s_guid, "resizeImageHeight", s_Instance.resizeImageHeight, "uint")
	Something(className, s_guid, "resizeImageWidth", s_Instance.resizeImageWidth, "uint")
	Something(className, s_guid, "screenshotInfos", s_Instance.screenshotInfos, "List<ScreenshotInfo)>")
end

function Type:UISettings (p_class, p_guid)
	local s_Instance = UISettings(p_class) 
 	local className = "UISettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bundles", s_Instance.bundles, "CtrRef")
	Something(className, s_guid, "dataCop", s_Instance.dataCop, "DataCopSettings")
	Something(className, s_guid, "drawEnable", s_Instance.drawEnable, "bool")
	Something(className, s_guid, "language", s_Instance.language, "LanguageFormat")
	Something(className, s_guid, "oneBundlePerGraph", s_Instance.oneBundlePerGraph, "bool")
	Something(className, s_guid, "profileOptions", s_Instance.profileOptions, "CtrRef")
	Something(className, s_guid, "system", s_Instance.system, "UISystemType")
end

function Type:UISettingsCompData (p_class, p_guid)
	local s_Instance = UISettingsCompData(p_class) 
 	local className = "UISettingsCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settingsPages", s_Instance.settingsPages, "List<UISettingsPage)>")
end

function Type:UISettingsGroup (p_class, p_guid)
	local s_Instance = UISettingsGroup(p_class) 
 	local className = "UISettingsGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "screenColumn", s_Instance.screenColumn, "int")
	Something(className, s_guid, "settingsItems", s_Instance.settingsItems, "List<UISettingsItem)>")
end

function Type:UISettingsItem (p_class, p_guid)
	local s_Instance = UISettingsItem(p_class) 
 	local className = "UISettingsItem"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "setting", s_Instance.setting, "CtrRef")
	Something(className, s_guid, "startEndSymbols", s_Instance.startEndSymbols, "UISettingSymbols")
end

function Type:UISettingsPage (p_class, p_guid)
	local s_Instance = UISettingsPage(p_class) 
 	local className = "UISettingsPage"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "settingsGroups", s_Instance.settingsGroups, "List<UISettingsGroup)>")
end

function Type:UISetupServerWizardCompData (p_class, p_guid)
	local s_Instance = UISetupServerWizardCompData(p_class) 
 	local className = "UISetupServerWizardCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "passwdMinLen", s_Instance.passwdMinLen, "int")
end

function Type:UISetValueData (p_class, p_guid)
	local s_Instance = UISetValueData(p_class) 
 	local className = "UISetValueData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "boolValue", s_Instance.boolValue, "bool")
	Something(className, s_guid, "dataSource", s_Instance.dataSource, "UIDataSourceInfo")
	Something(className, s_guid, "floatValue", s_Instance.floatValue, "float")
	Something(className, s_guid, "intValue", s_Instance.intValue, "int")
	Something(className, s_guid, "stringValue", s_Instance.stringValue, "string")
end

function Type:UISoldierCompData (p_class, p_guid)
	local s_Instance = UISoldierCompData(p_class) 
 	local className = "UISoldierCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "criticalHealthThreshold", s_Instance.criticalHealthThreshold, "float")
	Something(className, s_guid, "eKGLineAlpha", s_Instance.eKGLineAlpha, "float")
	Something(className, s_guid, "eKGLineThickness", s_Instance.eKGLineThickness, "float")
	Something(className, s_guid, "focusAbilityIndex", s_Instance.focusAbilityIndex, "int")
	Something(className, s_guid, "hitShaderDamageMultiplier", s_Instance.hitShaderDamageMultiplier, "float")
	Something(className, s_guid, "hitShaderGradientDurationMultiplier", s_Instance.hitShaderGradientDurationMultiplier, "float")
	Something(className, s_guid, "hitShaderIndicatorDurationMultiplier", s_Instance.hitShaderIndicatorDurationMultiplier, "float")
	Something(className, s_guid, "hitShaderMaxDamage", s_Instance.hitShaderMaxDamage, "float")
	Something(className, s_guid, "hitShaderMinDamage", s_Instance.hitShaderMinDamage, "float")
	Something(className, s_guid, "rangerPTProgramAbilityIndex", s_Instance.rangerPTProgramAbilityIndex, "int")
	Something(className, s_guid, "shockTraumaAbilityIndex", s_Instance.shockTraumaAbilityIndex, "int")
	Something(className, s_guid, "spawnOnSquadLeaders", s_Instance.spawnOnSquadLeaders, "bool")
	Something(className, s_guid, "useSquadSpawn", s_Instance.useSquadSpawn, "bool")
	Something(className, s_guid, "useVehicleTeamSpawn", s_Instance.useVehicleTeamSpawn, "bool")
end

function Type:UISquadCompData (p_class, p_guid)
	local s_Instance = UISquadCompData(p_class) 
 	local className = "UISquadCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hideLocalSquadBoostData", s_Instance.hideLocalSquadBoostData, "bool")
	Something(className, s_guid, "squad1", s_Instance.squad1, "string")
	Something(className, s_guid, "squad10", s_Instance.squad10, "string")
	Something(className, s_guid, "squad11", s_Instance.squad11, "string")
	Something(className, s_guid, "squad12", s_Instance.squad12, "string")
	Something(className, s_guid, "squad13", s_Instance.squad13, "string")
	Something(className, s_guid, "squad14", s_Instance.squad14, "string")
	Something(className, s_guid, "squad15", s_Instance.squad15, "string")
	Something(className, s_guid, "squad16", s_Instance.squad16, "string")
	Something(className, s_guid, "squad17", s_Instance.squad17, "string")
	Something(className, s_guid, "squad18", s_Instance.squad18, "string")
	Something(className, s_guid, "squad19", s_Instance.squad19, "string")
	Something(className, s_guid, "squad2", s_Instance.squad2, "string")
	Something(className, s_guid, "squad20", s_Instance.squad20, "string")
	Something(className, s_guid, "squad21", s_Instance.squad21, "string")
	Something(className, s_guid, "squad22", s_Instance.squad22, "string")
	Something(className, s_guid, "squad23", s_Instance.squad23, "string")
	Something(className, s_guid, "squad24", s_Instance.squad24, "string")
	Something(className, s_guid, "squad25", s_Instance.squad25, "string")
	Something(className, s_guid, "squad26", s_Instance.squad26, "string")
	Something(className, s_guid, "squad27", s_Instance.squad27, "string")
	Something(className, s_guid, "squad28", s_Instance.squad28, "string")
	Something(className, s_guid, "squad29", s_Instance.squad29, "string")
	Something(className, s_guid, "squad3", s_Instance.squad3, "string")
	Something(className, s_guid, "squad30", s_Instance.squad30, "string")
	Something(className, s_guid, "squad31", s_Instance.squad31, "string")
	Something(className, s_guid, "squad32", s_Instance.squad32, "string")
	Something(className, s_guid, "squad4", s_Instance.squad4, "string")
	Something(className, s_guid, "squad5", s_Instance.squad5, "string")
	Something(className, s_guid, "squad6", s_Instance.squad6, "string")
	Something(className, s_guid, "squad7", s_Instance.squad7, "string")
	Something(className, s_guid, "squad8", s_Instance.squad8, "string")
	Something(className, s_guid, "squad9", s_Instance.squad9, "string")
end

function Type:UIStateAsset (p_class, p_guid)
	local s_Instance = UIStateAsset(p_class) 
 	local className = "UIStateAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "actionscriptLibraries", s_Instance.actionscriptLibraries, "List<CtrRef)>")
	Something(className, s_guid, "actionscriptNames", s_Instance.actionscriptNames, "List<string)>")
	Something(className, s_guid, "stateName", s_Instance.stateName, "string")
	Something(className, s_guid, "statePath", s_Instance.statePath, "string")
	Something(className, s_guid, "uIComponents", s_Instance.uIComponents, "List<CtrRef)>")
end

function Type:UITaggedVehicleCrosshair (p_class, p_guid)
	local s_Instance = UITaggedVehicleCrosshair(p_class) 
 	local className = "UITaggedVehicleCrosshair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "maxSize", s_Instance.maxSize, "int")
	Something(className, s_guid, "minDistance", s_Instance.minDistance, "float")
	Something(className, s_guid, "minSize", s_Instance.minSize, "int")
end

function Type:UITextDatabase (p_class, p_guid)
	local s_Instance = UITextDatabase(p_class) 
 	local className = "UITextDatabase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binaryChunk", s_Instance.binaryChunk, "GUID")
	Something(className, s_guid, "binaryChunkSize", s_Instance.binaryChunkSize, "uint")
	Something(className, s_guid, "histogramChunk", s_Instance.histogramChunk, "GUID")
	Something(className, s_guid, "histogramChunkSize", s_Instance.histogramChunkSize, "uint")
	Something(className, s_guid, "language", s_Instance.language, "LanguageFormat")
end

function Type:UITextDataBinding (p_class, p_guid)
	local s_Instance = UITextDataBinding(p_class) 
 	local className = "UITextDataBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "overrideDirectAccess", s_Instance.overrideDirectAccess, "bool")
	Something(className, s_guid, "refresh", s_Instance.refresh, "bool")
	Something(className, s_guid, "staticText", s_Instance.staticText, "string")
	Something(className, s_guid, "textData", s_Instance.textData, "UIDataSourceInfo")
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
end

function Type:UITextureAtlasInfo (p_class, p_guid)
	local s_Instance = UITextureAtlasInfo(p_class) 
 	local className = "UITextureAtlasInfo"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxUv", s_Instance.maxUv, "Vec2")
	Something(className, s_guid, "minUv", s_Instance.minUv, "Vec2")
end

function Type:UITrackingtagCompData (p_class, p_guid)
	local s_Instance = UITrackingtagCompData(p_class) 
 	local className = "UITrackingtagCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "showUnlockedLockAlways", s_Instance.showUnlockedLockAlways, "bool")
	Something(className, s_guid, "showUnlockedLockOnHeat", s_Instance.showUnlockedLockOnHeat, "bool")
	Something(className, s_guid, "showUnlockedLockOnLaserPainted", s_Instance.showUnlockedLockOnLaserPainted, "bool")
	Something(className, s_guid, "showUnlockedLockOnRadar", s_Instance.showUnlockedLockOnRadar, "bool")
end

function Type:UIVehicleCompData (p_class, p_guid)
	local s_Instance = UIVehicleCompData(p_class) 
 	local className = "UIVehicleCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "rangeMeterUpdatesPerSecond", s_Instance.rangeMeterUpdatesPerSecond, "int")
end

function Type:UIVehicleDescription (p_class, p_guid)
	local s_Instance = UIVehicleDescription(p_class) 
 	local className = "UIVehicleDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
end

function Type:UIVehicleUnlockDescription (p_class, p_guid)
	local s_Instance = UIVehicleUnlockDescription(p_class) 
 	local className = "UIVehicleUnlockDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "hiddenInProgression", s_Instance.hiddenInProgression, "bool")
	Something(className, s_guid, "iconTexturePath", s_Instance.iconTexturePath, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "notExplicitelySelectable", s_Instance.notExplicitelySelectable, "bool")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "unlockTexturePath", s_Instance.unlockTexturePath, "string")
end

function Type:UIVehicleWeaponDescription (p_class, p_guid)
	local s_Instance = UIVehicleWeaponDescription(p_class) 
 	local className = "UIVehicleWeaponDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:UIVoiceCompData (p_class, p_guid)
	local s_Instance = UIVoiceCompData(p_class) 
 	local className = "UIVoiceCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "hudMaxSpeakers", s_Instance.hudMaxSpeakers, "uint")
end

function Type:UIWeaponAccessoryDescription (p_class, p_guid)
	local s_Instance = UIWeaponAccessoryDescription(p_class) 
 	local className = "UIWeaponAccessoryDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "coreAccessory", s_Instance.coreAccessory, "bool")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "hiddenInProgression", s_Instance.hiddenInProgression, "bool")
	Something(className, s_guid, "iconTexturePath", s_Instance.iconTexturePath, "string")
	Something(className, s_guid, "miscTexturePath", s_Instance.miscTexturePath, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "unlockTexturePath", s_Instance.unlockTexturePath, "string")
end

function Type:UIWeaponCompData (p_class, p_guid)
	local s_Instance = UIWeaponCompData(p_class) 
 	local className = "UIWeaponCompData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxHitIndicatorLimit", s_Instance.maxHitIndicatorLimit, "float")
	Something(className, s_guid, "minHitIndicatorLimit", s_Instance.minHitIndicatorLimit, "float")
	Something(className, s_guid, "normalHitIndicatorLimit", s_Instance.normalHitIndicatorLimit, "float")
end

function Type:UIWeaponDescription (p_class, p_guid)
	local s_Instance = UIWeaponDescription(p_class) 
 	local className = "UIWeaponDescription"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammo", s_Instance.ammo, "string")
	Something(className, s_guid, "category", s_Instance.category, "string")
	Something(className, s_guid, "description", s_Instance.description, "string")
	Something(className, s_guid, "fireModeAuto", s_Instance.fireModeAuto, "bool")
	Something(className, s_guid, "fireModeBurst", s_Instance.fireModeBurst, "bool")
	Something(className, s_guid, "fireModeSingle", s_Instance.fireModeSingle, "bool")
	Something(className, s_guid, "hiddenInProgression", s_Instance.hiddenInProgression, "bool")
	Something(className, s_guid, "iconTexturePath", s_Instance.iconTexturePath, "string")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "range", s_Instance.range, "string")
	Something(className, s_guid, "rateOfFire", s_Instance.rateOfFire, "string")
	Something(className, s_guid, "texturePath", s_Instance.texturePath, "string")
	Something(className, s_guid, "unlockName", s_Instance.unlockName, "string")
	Something(className, s_guid, "unlockTexturePath", s_Instance.unlockTexturePath, "string")
end

function Type:UIWidgetAsset (p_class, p_guid)
	local s_Instance = UIWidgetAsset(p_class) 
 	local className = "UIWidgetAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "widgetEvents", s_Instance.widgetEvents, "List<WidgetEventQueryPair)>")
end

function Type:UIWidgetPathBinding (p_class, p_guid)
	local s_Instance = UIWidgetPathBinding(p_class) 
 	local className = "UIWidgetPathBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "visibility", s_Instance.visibility, "UIDataSourceInfo")
	Something(className, s_guid, "widgetPathQuery", s_Instance.widgetPathQuery, "UIDataSourceInfo")
end

function Type:UIWidgetProperty (p_class, p_guid)
	local s_Instance = UIWidgetProperty(p_class) 
 	local className = "UIWidgetProperty"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "value", s_Instance.value, "string")
end

function Type:UnderFireTriggerEntityData (p_class, p_guid)
	local s_Instance = UnderFireTriggerEntityData(p_class) 
 	local className = "UnderFireTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "coolDownTime", s_Instance.coolDownTime, "float")
	Something(className, s_guid, "disableIfTrackEntityIsLost", s_Instance.disableIfTrackEntityIsLost, "bool")
	Something(className, s_guid, "indicateHit", s_Instance.indicateHit, "bool")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "randomYaw", s_Instance.randomYaw, "bool")
	Something(className, s_guid, "triggeredBy", s_Instance.triggeredBy, "AreaTriggerInclude")
	Something(className, s_guid, "triggerOnMaterialOnly", s_Instance.triggerOnMaterialOnly, "CtrRef")
end

function Type:UnlockableColorCollection (p_class, p_guid)
	local s_Instance = UnlockableColorCollection(p_class) 
 	local className = "UnlockableColorCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "CtrRef")
	Something(className, s_guid, "possibleValues", s_Instance.possibleValues, "List<CtrRef)>")
end

function Type:UnlockableProjectile (p_class, p_guid)
	local s_Instance = UnlockableProjectile(p_class) 
 	local className = "UnlockableProjectile"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "initialSpeed", s_Instance.initialSpeed, "Vec3")
	Something(className, s_guid, "projectile", s_Instance.projectile, "CtrRef")
	Something(className, s_guid, "projectileData", s_Instance.projectileData, "CtrRef")
	Something(className, s_guid, "unlock", s_Instance.unlock, "CtrRef")
end

function Type:UnlockableShaderParameterValueCollection (p_class, p_guid)
	local s_Instance = UnlockableShaderParameterValueCollection(p_class) 
 	local className = "UnlockableShaderParameterValueCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "shaderParameterName", s_Instance.shaderParameterName, "string")
end

function Type:UnlockableTextureCollection (p_class, p_guid)
	local s_Instance = UnlockableTextureCollection(p_class) 
 	local className = "UnlockableTextureCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "CtrRef")
end

function Type:UnlockableTextureSliceCollection (p_class, p_guid)
	local s_Instance = UnlockableTextureSliceCollection(p_class) 
 	local className = "UnlockableTextureSliceCollection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "int")
	Something(className, s_guid, "possibleValues", s_Instance.possibleValues, "List<CtrRef)>")
end

function Type:UnlockAsset (p_class, p_guid)
	local s_Instance = UnlockAsset(p_class) 
 	local className = "UnlockAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "linkedTo", s_Instance.linkedTo, "List<CtrRef)>")
end

function Type:UnlockAssetBase (p_class, p_guid)
	local s_Instance = UnlockAssetBase(p_class) 
 	local className = "UnlockAssetBase"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoAvailable", s_Instance.autoAvailable, "bool")
	Something(className, s_guid, "availableForPlayer", s_Instance.availableForPlayer, "UnlockAvailability")
	Something(className, s_guid, "debugUnlockId", s_Instance.debugUnlockId, "string")
	Something(className, s_guid, "hiddenInProgression", s_Instance.hiddenInProgression, "bool")
	Something(className, s_guid, "identifier", s_Instance.identifier, "uint")
	Something(className, s_guid, "nextLevelUnlockAsset", s_Instance.nextLevelUnlockAsset, "CtrRef")
	Something(className, s_guid, "unlockScore", s_Instance.unlockScore, "uint")
	Something(className, s_guid, "unlockUserData", s_Instance.unlockUserData, "CtrRef")
end

function Type:UnlockAssetPair (p_class, p_guid)
	local s_Instance = UnlockAssetPair(p_class) 
 	local className = "UnlockAssetPair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "result", s_Instance.result, "CtrRef")
	Something(className, s_guid, "second", s_Instance.second, "CtrRef")
end

function Type:UnlockComponentData (p_class, p_guid)
	local s_Instance = UnlockComponentData(p_class) 
 	local className = "UnlockComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "invertUnlockTest", s_Instance.invertUnlockTest, "bool")
	Something(className, s_guid, "unlockableFromAllEntries", s_Instance.unlockableFromAllEntries, "bool")
	Something(className, s_guid, "unlockAsset", s_Instance.unlockAsset, "CtrRef")
	Something(className, s_guid, "unlockDataKey", s_Instance.unlockDataKey, "uint")
end

function Type:UnlockValuePair (p_class, p_guid)
	local s_Instance = UnlockValuePair(p_class) 
 	local className = "UnlockValuePair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "id", s_Instance.id, "string")
end

function Type:UnlockWeaponAndSlot (p_class, p_guid)
	local s_Instance = UnlockWeaponAndSlot(p_class) 
 	local className = "UnlockWeaponAndSlot"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "slot", s_Instance.slot, "WeaponSlot")
	Something(className, s_guid, "unlockAssets", s_Instance.unlockAssets, "List<CtrRef)>")
	Something(className, s_guid, "weapon", s_Instance.weapon, "CtrRef")
end

function Type:UpdateAgeData (p_class, p_guid)
	local s_Instance = UpdateAgeData(p_class) 
 	local className = "UpdateAgeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lifetime", s_Instance.lifetime, "float")
end

function Type:UpdateAlphaLevelMaxData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelMaxData(p_class) 
 	local className = "UpdateAlphaLevelMaxData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxLevel", s_Instance.maxLevel, "float")
end

function Type:UpdateAlphaLevelMinData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelMinData(p_class) 
 	local className = "UpdateAlphaLevelMinData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "minLevel", s_Instance.minLevel, "float")
end

function Type:UpdateAlphaLevelScaleData (p_class, p_guid)
	local s_Instance = UpdateAlphaLevelScaleData(p_class) 
 	local className = "UpdateAlphaLevelScaleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "exponent", s_Instance.exponent, "float")
end

function Type:UpdateCameraProximityData (p_class, p_guid)
	local s_Instance = UpdateCameraProximityData(p_class) 
 	local className = "UpdateCameraProximityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "forwardOffset", s_Instance.forwardOffset, "float")
	Something(className, s_guid, "size", s_Instance.size, "Vec3")
end

function Type:UpdateClipScaleData (p_class, p_guid)
	local s_Instance = UpdateClipScaleData(p_class) 
 	local className = "UpdateClipScaleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lookup", s_Instance.lookup, "List<short)>")
end

function Type:UpdateColorData (p_class, p_guid)
	local s_Instance = UpdateColorData(p_class) 
 	local className = "UpdateColorData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "Vec3")
end

function Type:UpdateSizeData (p_class, p_guid)
	local s_Instance = UpdateSizeData(p_class) 
 	local className = "UpdateSizeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "pivot", s_Instance.pivot, "Vec2")
end

function Type:UpdateTextureCoordsData (p_class, p_guid)
	local s_Instance = UpdateTextureCoordsData(p_class) 
 	local className = "UpdateTextureCoordsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "textureBlendValue", s_Instance.textureBlendValue, "float")
	Something(className, s_guid, "textureInfo1", s_Instance.textureInfo1, "EmitterTextureInfo")
end

function Type:UpdateTransparencyData (p_class, p_guid)
	local s_Instance = UpdateTransparencyData(p_class) 
 	local className = "UpdateTransparencyData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cullThreshold", s_Instance.cullThreshold, "float")
end

function Type:UrgencyModifierData (p_class, p_guid)
	local s_Instance = UrgencyModifierData(p_class) 
 	local className = "UrgencyModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "modifier", s_Instance.modifier, "float")
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:UrgencySetData (p_class, p_guid)
	local s_Instance = UrgencySetData(p_class) 
 	local className = "UrgencySetData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "urgencyModifiers", s_Instance.urgencyModifiers, "List<UrgencyModifierData)>")
end

function Type:UrgencyUserData (p_class, p_guid)
	local s_Instance = UrgencyUserData(p_class) 
 	local className = "UrgencyUserData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "base", s_Instance.base, "CtrRef")
	Something(className, s_guid, "modifierSets", s_Instance.modifierSets, "List<CtrRef)>")
	Something(className, s_guid, "urgencyModifiers", s_Instance.urgencyModifiers, "List<UrgencyModifierData)>")
end

function Type:UserMusicArbiterNodeData (p_class, p_guid)
	local s_Instance = UserMusicArbiterNodeData(p_class) 
 	local className = "UserMusicArbiterNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in", s_Instance.inValue, "AudioGraphNodePort")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "plugin", s_Instance.plugin, "SoundGraphPluginRef")
end

function Type:UserMusicControllerNodeData (p_class, p_guid)
	local s_Instance = UserMusicControllerNodeData(p_class) 
 	local className = "UserMusicControllerNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "override", s_Instance.override, "AudioGraphNodePort")
	Something(className, s_guid, "restore", s_Instance.restore, "AudioGraphNodePort")
	Something(className, s_guid, "restoreOnDeactivated", s_Instance.restoreOnDeactivated, "bool")
end

function Type:ValueAtX (p_class, p_guid)
	local s_Instance = ValueAtX(p_class) 
 	local className = "ValueAtX"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "float")
	Something(className, s_guid, "x", s_Instance.x, "float")
end

function Type:ValueDebugNodeData (p_class, p_guid)
	local s_Instance = ValueDebugNodeData(p_class) 
 	local className = "ValueDebugNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<CtrRef)>")
end

function Type:ValueSelectorEntry (p_class, p_guid)
	local s_Instance = ValueSelectorEntry(p_class) 
 	local className = "ValueSelectorEntry"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "caseValue", s_Instance.caseValue, "float")
	Something(className, s_guid, "input", s_Instance.input, "AudioGraphNodePort")
end

function Type:ValueSelectorNodeData (p_class, p_guid)
	local s_Instance = ValueSelectorNodeData(p_class) 
 	local className = "ValueSelectorNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultCaseValue", s_Instance.defaultCaseValue, "float")
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "out", s_Instance.outValue, "AudioGraphNodePort")
	Something(className, s_guid, "value", s_Instance.value, "AudioGraphNodePort")
end

function Type:ValueUnlockAsset (p_class, p_guid)
	local s_Instance = ValueUnlockAsset(p_class) 
 	local className = "ValueUnlockAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "unlockValues", s_Instance.unlockValues, "List<CtrRef)>")
end

function Type:VaultWaypointData (p_class, p_guid)
	local s_Instance = VaultWaypointData(p_class) 
 	local className = "VaultWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "vaultTask", s_Instance.vaultTask, "AILocoVaultTaskData")
end

function Type:Vec2PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec2PropertyTrackData(p_class) 
 	local className = "Vec2PropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec2)>")
end

function Type:Vec2RecordingData (p_class, p_guid)
	local s_Instance = Vec2RecordingData(p_class) 
 	local className = "Vec2RecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec2)>")
end

function Type:Vec3EntityData (p_class, p_guid)
	local s_Instance = Vec3EntityData(p_class) 
 	local className = "Vec3EntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "defaultValue", s_Instance.defaultValue, "Vec3")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:Vec3MathOpEntityData (p_class, p_guid)
	local s_Instance = Vec3MathOpEntityData(p_class) 
 	local className = "Vec3MathOpEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "operators", s_Instance.operators, "List<Vec3MathOp)>")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "vec3MathOpEntityData", s_Instance.vec3MathOpEntityData,  "readonly")
	Something(className, s_guid, "vec3MathOp", s_Instance.vec3MathOp,  "uint")
end

function Type:Vec3PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec3PropertyTrackData(p_class) 
 	local className = "Vec3PropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec3)>")
end

function Type:Vec3RecordingData (p_class, p_guid)
	local s_Instance = Vec3RecordingData(p_class) 
 	local className = "Vec3RecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec3)>")
end

function Type:Vec4PropertyTrackData (p_class, p_guid)
	local s_Instance = Vec4PropertyTrackData(p_class) 
 	local className = "Vec4PropertyTrackData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec4)>")
end

function Type:Vec4RecordingData (p_class, p_guid)
	local s_Instance = Vec4RecordingData(p_class) 
 	local className = "Vec4RecordingData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "values", s_Instance.values, "List<Vec4)>")
end

function Type:VecSplitterEntityData (p_class, p_guid)
	local s_Instance = VecSplitterEntityData(p_class) 
 	local className = "VecSplitterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "vec3", s_Instance.vec3, "RimeLib.Frostbite).Containers.Vec3")
	Something(className, s_guid, "vec4", s_Instance.vec4, "RimeLib.Frostbite).Containers.Vec4")
end

function Type:VectorArrayShaderParameter (p_class, p_guid)
	local s_Instance = VectorArrayShaderParameter(p_class) 
 	local className = "VectorArrayShaderParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "parameterType", s_Instance.parameterType, "ShaderParameterType")
	Something(className, s_guid, "values", s_Instance.values, "List<Vec4)>")
end

function Type:VectorShaderParameter (p_class, p_guid)
	local s_Instance = VectorShaderParameter(p_class) 
 	local className = "VectorShaderParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "parameterName", s_Instance.parameterName, "string")
	Something(className, s_guid, "parameterType", s_Instance.parameterType, "ShaderParameterType")
	Something(className, s_guid, "value", s_Instance.value, "Vec4")
end

function Type:VectorShapeData (p_class, p_guid)
	local s_Instance = VectorShapeData(p_class) 
 	local className = "VectorShapeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowRoll", s_Instance.allowRoll, "bool")
	Something(className, s_guid, "isClosed", s_Instance.isClosed, "bool")
	Something(className, s_guid, "normals", s_Instance.normals, "List<Vec3)>")
	Something(className, s_guid, "points", s_Instance.points, "List<Vec3)>")
	Something(className, s_guid, "tension", s_Instance.tension, "float")
end

function Type:VegetationBaseEntityData (p_class, p_guid)
	local s_Instance = VegetationBaseEntityData(p_class) 
 	local className = "VegetationBaseEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "basePoseTransforms", s_Instance.basePoseTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "basePoseTranslations", s_Instance.basePoseTranslations, "List<Vec3)>")
	Something(className, s_guid, "hierarchy", s_Instance.hierarchy, "List<int)>")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "physicsData", s_Instance.physicsData, "CtrRef")
	Something(className, s_guid, "shadowMesh", s_Instance.shadowMesh, "CtrRef")
end

function Type:VegetationSystemSettings (p_class, p_guid)
	local s_Instance = VegetationSystemSettings(p_class) 
 	local className = "VegetationSystemSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "batchDrawEnable", s_Instance.batchDrawEnable, "bool")
	Something(className, s_guid, "destructionEnabled", s_Instance.destructionEnabled, "bool")
	Something(className, s_guid, "dissolveEnable", s_Instance.dissolveEnable, "bool")
	Something(className, s_guid, "drawEnable", s_Instance.drawEnable, "bool")
	Something(className, s_guid, "drawNodes", s_Instance.drawNodes, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "enableJobs", s_Instance.enableJobs, "bool")
	Something(className, s_guid, "forceShadowLod", s_Instance.forceShadowLod, "int")
	Something(className, s_guid, "jobCount", s_Instance.jobCount, "uint")
	Something(className, s_guid, "jointTensionLimit", s_Instance.jointTensionLimit, "float")
	Something(className, s_guid, "jointTensionLimitIndex", s_Instance.jointTensionLimitIndex, "int")
	Something(className, s_guid, "localInfluencesEnabled", s_Instance.localInfluencesEnabled, "bool")
	Something(className, s_guid, "maxActiveDistance", s_Instance.maxActiveDistance, "float")
	Something(className, s_guid, "maxPreSimsPerJob", s_Instance.maxPreSimsPerJob, "uint")
	Something(className, s_guid, "shadowMeshEnable", s_Instance.shadowMeshEnable, "bool")
	Something(className, s_guid, "simulateServerSide", s_Instance.simulateServerSide, "bool")
	Something(className, s_guid, "simulationMemKbClient", s_Instance.simulationMemKbClient, "uint")
	Something(className, s_guid, "simulationMemKbServer", s_Instance.simulationMemKbServer, "uint")
	Something(className, s_guid, "subDestructionEnabled", s_Instance.subDestructionEnabled, "bool")
	Something(className, s_guid, "timeScale", s_Instance.timeScale, "float")
	Something(className, s_guid, "useShadowLodOffset", s_Instance.useShadowLodOffset, "bool")
	Something(className, s_guid, "windStrength", s_Instance.windStrength, "float")
	Something(className, s_guid, "windVariation", s_Instance.windVariation, "float")
	Something(className, s_guid, "windVariationRate", s_Instance.windVariationRate, "float")
end

function Type:VegetationTreeEntityData (p_class, p_guid)
	local s_Instance = VegetationTreeEntityData(p_class) 
 	local className = "VegetationTreeEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "branchHitpoints", s_Instance.branchHitpoints, "float")
	Something(className, s_guid, "branchL2Hitpoints", s_Instance.branchL2Hitpoints, "float")
	Something(className, s_guid, "branchStiffness", s_Instance.branchStiffness, "float")
	Something(className, s_guid, "branchStiffnessL2", s_Instance.branchStiffnessL2, "float")
	Something(className, s_guid, "breakableJointThreshold", s_Instance.breakableJointThreshold, "float")
	Something(className, s_guid, "bulletImpactEffect", s_Instance.bulletImpactEffect, "CtrRef")
	Something(className, s_guid, "clientSideOnly", s_Instance.clientSideOnly, "bool")
	Something(className, s_guid, "coliPlaneDepth", s_Instance.coliPlaneDepth, "float")
	Something(className, s_guid, "collisionEffect", s_Instance.collisionEffect, "CtrRef")
	Something(className, s_guid, "collisionImpactMultiplier", s_Instance.collisionImpactMultiplier, "float")
	Something(className, s_guid, "constraintStemB1", s_Instance.constraintStemB1, "bool")
	Something(className, s_guid, "constraintStemB2", s_Instance.constraintStemB2, "bool")
	Something(className, s_guid, "fallDirectionEnd", s_Instance.fallDirectionEnd, "float")
	Something(className, s_guid, "fallDirectionStart", s_Instance.fallDirectionStart, "float")
	Something(className, s_guid, "forceFullSim", s_Instance.forceFullSim, "bool")
	Something(className, s_guid, "groundImpactEffect", s_Instance.groundImpactEffect, "CtrRef")
	Something(className, s_guid, "impactThreshold", s_Instance.impactThreshold, "float")
	Something(className, s_guid, "localWindEffect", s_Instance.localWindEffect, "CtrRef")
	Something(className, s_guid, "partsTimeToLive", s_Instance.partsTimeToLive, "float")
	Something(className, s_guid, "shadowLODOffset", s_Instance.shadowLODOffset, "uint")
	Something(className, s_guid, "splashDistantEffect", s_Instance.splashDistantEffect, "CtrRef")
	Something(className, s_guid, "splashNearEffect", s_Instance.splashNearEffect, "CtrRef")
	Something(className, s_guid, "stemBoneCount", s_Instance.stemBoneCount, "int")
	Something(className, s_guid, "stemHitpoints", s_Instance.stemHitpoints, "float")
	Something(className, s_guid, "stemPhysicsWidth", s_Instance.stemPhysicsWidth, "float")
	Something(className, s_guid, "stemRipEffect", s_Instance.stemRipEffect, "CtrRef")
	Something(className, s_guid, "stemStiffness", s_Instance.stemStiffness, "float")
	Something(className, s_guid, "stemStiffnessSpread", s_Instance.stemStiffnessSpread, "float")
	Something(className, s_guid, "treeFallEffect", s_Instance.treeFallEffect, "CtrRef")
	Something(className, s_guid, "useImpactThreshold", s_Instance.useImpactThreshold, "bool")
	Something(className, s_guid, "usePhysicsShapes", s_Instance.usePhysicsShapes, "bool")
	Something(className, s_guid, "windBranch", s_Instance.windBranch, "float")
	Something(className, s_guid, "windBranchL2", s_Instance.windBranchL2, "float")
	Something(className, s_guid, "windStem", s_Instance.windStem, "float")
end

function Type:VehicleCameraControlBinding (p_class, p_guid)
	local s_Instance = VehicleCameraControlBinding(p_class) 
 	local className = "VehicleCameraControlBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enableAnimatedVehicleCamera", s_Instance.enableAnimatedVehicleCamera, "AntRef")
end

function Type:VehicleCameraData (p_class, p_guid)
	local s_Instance = VehicleCameraData(p_class) 
 	local className = "VehicleCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fixedAngleZ", s_Instance.fixedAngleZ, "bool")
	Something(className, s_guid, "fixedPosition", s_Instance.fixedPosition, "bool")
	Something(className, s_guid, "moveToPosition", s_Instance.moveToPosition, "Vec3")
	Something(className, s_guid, "moveToPositionSlopeFactor", s_Instance.moveToPositionSlopeFactor, "Vec3")
	Something(className, s_guid, "positionFactor", s_Instance.positionFactor, "float")
	Something(className, s_guid, "resetDistance", s_Instance.resetDistance, "float")
	Something(className, s_guid, "rotationFactor", s_Instance.rotationFactor, "Vec3")
	Something(className, s_guid, "targetOffset", s_Instance.targetOffset, "Vec3")
	Something(className, s_guid, "targetOffsetSlopeFactor", s_Instance.targetOffsetSlopeFactor, "Vec3")
	Something(className, s_guid, "useTerrainAdjustment", s_Instance.useTerrainAdjustment, "bool")
end

function Type:VehicleConfigData (p_class, p_guid)
	local s_Instance = VehicleConfigData(p_class) 
 	local className = "VehicleConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aeroDynamicPhysics", s_Instance.aeroDynamicPhysics, "CtrRef")
	Something(className, s_guid, "airDensity", s_Instance.airDensity, "float")
	Something(className, s_guid, "airDragArea", s_Instance.airDragArea, "float")
	Something(className, s_guid, "antiRollBars", s_Instance.antiRollBars, "fb.AntiRollBars)")
	Something(className, s_guid, "bodyMass", s_Instance.bodyMass, "float")
	Something(className, s_guid, "centerOfMass", s_Instance.centerOfMass, "Vec3")
	Something(className, s_guid, "centerOfMassHandlingOffset", s_Instance.centerOfMassHandlingOffset, "Vec3")
	Something(className, s_guid, "coefficientOfAirFriction", s_Instance.coefficientOfAirFriction, "float")
	Something(className, s_guid, "constantForce", s_Instance.constantForce, "List<ConstantForceData)>")
	Something(className, s_guid, "downForceBaseFactor", s_Instance.downForceBaseFactor, "float")
	Something(className, s_guid, "downForceWheelFactor", s_Instance.downForceWheelFactor, "float")
	Something(className, s_guid, "floatPhysics", s_Instance.floatPhysics, "CtrRef")
	Something(className, s_guid, "gravityModifier", s_Instance.gravityModifier, "float")
	Something(className, s_guid, "inertiaModifier", s_Instance.inertiaModifier, "Vec3")
	Something(className, s_guid, "input", s_Instance.input, "VehicleInputData")
	Something(className, s_guid, "invertPitchAllowed", s_Instance.invertPitchAllowed, "bool")
	Something(className, s_guid, "motionDamping", s_Instance.motionDamping, "CtrRef")
	Something(className, s_guid, "motorbikePhysics", s_Instance.motorbikePhysics, "CtrRef")
	Something(className, s_guid, "parachutePhysics", s_Instance.parachutePhysics, "CtrRef")
	Something(className, s_guid, "stabilizer", s_Instance.stabilizer, "CtrRef")
	Something(className, s_guid, "stabilizers", s_Instance.stabilizers, "List<StabilizerSettings)>")
	Something(className, s_guid, "standStillLowSpeedTimeLimit", s_Instance.standStillLowSpeedTimeLimit, "float")
	Something(className, s_guid, "staticFrictionBreakCollisionMod", s_Instance.staticFrictionBreakCollisionMod, "float")
	Something(className, s_guid, "staticFrictionBreakVelocityMod", s_Instance.staticFrictionBreakVelocityMod, "float")
	Something(className, s_guid, "useDownForce", s_Instance.useDownForce, "bool")
	Something(className, s_guid, "useDownForceWheelFactor", s_Instance.useDownForceWheelFactor, "bool")
	Something(className, s_guid, "useGearbox", s_Instance.useGearbox, "bool")
	Something(className, s_guid, "useMotorcycleControl", s_Instance.useMotorcycleControl, "bool")
	Something(className, s_guid, "useStandStillBrake", s_Instance.useStandStillBrake, "bool")
	Something(className, s_guid, "useStandStillSleep", s_Instance.useStandStillSleep, "bool")
	Something(className, s_guid, "useTurnAroundForce", s_Instance.useTurnAroundForce, "bool")
	Something(className, s_guid, "useWindResistance", s_Instance.useWindResistance, "bool")
	Something(className, s_guid, "vehicleModeAtReset", s_Instance.vehicleModeAtReset, "VehicleMode")
	Something(className, s_guid, "vehicleModeChangeEnteringTime", s_Instance.vehicleModeChangeEnteringTime, "float")
	Something(className, s_guid, "vehicleModeChangeLeavingTime", s_Instance.vehicleModeChangeLeavingTime, "float")
	Something(className, s_guid, "vehicleModeChangeStartingTime", s_Instance.vehicleModeChangeStartingTime, "float")
	Something(className, s_guid, "vehicleModeChangeStoppingTime", s_Instance.vehicleModeChangeStoppingTime, "float")
	Something(className, s_guid, "windResistanceBaseFactor", s_Instance.windResistanceBaseFactor, "float")
	Something(className, s_guid, "windResistanceVelocityFactor", s_Instance.windResistanceVelocityFactor, "float")
	Something(className, s_guid, "windResistanceVelocityFactorMax", s_Instance.windResistanceVelocityFactorMax, "float")
	Something(className, s_guid, "windResistanceVelocityFactorMin", s_Instance.windResistanceVelocityFactorMin, "float")
	Something(className, s_guid, "yawMax", s_Instance.yawMax, "float")
	Something(className, s_guid, "yawMin", s_Instance.yawMin, "float")
end

function Type:VehicleCustomizationAsset (p_class, p_guid)
	local s_Instance = VehicleCustomizationAsset(p_class) 
 	local className = "VehicleCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customization", s_Instance.customization, "CtrRef")
end

function Type:VehicleDeployWeaponData (p_class, p_guid)
	local s_Instance = VehicleDeployWeaponData(p_class) 
 	local className = "VehicleDeployWeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "canRemoteEnterVehicle", s_Instance.canRemoteEnterVehicle, "bool")
	Something(className, s_guid, "checkClearSky", s_Instance.checkClearSky, "bool")
	Something(className, s_guid, "deployAreaGroundFlatness", s_Instance.deployAreaGroundFlatness, "float")
	Something(className, s_guid, "deployAreaGroundRayLength", s_Instance.deployAreaGroundRayLength, "float")
	Something(className, s_guid, "deployAreaRadius", s_Instance.deployAreaRadius, "float")
	Something(className, s_guid, "previewObject", s_Instance.previewObject, "CtrRef")
	Something(className, s_guid, "usePreview", s_Instance.usePreview, "bool")
end

function Type:VehicleEntityData (p_class, p_guid)
	local s_Instance = VehicleEntityData(p_class) 
 	local className = "VehicleEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowVehicleOutsideCombatAreas", s_Instance.allowVehicleOutsideCombatAreas, "bool")
	Something(className, s_guid, "angleOfImpact", s_Instance.angleOfImpact, "AngleOfImpactData")
	Something(className, s_guid, "armorMultiplier", s_Instance.armorMultiplier, "float")
	Something(className, s_guid, "belowWaterDamageDelay", s_Instance.belowWaterDamageDelay, "float")
	Something(className, s_guid, "choseExitPointByDirection", s_Instance.choseExitPointByDirection, "bool")
	Something(className, s_guid, "cockpitMesh", s_Instance.cockpitMesh, "CtrRef")
	Something(className, s_guid, "controllableType", s_Instance.controllableType, "string")
	Something(className, s_guid, "criticalDamageTime", s_Instance.criticalDamageTime, "float")
	Something(className, s_guid, "criticallyDamagedEffect", s_Instance.criticallyDamagedEffect, "CtrRef")
	Something(className, s_guid, "criticallyDamagedEffectPosition", s_Instance.criticallyDamagedEffectPosition, "Vec3")
	Something(className, s_guid, "decayDelay", s_Instance.decayDelay, "float")
	Something(className, s_guid, "decayRate", s_Instance.decayRate, "float")
	Something(className, s_guid, "disabledDamageThreshold", s_Instance.disabledDamageThreshold, "float")
	Something(className, s_guid, "emergencyRepairHealth", s_Instance.emergencyRepairHealth, "float")
	Something(className, s_guid, "enableGroundmapLighting", s_Instance.enableGroundmapLighting, "bool")
	Something(className, s_guid, "equipmentFakeVehicle", s_Instance.equipmentFakeVehicle, "bool")
	Something(className, s_guid, "exitAllowed", s_Instance.exitAllowed, "bool")
	Something(className, s_guid, "exitCameraSwitchDelay", s_Instance.exitCameraSwitchDelay, "float")
	Something(className, s_guid, "exitDirectionSpeedThreshold", s_Instance.exitDirectionSpeedThreshold, "float")
	Something(className, s_guid, "exitSpeedThreshold", s_Instance.exitSpeedThreshold, "float")
	Something(className, s_guid, "explosion", s_Instance.explosion, "CtrRef")
	Something(className, s_guid, "explosionPacksAttachable", s_Instance.explosionPacksAttachable, "bool")
	Something(className, s_guid, "fLIRKeyColor", s_Instance.fLIRKeyColor, "Vec3")
	Something(className, s_guid, "fLIRValue", s_Instance.fLIRValue, "float")
	Something(className, s_guid, "foregroundRenderCockpitMesh", s_Instance.foregroundRenderCockpitMesh, "bool")
	Something(className, s_guid, "frontHealthZone", s_Instance.frontHealthZone, "VehicleHealthZoneData")
	Something(className, s_guid, "healthZonesShareDamage", s_Instance.healthZonesShareDamage, "bool")
	Something(className, s_guid, "highAltitudeLockHeight", s_Instance.highAltitudeLockHeight, "float")
	Something(className, s_guid, "hudData", s_Instance.hudData, "VehicleHudData")
	Something(className, s_guid, "ignoreSoldierCollisionNormal", s_Instance.ignoreSoldierCollisionNormal, "bool")
	Something(className, s_guid, "interactionOffset", s_Instance.interactionOffset, "Vec3")
	Something(className, s_guid, "isAffectedByEMP", s_Instance.isAffectedByEMP, "bool")
	Something(className, s_guid, "isLockable", s_Instance.isLockable, "bool")
	Something(className, s_guid, "killSoldierCollisionSpeedThreshold", s_Instance.killSoldierCollisionSpeedThreshold, "float")
	Something(className, s_guid, "leftHealthZone", s_Instance.leftHealthZone, "VehicleHealthZoneData")
	Something(className, s_guid, "lockingTimeMultiplier", s_Instance.lockingTimeMultiplier, "float")
	Something(className, s_guid, "maxPlayersInVehicle", s_Instance.maxPlayersInVehicle, "int")
	Something(className, s_guid, "mesh", s_Instance.mesh, "CtrRef")
	Something(className, s_guid, "minSpeedForMineActivation", s_Instance.minSpeedForMineActivation, "float")
	Something(className, s_guid, "motionBlurMask", s_Instance.motionBlurMask, "bool")
	Something(className, s_guid, "mPMode", s_Instance.mPMode, "MPModeData")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
	Something(className, s_guid, "nametagHeightOffset", s_Instance.nametagHeightOffset, "float")
	Something(className, s_guid, "nametagHeightScale", s_Instance.nametagHeightScale, "float")
	Something(className, s_guid, "neverReportVehicleAsEmpty", s_Instance.neverReportVehicleAsEmpty, "bool")
	Something(className, s_guid, "preDestructionDamageThreshold", s_Instance.preDestructionDamageThreshold, "float")
	Something(className, s_guid, "preExplosionEffect", s_Instance.preExplosionEffect, "CtrRef")
	Something(className, s_guid, "preExplosionEffectPosition", s_Instance.preExplosionEffectPosition, "Vec3")
	Something(className, s_guid, "preExplosionTime", s_Instance.preExplosionTime, "float")
	Something(className, s_guid, "rearHealthZone", s_Instance.rearHealthZone, "VehicleHealthZoneData")
	Something(className, s_guid, "regenerationDelay", s_Instance.regenerationDelay, "float")
	Something(className, s_guid, "regenerationDelayMultiplier", s_Instance.regenerationDelayMultiplier, "float")
	Something(className, s_guid, "regenerationRate", s_Instance.regenerationRate, "float")
	Something(className, s_guid, "regenerationRateMultiplier", s_Instance.regenerationRateMultiplier, "float")
	Something(className, s_guid, "renderVehicleMesh", s_Instance.renderVehicleMesh, "bool")
	Something(className, s_guid, "rightHealthZone", s_Instance.rightHealthZone, "VehicleHealthZoneData")
	Something(className, s_guid, "showPlayerHealth", s_Instance.showPlayerHealth, "bool")
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
	Something(className, s_guid, "throwOutSoldierInsideOnWaterDamage", s_Instance.throwOutSoldierInsideOnWaterDamage, "bool")
	Something(className, s_guid, "upsideDownAngle", s_Instance.upsideDownAngle, "float")
	Something(className, s_guid, "upsideDownDamage", s_Instance.upsideDownDamage, "float")
	Something(className, s_guid, "upsideDownDamageDelay", s_Instance.upsideDownDamageDelay, "float")
	Something(className, s_guid, "useAsTeamSpawner", s_Instance.useAsTeamSpawner, "bool")
	Something(className, s_guid, "useDriverEyePosForNametagPos", s_Instance.useDriverEyePosForNametagPos, "bool")
	Something(className, s_guid, "useLowAltitudeHeatSignature", s_Instance.useLowAltitudeHeatSignature, "bool")
	Something(className, s_guid, "useProtectedShields", s_Instance.useProtectedShields, "bool")
	Something(className, s_guid, "vehicleLockableInfo", s_Instance.vehicleLockableInfo, "VehicleLockableInfoData")
	Something(className, s_guid, "velocityDamageMagnifier", s_Instance.velocityDamageMagnifier, "float")
	Something(className, s_guid, "velocityDamageThreshold", s_Instance.velocityDamageThreshold, "float")
	Something(className, s_guid, "voiceOverInfo", s_Instance.voiceOverInfo, "CtrRef")
	Something(className, s_guid, "waterDamage", s_Instance.waterDamage, "float")
	Something(className, s_guid, "waterDamageOffset", s_Instance.waterDamageOffset, "float")
end

function Type:VehicleEntryListenerBinding (p_class, p_guid)
	local s_Instance = VehicleEntryListenerBinding(p_class) 
 	local className = "VehicleEntryListenerBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inOpenEntry", s_Instance.inOpenEntry, "AntRef")
	Something(className, s_guid, "inVehicle", s_Instance.inVehicle, "AntRef")
	Something(className, s_guid, "inVehicleRetrigger", s_Instance.inVehicleRetrigger, "AntRef")
	Something(className, s_guid, "vehicleEntryChooserIndex", s_Instance.vehicleEntryChooserIndex, "AntRef")
	Something(className, s_guid, "vehicleEntryFire", s_Instance.vehicleEntryFire, "AntRef")
	Something(className, s_guid, "vehicleEntryForceX", s_Instance.vehicleEntryForceX, "AntRef")
	Something(className, s_guid, "vehicleEntryForceY", s_Instance.vehicleEntryForceY, "AntRef")
	Something(className, s_guid, "vehicleEntryForceZ", s_Instance.vehicleEntryForceZ, "AntRef")
	Something(className, s_guid, "vehicleEntryIndex", s_Instance.vehicleEntryIndex, "AntRef")
	Something(className, s_guid, "vehicleEntryIndexUpdated", s_Instance.vehicleEntryIndexUpdated, "AntRef")
	Something(className, s_guid, "vehicleEntryPitch", s_Instance.vehicleEntryPitch, "AntRef")
	Something(className, s_guid, "vehicleEntryRoll", s_Instance.vehicleEntryRoll, "AntRef")
	Something(className, s_guid, "vehicleEntryRotation", s_Instance.vehicleEntryRotation, "AntRef")
	Something(className, s_guid, "vehicleEntryYaw", s_Instance.vehicleEntryYaw, "AntRef")
	Something(className, s_guid, "vehicleOpenEntryIndex", s_Instance.vehicleOpenEntryIndex, "AntRef")
end

function Type:VehicleEntryListenerComponentData (p_class, p_guid)
	local s_Instance = VehicleEntryListenerComponentData(p_class) 
 	local className = "VehicleEntryListenerComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "animationWheelTransformDelay", s_Instance.animationWheelTransformDelay, "float")
	Something(className, s_guid, "vehicleCameraControl", s_Instance.vehicleCameraControl, "VehicleCameraControlBinding")
	Something(className, s_guid, "vehicleEntryListener", s_Instance.vehicleEntryListener, "VehicleEntryListenerBinding")
end

function Type:VehicleExitPointComponentData (p_class, p_guid)
	local s_Instance = VehicleExitPointComponentData(p_class) 
 	local className = "VehicleExitPointComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkForVehicleOverrun", s_Instance.checkForVehicleOverrun, "bool")
	Something(className, s_guid, "impulse", s_Instance.impulse, "Vec3")
	Something(className, s_guid, "inheritCameraDirection", s_Instance.inheritCameraDirection, "bool")
	Something(className, s_guid, "ordinal", s_Instance.ordinal, "int")
	Something(className, s_guid, "terrainHeight", s_Instance.terrainHeight, "float")
	Something(className, s_guid, "velocity", s_Instance.velocity, "float")
end

function Type:VehicleHealthZoneData (p_class, p_guid)
	local s_Instance = VehicleHealthZoneData(p_class) 
 	local className = "VehicleHealthZoneData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "damageAngleMultiplier", s_Instance.damageAngleMultiplier, "float")
	Something(className, s_guid, "maxHealth", s_Instance.maxHealth, "float")
	Something(className, s_guid, "maxShieldHealth", s_Instance.maxShieldHealth, "float")
	Something(className, s_guid, "minDamageAngle", s_Instance.minDamageAngle, "float")
	Something(className, s_guid, "useDamageAngleCalculation", s_Instance.useDamageAngleCalculation, "bool")
end

function Type:VehicleHudData (p_class, p_guid)
	local s_Instance = VehicleHudData(p_class) 
 	local className = "VehicleHudData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "customization", s_Instance.customization, "CtrRef")
	Something(className, s_guid, "customizationOffset", s_Instance.customizationOffset, "Vec3")
	Something(className, s_guid, "minimapIcon", s_Instance.minimapIcon, "UIHudIcon")
	Something(className, s_guid, "texture", s_Instance.texture, "CtrRef")
	Something(className, s_guid, "vehicleItemHash", s_Instance.vehicleItemHash, "uint")
end

function Type:VehicleInputData (p_class, p_guid)
	local s_Instance = VehicleInputData(p_class) 
 	local className = "VehicleInputData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "brakeDeadzone", s_Instance.brakeDeadzone, "float")
	Something(className, s_guid, "brakeInertiaInDuration", s_Instance.brakeInertiaInDuration, "float")
	Something(className, s_guid, "brakeInertiaMinRatio", s_Instance.brakeInertiaMinRatio, "float")
	Something(className, s_guid, "brakeInertiaOutDuration", s_Instance.brakeInertiaOutDuration, "float")
	Something(className, s_guid, "pitchDeadzone", s_Instance.pitchDeadzone, "float")
	Something(className, s_guid, "pitchInertiaInDuration", s_Instance.pitchInertiaInDuration, "float")
	Something(className, s_guid, "pitchInertiaMinRatio", s_Instance.pitchInertiaMinRatio, "float")
	Something(className, s_guid, "pitchInertiaOutDuration", s_Instance.pitchInertiaOutDuration, "float")
	Something(className, s_guid, "rollDeadzone", s_Instance.rollDeadzone, "float")
	Something(className, s_guid, "rollInertiaInDuration", s_Instance.rollInertiaInDuration, "float")
	Something(className, s_guid, "rollInertiaMinRatio", s_Instance.rollInertiaMinRatio, "float")
	Something(className, s_guid, "rollInertiaOutDuration", s_Instance.rollInertiaOutDuration, "float")
	Something(className, s_guid, "throttleDeadzone", s_Instance.throttleDeadzone, "float")
	Something(className, s_guid, "throttleInertiaInDuration", s_Instance.throttleInertiaInDuration, "float")
	Something(className, s_guid, "throttleInertiaMinRatio", s_Instance.throttleInertiaMinRatio, "float")
	Something(className, s_guid, "throttleInertiaOutDuration", s_Instance.throttleInertiaOutDuration, "float")
	Something(className, s_guid, "yawDeadzone", s_Instance.yawDeadzone, "float")
	Something(className, s_guid, "yawInertiaInDuration", s_Instance.yawInertiaInDuration, "float")
	Something(className, s_guid, "yawInertiaMinRatio", s_Instance.yawInertiaMinRatio, "float")
	Something(className, s_guid, "yawInertiaOutDuration", s_Instance.yawInertiaOutDuration, "float")
end

function Type:VehicleInputTweakData (p_class, p_guid)
	local s_Instance = VehicleInputTweakData(p_class) 
 	local className = "VehicleInputTweakData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "inputTweakType", s_Instance.inputTweakType, "VehicleInputTweakType")
	Something(className, s_guid, "maxSpeed", s_Instance.maxSpeed, "float")
	Something(className, s_guid, "maxSpeedScale", s_Instance.maxSpeedScale, "float")
	Something(className, s_guid, "minSpeed", s_Instance.minSpeed, "float")
	Something(className, s_guid, "minSpeedScale", s_Instance.minSpeedScale, "float")
end

function Type:VehicleLockableInfoData (p_class, p_guid)
	local s_Instance = VehicleLockableInfoData(p_class) 
 	local className = "VehicleLockableInfoData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "heatSignature", s_Instance.heatSignature, "float")
	Something(className, s_guid, "lowAltitudeHeatSignature", s_Instance.lowAltitudeHeatSignature, "float")
	Something(className, s_guid, "lowAltitudeHeight", s_Instance.lowAltitudeHeight, "float")
	Something(className, s_guid, "radarSignature", s_Instance.radarSignature, "float")
end

function Type:VehicleParachuteBinding (p_class, p_guid)
	local s_Instance = VehicleParachuteBinding(p_class) 
 	local className = "VehicleParachuteBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "AntRef")
	Something(className, s_guid, "vehicleType", s_Instance.vehicleType, "AntRef")
end

function Type:VehicleParachuteComponentData (p_class, p_guid)
	local s_Instance = VehicleParachuteComponentData(p_class) 
 	local className = "VehicleParachuteComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "VehicleParachuteBinding")
	Something(className, s_guid, "dropParachuteOnUndeploy", s_Instance.dropParachuteOnUndeploy, "bool")
	Something(className, s_guid, "timeInvisibleAfterSpawn", s_Instance.timeInvisibleAfterSpawn, "float")
	Something(className, s_guid, "undeployTime", s_Instance.undeployTime, "float")
	Something(className, s_guid, "vehicleType", s_Instance.vehicleType, "int")
end

function Type:VehicleParachuteData (p_class, p_guid)
	local s_Instance = VehicleParachuteData(p_class) 
 	local className = "VehicleParachuteData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularDeployDamping", s_Instance.angularDeployDamping, "float")
	Something(className, s_guid, "angularDescentDamping", s_Instance.angularDescentDamping, "float")
	Something(className, s_guid, "deployInitialDragStart", s_Instance.deployInitialDragStart, "float")
	Something(className, s_guid, "deployPhysicsStart", s_Instance.deployPhysicsStart, "float")
	Something(className, s_guid, "deployTime", s_Instance.deployTime, "float")
	Something(className, s_guid, "dragCoefficient", s_Instance.dragCoefficient, "float")
	Something(className, s_guid, "freefallGravityMultiplier", s_Instance.freefallGravityMultiplier, "float")
	Something(className, s_guid, "initialDragAngularVelocityPitch", s_Instance.initialDragAngularVelocityPitch, "float")
	Something(className, s_guid, "initialDragRandomAngularVelocityRollMax", s_Instance.initialDragRandomAngularVelocityRollMax, "float")
	Something(className, s_guid, "initialDragStartVelocityScale", s_Instance.initialDragStartVelocityScale, "float")
	Something(className, s_guid, "maxPitchVelocity", s_Instance.maxPitchVelocity, "float")
	Something(className, s_guid, "maxRollVelocity", s_Instance.maxRollVelocity, "float")
	Something(className, s_guid, "maxYawVelocity", s_Instance.maxYawVelocity, "float")
	Something(className, s_guid, "rampLength", s_Instance.rampLength, "float")
	Something(className, s_guid, "terminalVelocity", s_Instance.terminalVelocity, "float")
	Something(className, s_guid, "undeployGroundHeight", s_Instance.undeployGroundHeight, "float")
end

function Type:VehicleProjectileEntityData (p_class, p_guid)
	local s_Instance = VehicleProjectileEntityData(p_class) 
 	local className = "VehicleProjectileEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alignWithGround", s_Instance.alignWithGround, "bool")
	Something(className, s_guid, "alignWithGroundRayLength", s_Instance.alignWithGroundRayLength, "float")
	Something(className, s_guid, "autoEnter", s_Instance.autoEnter, "bool")
	Something(className, s_guid, "checkGroundWhenSpawned", s_Instance.checkGroundWhenSpawned, "bool")
	Something(className, s_guid, "deployInsideNeutralCombatAreaOnly", s_Instance.deployInsideNeutralCombatAreaOnly, "bool")
	Something(className, s_guid, "enterDelay", s_Instance.enterDelay, "float")
	Something(className, s_guid, "noVehicleCollisionTime", s_Instance.noVehicleCollisionTime, "float")
	Something(className, s_guid, "vehicle", s_Instance.vehicle, "CtrRef")
end

function Type:VehicleSoundData (p_class, p_guid)
	local s_Instance = VehicleSoundData(p_class) 
 	local className = "VehicleSoundData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "bulletImpact", s_Instance.bulletImpact, "CtrRef")
end

function Type:VehicleSpawnReferenceObjectData (p_class, p_guid)
	local s_Instance = VehicleSpawnReferenceObjectData(p_class) 
 	local className = "VehicleSpawnReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "activeStance", s_Instance.activeStance, "int")
	Something(className, s_guid, "activeStanceEntryIndex", s_Instance.activeStanceEntryIndex, "int")
	Something(className, s_guid, "affectedByImpulse", s_Instance.affectedByImpulse, "bool")
	Something(className, s_guid, "airDropCarrierTransform", s_Instance.airDropCarrierTransform, "LinearTransform")
	Something(className, s_guid, "applyDamageToAbandonedVehicles", s_Instance.applyDamageToAbandonedVehicles, "bool")
	Something(className, s_guid, "botBailOutDelay", s_Instance.botBailOutDelay, "float")
	Something(className, s_guid, "botBailWhenHealthBelow", s_Instance.botBailWhenHealthBelow, "float")
	Something(className, s_guid, "disregardSpawnAllowedSetting", s_Instance.disregardSpawnAllowedSetting, "bool")
	Something(className, s_guid, "enableAvailableSeatOutput", s_Instance.enableAvailableSeatOutput, "bool")
	Something(className, s_guid, "enterRestriction", s_Instance.enterRestriction, "EntryEnterRestriction")
	Something(className, s_guid, "keepAliveRadius", s_Instance.keepAliveRadius, "float")
	Something(className, s_guid, "respawnRange", s_Instance.respawnRange, "float")
	Something(className, s_guid, "setTeamOnSpawn", s_Instance.setTeamOnSpawn, "bool")
	Something(className, s_guid, "timeUntilAbandoned", s_Instance.timeUntilAbandoned, "float")
	Something(className, s_guid, "timeUntilAbandonedIsDestroyed", s_Instance.timeUntilAbandonedIsDestroyed, "float")
	Something(className, s_guid, "vehicleIsNearDistance", s_Instance.vehicleIsNearDistance, "float")
	Something(className, s_guid, "wreckDuration", s_Instance.wreckDuration, "float")
end

function Type:VehicleSpawnStateEntityData (p_class, p_guid)
	local s_Instance = VehicleSpawnStateEntityData(p_class) 
 	local className = "VehicleSpawnStateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "engineIndex", s_Instance.engineIndex, "uint")
	Something(className, s_guid, "heightOffset", s_Instance.heightOffset, "float")
	Something(className, s_guid, "initialRpmModifier", s_Instance.initialRpmModifier, "float")
	Something(className, s_guid, "initialThrottle", s_Instance.initialThrottle, "float")
	Something(className, s_guid, "initialVelocity", s_Instance.initialVelocity, "Vec3")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "startupDelayModifier", s_Instance.startupDelayModifier, "float")
end

function Type:VehicleState (p_class, p_guid)
	local s_Instance = VehicleState(p_class) 
 	local className = "VehicleState"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "vehicleName", s_Instance.vehicleName, "string")
end

function Type:VehicleStateTriggerEntityData (p_class, p_guid)
	local s_Instance = VehicleStateTriggerEntityData(p_class) 
 	local className = "VehicleStateTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowAiToEnterAllSeats", s_Instance.allowAiToEnterAllSeats, "bool")
	Something(className, s_guid, "allowHumanToEnterAllSeats", s_Instance.allowHumanToEnterAllSeats, "bool")
	Something(className, s_guid, "banAiFromSpecificSeat", s_Instance.banAiFromSpecificSeat, "bool")
	Something(className, s_guid, "bulletCount", s_Instance.bulletCount, "uint")
	Something(className, s_guid, "checkHealthGreaterOrEqual", s_Instance.checkHealthGreaterOrEqual, "bool")
	Something(className, s_guid, "destructionRadius", s_Instance.destructionRadius, "float")
	Something(className, s_guid, "healthToCheck", s_Instance.healthToCheck, "uint")
	Something(className, s_guid, "healthToSet", s_Instance.healthToSet, "uint")
	Something(className, s_guid, "lockAmount", s_Instance.lockAmount, "float")
	Something(className, s_guid, "restrictHumanToSpecificSeat", s_Instance.restrictHumanToSpecificSeat, "bool")
	Something(className, s_guid, "seatSpecificIndexForAi", s_Instance.seatSpecificIndexForAi, "uint")
	Something(className, s_guid, "seatSpecificIndexForHuman", s_Instance.seatSpecificIndexForHuman, "uint")
	Something(className, s_guid, "shouldDestroyBangers", s_Instance.shouldDestroyBangers, "bool")
	Something(className, s_guid, "shouldDestroyVehicles", s_Instance.shouldDestroyVehicles, "bool")
	Something(className, s_guid, "triggerCriticalOnHealthSet", s_Instance.triggerCriticalOnHealthSet, "bool")
end

function Type:VehicleTrackerRenderTargetData (p_class, p_guid)
	local s_Instance = VehicleTrackerRenderTargetData(p_class) 
 	local className = "VehicleTrackerRenderTargetData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "positionOffset", s_Instance.positionOffset, "Vec2")
	Something(className, s_guid, "renderTargetApectRatio", s_Instance.renderTargetApectRatio, "float")
	Something(className, s_guid, "renderTargetIndex", s_Instance.renderTargetIndex, "int")
	Something(className, s_guid, "scaleSize", s_Instance.scaleSize, "float")
	Something(className, s_guid, "useRenderTarget", s_Instance.useRenderTarget, "bool")
end

function Type:VehicleVisualCustomizationAsset (p_class, p_guid)
	local s_Instance = VehicleVisualCustomizationAsset(p_class) 
 	local className = "VehicleVisualCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "textUnlockParts", s_Instance.textUnlockParts, "List<CtrRef)>")
	Something(className, s_guid, "textureUnlockPartCollections", s_Instance.textureUnlockPartCollections, "List<CtrRef)>")
end

function Type:VehicleWaterEffectData (p_class, p_guid)
	local s_Instance = VehicleWaterEffectData(p_class) 
 	local className = "VehicleWaterEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "effect", s_Instance.effect, "CtrRef")
	Something(className, s_guid, "position", s_Instance.position, "Vec3")
end

function Type:VehicleWaypointData (p_class, p_guid)
	local s_Instance = VehicleWaypointData(p_class) 
 	local className = "VehicleWaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angleoffset", s_Instance.angleoffset, "float")
	Something(className, s_guid, "minSlowdownSpeed", s_Instance.minSlowdownSpeed, "float")
	Something(className, s_guid, "speed", s_Instance.speed, "float")
	Something(className, s_guid, "speedOverrideMovingTowards", s_Instance.speedOverrideMovingTowards, "float")
	Something(className, s_guid, "stopHere", s_Instance.stopHere, "bool")
	Something(className, s_guid, "stopHereRadius", s_Instance.stopHereRadius, "float")
	Something(className, s_guid, "stoppingDeceleration", s_Instance.stoppingDeceleration, "float")
end

function Type:VeniceExplosionEntityData (p_class, p_guid)
	local s_Instance = VeniceExplosionEntityData(p_class) 
 	local className = "VeniceExplosionEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "isCausingSuppression", s_Instance.isCausingSuppression, "bool")
	Something(className, s_guid, "spotsOnExplode", s_Instance.spotsOnExplode, "bool")
	Something(className, s_guid, "unspotsOnExplode", s_Instance.unspotsOnExplode, "bool")
	Something(className, s_guid, "unspottableTime", s_Instance.unspottableTime, "float")
end

function Type:VeniceFPSCameraData (p_class, p_guid)
	local s_Instance = VeniceFPSCameraData(p_class) 
 	local className = "VeniceFPSCameraData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "suppressionBlurAmountMultiplier", s_Instance.suppressionBlurAmountMultiplier, "float")
	Something(className, s_guid, "suppressionBlurSizeMultiplier", s_Instance.suppressionBlurSizeMultiplier, "float")
end

function Type:VeniceGameplayLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceGameplayLevelDescriptionComponent(p_class) 
 	local className = "VeniceGameplayLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowParachuteFromMobileSpawnpoint", s_Instance.allowParachuteFromMobileSpawnpoint, "bool")
end

function Type:VeniceHudConfigAsset (p_class, p_guid)
	local s_Instance = VeniceHudConfigAsset(p_class) 
 	local className = "VeniceHudConfigAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ammoPickupSound", s_Instance.ammoPickupSound, "CtrRef")
	Something(className, s_guid, "artilleryAiming", s_Instance.artilleryAiming, "CtrRef")
	Something(className, s_guid, "artilleryAimingOOA", s_Instance.artilleryAimingOOA, "CtrRef")
	Something(className, s_guid, "criticalHealthThreshold", s_Instance.criticalHealthThreshold, "float")
	Something(className, s_guid, "innerNametagRadius", s_Instance.innerNametagRadius, "float")
	Something(className, s_guid, "laserDesignatorLocked", s_Instance.laserDesignatorLocked, "CtrRef")
	Something(className, s_guid, "laserDesignatorLocking", s_Instance.laserDesignatorLocking, "CtrRef")
	Something(className, s_guid, "maxOrderIconDistance", s_Instance.maxOrderIconDistance, "float")
	Something(className, s_guid, "minimap", s_Instance.minimap, "UIMinimapConfig")
	Something(className, s_guid, "mortarStrikeLocking", s_Instance.mortarStrikeLocking, "CtrRef")
	Something(className, s_guid, "mPDefeatSoundMec", s_Instance.mPDefeatSoundMec, "CtrRef")
	Something(className, s_guid, "mPDefeatSoundRu", s_Instance.mPDefeatSoundRu, "CtrRef")
	Something(className, s_guid, "mPDefeatSoundUs", s_Instance.mPDefeatSoundUs, "CtrRef")
	Something(className, s_guid, "mPVictorySoundMec", s_Instance.mPVictorySoundMec, "CtrRef")
	Something(className, s_guid, "mPVictorySoundRu", s_Instance.mPVictorySoundRu, "CtrRef")
	Something(className, s_guid, "mPVictorySoundUs", s_Instance.mPVictorySoundUs, "CtrRef")
	Something(className, s_guid, "nametagHealthVisibleForAll", s_Instance.nametagHealthVisibleForAll, "bool")
	Something(className, s_guid, "nametags", s_Instance.nametags, "List<CtrRef)>")
	Something(className, s_guid, "newObjectiveSound", s_Instance.newObjectiveSound, "CtrRef")
	Something(className, s_guid, "objectiveCompletedSound", s_Instance.objectiveCompletedSound, "CtrRef")
	Something(className, s_guid, "objectiveUpdatedSound", s_Instance.objectiveUpdatedSound, "CtrRef")
	Something(className, s_guid, "outerNametagRadius", s_Instance.outerNametagRadius, "float")
	Something(className, s_guid, "showSpawnPointsOnMinimap", s_Instance.showSpawnPointsOnMinimap, "bool")
	Something(className, s_guid, "spawnScreenWeapons", s_Instance.spawnScreenWeapons, "List<SpawnScreenWeaponData)>")
	Something(className, s_guid, "taggedVehicleCrosshair", s_Instance.taggedVehicleCrosshair, "UITaggedVehicleCrosshair")
	Something(className, s_guid, "weaponPickupSound", s_Instance.weaponPickupSound, "CtrRef")
end

function Type:VeniceMapMarkerHudData (p_class, p_guid)
	local s_Instance = VeniceMapMarkerHudData(p_class) 
 	local className = "VeniceMapMarkerHudData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "icon", s_Instance.icon, "UIHudIcon")
end

function Type:VeniceMatchmakingLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceMatchmakingLevelDescriptionComponent(p_class) 
 	local className = "VeniceMatchmakingLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "licenses", s_Instance.licenses, "List<string)>")
	Something(className, s_guid, "mod", s_Instance.mod, "string")
end

function Type:VeniceOnlineConfiguration (p_class, p_guid)
	local s_Instance = VeniceOnlineConfiguration(p_class) 
 	local className = "VeniceOnlineConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entitlementQueries", s_Instance.entitlementQueries, "List<CtrRef)>")
	Something(className, s_guid, "platforms", s_Instance.platforms, "List<OnlinePlatformConfiguration)>")
	Something(className, s_guid, "useFallback", s_Instance.useFallback, "bool")
end

function Type:VeniceOnlineSettings (p_class, p_guid)
	local s_Instance = VeniceOnlineSettings(p_class) 
 	local className = "VeniceOnlineSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "battlelogReport", s_Instance.battlelogReport, "bool")
	Something(className, s_guid, "battlelogReportURL", s_Instance.battlelogReportURL, "string")
	Something(className, s_guid, "blazeLogLevel", s_Instance.blazeLogLevel, "int")
	Something(className, s_guid, "clientGameConfigurationOverride", s_Instance.clientGameConfigurationOverride, "string")
	Something(className, s_guid, "dirtySockLogLevel", s_Instance.dirtySockLogLevel, "int")
	Something(className, s_guid, "dogTagUploadPolicy", s_Instance.dogTagUploadPolicy, "DTagUploadPolicy")
	Something(className, s_guid, "enableQoS", s_Instance.enableQoS, "bool")
	Something(className, s_guid, "enableSnowroller", s_Instance.enableSnowroller, "bool")
	Something(className, s_guid, "entitlementQueries", s_Instance.entitlementQueries, "List<CtrRef)>")
	Something(className, s_guid, "matchFeedDetailsUrlPrefix", s_Instance.matchFeedDetailsUrlPrefix, "string")
	Something(className, s_guid, "matchFeedListUrlPrefix", s_Instance.matchFeedListUrlPrefix, "string")
	Something(className, s_guid, "matchFeedMaxFetchAttempts", s_Instance.matchFeedMaxFetchAttempts, "uint")
	Something(className, s_guid, "matchFeedMinimumMillisecondsBetweenMatchReloads", s_Instance.matchFeedMinimumMillisecondsBetweenMatchReloads, "uint")
	Something(className, s_guid, "matchFeedMinimumMillisecondsBetweenMatchRequests", s_Instance.matchFeedMinimumMillisecondsBetweenMatchRequests, "uint")
	Something(className, s_guid, "matchFeedMinimumMillisecondsBetweenNewRequestAttempt", s_Instance.matchFeedMinimumMillisecondsBetweenNewRequestAttempt, "uint")
	Something(className, s_guid, "matchFeedMinimumMillisecondsBetweenRequests", s_Instance.matchFeedMinimumMillisecondsBetweenRequests, "uint")
	Something(className, s_guid, "matchImagesUrlPrefix", s_Instance.matchImagesUrlPrefix, "string")
	Something(className, s_guid, "pingPeriod", s_Instance.pingPeriod, "uint")
	Something(className, s_guid, "platforms", s_Instance.platforms, "List<OnlinePlatformConfiguration)>")
	Something(className, s_guid, "punkBusterActivateClient", s_Instance.punkBusterActivateClient, "bool")
	Something(className, s_guid, "punkBusterActivateServer", s_Instance.punkBusterActivateServer, "bool")
	Something(className, s_guid, "queueCapacityOverride", s_Instance.queueCapacityOverride, "int")
	Something(className, s_guid, "serviceNameOverride", s_Instance.serviceNameOverride, "string")
	Something(className, s_guid, "snowrollerOrphanTimeout", s_Instance.snowrollerOrphanTimeout, "float")
	Something(className, s_guid, "useFallback", s_Instance.useFallback, "bool")
	Something(className, s_guid, "webFeedCountUrlPrefix", s_Instance.webFeedCountUrlPrefix, "string")
	Something(className, s_guid, "webFeedMaxFetchAttempts", s_Instance.webFeedMaxFetchAttempts, "uint")
	Something(className, s_guid, "webFeedMaxItems", s_Instance.webFeedMaxItems, "uint")
	Something(className, s_guid, "webFeedMillisecondsBetweenNewRequestAttempt", s_Instance.webFeedMillisecondsBetweenNewRequestAttempt, "uint")
	Something(className, s_guid, "webFeedMinimumMillisecondsBetweenRequests", s_Instance.webFeedMinimumMillisecondsBetweenRequests, "uint")
	Something(className, s_guid, "webFeedUnreadCountFetchPeriod", s_Instance.webFeedUnreadCountFetchPeriod, "uint")
	Something(className, s_guid, "webFeedUrlPrefix", s_Instance.webFeedUrlPrefix, "string")
end

function Type:VeniceRichPresenceLevelDescriptionComponent (p_class, p_guid)
	local s_Instance = VeniceRichPresenceLevelDescriptionComponent(p_class) 
 	local className = "VeniceRichPresenceLevelDescriptionComponent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "contextValues", s_Instance.contextValues, "List<RichPresenceContextSetting)>")
	Something(className, s_guid, "presenceMode", s_Instance.presenceMode, "CtrRef")
end

function Type:VeniceSoldierHealthModuleData (p_class, p_guid)
	local s_Instance = VeniceSoldierHealthModuleData(p_class) 
 	local className = "VeniceSoldierHealthModuleData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "abortSpawnImmortalityInputs", s_Instance.abortSpawnImmortalityInputs, "List<EntryInputActionEnum)>")
	Something(className, s_guid, "binding", s_Instance.binding, "SoldierHealthModuleBinding")
	Something(className, s_guid, "criticalFakeImmortalTime", s_Instance.criticalFakeImmortalTime, "float")
	Something(className, s_guid, "immortalTimeAfterSpawn", s_Instance.immortalTimeAfterSpawn, "float")
	Something(className, s_guid, "interactiveManDown", s_Instance.interactiveManDown, "bool")
	Something(className, s_guid, "interactiveManDownPoseConstraints", s_Instance.interactiveManDownPoseConstraints, "PoseConstraintsData")
	Something(className, s_guid, "interactiveManDownThreshold", s_Instance.interactiveManDownThreshold, "float")
	Something(className, s_guid, "manDownRotate", s_Instance.manDownRotate, "RotateToHitData")
	Something(className, s_guid, "manDownStateHealthPoints", s_Instance.manDownStateHealthPoints, "float")
	Something(className, s_guid, "manDownStateTime", s_Instance.manDownStateTime, "float")
	Something(className, s_guid, "postReviveHealth", s_Instance.postReviveHealth, "float")
	Something(className, s_guid, "postReviveResponseTime", s_Instance.postReviveResponseTime, "float")
	Something(className, s_guid, "regenerationDelay", s_Instance.regenerationDelay, "float")
	Something(className, s_guid, "regenerationRate", s_Instance.regenerationRate, "float")
	Something(className, s_guid, "sprintDisabledDamageThreshold", s_Instance.sprintDisabledDamageThreshold, "float")
	Something(className, s_guid, "sprintDisabledWhenDamagedTime", s_Instance.sprintDisabledWhenDamagedTime, "float")
	Something(className, s_guid, "timeForCorpse", s_Instance.timeForCorpse, "float")
	Something(className, s_guid, "veniceSoldierHealthModuleData", s_Instance.veniceSoldierHealthModuleData,  "readonly")
	Something(className, s_guid, "entryInputActionEnum", s_Instance.entryInputActionEnum,  "uint")
end

function Type:VeniceUICombatAreaAsset (p_class, p_guid)
	local s_Instance = VeniceUICombatAreaAsset(p_class) 
 	local className = "VeniceUICombatAreaAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "distanceField", s_Instance.distanceField, "CtrRef")
	Something(className, s_guid, "surroundingDistanceField", s_Instance.surroundingDistanceField, "CtrRef")
end

function Type:VeniceUIConfiguration (p_class, p_guid)
	local s_Instance = VeniceUIConfiguration(p_class) 
 	local className = "VeniceUIConfiguration"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "metaDataAssetPath", s_Instance.metaDataAssetPath, "string")
end

function Type:VeniceUISettings (p_class, p_guid)
	local s_Instance = VeniceUISettings(p_class) 
 	local className = "VeniceUISettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "getStatsInOnlineFlow", s_Instance.getStatsInOnlineFlow, "bool")
	Something(className, s_guid, "metaDataAssetPath", s_Instance.metaDataAssetPath, "string")
end

function Type:VeniceUnlockUserData (p_class, p_guid)
	local s_Instance = VeniceUnlockUserData(p_class) 
 	local className = "VeniceUnlockUserData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "checkSquad", s_Instance.checkSquad, "bool")
end

function Type:VeniceVehicleCustomizationAsset (p_class, p_guid)
	local s_Instance = VeniceVehicleCustomizationAsset(p_class) 
 	local className = "VeniceVehicleCustomizationAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "category", s_Instance.category, "VehicleCategory")
	Something(className, s_guid, "nameSid", s_Instance.nameSid, "string")
end

function Type:VersionData (p_class, p_guid)
	local s_Instance = VersionData(p_class) 
 	local className = "VersionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "branchId", s_Instance.branchId, "string")
	Something(className, s_guid, "dateTime", s_Instance.dateTime, "string")
	Something(className, s_guid, "disclaimer", s_Instance.disclaimer, "string")
	Something(className, s_guid, "gameName", s_Instance.gameName, "string")
	Something(className, s_guid, "version", s_Instance.version, "int")
end

function Type:ViewFxData (p_class, p_guid)
	local s_Instance = ViewFxData(p_class) 
 	local className = "ViewFxData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blurAdd", s_Instance.blurAdd, "float")
	Something(className, s_guid, "colorTint", s_Instance.colorTint, "ColorTintData")
	Something(className, s_guid, "colorTintEnable", s_Instance.colorTintEnable, "bool")
	Something(className, s_guid, "poissonRadialBlur", s_Instance.poissonRadialBlur, "PoissonRadialBlurData")
	Something(className, s_guid, "poissonRadialBlurEnable", s_Instance.poissonRadialBlurEnable, "bool")
end

function Type:VignetteComponentData (p_class, p_guid)
	local s_Instance = VignetteComponentData(p_class) 
 	local className = "VignetteComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "color", s_Instance.color, "Vec3")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "exponent", s_Instance.exponent, "float")
	Something(className, s_guid, "opacity", s_Instance.opacity, "float")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "scale", s_Instance.scale, "Vec2")
end

function Type:VisionBoxSettings (p_class, p_guid)
	local s_Instance = VisionBoxSettings(p_class) 
 	local className = "VisionBoxSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "decreaseXz", s_Instance.decreaseXz, "float")
	Something(className, s_guid, "lowerTop", s_Instance.lowerTop, "float")
	Something(className, s_guid, "raiseBottom", s_Instance.raiseBottom, "float")
	Something(className, s_guid, "raiseBottomHuman", s_Instance.raiseBottomHuman, "float")
end

function Type:VisualEnvironmentEffectEntityData (p_class, p_guid)
	local s_Instance = VisualEnvironmentEffectEntityData(p_class) 
 	local className = "VisualEnvironmentEffectEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "cullAngleCurve", s_Instance.cullAngleCurve, "Vec4")
	Something(className, s_guid, "cullDistanceCurve", s_Instance.cullDistanceCurve, "Vec4")
	Something(className, s_guid, "lifetime", s_Instance.lifetime, "float")
	Something(className, s_guid, "lifetimeCurve", s_Instance.lifetimeCurve, "Vec4")
	Something(className, s_guid, "sampleOnStartOnly", s_Instance.sampleOnStartOnly, "bool")
	Something(className, s_guid, "visualEnvironment", s_Instance.visualEnvironment, "CtrRef")
end

function Type:VisualEnvironmentEntityData (p_class, p_guid)
	local s_Instance = VisualEnvironmentEntityData(p_class) 
 	local className = "VisualEnvironmentEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "priority", s_Instance.priority, "int")
	Something(className, s_guid, "visibility", s_Instance.visibility, "float")
end

function Type:VisualEnvironmentReferenceObjectData (p_class, p_guid)
	local s_Instance = VisualEnvironmentReferenceObjectData(p_class) 
 	local className = "VisualEnvironmentReferenceObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "overrideVisibility", s_Instance.overrideVisibility, "bool")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
end

function Type:VisualEnvironmentSettings (p_class, p_guid)
	local s_Instance = VisualEnvironmentSettings(p_class) 
 	local className = "VisualEnvironmentSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawStats", s_Instance.drawStats, "bool")
	Something(className, s_guid, "sunRotationX", s_Instance.sunRotationX, "float")
	Something(className, s_guid, "sunRotationY", s_Instance.sunRotationY, "float")
end

function Type:VisualTerrainEntityData (p_class, p_guid)
	local s_Instance = VisualTerrainEntityData(p_class) 
 	local className = "VisualTerrainEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "settings", s_Instance.settings, "CtrRef")
	Something(className, s_guid, "terrain", s_Instance.terrain, "CtrRef")
end

function Type:VisualTerrainSettings (p_class, p_guid)
	local s_Instance = VisualTerrainSettings(p_class) 
 	local className = "VisualTerrainSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "buildJobCount", s_Instance.buildJobCount, "uint")
	Something(className, s_guid, "buildSpuJobEnable", s_Instance.buildSpuJobEnable, "bool")
	Something(className, s_guid, "castShadowsEnable", s_Instance.castShadowsEnable, "bool")
	Something(className, s_guid, "cullSampleBoundingBoxHeightEnable", s_Instance.cullSampleBoundingBoxHeightEnable, "bool")
	Something(className, s_guid, "cullSpuJobEnable", s_Instance.cullSpuJobEnable, "bool")
	Something(className, s_guid, "debugOverlayBrushCoverageMin", s_Instance.debugOverlayBrushCoverageMin, "Vec2")
	Something(className, s_guid, "debugOverlayBrushEnable", s_Instance.debugOverlayBrushEnable, "bool")
	Something(className, s_guid, "debugOverlayBrushSize", s_Instance.debugOverlayBrushSize, "float")
	Something(className, s_guid, "debugOverlayGridEnable", s_Instance.debugOverlayGridEnable, "bool")
	Something(className, s_guid, "debugOverlayGridSize", s_Instance.debugOverlayGridSize, "float")
	Something(className, s_guid, "debugOverlayIsolinesEnable", s_Instance.debugOverlayIsolinesEnable, "bool")
	Something(className, s_guid, "debugOverlayIsolineSpacing", s_Instance.debugOverlayIsolineSpacing, "float")
	Something(className, s_guid, "debugOverlaySketchTextureEnable", s_Instance.debugOverlaySketchTextureEnable, "bool")
	Something(className, s_guid, "debugOverlayWireframeEnable", s_Instance.debugOverlayWireframeEnable, "bool")
	Something(className, s_guid, "decal3dFarDrawDistanceScaleFactor", s_Instance.decal3dFarDrawDistanceScaleFactor, "float")
	Something(className, s_guid, "decalEnable", s_Instance.decalEnable, "bool")
	Something(className, s_guid, "decalOffsetY", s_Instance.decalOffsetY, "float")
	Something(className, s_guid, "decalZPassDrawDistance", s_Instance.decalZPassDrawDistance, "float")
	Something(className, s_guid, "destroyAll", s_Instance.destroyAll, "bool")
	Something(className, s_guid, "detailOverlayEnable", s_Instance.detailOverlayEnable, "bool")
	Something(className, s_guid, "drawDebugTextEnable", s_Instance.drawDebugTextEnable, "bool")
	Something(className, s_guid, "drawDebugTexturesEnable", s_Instance.drawDebugTexturesEnable, "bool")
	Something(className, s_guid, "drawDecal2dEnable", s_Instance.drawDecal2dEnable, "bool")
	Something(className, s_guid, "drawDecal3dEnable", s_Instance.drawDecal3dEnable, "bool")
	Something(className, s_guid, "drawDecalZPassEnable", s_Instance.drawDecalZPassEnable, "bool")
	Something(className, s_guid, "drawEnable", s_Instance.drawEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringCellBoxesEnable", s_Instance.drawMeshScatteringCellBoxesEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringCulledCellBoxesEnable", s_Instance.drawMeshScatteringCulledCellBoxesEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringDebugMaskScaleTexturesEnable", s_Instance.drawMeshScatteringDebugMaskScaleTexturesEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringEnable", s_Instance.drawMeshScatteringEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringInstanceBoxesEnable", s_Instance.drawMeshScatteringInstanceBoxesEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringNodeBoxesEnable", s_Instance.drawMeshScatteringNodeBoxesEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringQuadtreeEnable", s_Instance.drawMeshScatteringQuadtreeEnable, "bool")
	Something(className, s_guid, "drawMeshScatteringStatsEnable", s_Instance.drawMeshScatteringStatsEnable, "bool")
	Something(className, s_guid, "drawOnlyDecalZPassEnable", s_Instance.drawOnlyDecalZPassEnable, "bool")
	Something(className, s_guid, "drawPatchBoxesEnable", s_Instance.drawPatchBoxesEnable, "bool")
	Something(className, s_guid, "drawPatchesEnable", s_Instance.drawPatchesEnable, "bool")
	Something(className, s_guid, "drawQuadtreeAtlasTexturesEnable", s_Instance.drawQuadtreeAtlasTexturesEnable, "bool")
	Something(className, s_guid, "drawQuadtreesEnable", s_Instance.drawQuadtreesEnable, "bool")
	Something(className, s_guid, "drawQuadtreeStatsEnable", s_Instance.drawQuadtreeStatsEnable, "bool")
	Something(className, s_guid, "drawQuadtreeZoomIndex", s_Instance.drawQuadtreeZoomIndex, "int")
	Something(className, s_guid, "drawTextureDebugColors", s_Instance.drawTextureDebugColors, "bool")
	Something(className, s_guid, "drawTextureDebugDepthComplexity", s_Instance.drawTextureDebugDepthComplexity, "bool")
	Something(className, s_guid, "drawTextureTileBoxesEnable", s_Instance.drawTextureTileBoxesEnable, "bool")
	Something(className, s_guid, "drawVertexYTextureEnable", s_Instance.drawVertexYTextureEnable, "bool")
	Something(className, s_guid, "drawWaterEnable", s_Instance.drawWaterEnable, "bool")
	Something(className, s_guid, "dxDisplacementMappingEnable", s_Instance.dxDisplacementMappingEnable, "bool")
	Something(className, s_guid, "dxTessellatedTriWidth", s_Instance.dxTessellatedTriWidth, "float")
	Something(className, s_guid, "dxTessellationPatchFacesPerSide", s_Instance.dxTessellationPatchFacesPerSide, "uint")
	Something(className, s_guid, "dxTessellationPatchShrink", s_Instance.dxTessellationPatchShrink, "float")
	Something(className, s_guid, "dynamicMaskDecalWidthScale", s_Instance.dynamicMaskDecalWidthScale, "float")
	Something(className, s_guid, "dynamicMaskEnable", s_Instance.dynamicMaskEnable, "bool")
	Something(className, s_guid, "editServiceEnable", s_Instance.editServiceEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "forceDecalReducedQuality", s_Instance.forceDecalReducedQuality, "bool")
	Something(className, s_guid, "forceGraphicsDriverCrash", s_Instance.forceGraphicsDriverCrash, "bool")
	Something(className, s_guid, "forcePatchRebuildEnable", s_Instance.forcePatchRebuildEnable, "bool")
	Something(className, s_guid, "globalColormapEnable", s_Instance.globalColormapEnable, "bool")
	Something(className, s_guid, "gpuTextureCompressionEnable", s_Instance.gpuTextureCompressionEnable, "bool")
	Something(className, s_guid, "lodCenterExtrapolationDistanceMax", s_Instance.lodCenterExtrapolationDistanceMax, "float")
	Something(className, s_guid, "lodCenterExtrapolationTime", s_Instance.lodCenterExtrapolationTime, "float")
	Something(className, s_guid, "lodScale", s_Instance.lodScale, "float")
	Something(className, s_guid, "maxNonVisibleTextureUpdateCount", s_Instance.maxNonVisibleTextureUpdateCount, "uint")
	Something(className, s_guid, "meshScatteringBuildChannelCount", s_Instance.meshScatteringBuildChannelCount, "uint")
	Something(className, s_guid, "meshScatteringBuildChannelsLaunchedPerFrameCountMax", s_Instance.meshScatteringBuildChannelsLaunchedPerFrameCountMax, "uint")
	Something(className, s_guid, "meshScatteringBuildVisibleFirst", s_Instance.meshScatteringBuildVisibleFirst, "bool")
	Something(className, s_guid, "meshScatteringCastShadowsEnable", s_Instance.meshScatteringCastShadowsEnable, "bool")
	Something(className, s_guid, "meshScatteringCellPoolCapacity", s_Instance.meshScatteringCellPoolCapacity, "uint")
	Something(className, s_guid, "meshScatteringClodFrameCount", s_Instance.meshScatteringClodFrameCount, "uint")
	Something(className, s_guid, "meshScatteringCullRecordCount", s_Instance.meshScatteringCullRecordCount, "uint")
	Something(className, s_guid, "meshScatteringCullSpuJobEnable", s_Instance.meshScatteringCullSpuJobEnable, "bool")
	Something(className, s_guid, "meshScatteringDensityMarginFactor", s_Instance.meshScatteringDensityMarginFactor, "float")
	Something(className, s_guid, "meshScatteringDensityScaleFactor", s_Instance.meshScatteringDensityScaleFactor, "float")
	Something(className, s_guid, "meshScatteringDistanceScaleFactor", s_Instance.meshScatteringDistanceScaleFactor, "float")
	Something(className, s_guid, "meshScatteringEnable", s_Instance.meshScatteringEnable, "bool")
	Something(className, s_guid, "meshScatteringForceUpdateEnable", s_Instance.meshScatteringForceUpdateEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceAdditionalCullEnable", s_Instance.meshScatteringInstanceAdditionalCullEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceCountLodEnable", s_Instance.meshScatteringInstanceCountLodEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceCullBoxTestEnable", s_Instance.meshScatteringInstanceCullBoxTestEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceCullDynamicAllocEnable", s_Instance.meshScatteringInstanceCullDynamicAllocEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceCullEnable", s_Instance.meshScatteringInstanceCullEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceCullJobCount", s_Instance.meshScatteringInstanceCullJobCount, "uint")
	Something(className, s_guid, "meshScatteringInstanceCullListCount", s_Instance.meshScatteringInstanceCullListCount, "uint")
	Something(className, s_guid, "meshScatteringInstanceCullSpuJobEnable", s_Instance.meshScatteringInstanceCullSpuJobEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceFrustumCullEnable", s_Instance.meshScatteringInstanceFrustumCullEnable, "bool")
	Something(className, s_guid, "meshScatteringInstanceOcclusionCullEnable", s_Instance.meshScatteringInstanceOcclusionCullEnable, "bool")
	Something(className, s_guid, "meshScatteringInstancesPerCellMax", s_Instance.meshScatteringInstancesPerCellMax, "uint")
	Something(className, s_guid, "meshScatteringInvisibleCellFovFactor", s_Instance.meshScatteringInvisibleCellFovFactor, "float")
	Something(className, s_guid, "meshScatteringJobsEnable", s_Instance.meshScatteringJobsEnable, "bool")
	Something(className, s_guid, "meshScatteringPregenerationDistanceRatio", s_Instance.meshScatteringPregenerationDistanceRatio, "float")
	Something(className, s_guid, "meshScatteringPrioritizationSpuJobEnable", s_Instance.meshScatteringPrioritizationSpuJobEnable, "bool")
	Something(className, s_guid, "meshScatteringSpuJobEnable", s_Instance.meshScatteringSpuJobEnable, "bool")
	Something(className, s_guid, "meshScatteringTreeNodePoolCapacity", s_Instance.meshScatteringTreeNodePoolCapacity, "uint")
	Something(className, s_guid, "meshScatteringWindSpeed", s_Instance.meshScatteringWindSpeed, "float")
	Something(className, s_guid, "occludedEnable", s_Instance.occludedEnable, "bool")
	Something(className, s_guid, "occludedMinDistance", s_Instance.occludedMinDistance, "float")
	Something(className, s_guid, "occluderEnable", s_Instance.occluderEnable, "bool")
	Something(className, s_guid, "occluderJobEnable", s_Instance.occluderJobEnable, "bool")
	Something(className, s_guid, "occluderLodBoostLevelCount", s_Instance.occluderLodBoostLevelCount, "uint")
	Something(className, s_guid, "occluderSpuJobEnable", s_Instance.occluderSpuJobEnable, "bool")
	Something(className, s_guid, "patchErrorFov", s_Instance.patchErrorFov, "float")
	Something(className, s_guid, "patchErrorFovEnable", s_Instance.patchErrorFovEnable, "bool")
	Something(className, s_guid, "patchFacesPerSide", s_Instance.patchFacesPerSide, "uint")
	Something(className, s_guid, "patchLodTransitionsEnable", s_Instance.patchLodTransitionsEnable, "bool")
	Something(className, s_guid, "patchMaterialSortingEnable", s_Instance.patchMaterialSortingEnable, "bool")
	Something(className, s_guid, "patchSlotCount", s_Instance.patchSlotCount, "uint")
	Something(className, s_guid, "prepareBuildSpuJobEnable", s_Instance.prepareBuildSpuJobEnable, "bool")
	Something(className, s_guid, "prioritizationOcclusionEnable", s_Instance.prioritizationOcclusionEnable, "bool")
	Something(className, s_guid, "prioritizationSpuJobEnable", s_Instance.prioritizationSpuJobEnable, "bool")
	Something(className, s_guid, "ps3MeshScatteringInstanceCellMemoryEnable", s_Instance.ps3MeshScatteringInstanceCellMemoryEnable, "bool")
	Something(className, s_guid, "regenerateTexturesEnable", s_Instance.regenerateTexturesEnable, "bool")
	Something(className, s_guid, "renderMode", s_Instance.renderMode, "TerrainRenderMode")
	Something(className, s_guid, "slotDebugOutputEnable", s_Instance.slotDebugOutputEnable, "bool")
	Something(className, s_guid, "slotReuseWaitCount", s_Instance.slotReuseWaitCount, "uint")
	Something(className, s_guid, "tessellationFacesPerSideMin", s_Instance.tessellationFacesPerSideMin, "uint")
	Something(className, s_guid, "textureAtlasSampleCountXFactor", s_Instance.textureAtlasSampleCountXFactor, "uint")
	Something(className, s_guid, "textureAtlasSampleCountYFactor", s_Instance.textureAtlasSampleCountYFactor, "uint")
	Something(className, s_guid, "textureBlockOnStreamingEnable", s_Instance.textureBlockOnStreamingEnable, "bool")
	Something(className, s_guid, "textureClodCutoffPriority", s_Instance.textureClodCutoffPriority, "float")
	Something(className, s_guid, "textureClodEnable", s_Instance.textureClodEnable, "bool")
	Something(className, s_guid, "textureClodFrameCount", s_Instance.textureClodFrameCount, "uint")
	Something(className, s_guid, "textureCompressFastAlgorithmEnable", s_Instance.textureCompressFastAlgorithmEnable, "bool")
	Something(className, s_guid, "textureCompressionQuality", s_Instance.textureCompressionQuality, "int")
	Something(className, s_guid, "textureCompressJobCount", s_Instance.textureCompressJobCount, "uint")
	Something(className, s_guid, "textureCompressSpuJobsEnable", s_Instance.textureCompressSpuJobsEnable, "bool")
	Something(className, s_guid, "textureDetailFalloffCurve", s_Instance.textureDetailFalloffCurve, "float")
	Something(className, s_guid, "textureDetailFalloffDistance", s_Instance.textureDetailFalloffDistance, "float")
	Something(className, s_guid, "textureDetailFalloffFactor", s_Instance.textureDetailFalloffFactor, "float")
	Something(className, s_guid, "textureDetailSlopeBoost", s_Instance.textureDetailSlopeBoost, "float")
	Something(className, s_guid, "textureDrawTerrainLayersEnable", s_Instance.textureDrawTerrainLayersEnable, "bool")
	Something(className, s_guid, "textureForceUpdateEnable", s_Instance.textureForceUpdateEnable, "bool")
	Something(className, s_guid, "textureGenerationMipBias", s_Instance.textureGenerationMipBias, "float")
	Something(className, s_guid, "textureInvisibleDetailReductionFactor", s_Instance.textureInvisibleDetailReductionFactor, "float")
	Something(className, s_guid, "textureKeepPoolFullEnable", s_Instance.textureKeepPoolFullEnable, "bool")
	Something(className, s_guid, "textureLayerCullingEnable", s_Instance.textureLayerCullingEnable, "bool")
	Something(className, s_guid, "textureLevelOffset", s_Instance.textureLevelOffset, "int")
	Something(className, s_guid, "textureOccludedDetailReductionFactor", s_Instance.textureOccludedDetailReductionFactor, "float")
	Something(className, s_guid, "textureQuadsPerTileLevel", s_Instance.textureQuadsPerTileLevel, "uint")
	Something(className, s_guid, "textureRenderJobCount", s_Instance.textureRenderJobCount, "uint")
	Something(className, s_guid, "textureRenderJobsLaunchedPerFrameCountMax", s_Instance.textureRenderJobsLaunchedPerFrameCountMax, "uint")
	Something(className, s_guid, "textureSamplesPerMeterMax", s_Instance.textureSamplesPerMeterMax, "float")
	Something(className, s_guid, "textureTileBorderWidth", s_Instance.textureTileBorderWidth, "uint")
	Something(className, s_guid, "textureTileSamplesPerSide", s_Instance.textureTileSamplesPerSide, "uint")
	Something(className, s_guid, "textureVtIndirectionJobEnable", s_Instance.textureVtIndirectionJobEnable, "bool")
	Something(className, s_guid, "textureVtIndirectionSpuJobEnable", s_Instance.textureVtIndirectionSpuJobEnable, "bool")
	Something(className, s_guid, "triangleSizeMin", s_Instance.triangleSizeMin, "float")
	Something(className, s_guid, "updateJobsEnable", s_Instance.updateJobsEnable, "bool")
	Something(className, s_guid, "vertexBufferHeightsEnable", s_Instance.vertexBufferHeightsEnable, "bool")
	Something(className, s_guid, "waterDepthMetersPerSample", s_Instance.waterDepthMetersPerSample, "float")
	Something(className, s_guid, "wireframeEnable", s_Instance.wireframeEnable, "bool")
	Something(className, s_guid, "zeroViewportEnable", s_Instance.zeroViewportEnable, "bool")
	Something(className, s_guid, "zPassDistance", s_Instance.zPassDistance, "float")
end

function Type:VisualVectorShapeData (p_class, p_guid)
	local s_Instance = VisualVectorShapeData(p_class) 
 	local className = "VisualVectorShapeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "drawOrderIndex", s_Instance.drawOrderIndex, "uint")
	Something(className, s_guid, "errorTolerance", s_Instance.errorTolerance, "float")
	Something(className, s_guid, "shader3d", s_Instance.shader3d, "CtrRef")
	Something(className, s_guid, "tessellationTriangleSize", s_Instance.tessellationTriangleSize, "float")
end

function Type:VoiceOverArithmeticNode (p_class, p_guid)
	local s_Instance = VoiceOverArithmeticNode(p_class) 
 	local className = "VoiceOverArithmeticNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "CtrRef")
	Something(className, s_guid, "b", s_Instance.b, "CtrRef")
	Something(className, s_guid, "operation", s_Instance.operation, "VoiceOverArithmeticExpressionType")
	Something(className, s_guid, "result", s_Instance.result, "CtrRef")
end

function Type:VoiceOverCompareNode (p_class, p_guid)
	local s_Instance = VoiceOverCompareNode(p_class) 
 	local className = "VoiceOverCompareNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "CtrRef")
	Something(className, s_guid, "b", s_Instance.b, "CtrRef")
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "operation", s_Instance.operation, "VoiceOverCompareExpressionType")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:VoiceOverConstantBooleanValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantBooleanValue(p_class) 
 	local className = "VoiceOverConstantBooleanValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "bool")
end

function Type:VoiceOverConstantFloatValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantFloatValue(p_class) 
 	local className = "VoiceOverConstantFloatValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "float")
end

function Type:VoiceOverConstantGlobalValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantGlobalValue(p_class) 
 	local className = "VoiceOverConstantGlobalValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:VoiceOverConstantIntegerValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantIntegerValue(p_class) 
 	local className = "VoiceOverConstantIntegerValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "int")
end

function Type:VoiceOverConstantNode (p_class, p_guid)
	local s_Instance = VoiceOverConstantNode(p_class) 
 	local className = "VoiceOverConstantNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:VoiceOverConstantVectorValue (p_class, p_guid)
	local s_Instance = VoiceOverConstantVectorValue(p_class) 
 	local className = "VoiceOverConstantVectorValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "Vec4")
end

function Type:VoiceOverContainerNode (p_class, p_guid)
	local s_Instance = VoiceOverContainerNode(p_class) 
 	local className = "VoiceOverContainerNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "condition", s_Instance.condition, "List<CtrRef)>")
	Something(className, s_guid, "conditionMode", s_Instance.conditionMode, "VoiceOverContainerConditionMode")
	Something(className, s_guid, "falseRelationship", s_Instance.falseRelationship, "List<CtrRef)>")
	Something(className, s_guid, "interval", s_Instance.interval, "CtrRef")
	Something(className, s_guid, "probability", s_Instance.probability, "float")
	Something(className, s_guid, "trueRelationship", s_Instance.trueRelationship, "List<CtrRef)>")
end

function Type:VoiceOverConversationGroupEntityData (p_class, p_guid)
	local s_Instance = VoiceOverConversationGroupEntityData(p_class) 
 	local className = "VoiceOverConversationGroupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "queueGroup", s_Instance.queueGroup, "CtrRef")
end

function Type:VoiceOverConversationNode (p_class, p_guid)
	local s_Instance = VoiceOverConversationNode(p_class) 
 	local className = "VoiceOverConversationNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "blockedRelationship", s_Instance.blockedRelationship, "List<CtrRef)>")
	Something(className, s_guid, "condition", s_Instance.condition, "List<CtrRef)>")
	Something(className, s_guid, "conditionMode", s_Instance.conditionMode, "VoiceOverContainerConditionMode")
	Something(className, s_guid, "finishedRelationship", s_Instance.finishedRelationship, "List<CtrRef)>")
	Something(className, s_guid, "groups", s_Instance.groups, "List<CtrRef)>")
	Something(className, s_guid, "interruptMode", s_Instance.interruptMode, "VoiceOverConversationInterruptMode")
	Something(className, s_guid, "interval", s_Instance.interval, "CtrRef")
	Something(className, s_guid, "lastSequenceIndex", s_Instance.lastSequenceIndex, "sbyte")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
	Something(className, s_guid, "probability", s_Instance.probability, "float")
	Something(className, s_guid, "pronunciation", s_Instance.pronunciation, "CtrRef")
	Something(className, s_guid, "queueMode", s_Instance.queueMode, "VoiceOverConversationQueueMode")
	Something(className, s_guid, "relevancy", s_Instance.relevancy, "float")
	Something(className, s_guid, "trackCount", s_Instance.trackCount, "sbyte")
end

function Type:VoiceOverConversationQueueGroup (p_class, p_guid)
	local s_Instance = VoiceOverConversationQueueGroup(p_class) 
 	local className = "VoiceOverConversationQueueGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "polyphony", s_Instance.polyphony, "uint")
	Something(className, s_guid, "polyphonyMode", s_Instance.polyphonyMode, "VoiceOverConversationQueueGroupPolyphony")
end

function Type:VoiceOverDialogClip (p_class, p_guid)
	local s_Instance = VoiceOverDialogClip(p_class) 
 	local className = "VoiceOverDialogClip"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "CtrRef")
	Something(className, s_guid, "offset", s_Instance.offset, "float")
	Something(className, s_guid, "offsetReferences", s_Instance.offsetReferences, "List<CtrRef)>")
	Something(className, s_guid, "sequenceIndex", s_Instance.sequenceIndex, "sbyte")
	Something(className, s_guid, "takes", s_Instance.takes, "List<VoiceOverDialogTake)>")
end

function Type:VoiceOverDialogClipEvents (p_class, p_guid)
	local s_Instance = VoiceOverDialogClipEvents(p_class) 
 	local className = "VoiceOverDialogClipEvents"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "finishedNameHash", s_Instance.finishedNameHash, "uint")
	Something(className, s_guid, "startedNameHash", s_Instance.startedNameHash, "uint")
end

function Type:VoiceOverDialogGroup (p_class, p_guid)
	local s_Instance = VoiceOverDialogGroup(p_class) 
 	local className = "VoiceOverDialogGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
	Something(className, s_guid, "tracks", s_Instance.tracks, "List<CtrRef)>")
end

function Type:VoiceOverDialogTake (p_class, p_guid)
	local s_Instance = VoiceOverDialogTake(p_class) 
 	local className = "VoiceOverDialogTake"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "wave", s_Instance.wave, "CtrRef")
end

function Type:VoiceOverDialogTakeMapping (p_class, p_guid)
	local s_Instance = VoiceOverDialogTakeMapping(p_class) 
 	local className = "VoiceOverDialogTakeMapping"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "takeControlMax", s_Instance.takeControlMax, "float")
	Something(className, s_guid, "takeControlMin", s_Instance.takeControlMin, "float")
	Something(className, s_guid, "takeIndex", s_Instance.takeIndex, "sbyte")
end

function Type:VoiceOverDialogTrack (p_class, p_guid)
	local s_Instance = VoiceOverDialogTrack(p_class) 
 	local className = "VoiceOverDialogTrack"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "clips", s_Instance.clips, "List<CtrRef)>")
	Something(className, s_guid, "output", s_Instance.output, "CtrRef")
	Something(className, s_guid, "parentTrackIndex", s_Instance.parentTrackIndex, "sbyte")
	Something(className, s_guid, "queueGroup", s_Instance.queueGroup, "CtrRef")
	Something(className, s_guid, "samplerNode", s_Instance.samplerNode, "CtrRef")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "takeControl", s_Instance.takeControl, "CtrRef")
	Something(className, s_guid, "takeIndexMapping", s_Instance.takeIndexMapping, "List<VoiceOverDialogTakeMapping)>")
	Something(className, s_guid, "takeSwitching", s_Instance.takeSwitching, "VoiceOverDialogTakeBehavior")
	Something(className, s_guid, "takeSwitchingOnResume", s_Instance.takeSwitchingOnResume, "bool")
end

function Type:VoiceOverDistanceNode (p_class, p_guid)
	local s_Instance = VoiceOverDistanceNode(p_class) 
 	local className = "VoiceOverDistanceNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "a", s_Instance.a, "CtrRef")
	Something(className, s_guid, "b", s_Instance.b, "CtrRef")
	Something(className, s_guid, "distance", s_Instance.distance, "CtrRef")
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "operation", s_Instance.operation, "VoiceOverCompareExpressionType")
	Something(className, s_guid, "threshold", s_Instance.threshold, "CtrRef")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:VoiceOverEvent (p_class, p_guid)
	local s_Instance = VoiceOverEvent(p_class) 
 	local className = "VoiceOverEvent"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "owner", s_Instance.owner, "CtrRef")
	Something(className, s_guid, "parameters", s_Instance.parameters, "List<CtrRef)>")
end

function Type:VoiceOverEventEntityData (p_class, p_guid)
	local s_Instance = VoiceOverEventEntityData(p_class) 
 	local className = "VoiceOverEventEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventPlayer", s_Instance.eventPlayer, "CtrRef")
	Something(className, s_guid, "extraEventPlayer", s_Instance.extraEventPlayer, "CtrRef")
	Something(className, s_guid, "finishedDelay", s_Instance.finishedDelay, "float")
	Something(className, s_guid, "runOnce", s_Instance.runOnce, "bool")
	Something(className, s_guid, "triggerDelay", s_Instance.triggerDelay, "float")
	Something(className, s_guid, "voEvent", s_Instance.voEvent, "CtrRef")
end

function Type:VoiceOverEventNode (p_class, p_guid)
	local s_Instance = VoiceOverEventNode(p_class) 
 	local className = "VoiceOverEventNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "event", s_Instance.event, "CtrRef")
	Something(className, s_guid, "interval", s_Instance.interval, "CtrRef")
	Something(className, s_guid, "redirects", s_Instance.redirects, "List<CtrRef)>")
	Something(className, s_guid, "relationship", s_Instance.relationship, "List<CtrRef)>")
end

function Type:VoiceOverGlobalConstantValue (p_class, p_guid)
	local s_Instance = VoiceOverGlobalConstantValue(p_class) 
 	local className = "VoiceOverGlobalConstantValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:VoiceOverGlobalNode (p_class, p_guid)
	local s_Instance = VoiceOverGlobalNode(p_class) 
 	local className = "VoiceOverGlobalNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "field", s_Instance.field, "CtrRef")
	Something(className, s_guid, "object", s_Instance.object, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:VoiceOverGroup (p_class, p_guid)
	local s_Instance = VoiceOverGroup(p_class) 
 	local className = "VoiceOverGroup"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "priority", s_Instance.priority, "int")
end

function Type:VoiceOverInfoNode (p_class, p_guid)
	local s_Instance = VoiceOverInfoNode(p_class) 
 	local className = "VoiceOverInfoNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "expectedType", s_Instance.expectedType, "CtrRef")
	Something(className, s_guid, "field", s_Instance.field, "CtrRef")
	Something(className, s_guid, "object", s_Instance.object, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:VoiceOverInterval (p_class, p_guid)
	local s_Instance = VoiceOverInterval(p_class) 
 	local className = "VoiceOverInterval"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:VoiceOverIntervalNode (p_class, p_guid)
	local s_Instance = VoiceOverIntervalNode(p_class) 
 	local className = "VoiceOverIntervalNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "interval", s_Instance.interval, "CtrRef")
	Something(className, s_guid, "threshold", s_Instance.threshold, "CtrRef")
	Something(className, s_guid, "time", s_Instance.time, "CtrRef")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:VoiceOverLabel (p_class, p_guid)
	local s_Instance = VoiceOverLabel(p_class) 
 	local className = "VoiceOverLabel"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:VoiceOverLabelNode (p_class, p_guid)
	local s_Instance = VoiceOverLabelNode(p_class) 
 	local className = "VoiceOverLabelNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "sourceMode", s_Instance.sourceMode, "VoiceOverLabelSourceMode")
	Something(className, s_guid, "sources", s_Instance.sources, "List<CtrRef)>")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
	Something(className, s_guid, "unwantedCompareMode", s_Instance.unwantedCompareMode, "VoiceOverLabelCompareMode")
	Something(className, s_guid, "unwantedLabels", s_Instance.unwantedLabels, "List<CtrRef)>")
	Something(className, s_guid, "wantedCompareMode", s_Instance.wantedCompareMode, "VoiceOverLabelCompareMode")
	Something(className, s_guid, "wantedLabels", s_Instance.wantedLabels, "List<CtrRef)>")
end

function Type:VoiceOverLabelSource (p_class, p_guid)
	local s_Instance = VoiceOverLabelSource(p_class) 
 	local className = "VoiceOverLabelSource"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:VoiceOverLanguageRoot (p_class, p_guid)
	local s_Instance = VoiceOverLanguageRoot(p_class) 
 	local className = "VoiceOverLanguageRoot"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "language", s_Instance.language, "CtrRef")
	Something(className, s_guid, "path", s_Instance.path, "string")
end

function Type:VoiceOverLogicAsset (p_class, p_guid)
	local s_Instance = VoiceOverLogicAsset(p_class) 
 	local className = "VoiceOverLogicAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "events", s_Instance.events, "List<CtrRef)>")
	Something(className, s_guid, "flows", s_Instance.flows, "List<CtrRef)>")
	Something(className, s_guid, "groups", s_Instance.groups, "List<CtrRef)>")
	Something(className, s_guid, "system", s_Instance.system, "CtrRef")
end

function Type:VoiceOverLogicFlow (p_class, p_guid)
	local s_Instance = VoiceOverLogicFlow(p_class) 
 	local className = "VoiceOverLogicFlow"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "group", s_Instance.group, "CtrRef")
	Something(className, s_guid, "locals", s_Instance.locals, "List<CtrRef)>")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "roots", s_Instance.roots, "List<CtrRef)>")
end

function Type:VoiceOverManuscriptAsset (p_class, p_guid)
	local s_Instance = VoiceOverManuscriptAsset(p_class) 
 	local className = "VoiceOverManuscriptAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowDelete", s_Instance.allowDelete, "bool")
	Something(className, s_guid, "characterColumn", s_Instance.characterColumn, "string")
	Something(className, s_guid, "fileNameColumn", s_Instance.fileNameColumn, "string")
	Something(className, s_guid, "firstContentRow", s_Instance.firstContentRow, "int")
	Something(className, s_guid, "keepPath", s_Instance.keepPath, "bool")
	Something(className, s_guid, "languageColumns", s_Instance.languageColumns, "List<VoiceOverManuscriptLanguageColumns)>")
	Something(className, s_guid, "languages", s_Instance.languages, "List<CtrRef)>")
	Something(className, s_guid, "masterLanguage", s_Instance.masterLanguage, "CtrRef")
	Something(className, s_guid, "nameTranslation", s_Instance.nameTranslation, "VoiceOverWaveNameTranslation")
	Something(className, s_guid, "outputPath", s_Instance.outputPath, "string")
	Something(className, s_guid, "pathColumn", s_Instance.pathColumn, "string")
	Something(className, s_guid, "sheetName", s_Instance.sheetName, "string")
	Something(className, s_guid, "streamPool", s_Instance.streamPool, "CtrRef")
	Something(className, s_guid, "stringIdColumn", s_Instance.stringIdColumn, "string")
	Something(className, s_guid, "stringIdPrefix", s_Instance.stringIdPrefix, "string")
	Something(className, s_guid, "stringIdUpperCase", s_Instance.stringIdUpperCase, "bool")
	Something(className, s_guid, "voiceColumn", s_Instance.voiceColumn, "string")
	Something(className, s_guid, "waveAssetStatusColumn", s_Instance.waveAssetStatusColumn, "string")
end

function Type:VoiceOverManuscriptLanguageColumns (p_class, p_guid)
	local s_Instance = VoiceOverManuscriptLanguageColumns(p_class) 
 	local className = "VoiceOverManuscriptLanguageColumns"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "language", s_Instance.language, "CtrRef")
	Something(className, s_guid, "subtitleOffsetColumn", s_Instance.subtitleOffsetColumn, "string")
	Something(className, s_guid, "textColumn", s_Instance.textColumn, "string")
end

function Type:VoiceOverNamedValue (p_class, p_guid)
	local s_Instance = VoiceOverNamedValue(p_class) 
 	local className = "VoiceOverNamedValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
end

function Type:VoiceOverObject (p_class, p_guid)
	local s_Instance = VoiceOverObject(p_class) 
 	local className = "VoiceOverObject"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "properties", s_Instance.properties, "List<CtrRef)>")
end

function Type:VoiceOverProbabilityNode (p_class, p_guid)
	local s_Instance = VoiceOverProbabilityNode(p_class) 
 	local className = "VoiceOverProbabilityNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "false", s_Instance.falseValue, "CtrRef")
	Something(className, s_guid, "probability", s_Instance.probability, "float")
	Something(className, s_guid, "true", s_Instance.trueValue, "CtrRef")
end

function Type:VoiceOverPronunciation (p_class, p_guid)
	local s_Instance = VoiceOverPronunciation(p_class) 
 	local className = "VoiceOverPronunciation"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "primaryLanguage", s_Instance.primaryLanguage, "CtrRef")
	Something(className, s_guid, "secondaryFallback", s_Instance.secondaryFallback, "VoiceOverPronunciationFallback")
	Something(className, s_guid, "secondaryLanguage", s_Instance.secondaryLanguage, "CtrRef")
end

function Type:VoiceOverStructureConnection (p_class, p_guid)
	local s_Instance = VoiceOverStructureConnection(p_class) 
 	local className = "VoiceOverStructureConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "targetInput", s_Instance.targetInput, "CtrRef")
	Something(className, s_guid, "targetNode", s_Instance.targetNode, "CtrRef")
end

function Type:VoiceOverStructureNode (p_class, p_guid)
	local s_Instance = VoiceOverStructureNode(p_class) 
 	local className = "VoiceOverStructureNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "flowMode", s_Instance.flowMode, "VoiceOverLogicFlowMode")
end

function Type:VoiceOverSystemAsset (p_class, p_guid)
	local s_Instance = VoiceOverSystemAsset(p_class) 
 	local className = "VoiceOverSystemAsset"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "constants", s_Instance.constants, "List<CtrRef)>")
	Something(className, s_guid, "defaultPositionedQueueGroup", s_Instance.defaultPositionedQueueGroup, "CtrRef")
	Something(className, s_guid, "defaultPronunciation", s_Instance.defaultPronunciation, "CtrRef")
	Something(className, s_guid, "defaultUnpositionedQueueGroup", s_Instance.defaultUnpositionedQueueGroup, "CtrRef")
	Something(className, s_guid, "intervals", s_Instance.intervals, "List<CtrRef)>")
	Something(className, s_guid, "labels", s_Instance.labels, "List<CtrRef)>")
	Something(className, s_guid, "masterLanguage", s_Instance.masterLanguage, "CtrRef")
	Something(className, s_guid, "objects", s_Instance.objects, "List<CtrRef)>")
	Something(className, s_guid, "pronunciations", s_Instance.pronunciations, "List<CtrRef)>")
	Something(className, s_guid, "queueGroups", s_Instance.queueGroups, "List<CtrRef)>")
	Something(className, s_guid, "types", s_Instance.types, "List<CtrRef)>")
end

function Type:VoiceOverTriggerNode (p_class, p_guid)
	local s_Instance = VoiceOverTriggerNode(p_class) 
 	local className = "VoiceOverTriggerNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "delay", s_Instance.delay, "float")
	Something(className, s_guid, "event", s_Instance.event, "CtrRef")
	Something(className, s_guid, "parameters", s_Instance.parameters, "List<CtrRef)>")
end

function Type:VoiceOverTriggerParameter (p_class, p_guid)
	local s_Instance = VoiceOverTriggerParameter(p_class) 
 	local className = "VoiceOverTriggerParameter"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "eventParameter", s_Instance.eventParameter, "CtrRef")
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
end

function Type:VoiceOverValue (p_class, p_guid)
	local s_Instance = VoiceOverValue(p_class) 
 	local className = "VoiceOverValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "valueType", s_Instance.valueType, "VoiceOverValueType")
end

function Type:VoiceOverValueConnection (p_class, p_guid)
	local s_Instance = VoiceOverValueConnection(p_class) 
 	local className = "VoiceOverValueConnection"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "targetNode", s_Instance.targetNode, "CtrRef")
	Something(className, s_guid, "targetValue", s_Instance.targetValue, "CtrRef")
end

function Type:VoiceOverValueRedirect (p_class, p_guid)
	local s_Instance = VoiceOverValueRedirect(p_class) 
 	local className = "VoiceOverValueRedirect"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "target", s_Instance.target, "CtrRef")
end

function Type:VoiceOverVariableNode (p_class, p_guid)
	local s_Instance = VoiceOverVariableNode(p_class) 
 	local className = "VoiceOverVariableNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "source", s_Instance.source, "CtrRef")
	Something(className, s_guid, "value", s_Instance.value, "CtrRef")
end

function Type:VolumeVectorShapeData (p_class, p_guid)
	local s_Instance = VolumeVectorShapeData(p_class) 
 	local className = "VolumeVectorShapeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "height", s_Instance.height, "float")
end

function Type:WarningSystemComponentData (p_class, p_guid)
	local s_Instance = WarningSystemComponentData(p_class) 
 	local className = "WarningSystemComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimWarnSoundEffect", s_Instance.aimWarnSoundEffect, "CtrRef")
	Something(className, s_guid, "lockedWarnSoundEffect", s_Instance.lockedWarnSoundEffect, "CtrRef")
	Something(className, s_guid, "lockingWarnSoundEffect", s_Instance.lockingWarnSoundEffect, "CtrRef")
	Something(className, s_guid, "lowHealthWarnSoundEffect", s_Instance.lowHealthWarnSoundEffect, "CtrRef")
	Something(className, s_guid, "missileWarnSoundEffect", s_Instance.missileWarnSoundEffect, "CtrRef")
	Something(className, s_guid, "playerType", s_Instance.playerType, "WarningPlayerType")
end

function Type:WarpAnimationBinding (p_class, p_guid)
	local s_Instance = WarpAnimationBinding(p_class) 
 	local className = "WarpAnimationBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "connectJointGroup", s_Instance.connectJointGroup, "AntRef")
	Something(className, s_guid, "connectJointWeight", s_Instance.connectJointWeight, "AntRef")
	Something(className, s_guid, "disableCulling", s_Instance.disableCulling, "AntRef")
	Something(className, s_guid, "enableAlign", s_Instance.enableAlign, "AntRef")
	Something(className, s_guid, "translationYWarpTolerance", s_Instance.translationYWarpTolerance, "AntRef")
end

function Type:WarpAnimationComponentData (p_class, p_guid)
	local s_Instance = WarpAnimationComponentData(p_class) 
 	local className = "WarpAnimationComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "boneToAlign", s_Instance.boneToAlign, "GameplayBones")
	Something(className, s_guid, "cannedAnimBinding", s_Instance.cannedAnimBinding, "CannedAnimationBinding")
	Something(className, s_guid, "connectTransform", s_Instance.connectTransform, "LinearTransform")
	Something(className, s_guid, "externalConnectTransform", s_Instance.externalConnectTransform, "bool")
	Something(className, s_guid, "forceAnimationTransform", s_Instance.forceAnimationTransform, "bool")
	Something(className, s_guid, "requireAnimationWeight", s_Instance.requireAnimationWeight, "bool")
	Something(className, s_guid, "warpBinding", s_Instance.warpBinding, "WarpAnimationBinding")
end

function Type:WarpAnimationEntityData (p_class, p_guid)
	local s_Instance = WarpAnimationEntityData(p_class) 
 	local className = "WarpAnimationEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animationEntitySpacePriority", s_Instance.animationEntitySpacePriority, "int")
	Something(className, s_guid, "boneToAlign", s_Instance.boneToAlign, "GameplayBones")
	Something(className, s_guid, "connectTransform", s_Instance.connectTransform, "LinearTransform")
	Something(className, s_guid, "externalConnectTransform", s_Instance.externalConnectTransform, "bool")
	Something(className, s_guid, "forceAnimationTransform", s_Instance.forceAnimationTransform, "bool")
	Something(className, s_guid, "requireAnimationWeight", s_Instance.requireAnimationWeight, "bool")
	Something(className, s_guid, "warpBinding", s_Instance.warpBinding, "WarpAnimationBinding")
end

function Type:WaterEntityData (p_class, p_guid)
	local s_Instance = WaterEntityData(p_class) 
 	local className = "WaterEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset", s_Instance.asset, "CtrRef")
end

function Type:WaveSwitcherNodeData (p_class, p_guid)
	local s_Instance = WaveSwitcherNodeData(p_class) 
 	local className = "WaveSwitcherNodeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "advance", s_Instance.advance, "AudioGraphNodePort")
	Something(className, s_guid, "defaultIndex", s_Instance.defaultIndex, "float")
	Something(className, s_guid, "index", s_Instance.index, "AudioGraphNodePort")
	Something(className, s_guid, "indexChanged", s_Instance.indexChanged, "AudioGraphNodePort")
	Something(className, s_guid, "isRandom", s_Instance.isRandom, "bool")
	Something(className, s_guid, "randomStartIndex", s_Instance.randomStartIndex, "bool")
	Something(className, s_guid, "wave", s_Instance.wave, "AudioGraphNodePort")
	Something(className, s_guid, "waves", s_Instance.waves, "List<CtrRef)>")
end

function Type:WaypointComponentData (p_class, p_guid)
	local s_Instance = WaypointComponentData(p_class) 
 	local className = "WaypointComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "looping", s_Instance.looping, "bool")
end

function Type:WaypointData (p_class, p_guid)
	local s_Instance = WaypointData(p_class) 
 	local className = "WaypointData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "schematicsNameHash", s_Instance.schematicsNameHash, "int")
	Something(className, s_guid, "useClientsPosition", s_Instance.useClientsPosition, "bool")
	Something(className, s_guid, "waypointId", s_Instance.waypointId, "ushort")
end

function Type:WaypointsShapeData (p_class, p_guid)
	local s_Instance = WaypointsShapeData(p_class) 
 	local className = "WaypointsShapeData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "waypoints", s_Instance.waypoints, "List<CtrRef)>")
end

function Type:WaypointTriggerEntityData (p_class, p_guid)
	local s_Instance = WaypointTriggerEntityData(p_class) 
 	local className = "WaypointTriggerEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:WeaponAimingSimulationModifier (p_class, p_guid)
	local s_Instance = WeaponAimingSimulationModifier(p_class) 
 	local className = "WeaponAimingSimulationModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aimingController", s_Instance.aimingController, "CtrRef")
end

function Type:WeaponAnimatedFireTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimatedFireTypeModifier(p_class) 
 	local className = "WeaponAnimatedFireTypeModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatedFireType", s_Instance.animatedFireType, "AnimatedFireEnum")
end

function Type:WeaponAnimationConfigurationModifier (p_class, p_guid)
	local s_Instance = WeaponAnimationConfigurationModifier(p_class) 
 	local className = "WeaponAnimationConfigurationModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatedFireType", s_Instance.animatedFireType, "AnimatedFireEnum")
	Something(className, s_guid, "animationConfiguration", s_Instance.animationConfiguration, "AnimationConfigurationData")
	Something(className, s_guid, "zoomInOutMeshTransitionFactors", s_Instance.zoomInOutMeshTransitionFactors, "List<float)>")
end

function Type:WeaponAnimatedFireTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimatedFireTypeModifier(p_class) 
 	local className = "WeaponAnimatedFireTypeModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "animatedFireType", s_Instance.animatedFireType, "AnimatedFireEnum")
end

function Type:WeaponAnimTypeModifier (p_class, p_guid)
	local s_Instance = WeaponAnimTypeModifier(p_class) 
 	local className = "WeaponAnimTypeModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponAnimType", s_Instance.weaponAnimType, "fb.WeaponAnimType)")
end

function Type:WeaponClassModifier (p_class, p_guid)
	local s_Instance = WeaponClassModifier(p_class) 
 	local className = "WeaponClassModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponClass", s_Instance.weaponClass, "WeaponClassEnum")
end

function Type:WeaponComponentData (p_class, p_guid)
	local s_Instance = WeaponComponentData(p_class) 
 	local className = "WeaponComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aIData", s_Instance.aIData, "CtrRef")
	Something(className, s_guid, "classification", s_Instance.classification, "WeaponClassification")
	Something(className, s_guid, "customWeaponType", s_Instance.customWeaponType, "CtrRef")
	Something(className, s_guid, "damageGiverName", s_Instance.damageGiverName, "string")
	Something(className, s_guid, "damageMultiplier", s_Instance.damageMultiplier, "float")
	Something(className, s_guid, "explosionDamageMultiplier", s_Instance.explosionDamageMultiplier, "float")
	Something(className, s_guid, "impulseStrength", s_Instance.impulseStrength, "float")
	Something(className, s_guid, "lockingAcceptanceAngleMultiplier", s_Instance.lockingAcceptanceAngleMultiplier, "float")
	Something(className, s_guid, "lockTimeMultiplier", s_Instance.lockTimeMultiplier, "float")
	Something(className, s_guid, "overheatDropPerSecondMultiplier", s_Instance.overheatDropPerSecondMultiplier, "float")
	Something(className, s_guid, "projectileSpawnOffset", s_Instance.projectileSpawnOffset, "Vec3")
	Something(className, s_guid, "reloadTimeMultiplier", s_Instance.reloadTimeMultiplier, "float")
	Something(className, s_guid, "sequentialFiring", s_Instance.sequentialFiring, "bool")
	Something(className, s_guid, "weaponFiring", s_Instance.weaponFiring, "CtrRef")
	Something(className, s_guid, "weaponItemHash", s_Instance.weaponItemHash, "uint")
	Something(className, s_guid, "weaponMesh", s_Instance.weaponMesh, "CtrRef")
end

function Type:WeaponData (p_class, p_guid)
	local s_Instance = WeaponData(p_class) 
 	local className = "WeaponData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "showLaserPaintedVehicles", s_Instance.showLaserPaintedVehicles, "bool")
end

function Type:WeaponDeployTimeModifier (p_class, p_guid)
	local s_Instance = WeaponDeployTimeModifier(p_class) 
 	local className = "WeaponDeployTimeModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altDeployId", s_Instance.altDeployId, "int")
	Something(className, s_guid, "altDeployTime", s_Instance.altDeployTime, "float")
	Something(className, s_guid, "deployTime", s_Instance.deployTime, "float")
	Something(className, s_guid, "disableZoomOnDeployTime", s_Instance.disableZoomOnDeployTime, "float")
end

function Type:WeaponEntityData (p_class, p_guid)
	local s_Instance = WeaponEntityData(p_class) 
 	local className = "WeaponEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "aIData", s_Instance.aIData, "CtrRef")
	Something(className, s_guid, "customWeaponType", s_Instance.customWeaponType, "CtrRef")
	Something(className, s_guid, "weaponClass", s_Instance.weaponClass, "WeaponClassEnum")
	Something(className, s_guid, "weaponFiring", s_Instance.weaponFiring, "CtrRef")
	Something(className, s_guid, "weaponStates", s_Instance.weaponStates, "List<WeaponStateData)>")
end

function Type:WeaponFiringData (p_class, p_guid)
	local s_Instance = WeaponFiringData(p_class) 
 	local className = "WeaponFiringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "abortReloadOnSprint", s_Instance.abortReloadOnSprint, "bool")
	Something(className, s_guid, "altDeployId", s_Instance.altDeployId, "int")
	Something(className, s_guid, "altDeployTime", s_Instance.altDeployTime, "float")
	Something(className, s_guid, "deployTime", s_Instance.deployTime, "float")
	Something(className, s_guid, "disableReloadWhileSprinting", s_Instance.disableReloadWhileSprinting, "bool")
	Something(className, s_guid, "disableZoomOnDeployTime", s_Instance.disableZoomOnDeployTime, "float")
	Something(className, s_guid, "inflictSelfDamage", s_Instance.inflictSelfDamage, "bool")
	Something(className, s_guid, "primaryFire", s_Instance.primaryFire, "CtrRef")
	Something(className, s_guid, "reactivateCooldownTime", s_Instance.reactivateCooldownTime, "float")
	Something(className, s_guid, "reloadWholeMags", s_Instance.reloadWholeMags, "bool")
	Something(className, s_guid, "rumble", s_Instance.rumble, "RumbleFiringData")
	Something(className, s_guid, "showEnemyNametagOnAim", s_Instance.showEnemyNametagOnAim, "bool")
	Something(className, s_guid, "supportDelayProne", s_Instance.supportDelayProne, "float")
	Something(className, s_guid, "supportDelayStand", s_Instance.supportDelayStand, "float")
	Something(className, s_guid, "useAutoAiming", s_Instance.useAutoAiming, "bool")
	Something(className, s_guid, "weaponSway", s_Instance.weaponSway, "CtrRef")
end

function Type:WeaponFiringDataModifier (p_class, p_guid)
	local s_Instance = WeaponFiringDataModifier(p_class) 
 	local className = "WeaponFiringDataModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponFiring", s_Instance.weaponFiring, "CtrRef")
end

function Type:WeaponFiringEffectsModifier (p_class, p_guid)
	local s_Instance = WeaponFiringEffectsModifier(p_class) 
 	local className = "WeaponFiringEffectsModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "fireEffects1p", s_Instance.fireEffects1p, "List<FireEffectData)>")
	Something(className, s_guid, "fireEffects3p", s_Instance.fireEffects3p, "List<FireEffectData)>")
end

function Type:WeaponInputRouterComponentData (p_class, p_guid)
	local s_Instance = WeaponInputRouterComponentData(p_class) 
 	local className = "WeaponInputRouterComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxFireRate", s_Instance.maxFireRate, "float")
	Something(className, s_guid, "rotationCount", s_Instance.rotationCount, "uint")
end

function Type:WeaponLagBinding (p_class, p_guid)
	local s_Instance = WeaponLagBinding(p_class) 
 	local className = "WeaponLagBinding"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "entityPitch", s_Instance.entityPitch, "AntRef")
	Something(className, s_guid, "entityYaw", s_Instance.entityYaw, "AntRef")
	Something(className, s_guid, "pitchResult", s_Instance.pitchResult, "AntRef")
	Something(className, s_guid, "rollResult", s_Instance.rollResult, "AntRef")
	Something(className, s_guid, "yawResult", s_Instance.yawResult, "AntRef")
end

function Type:WeaponLagEffectForceData (p_class, p_guid)
	local s_Instance = WeaponLagEffectForceData(p_class) 
 	local className = "WeaponLagEffectForceData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "offsetForce", s_Instance.offsetForce, "Vec3")
	Something(className, s_guid, "rotationForce", s_Instance.rotationForce, "Vec3")
end

function Type:WeaponLagEffectSpringData (p_class, p_guid)
	local s_Instance = WeaponLagEffectSpringData(p_class) 
 	local className = "WeaponLagEffectSpringData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "constant", s_Instance.constant, "float")
	Something(className, s_guid, "damping", s_Instance.damping, "float")
end

function Type:WeaponLagEffectSpringVector (p_class, p_guid)
	local s_Instance = WeaponLagEffectSpringVector(p_class) 
 	local className = "WeaponLagEffectSpringVector"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "springX", s_Instance.springX, "WeaponLagEffectSpringData")
	Something(className, s_guid, "springY", s_Instance.springY, "WeaponLagEffectSpringData")
	Something(className, s_guid, "springZ", s_Instance.springZ, "WeaponLagEffectSpringData")
end

function Type:WeaponLagEntityData (p_class, p_guid)
	local s_Instance = WeaponLagEntityData(p_class) 
 	local className = "WeaponLagEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "binding", s_Instance.binding, "WeaponLagBinding")
end

function Type:WeaponLagSpringEffectData (p_class, p_guid)
	local s_Instance = WeaponLagSpringEffectData(p_class) 
 	local className = "WeaponLagSpringEffectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "jumpForces", s_Instance.jumpForces, "WeaponLagEffectForceData")
	Something(className, s_guid, "landForces", s_Instance.landForces, "WeaponLagEffectForceData")
	Something(className, s_guid, "offsetSprings", s_Instance.offsetSprings, "WeaponLagEffectSpringVector")
	Something(className, s_guid, "poseDownForces", s_Instance.poseDownForces, "WeaponLagEffectForceData")
	Something(className, s_guid, "poseUpForces", s_Instance.poseUpForces, "WeaponLagEffectForceData")
	Something(className, s_guid, "rotationSprings", s_Instance.rotationSprings, "WeaponLagEffectSpringVector")
	Something(className, s_guid, "zoomForceModifier", s_Instance.zoomForceModifier, "float")
end

function Type:WeaponMagazineModifier (p_class, p_guid)
	local s_Instance = WeaponMagazineModifier(p_class) 
 	local className = "WeaponMagazineModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "magazineCapacity", s_Instance.magazineCapacity, "int")
	Something(className, s_guid, "numberOfMagazines", s_Instance.numberOfMagazines, "int")
end

function Type:WeaponMiscModifier (p_class, p_guid)
	local s_Instance = WeaponMiscModifier(p_class) 
 	local className = "WeaponMiscModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "canBeInSupportedShooting", s_Instance.canBeInSupportedShooting, "bool")
	Something(className, s_guid, "enableBreathControl", s_Instance.enableBreathControl, "bool")
	Something(className, s_guid, "holdBoltActionUntilZoomRelease", s_Instance.holdBoltActionUntilZoomRelease, "bool")
	Something(className, s_guid, "isSilenced", s_Instance.isSilenced, "bool")
	Something(className, s_guid, "unZoomOnBoltAction", s_Instance.unZoomOnBoltAction, "bool")
end

function Type:WeaponMiscModifierSettings (p_class, p_guid)
	local s_Instance = WeaponMiscModifierSettings(p_class) 
 	local className = "WeaponMiscModifierSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "canBeInSupportedShooting", s_Instance.canBeInSupportedShooting, "bool")
	Something(className, s_guid, "enableBreathControl", s_Instance.enableBreathControl, "bool")
	Something(className, s_guid, "holdBoltActionUntilZoomRelease", s_Instance.holdBoltActionUntilZoomRelease, "bool")
	Something(className, s_guid, "isSilenced", s_Instance.isSilenced, "bool")
	Something(className, s_guid, "unZoomOnBoltAction", s_Instance.unZoomOnBoltAction, "bool")
end

function Type:WeaponModifier (p_class, p_guid)
	local s_Instance = WeaponModifier(p_class) 
 	local className = "WeaponModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "dummyToMakeFrostEDcompile", s_Instance.dummyToMakeFrostEDcompile, "int")
end

function Type:WeaponModifierData (p_class, p_guid)
	local s_Instance = WeaponModifierData(p_class) 
 	local className = "WeaponModifierData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "modifiers", s_Instance.modifiers, "List<CtrRef)>")
	Something(className, s_guid, "unlockAsset", s_Instance.unlockAsset, "CtrRef")
end

function Type:WeaponOffsetData (p_class, p_guid)
	local s_Instance = WeaponOffsetData(p_class) 
 	local className = "WeaponOffsetData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "weaponOffsetX", s_Instance.weaponOffsetX, "float")
	Something(className, s_guid, "weaponOffsetY", s_Instance.weaponOffsetY, "float")
	Something(className, s_guid, "weaponOffsetZ", s_Instance.weaponOffsetZ, "float")
	Something(className, s_guid, "weaponZoomedOffsetX", s_Instance.weaponZoomedOffsetX, "float")
	Something(className, s_guid, "weaponZoomedOffsetY", s_Instance.weaponZoomedOffsetY, "float")
	Something(className, s_guid, "weaponZoomedOffsetZ", s_Instance.weaponZoomedOffsetZ, "float")
end

function Type:WeaponOverrideData (p_class, p_guid)
	local s_Instance = WeaponOverrideData(p_class) 
 	local className = "WeaponOverrideData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "data", s_Instance.data, "CtrRef")
	Something(className, s_guid, "values", s_Instance.values, "List<WeaponOverrideValue)>")
end

function Type:WeaponOverrideValue (p_class, p_guid)
	local s_Instance = WeaponOverrideValue(p_class) 
 	local className = "WeaponOverrideValue"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "value", s_Instance.value, "float")
	Something(className, s_guid, "valueType", s_Instance.valueType, "WeaponOverrideValueType")
end

function Type:WeaponPickupData (p_class, p_guid)
	local s_Instance = WeaponPickupData(p_class) 
 	local className = "WeaponPickupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altWeaponSlot", s_Instance.altWeaponSlot, "int")
	Something(className, s_guid, "linkedToWeaponSlot", s_Instance.linkedToWeaponSlot, "int")
	Something(className, s_guid, "maxAmmo", s_Instance.maxAmmo, "uint")
	Something(className, s_guid, "minAmmo", s_Instance.minAmmo, "uint")
	Something(className, s_guid, "weapon", s_Instance.weapon, "CtrRef")
	Something(className, s_guid, "weaponSlot", s_Instance.weaponSlot, "uint")
end

function Type:WeaponPickupEntityData (p_class, p_guid)
	local s_Instance = WeaponPickupEntityData(p_class) 
 	local className = "WeaponPickupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "useForPersistence", s_Instance.useForPersistence, "bool")
	Something(className, s_guid, "weapons", s_Instance.weapons, "List<WeaponPickupData)>")
end

function Type:WeaponProjectileModifier (p_class, p_guid)
	local s_Instance = WeaponProjectileModifier(p_class) 
 	local className = "WeaponProjectileModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "projectileData", s_Instance.projectileData, "CtrRef")
end

function Type:WeaponRegularSocketObjectData (p_class, p_guid)
	local s_Instance = WeaponRegularSocketObjectData(p_class) 
 	local className = "WeaponRegularSocketObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "mesh3pTransforms", s_Instance.mesh3pTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "transform", s_Instance.transform, "LinearTransform")
end

function Type:WeaponShotModifier (p_class, p_guid)
	local s_Instance = WeaponShotModifier(p_class) 
 	local className = "WeaponShotModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "initialSpeed", s_Instance.initialSpeed, "Vec3")
	Something(className, s_guid, "numberOfBulletsPerShell", s_Instance.numberOfBulletsPerShell, "int")
end

function Type:WeaponSocketObjectData (p_class, p_guid)
	local s_Instance = WeaponSocketObjectData(p_class) 
 	local className = "WeaponSocketObjectData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "asset1p", s_Instance.asset1p, "CtrRef")
	Something(className, s_guid, "asset1pzoom", s_Instance.asset1pzoom, "CtrRef")
	Something(className, s_guid, "asset3p", s_Instance.asset3p, "CtrRef")
	Something(className, s_guid, "referencedAssetHashes", s_Instance.referencedAssetHashes, "List<uint)>")
end

function Type:WeaponSoundModifier (p_class, p_guid)
	local s_Instance = WeaponSoundModifier(p_class) 
 	local className = "WeaponSoundModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "sound", s_Instance.sound, "CtrRef")
end

function Type:WeaponSpeedData (p_class, p_guid)
	local s_Instance = WeaponSpeedData(p_class) 
 	local className = "WeaponSpeedData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "deploySpeed", s_Instance.deploySpeed, "float")
	Something(className, s_guid, "unDeploySpeed", s_Instance.unDeploySpeed, "float")
	Something(className, s_guid, "zoomInSpeed", s_Instance.zoomInSpeed, "float")
	Something(className, s_guid, "zoomOutSpeed", s_Instance.zoomOutSpeed, "float")
end

function Type:WeaponStateData (p_class, p_guid)
	local s_Instance = WeaponStateData(p_class) 
 	local className = "WeaponStateData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alwaysAimHead", s_Instance.alwaysAimHead, "bool")
	Something(className, s_guid, "animatedAimingType", s_Instance.animatedAimingType, "AnimatedAimingEnum")
	Something(className, s_guid, "animatedFireType", s_Instance.animatedFireType, "AnimatedFireEnum")
	Something(className, s_guid, "animationConfiguration", s_Instance.animationConfiguration, "AnimationConfigurationData")
	Something(className, s_guid, "boneFakePhysics", s_Instance.boneFakePhysics, "List<CtrRef)>")
	Something(className, s_guid, "hideProjectileAfterFireTime", s_Instance.hideProjectileAfterFireTime, "float")
	Something(className, s_guid, "isOneHanded", s_Instance.isOneHanded, "bool")
	Something(className, s_guid, "keepAimingTime", s_Instance.keepAimingTime, "float")
	Something(className, s_guid, "mesh1p", s_Instance.mesh1p, "CtrRef")
	Something(className, s_guid, "mesh3p", s_Instance.mesh3p, "CtrRef")
	Something(className, s_guid, "mesh3pRigidMeshSocketObjectTransforms", s_Instance.mesh3pRigidMeshSocketObjectTransforms, "List<RigidMeshSocketTransform)>")
	Something(className, s_guid, "mesh3pTransforms", s_Instance.mesh3pTransforms, "List<LinearTransform)>")
	Something(className, s_guid, "meshZoom1p", s_Instance.meshZoom1p, "CtrRef")
	Something(className, s_guid, "nonZoomedScopeFilter", s_Instance.nonZoomedScopeFilter, "CtrRef")
	Something(className, s_guid, "playDeployAfterFire", s_Instance.playDeployAfterFire, "bool")
	Something(className, s_guid, "projectileBoneName", s_Instance.projectileBoneName, "string")
	Something(className, s_guid, "referencedAssetHashes", s_Instance.referencedAssetHashes, "List<uint)>")
	Something(className, s_guid, "skipDeployAnimation", s_Instance.skipDeployAnimation, "bool")
	Something(className, s_guid, "skipFireAnimation", s_Instance.skipFireAnimation, "bool")
	Something(className, s_guid, "skipReloadAnimation", s_Instance.skipReloadAnimation, "bool")
	Something(className, s_guid, "weapon", s_Instance.weapon, "AntRef")
	Something(className, s_guid, "zoomedScopeFilter", s_Instance.zoomedScopeFilter, "CtrRef")
	Something(className, s_guid, "zoomInOutMeshTransitionFactors", s_Instance.zoomInOutMeshTransitionFactors, "List<float)>")
	Something(className, s_guid, "zoomMeshTransitionFactor", s_Instance.zoomMeshTransitionFactor, "float")
	Something(className, s_guid, "zoomScaleFactor", s_Instance.zoomScaleFactor, "float")
end

function Type:WeaponStateEntityData (p_class, p_guid)
	local s_Instance = WeaponStateEntityData(p_class) 
 	local className = "WeaponStateEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "weaponSlot", s_Instance.weaponSlot, "int")
end

function Type:WeaponSuppressionData (p_class, p_guid)
	local s_Instance = WeaponSuppressionData(p_class) 
 	local className = "WeaponSuppressionData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "maxDistance", s_Instance.maxDistance, "float")
	Something(className, s_guid, "maxMultiplier", s_Instance.maxMultiplier, "float")
	Something(className, s_guid, "minDistance", s_Instance.minDistance, "float")
	Something(className, s_guid, "minMultiplier", s_Instance.minMultiplier, "float")
end

function Type:WeaponSwitchingMapData (p_class, p_guid)
	local s_Instance = WeaponSwitchingMapData(p_class) 
 	local className = "WeaponSwitchingMapData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "action", s_Instance.action, "EntryInputActionEnum")
	Something(className, s_guid, "fireAndSwitchBackToPrev", s_Instance.fireAndSwitchBackToPrev, "bool")
	Something(className, s_guid, "fromWeapon", s_Instance.fromWeapon, "WeaponSwitchingEnum")
	Something(className, s_guid, "toWeapon", s_Instance.toWeapon, "List<WeaponSwitchingEnum)>")
	Something(className, s_guid, "weaponSwitchingMapData", s_Instance.weaponSwitchingMapData,  "readonly")
	Something(className, s_guid, "weaponSwitchingEnum", s_Instance.weaponSwitchingEnum,  "uint")
end

function Type:WeaponUnlockPickupData (p_class, p_guid)
	local s_Instance = WeaponUnlockPickupData(p_class) 
 	local className = "WeaponUnlockPickupData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "altWeaponSlot", s_Instance.altWeaponSlot, "int")
	Something(className, s_guid, "defaultToFullAmmo", s_Instance.defaultToFullAmmo, "bool")
	Something(className, s_guid, "linkedToWeaponSlot", s_Instance.linkedToWeaponSlot, "int")
	Something(className, s_guid, "maxAmmo", s_Instance.maxAmmo, "uint")
	Something(className, s_guid, "minAmmo", s_Instance.minAmmo, "uint")
	Something(className, s_guid, "unlockWeaponAndSlot", s_Instance.unlockWeaponAndSlot, "fb.UnlockWeaponAndSlot)")
end

function Type:WeaponUnlockPickupEntityData (p_class, p_guid)
	local s_Instance = WeaponUnlockPickupEntityData(p_class) 
 	local className = "WeaponUnlockPickupEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "randomlySelectOneWeapon", s_Instance.randomlySelectOneWeapon, "bool")
	Something(className, s_guid, "useForPersistence", s_Instance.useForPersistence, "bool")
	Something(className, s_guid, "weapons", s_Instance.weapons, "List<WeaponUnlockPickupData)>")
end

function Type:WeaponZoomModifier (p_class, p_guid)
	local s_Instance = WeaponZoomModifier(p_class) 
 	local className = "WeaponZoomModifier"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "zoomRenderFov", s_Instance.zoomRenderFov, "float")
end

function Type:WheelComponentData (p_class, p_guid)
	local s_Instance = WheelComponentData(p_class) 
 	local className = "WheelComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "config", s_Instance.config, "CtrRef")
	Something(className, s_guid, "effectClampVelocity", s_Instance.effectClampVelocity, "float")
	Something(className, s_guid, "physicsType", s_Instance.physicsType, "WheelPhysicsType")
end

function Type:WheelConfigData (p_class, p_guid)
	local s_Instance = WheelConfigData(p_class) 
 	local className = "WheelConfigData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "ackermanDeviceType", s_Instance.ackermanDeviceType, "int")
	Something(className, s_guid, "adjustWheelRotation", s_Instance.adjustWheelRotation, "bool")
	Something(className, s_guid, "alignMomScale", s_Instance.alignMomScale, "float")
	Something(className, s_guid, "alwaysGrip", s_Instance.alwaysGrip, "bool")
	Something(className, s_guid, "angularVelocityMinSlipCondition", s_Instance.angularVelocityMinSlipCondition, "float")
	Something(className, s_guid, "brakeFactor", s_Instance.brakeFactor, "float")
	Something(className, s_guid, "brakeForce", s_Instance.brakeForce, "float")
	Something(className, s_guid, "collisionMaterialPair", s_Instance.collisionMaterialPair, "CtrRef")
	Something(className, s_guid, "collisionYawDampening", s_Instance.collisionYawDampening, "float")
	Something(className, s_guid, "collisionYawDampeningDuration", s_Instance.collisionYawDampeningDuration, "float")
	Something(className, s_guid, "constantSpringForceFrictionScale", s_Instance.constantSpringForceFrictionScale, "float")
	Something(className, s_guid, "diffGearRatio", s_Instance.diffGearRatio, "float")
	Something(className, s_guid, "drivingType", s_Instance.drivingType, "int")
	Something(className, s_guid, "engineBrakeMaxFactor", s_Instance.engineBrakeMaxFactor, "float")
	Something(className, s_guid, "engineBrakeMinFactor", s_Instance.engineBrakeMinFactor, "float")
	Something(className, s_guid, "engineBrakeVelocityFactor", s_Instance.engineBrakeVelocityFactor, "float")
	Something(className, s_guid, "engineIndex", s_Instance.engineIndex, "int")
	Something(className, s_guid, "frictionMethod", s_Instance.frictionMethod, "int")
	Something(className, s_guid, "frictionMomentMaxFactor", s_Instance.frictionMomentMaxFactor, "float")
	Something(className, s_guid, "frictionMomentMultiplier", s_Instance.frictionMomentMultiplier, "float")
	Something(className, s_guid, "frictionMomentVelocityMax", s_Instance.frictionMomentVelocityMax, "float")
	Something(className, s_guid, "frictionMomentVelocityMin", s_Instance.frictionMomentVelocityMin, "float")
	Something(className, s_guid, "fxTorqueRadiusMultiplier", s_Instance.fxTorqueRadiusMultiplier, "float")
	Something(className, s_guid, "handBrakeFactor", s_Instance.handBrakeFactor, "float")
	Something(className, s_guid, "handBrakeForce", s_Instance.handBrakeForce, "float")
	Something(className, s_guid, "hasSteeringInverted", s_Instance.hasSteeringInverted, "bool")
	Something(className, s_guid, "highSpeedSteeringSensitivity", s_Instance.highSpeedSteeringSensitivity, "float")
	Something(className, s_guid, "highSpeedSteeringSensitivityLimit", s_Instance.highSpeedSteeringSensitivityLimit, "float")
	Something(className, s_guid, "inertia", s_Instance.inertia, "Vec3")
	Something(className, s_guid, "isAllowedToSpin", s_Instance.isAllowedToSpin, "bool")
	Something(className, s_guid, "lateralFrictionForceMaxFactor", s_Instance.lateralFrictionForceMaxFactor, "float")
	Something(className, s_guid, "lateralNegK", s_Instance.lateralNegK, "float")
	Something(className, s_guid, "lateralPosK", s_Instance.lateralPosK, "float")
	Something(className, s_guid, "lattitudeFrictionScale", s_Instance.lattitudeFrictionScale, "List<FrictionScaleAtVelocity)>")
	Something(className, s_guid, "longitudeFrictionScale", s_Instance.longitudeFrictionScale, "List<FrictionScaleAtVelocity)>")
	Something(className, s_guid, "longitudinalFrictionForceMaxFactor", s_Instance.longitudinalFrictionForceMaxFactor, "float")
	Something(className, s_guid, "longitudinalNegK", s_Instance.longitudinalNegK, "float")
	Something(className, s_guid, "longitudinalPosK", s_Instance.longitudinalPosK, "float")
	Something(className, s_guid, "lowSpeedSteeringSensitivity", s_Instance.lowSpeedSteeringSensitivity, "float")
	Something(className, s_guid, "lowSpeedSteeringSensitivityLimit", s_Instance.lowSpeedSteeringSensitivityLimit, "float")
	Something(className, s_guid, "mass", s_Instance.mass, "float")
	Something(className, s_guid, "maxSlipRatio", s_Instance.maxSlipRatio, "float")
	Something(className, s_guid, "midSpeedSteeringSensitivity", s_Instance.midSpeedSteeringSensitivity, "float")
	Something(className, s_guid, "midSpeedSteeringSensitivityLimit", s_Instance.midSpeedSteeringSensitivityLimit, "float")
	Something(className, s_guid, "offGroundGravityModifier", s_Instance.offGroundGravityModifier, "float")
	Something(className, s_guid, "offset", s_Instance.offset, "Vec3")
	Something(className, s_guid, "pacejkaConfigIndex", s_Instance.pacejkaConfigIndex, "int")
	Something(className, s_guid, "radius", s_Instance.radius, "float")
	Something(className, s_guid, "resistance", s_Instance.resistance, "float")
	Something(className, s_guid, "rollingResistanceBaseFactor", s_Instance.rollingResistanceBaseFactor, "float")
	Something(className, s_guid, "rollingResistanceInternalBaseFactor", s_Instance.rollingResistanceInternalBaseFactor, "float")
	Something(className, s_guid, "rollingResistanceVelocityFactor", s_Instance.rollingResistanceVelocityFactor, "float")
	Something(className, s_guid, "rotationBody", s_Instance.rotationBody, "CtrRef")
	Something(className, s_guid, "rotationDirectionIndex", s_Instance.rotationDirectionIndex, "int")
	Something(className, s_guid, "sensitivityRangeScale", s_Instance.sensitivityRangeScale, "float")
	Something(className, s_guid, "sideSlipAngleMaxSlipCondition", s_Instance.sideSlipAngleMaxSlipCondition, "float")
	Something(className, s_guid, "slopeGripExponent", s_Instance.slopeGripExponent, "int")
	Something(className, s_guid, "slopeGripMaxAngle", s_Instance.slopeGripMaxAngle, "float")
	Something(className, s_guid, "slopeGripMinAngle", s_Instance.slopeGripMinAngle, "float")
	Something(className, s_guid, "sphereCollision", s_Instance.sphereCollision, "SphereCollisionData")
	Something(className, s_guid, "spring", s_Instance.spring, "SpringData")
	Something(className, s_guid, "steerInertia", s_Instance.steerInertia, "CtrRef")
	Something(className, s_guid, "steeringAngleIndex", s_Instance.steeringAngleIndex, "int")
	Something(className, s_guid, "steeringSensitivity", s_Instance.steeringSensitivity, "List<SensitivityAtVelocity)>")
	Something(className, s_guid, "steeringType", s_Instance.steeringType, "int")
	Something(className, s_guid, "trackedForwardSpeedLimit", s_Instance.trackedForwardSpeedLimit, "float")
	Something(className, s_guid, "trackedTurnSpeedLimit", s_Instance.trackedTurnSpeedLimit, "float")
	Something(className, s_guid, "transmissionLoss", s_Instance.transmissionLoss, "List<Vec2)>")
	Something(className, s_guid, "useEngineBrake", s_Instance.useEngineBrake, "bool")
	Something(className, s_guid, "useFrictionMoment", s_Instance.useFrictionMoment, "bool")
	Something(className, s_guid, "useLowSpeedAutoBrake", s_Instance.useLowSpeedAutoBrake, "bool")
	Something(className, s_guid, "useRollingResistanceBaseFactor", s_Instance.useRollingResistanceBaseFactor, "bool")
	Something(className, s_guid, "useRollingResistanceVelocityFactor", s_Instance.useRollingResistanceVelocityFactor, "bool")
	Something(className, s_guid, "wheelBaseLateral", s_Instance.wheelBaseLateral, "float")
	Something(className, s_guid, "wheelBaseLongitudinal", s_Instance.wheelBaseLongitudinal, "float")
	Something(className, s_guid, "wheelFrictionLattitudeBrakeScale", s_Instance.wheelFrictionLattitudeBrakeScale, "float")
	Something(className, s_guid, "wheelSlipRatioMaxSlipCondition", s_Instance.wheelSlipRatioMaxSlipCondition, "float")
	Something(className, s_guid, "wheelVelocityXMinSlipCondition", s_Instance.wheelVelocityXMinSlipCondition, "float")
	Something(className, s_guid, "width", s_Instance.width, "float")
end

function Type:WidgetEventQueryPair (p_class, p_guid)
	local s_Instance = WidgetEventQueryPair(p_class) 
 	local className = "WidgetEventQueryPair"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "instanceName", s_Instance.instanceName, "string")
	Something(className, s_guid, "isOutput", s_Instance.isOutput, "bool")
	Something(className, s_guid, "name", s_Instance.name, "string")
	Something(className, s_guid, "query", s_Instance.query, "UIWidgetEventID")
end

function Type:WidgetNode (p_class, p_guid)
	local s_Instance = WidgetNode(p_class) 
 	local className = "WidgetNode"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "alwaysInFocus", s_Instance.alwaysInFocus, "bool")
	Something(className, s_guid, "dataBinding", s_Instance.dataBinding, "CtrRef")
	Something(className, s_guid, "focusIndex", s_Instance.focusIndex, "int")
	Something(className, s_guid, "horisontalAlign", s_Instance.horisontalAlign, "WidgetHorisontalAlignment")
	Something(className, s_guid, "inputs", s_Instance.inputs, "List<CtrRef)>")
	Something(className, s_guid, "instanceName", s_Instance.instanceName, "string")
	Something(className, s_guid, "outputs", s_Instance.outputs, "List<CtrRef)>")
	Something(className, s_guid, "verticalAlign", s_Instance.verticalAlign, "WidgetVerticalAlignment")
	Something(className, s_guid, "widgetAsset", s_Instance.widgetAsset, "CtrRef")
	Something(className, s_guid, "widgetProperties", s_Instance.widgetProperties, "List<UIWidgetProperty)>")
	Something(className, s_guid, "zDepthLevel", s_Instance.zDepthLevel, "int")
end

function Type:WindComponentData (p_class, p_guid)
	local s_Instance = WindComponentData(p_class) 
 	local className = "WindComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
	Something(className, s_guid, "windDirection", s_Instance.windDirection, "float")
	Something(className, s_guid, "windStrength", s_Instance.windStrength, "float")
end

function Type:WindowSettings (p_class, p_guid)
	local s_Instance = WindowSettings(p_class) 
 	local className = "WindowSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "autoSize", s_Instance.autoSize, "bool")
	Something(className, s_guid, "bordersEnable", s_Instance.bordersEnable, "bool")
	Something(className, s_guid, "enableEscape", s_Instance.enableEscape, "bool")
	Something(className, s_guid, "enableInputOnActivate", s_Instance.enableInputOnActivate, "bool")
	Something(className, s_guid, "fullscreenAutoSize", s_Instance.fullscreenAutoSize, "bool")
	Something(className, s_guid, "fullscreenWhenJoiningServer", s_Instance.fullscreenWhenJoiningServer, "bool")
	Something(className, s_guid, "height", s_Instance.height, "uint")
	Something(className, s_guid, "hibernateOnClose", s_Instance.hibernateOnClose, "bool")
	Something(className, s_guid, "hidden", s_Instance.hidden, "bool")
	Something(className, s_guid, "minimized", s_Instance.minimized, "bool")
	Something(className, s_guid, "posX", s_Instance.posX, "int")
	Something(className, s_guid, "posY", s_Instance.posY, "int")
	Something(className, s_guid, "width", s_Instance.width, "uint")
end

function Type:WingComponentData (p_class, p_guid)
	local s_Instance = WingComponentData(p_class) 
 	local className = "WingComponentData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "config", s_Instance.config, "CtrRef")
end

function Type:WingPhysicsData (p_class, p_guid)
	local s_Instance = WingPhysicsData(p_class) 
 	local className = "WingPhysicsData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "angularVelocityLiftModifier", s_Instance.angularVelocityLiftModifier, "float")
	Something(className, s_guid, "baseAngleOfAttack", s_Instance.baseAngleOfAttack, "float")
	Something(className, s_guid, "drag", s_Instance.drag, "float")
	Something(className, s_guid, "dragCoefficient", s_Instance.dragCoefficient, "CtrRef")
	Something(className, s_guid, "dragRotationModifier", s_Instance.dragRotationModifier, "float")
	Something(className, s_guid, "flapDrag", s_Instance.flapDrag, "float")
	Something(className, s_guid, "flapLift", s_Instance.flapLift, "float")
	Something(className, s_guid, "flapTurnSpeed", s_Instance.flapTurnSpeed, "float")
	Something(className, s_guid, "inputForFlap", s_Instance.inputForFlap, "int")
	Something(className, s_guid, "landingFlapLift", s_Instance.landingFlapLift, "float")
	Something(className, s_guid, "landingFlapLogic", s_Instance.landingFlapLogic, "CtrRef")
	Something(className, s_guid, "lift", s_Instance.lift, "float")
	Something(className, s_guid, "liftCoefficient", s_Instance.liftCoefficient, "CtrRef")
	Something(className, s_guid, "maxFlapAngleScaleFactor", s_Instance.maxFlapAngleScaleFactor, "CtrRef")
	Something(className, s_guid, "visualFlapAngleLimit", s_Instance.visualFlapAngleLimit, "float")
	Something(className, s_guid, "visualFlapTurnSpeed", s_Instance.visualFlapTurnSpeed, "float")
end

function Type:WorldData (p_class, p_guid)
	local s_Instance = WorldData(p_class) 
 	local className = "WorldData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "runtimeMaterialGrid", s_Instance.runtimeMaterialGrid, "CtrRef")
end

function Type:WorldPartData (p_class, p_guid)
	local s_Instance = WorldPartData(p_class) 
 	local className = "WorldPartData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "enabled", s_Instance.enabled, "bool")
	Something(className, s_guid, "hackToSolveRealTimeTweakingIssue", s_Instance.hackToSolveRealTimeTweakingIssue, "GUID")
	Something(className, s_guid, "useDeferredEntityCreation", s_Instance.useDeferredEntityCreation, "bool")
end

function Type:WorldRenderSettings (p_class, p_guid)
	local s_Instance = WorldRenderSettings(p_class) 
 	local className = "WorldRenderSettings"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "applyShadowmapsEnable", s_Instance.applyShadowmapsEnable, "bool")
	Something(className, s_guid, "bilateralHalfResCompositeEnable", s_Instance.bilateralHalfResCompositeEnable, "bool")
	Something(className, s_guid, "cloudShadowEnable", s_Instance.cloudShadowEnable, "bool")
	Something(className, s_guid, "coloredShadowmapSlicesEnable", s_Instance.coloredShadowmapSlicesEnable, "bool")
	Something(className, s_guid, "coneLightsEnable", s_Instance.coneLightsEnable, "bool")
	Something(className, s_guid, "consoleRenderTargetPoolSharingEnable", s_Instance.consoleRenderTargetPoolSharingEnable, "bool")
	Something(className, s_guid, "cullScreenAreaScale", s_Instance.cullScreenAreaScale, "float")
	Something(className, s_guid, "customEnvmapEnable", s_Instance.customEnvmapEnable, "bool")
	Something(className, s_guid, "decalVolumeEnable", s_Instance.decalVolumeEnable, "bool")
	Something(className, s_guid, "decalVolumeScale", s_Instance.decalVolumeScale, "float")
	Something(className, s_guid, "drawBoundingSpheres", s_Instance.drawBoundingSpheres, "bool")
	Something(className, s_guid, "drawDebugDecalVolumes", s_Instance.drawDebugDecalVolumes, "bool")
	Something(className, s_guid, "drawDebugDestructionVolumes", s_Instance.drawDebugDestructionVolumes, "bool")
	Something(className, s_guid, "drawDebugDynamicAO", s_Instance.drawDebugDynamicAO, "bool")
	Something(className, s_guid, "drawDebugDynamicEnvmap", s_Instance.drawDebugDynamicEnvmap, "bool")
	Something(className, s_guid, "drawDebugDynamicEnvmapMipLevel", s_Instance.drawDebugDynamicEnvmapMipLevel, "int")
	Something(className, s_guid, "drawDebugGBuffer", s_Instance.drawDebugGBuffer, "bool")
	Something(className, s_guid, "drawDebugHalfResEnvironment", s_Instance.drawDebugHalfResEnvironment, "bool")
	Something(className, s_guid, "drawDebugLensFlareOccluders", s_Instance.drawDebugLensFlareOccluders, "bool")
	Something(className, s_guid, "drawDebugLensFlares", s_Instance.drawDebugLensFlares, "bool")
	Something(className, s_guid, "drawDebugLightShadowSources", s_Instance.drawDebugLightShadowSources, "bool")
	Something(className, s_guid, "drawDebugLightSources", s_Instance.drawDebugLightSources, "bool")
	Something(className, s_guid, "drawDebugLightStats", s_Instance.drawDebugLightStats, "bool")
	Something(className, s_guid, "drawDebugLightTileFbGrid", s_Instance.drawDebugLightTileFbGrid, "bool")
	Something(className, s_guid, "drawDebugLightTileGrid", s_Instance.drawDebugLightTileGrid, "bool")
	Something(className, s_guid, "drawDebugLightTiles", s_Instance.drawDebugLightTiles, "bool")
	Something(className, s_guid, "drawDebugLightTileSources", s_Instance.drawDebugLightTileSources, "bool")
	Something(className, s_guid, "drawDebugLightTileVolumes", s_Instance.drawDebugLightTileVolumes, "bool")
	Something(className, s_guid, "drawDebugMultisampleClassify", s_Instance.drawDebugMultisampleClassify, "bool")
	Something(className, s_guid, "drawDebugPlanarReflection", s_Instance.drawDebugPlanarReflection, "bool")
	Something(className, s_guid, "drawDebugPlanarReflectionCullFrustum", s_Instance.drawDebugPlanarReflectionCullFrustum, "bool")
	Something(className, s_guid, "drawDebugQuarterShadowmaps", s_Instance.drawDebugQuarterShadowmaps, "bool")
	Something(className, s_guid, "drawDebugShadowmaps", s_Instance.drawDebugShadowmaps, "bool")
	Something(className, s_guid, "drawDebugSkyEnvmap", s_Instance.drawDebugSkyEnvmap, "bool")
	Something(className, s_guid, "drawDebugSkyEnvmapMipLevel", s_Instance.drawDebugSkyEnvmapMipLevel, "int")
	Something(className, s_guid, "drawDebugSpotLightShadowmaps", s_Instance.drawDebugSpotLightShadowmaps, "bool")
	Something(className, s_guid, "drawDebugTransShadowmap", s_Instance.drawDebugTransShadowmap, "bool")
	Something(className, s_guid, "drawDebugVelocityBuffer", s_Instance.drawDebugVelocityBuffer, "bool")
	Something(className, s_guid, "drawDebugVisibleEntityTypes", s_Instance.drawDebugVisibleEntityTypes, "bool")
	Something(className, s_guid, "drawDebugWorldOcclusions", s_Instance.drawDebugWorldOcclusions, "bool")
	Something(className, s_guid, "drawDebugZBufferEnable", s_Instance.drawDebugZBufferEnable, "bool")
	Something(className, s_guid, "drawFrustums", s_Instance.drawFrustums, "bool")
	Something(className, s_guid, "drawLightSources", s_Instance.drawLightSources, "bool")
	Something(className, s_guid, "drawLineBoundingBoxes", s_Instance.drawLineBoundingBoxes, "bool")
	Something(className, s_guid, "drawShadowFrustums", s_Instance.drawShadowFrustums, "bool")
	Something(className, s_guid, "drawSolidBoundingBoxes", s_Instance.drawSolidBoundingBoxes, "bool")
	Something(className, s_guid, "drawTransparent", s_Instance.drawTransparent, "bool")
	Something(className, s_guid, "drawTransparentDecal", s_Instance.drawTransparentDecal, "bool")
	Something(className, s_guid, "dxDeferredCsPathEnable", s_Instance.dxDeferredCsPathEnable, "bool")
	Something(className, s_guid, "dxGBufferLight16BitEnable", s_Instance.dxGBufferLight16BitEnable, "bool")
	Something(className, s_guid, "dxGBufferNormal16BitEnable", s_Instance.dxGBufferNormal16BitEnable, "bool")
	Something(className, s_guid, "dxLinearDepth32BitFormatEnable", s_Instance.dxLinearDepth32BitFormatEnable, "bool")
	Something(className, s_guid, "dxShadowmap16BitEnable", s_Instance.dxShadowmap16BitEnable, "bool")
	Something(className, s_guid, "dxSpotLightShadowmap16BitEnable", s_Instance.dxSpotLightShadowmap16BitEnable, "bool")
	Something(className, s_guid, "dynamicCullDrawOccludedBoxesEnable", s_Instance.dynamicCullDrawOccludedBoxesEnable, "bool")
	Something(className, s_guid, "dynamicCullSpuJobEnable", s_Instance.dynamicCullSpuJobEnable, "bool")
	Something(className, s_guid, "dynamicCullZBufferTestEnable", s_Instance.dynamicCullZBufferTestEnable, "bool")
	Something(className, s_guid, "dynamicEnvmapDefaultPosition", s_Instance.dynamicEnvmapDefaultPosition, "Vec3")
	Something(className, s_guid, "dynamicEnvmapEnable", s_Instance.dynamicEnvmapEnable, "bool")
	Something(className, s_guid, "dynamicEnvmapFilterMode", s_Instance.dynamicEnvmapFilterMode, "MipmapFilterMode")
	Something(className, s_guid, "dynamicEnvmapFilterWidth", s_Instance.dynamicEnvmapFilterWidth, "float")
	Something(className, s_guid, "dynamicEnvmapLightingEnable", s_Instance.dynamicEnvmapLightingEnable, "bool")
	Something(className, s_guid, "dynamicEnvmapMipmapGenEnable", s_Instance.dynamicEnvmapMipmapGenEnable, "bool")
	Something(className, s_guid, "dynamicEnvmapResolution", s_Instance.dynamicEnvmapResolution, "uint")
	Something(className, s_guid, "emissiveEnable", s_Instance.emissiveEnable, "bool")
	Something(className, s_guid, "enable", s_Instance.enable, "bool")
	Something(className, s_guid, "finalPostEnable", s_Instance.finalPostEnable, "bool")
	Something(className, s_guid, "forceMotionBlurCutoffGradientScale", s_Instance.forceMotionBlurCutoffGradientScale, "float")
	Something(className, s_guid, "forceMotionBlurDepthCutoff", s_Instance.forceMotionBlurDepthCutoff, "float")
	Something(className, s_guid, "foregroundAsMainEnable", s_Instance.foregroundAsMainEnable, "bool")
	Something(className, s_guid, "foregroundDepthClearEnable", s_Instance.foregroundDepthClearEnable, "bool")
	Something(className, s_guid, "foregroundEnable", s_Instance.foregroundEnable, "bool")
	Something(className, s_guid, "foregroundTransparentEnable", s_Instance.foregroundTransparentEnable, "bool")
	Something(className, s_guid, "foregroundZPassEnable", s_Instance.foregroundZPassEnable, "bool")
	Something(className, s_guid, "freezePlanarReflectionCullFrustum", s_Instance.freezePlanarReflectionCullFrustum, "bool")
	Something(className, s_guid, "fxaaEnable", s_Instance.fxaaEnable, "bool")
	Something(className, s_guid, "fxaaForceVendor", s_Instance.fxaaForceVendor, "int")
	Something(className, s_guid, "fxaaQuality", s_Instance.fxaaQuality, "uint")
	Something(className, s_guid, "gBufferAlphaTestSimpleEnable", s_Instance.gBufferAlphaTestSimpleEnable, "bool")
	Something(className, s_guid, "gBufferClearEnable", s_Instance.gBufferClearEnable, "bool")
	Something(className, s_guid, "gBufferLayout", s_Instance.gBufferLayout, "ShaderGBufferLayout")
	Something(className, s_guid, "gBufferTestCount", s_Instance.gBufferTestCount, "uint")
	Something(className, s_guid, "generateShadowmapsEnable", s_Instance.generateShadowmapsEnable, "bool")
	Something(className, s_guid, "genericEntityMaxVisibleEntityCount", s_Instance.genericEntityMaxVisibleEntityCount, "uint")
	Something(className, s_guid, "genericEntityRendererEnable", s_Instance.genericEntityRendererEnable, "bool")
	Something(className, s_guid, "halfResEnable", s_Instance.halfResEnable, "bool")
	Something(className, s_guid, "halfResLensFlaresEnable", s_Instance.halfResLensFlaresEnable, "bool")
	Something(className, s_guid, "hdrEnable", s_Instance.hdrEnable, "bool")
	Something(className, s_guid, "lensFlareOcclusionEnable", s_Instance.lensFlareOcclusionEnable, "bool")
	Something(className, s_guid, "lensFlaresEnable", s_Instance.lensFlaresEnable, "bool")
	Something(className, s_guid, "lightAttenuationThreshold", s_Instance.lightAttenuationThreshold, "float")
	Something(className, s_guid, "lightAttenuationThresholdEnable", s_Instance.lightAttenuationThresholdEnable, "bool")
	Something(className, s_guid, "lightConeCullEnable", s_Instance.lightConeCullEnable, "bool")
	Something(className, s_guid, "lightCullEnable", s_Instance.lightCullEnable, "bool")
	Something(className, s_guid, "lightDepthCullEnable", s_Instance.lightDepthCullEnable, "bool")
	Something(className, s_guid, "lightForceIntensity", s_Instance.lightForceIntensity, "float")
	Something(className, s_guid, "lightIntensityNormalizationEnable", s_Instance.lightIntensityNormalizationEnable, "bool")
	Something(className, s_guid, "lightIntensityScale", s_Instance.lightIntensityScale, "float")
	Something(className, s_guid, "lightLodFadeArea", s_Instance.lightLodFadeArea, "float")
	Something(className, s_guid, "lightLodMinArea", s_Instance.lightLodMinArea, "float")
	Something(className, s_guid, "lightLodRadiusFactor", s_Instance.lightLodRadiusFactor, "float")
	Something(className, s_guid, "lightLodSpecularFadeAreaEnd", s_Instance.lightLodSpecularFadeAreaEnd, "float")
	Something(className, s_guid, "lightLodSpecularFadeAreaStart", s_Instance.lightLodSpecularFadeAreaStart, "float")
	Something(className, s_guid, "lightNormalCullEnable", s_Instance.lightNormalCullEnable, "bool")
	Something(className, s_guid, "lightOverdrawMaxLayerCount", s_Instance.lightOverdrawMaxLayerCount, "uint")
	Something(className, s_guid, "lightProbesEnable", s_Instance.lightProbesEnable, "bool")
	Something(className, s_guid, "lightRadiusScale", s_Instance.lightRadiusScale, "float")
	Something(className, s_guid, "lightStencilMethodEnable", s_Instance.lightStencilMethodEnable, "bool")
	Something(className, s_guid, "lightStencilMinArea", s_Instance.lightStencilMinArea, "float")
	Something(className, s_guid, "lightTileMinArea", s_Instance.lightTileMinArea, "float")
	Something(className, s_guid, "lightTileOverlayEnable", s_Instance.lightTileOverlayEnable, "bool")
	Something(className, s_guid, "lightVolumeDepthTestEnable", s_Instance.lightVolumeDepthTestEnable, "bool")
	Something(className, s_guid, "lightVolumeMethodEnable", s_Instance.lightVolumeMethodEnable, "bool")
	Something(className, s_guid, "lightWidthEnable", s_Instance.lightWidthEnable, "bool")
	Something(className, s_guid, "lineLightsEnable", s_Instance.lineLightsEnable, "bool")
	Something(className, s_guid, "mainOpaqueZPassEnable", s_Instance.mainOpaqueZPassEnable, "bool")
	Something(className, s_guid, "maxDecalVolumeCount", s_Instance.maxDecalVolumeCount, "uint")
	Something(className, s_guid, "maxDestructionVolumeCount", s_Instance.maxDestructionVolumeCount, "uint")
	Something(className, s_guid, "maxPointLightCount", s_Instance.maxPointLightCount, "uint")
	Something(className, s_guid, "maxSpotLightCount", s_Instance.maxSpotLightCount, "uint")
	Something(className, s_guid, "maxSpotLightShadowCount", s_Instance.maxSpotLightShadowCount, "uint")
	Something(className, s_guid, "motionBlurEnable", s_Instance.motionBlurEnable, "bool")
	Something(className, s_guid, "motionBlurFrameAverageCount", s_Instance.motionBlurFrameAverageCount, "uint")
	Something(className, s_guid, "motionBlurGeometryPassEnable", s_Instance.motionBlurGeometryPassEnable, "bool")
	Something(className, s_guid, "motionBlurMax", s_Instance.motionBlurMax, "float")
	Something(className, s_guid, "motionBlurMaxFrameTime", s_Instance.motionBlurMaxFrameTime, "float")
	Something(className, s_guid, "motionBlurMaxSampleCount", s_Instance.motionBlurMaxSampleCount, "uint")
	Something(className, s_guid, "motionBlurNoiseScale", s_Instance.motionBlurNoiseScale, "float")
	Something(className, s_guid, "motionBlurQuality", s_Instance.motionBlurQuality, "uint")
	Something(className, s_guid, "motionBlurScale", s_Instance.motionBlurScale, "float")
	Something(className, s_guid, "motionBlurStencilPassEnable", s_Instance.motionBlurStencilPassEnable, "bool")
	Something(className, s_guid, "multisampleCount", s_Instance.multisampleCount, "uint")
	Something(className, s_guid, "multisampleThreshold", s_Instance.multisampleThreshold, "float")
	Something(className, s_guid, "occluderMeshZPrepassDebugEnable", s_Instance.occluderMeshZPrepassDebugEnable, "bool")
	Something(className, s_guid, "occluderMeshZPrepassEnable", s_Instance.occluderMeshZPrepassEnable, "bool")
	Something(className, s_guid, "onlyLightTileIndex", s_Instance.onlyLightTileIndex, "int")
	Something(className, s_guid, "onlyLightTileX", s_Instance.onlyLightTileX, "int")
	Something(className, s_guid, "onlyLightTileY", s_Instance.onlyLightTileY, "int")
	Something(className, s_guid, "onlyShadowmapSlice", s_Instance.onlyShadowmapSlice, "int")
	Something(className, s_guid, "onlyTileIndex", s_Instance.onlyTileIndex, "int")
	Something(className, s_guid, "opaqueSortBySolutionEnable", s_Instance.opaqueSortBySolutionEnable, "bool")
	Something(className, s_guid, "outdoorKeyLightEnable", s_Instance.outdoorKeyLightEnable, "bool")
	Something(className, s_guid, "outdoorLightEnable", s_Instance.outdoorLightEnable, "bool")
	Something(className, s_guid, "outdoorLightSpecularEnable", s_Instance.outdoorLightSpecularEnable, "bool")
	Something(className, s_guid, "outdoorLightTileBatchCount", s_Instance.outdoorLightTileBatchCount, "uint")
	Something(className, s_guid, "outdoorLightTileBlendEnable", s_Instance.outdoorLightTileBlendEnable, "bool")
	Something(className, s_guid, "outdoorLightTileRenderEnable", s_Instance.outdoorLightTileRenderEnable, "bool")
	Something(className, s_guid, "outdoorLightTileSimpleShaderEnable", s_Instance.outdoorLightTileSimpleShaderEnable, "bool")
	Something(className, s_guid, "outdoorLightTilingEnable", s_Instance.outdoorLightTilingEnable, "bool")
	Something(className, s_guid, "outdoorSkyLightEnable", s_Instance.outdoorSkyLightEnable, "bool")
	Something(className, s_guid, "outputGammaCorrectionEnable", s_Instance.outputGammaCorrectionEnable, "bool")
	Something(className, s_guid, "overrideDynamicAO", s_Instance.overrideDynamicAO, "bool")
	Something(className, s_guid, "planarReflectionBlur", s_Instance.planarReflectionBlur, "bool")
	Something(className, s_guid, "planarReflectionCullFOV", s_Instance.planarReflectionCullFOV, "float")
	Something(className, s_guid, "planarReflectionDebugCullMode", s_Instance.planarReflectionDebugCullMode, "bool")
	Something(className, s_guid, "planarReflectionEnable", s_Instance.planarReflectionEnable, "bool")
	Something(className, s_guid, "planarReflectionHeight", s_Instance.planarReflectionHeight, "uint")
	Something(className, s_guid, "planarReflectionWidth", s_Instance.planarReflectionWidth, "uint")
	Something(className, s_guid, "pointLightsEnable", s_Instance.pointLightsEnable, "bool")
	Something(className, s_guid, "ps3ColorCompressionEnable", s_Instance.ps3ColorCompressionEnable, "bool")
	Something(className, s_guid, "ps3DepthBoundsLightCullingEnable", s_Instance.ps3DepthBoundsLightCullingEnable, "bool")
	Something(className, s_guid, "ps3HdrClearEnable", s_Instance.ps3HdrClearEnable, "bool")
	Something(className, s_guid, "ps3LightTileJobCount", s_Instance.ps3LightTileJobCount, "uint")
	Something(className, s_guid, "ps3LightTileJobMaxFbTileCount", s_Instance.ps3LightTileJobMaxFbTileCount, "uint")
	Something(className, s_guid, "ps3LightTileJobPriority", s_Instance.ps3LightTileJobPriority, "uint")
	Something(className, s_guid, "ps3LightTileJobYieldEnable", s_Instance.ps3LightTileJobYieldEnable, "bool")
	Something(className, s_guid, "ps3LightTileJobYieldGranularity", s_Instance.ps3LightTileJobYieldGranularity, "float")
	Something(className, s_guid, "ps3LightTileMethod", s_Instance.ps3LightTileMethod, "uint")
	Something(className, s_guid, "ps3RenderTargetPoolGBufferOffsetEnable", s_Instance.ps3RenderTargetPoolGBufferOffsetEnable, "bool")
	Something(className, s_guid, "ps3SCullEnable", s_Instance.ps3SCullEnable, "bool")
	Something(className, s_guid, "ps3Shadowmap16BitEnable", s_Instance.ps3Shadowmap16BitEnable, "bool")
	Something(className, s_guid, "ps3ShadowmapTilingEnable", s_Instance.ps3ShadowmapTilingEnable, "bool")
	Something(className, s_guid, "ps3SpotLightShadowmap16BitEnable", s_Instance.ps3SpotLightShadowmap16BitEnable, "bool")
	Something(className, s_guid, "ps3TiledHalfTargetEnable", s_Instance.ps3TiledHalfTargetEnable, "bool")
	Something(className, s_guid, "ps3TiledSSAOTargetsEnable", s_Instance.ps3TiledSSAOTargetsEnable, "bool")
	Something(className, s_guid, "ps3TilingEnable", s_Instance.ps3TilingEnable, "bool")
	Something(className, s_guid, "ps3ZCullEnable", s_Instance.ps3ZCullEnable, "bool")
	Something(className, s_guid, "reflectionEnvmapSize", s_Instance.reflectionEnvmapSize, "uint")
	Something(className, s_guid, "screenEffectEnable", s_Instance.screenEffectEnable, "bool")
	Something(className, s_guid, "setupJobEnable", s_Instance.setupJobEnable, "bool")
	Something(className, s_guid, "shadowmapAccumBilinearEnable", s_Instance.shadowmapAccumBilinearEnable, "bool")
	Something(className, s_guid, "shadowmapAccumEnable", s_Instance.shadowmapAccumEnable, "bool")
	Something(className, s_guid, "shadowmapCullVolumeEnable", s_Instance.shadowmapCullVolumeEnable, "bool")
	Something(className, s_guid, "shadowmapExtrusionLength", s_Instance.shadowmapExtrusionLength, "float")
	Something(className, s_guid, "shadowmapFirstSliceScale", s_Instance.shadowmapFirstSliceScale, "float")
	Something(className, s_guid, "shadowmapFixedDepthEnable", s_Instance.shadowmapFixedDepthEnable, "bool")
	Something(className, s_guid, "shadowmapFixedMovementEnable", s_Instance.shadowmapFixedMovementEnable, "bool")
	Something(className, s_guid, "shadowmapMinFov", s_Instance.shadowmapMinFov, "float")
	Something(className, s_guid, "shadowmapMinScreenArea", s_Instance.shadowmapMinScreenArea, "float")
	Something(className, s_guid, "shadowmapPoissonFilterScale", s_Instance.shadowmapPoissonFilterScale, "float")
	Something(className, s_guid, "shadowmapQuality", s_Instance.shadowmapQuality, "uint")
	Something(className, s_guid, "shadowmapResolution", s_Instance.shadowmapResolution, "uint")
	Something(className, s_guid, "shadowmapsEnable", s_Instance.shadowmapsEnable, "bool")
	Something(className, s_guid, "shadowmapSizeZScale", s_Instance.shadowmapSizeZScale, "float")
	Something(className, s_guid, "shadowmapSliceCount", s_Instance.shadowmapSliceCount, "uint")
	Something(className, s_guid, "shadowmapSliceSchemeWeight", s_Instance.shadowmapSliceSchemeWeight, "float")
	Something(className, s_guid, "shadowmapViewDistance", s_Instance.shadowmapViewDistance, "float")
	Something(className, s_guid, "shadowmapViewDistanceScaleEnable", s_Instance.shadowmapViewDistanceScaleEnable, "bool")
	Something(className, s_guid, "shadowMinScreenArea", s_Instance.shadowMinScreenArea, "float")
	Something(className, s_guid, "shadowViewportScale", s_Instance.shadowViewportScale, "float")
	Something(className, s_guid, "simpleShadowmapsEnable", s_Instance.simpleShadowmapsEnable, "bool")
	Something(className, s_guid, "skinLightingEnable", s_Instance.skinLightingEnable, "bool")
	Something(className, s_guid, "skyEnable", s_Instance.skyEnable, "bool")
	Something(className, s_guid, "skyEnvmapEnable", s_Instance.skyEnvmapEnable, "bool")
	Something(className, s_guid, "skyEnvmapFilterMode", s_Instance.skyEnvmapFilterMode, "MipmapFilterMode")
	Something(className, s_guid, "skyEnvmapFilterWidth", s_Instance.skyEnvmapFilterWidth, "float")
	Something(className, s_guid, "skyEnvmapForceUpdateEnable", s_Instance.skyEnvmapForceUpdateEnable, "bool")
	Something(className, s_guid, "skyEnvmapMipmapGenEnable", s_Instance.skyEnvmapMipmapGenEnable, "bool")
	Something(className, s_guid, "skyEnvmapResolution", s_Instance.skyEnvmapResolution, "uint")
	Something(className, s_guid, "skyEnvmapSidesPerFrameCount", s_Instance.skyEnvmapSidesPerFrameCount, "uint")
	Something(className, s_guid, "skyEnvmapUpdateEnable", s_Instance.skyEnvmapUpdateEnable, "bool")
	Something(className, s_guid, "skyEnvmapUse8BitTexture", s_Instance.skyEnvmapUse8BitTexture, "bool")
	Something(className, s_guid, "skyFogEnable", s_Instance.skyFogEnable, "bool")
	Something(className, s_guid, "skyVisibilityEnvmapScalingEnable", s_Instance.skyVisibilityEnvmapScalingEnable, "bool")
	Something(className, s_guid, "specularLightingEnable", s_Instance.specularLightingEnable, "bool")
	Something(className, s_guid, "spotLightNearPlane", s_Instance.spotLightNearPlane, "float")
	Something(className, s_guid, "spotLightsEnable", s_Instance.spotLightsEnable, "bool")
	Something(className, s_guid, "spotLightShadomapLevel", s_Instance.spotLightShadomapLevel, "QualityLevel")
	Something(className, s_guid, "spotLightShadowmapEnable", s_Instance.spotLightShadowmapEnable, "bool")
	Something(className, s_guid, "spotLightShadowmapPoissonFilterScale", s_Instance.spotLightShadowmapPoissonFilterScale, "float")
	Something(className, s_guid, "spotLightShadowmapQuality", s_Instance.spotLightShadowmapQuality, "uint")
	Something(className, s_guid, "spotLightShadowmapResolution", s_Instance.spotLightShadowmapResolution, "uint")
	Something(className, s_guid, "staticEnvmapEnable", s_Instance.staticEnvmapEnable, "bool")
	Something(className, s_guid, "subSurfaceColor", s_Instance.subSurfaceColor, "Vec3")
	Something(className, s_guid, "subSurfaceRolloffKeyLight", s_Instance.subSurfaceRolloffKeyLight, "float")
	Something(className, s_guid, "subSurfaceRolloffLocalLight", s_Instance.subSurfaceRolloffLocalLight, "float")
	Something(className, s_guid, "tempPlanarReflectionY", s_Instance.tempPlanarReflectionY, "float")
	Something(className, s_guid, "tiledHalfResCompositeEnable", s_Instance.tiledHalfResCompositeEnable, "bool")
	Something(className, s_guid, "tiledHalfResStencilOccludersEnable", s_Instance.tiledHalfResStencilOccludersEnable, "bool")
	Something(className, s_guid, "translucencyLightingEnable", s_Instance.translucencyLightingEnable, "bool")
	Something(className, s_guid, "transparencyShadowmapsEnable", s_Instance.transparencyShadowmapsEnable, "bool")
	Something(className, s_guid, "unlitEnable", s_Instance.unlitEnable, "bool")
	Something(className, s_guid, "viewFxEnable", s_Instance.viewFxEnable, "bool")
	Something(className, s_guid, "viewMode", s_Instance.viewMode, "WorldViewMode")
	Something(className, s_guid, "viewportScale", s_Instance.viewportScale, "float")
	Something(className, s_guid, "wireframeEnable", s_Instance.wireframeEnable, "bool")
	Something(className, s_guid, "xenonAsyncLightJobsEnable", s_Instance.xenonAsyncLightJobsEnable, "bool")
	Something(className, s_guid, "xenonDrawDebugLightTileGridMode", s_Instance.xenonDrawDebugLightTileGridMode, "uint")
	Something(className, s_guid, "xenonFastHdrEnable", s_Instance.xenonFastHdrEnable, "bool")
	Something(className, s_guid, "xenonFloatDepthBufferEnable", s_Instance.xenonFloatDepthBufferEnable, "bool")
	Something(className, s_guid, "xenonHdrColorScale", s_Instance.xenonHdrColorScale, "float")
	Something(className, s_guid, "xenonHdrColorScaleFactor", s_Instance.xenonHdrColorScaleFactor, "float")
	Something(className, s_guid, "xenonLightTileConstantBufferSize", s_Instance.xenonLightTileConstantBufferSize, "uint")
	Something(className, s_guid, "xenonLightTileCpuPointLightCullingEnable", s_Instance.xenonLightTileCpuPointLightCullingEnable, "bool")
	Something(className, s_guid, "xenonLightTileDownsampleSpecularCheckEnable", s_Instance.xenonLightTileDownsampleSpecularCheckEnable, "bool")
	Something(className, s_guid, "xenonLightTileMaxLineLightCount", s_Instance.xenonLightTileMaxLineLightCount, "uint")
	Something(className, s_guid, "xenonLightTileMaxPointLightCount", s_Instance.xenonLightTileMaxPointLightCount, "uint")
	Something(className, s_guid, "xenonLightTileMaxSpotLightCount", s_Instance.xenonLightTileMaxSpotLightCount, "uint")
	Something(className, s_guid, "xenonLineLightsTilingEnable", s_Instance.xenonLineLightsTilingEnable, "bool")
	Something(className, s_guid, "xenonOutdoorLightTilingEnable", s_Instance.xenonOutdoorLightTilingEnable, "bool")
	Something(className, s_guid, "xenonPointLightsTilingEnable", s_Instance.xenonPointLightsTilingEnable, "bool")
	Something(className, s_guid, "xenonSpotLightsTilingEnable", s_Instance.xenonSpotLightsTilingEnable, "bool")
	Something(className, s_guid, "zBufferShadowTestEnable", s_Instance.zBufferShadowTestEnable, "bool")
	Something(className, s_guid, "zPassEnable", s_Instance.zPassEnable, "bool")
end

function Type:XenonPresenceBackendData (p_class, p_guid)
	local s_Instance = XenonPresenceBackendData(p_class) 
 	local className = "XenonPresenceBackendData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "titleId", s_Instance.titleId, "uint")
end

function Type:XorEntityData (p_class, p_guid)
	local s_Instance = XorEntityData(p_class) 
 	local className = "XorEntityData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "in1", s_Instance.in1, "bool")
	Something(className, s_guid, "in2", s_Instance.in2, "bool")
	Something(className, s_guid, "realm", s_Instance.realm, "fb.Realm)")
end

function Type:ZoomLevelData (p_class, p_guid)
	local s_Instance = ZoomLevelData(p_class) 
 	local className = "ZoomLevelData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "allowFieldOfViewScaling", s_Instance.allowFieldOfViewScaling, "bool")
	Something(className, s_guid, "cameraImpulseMultiplier", s_Instance.cameraImpulseMultiplier, "float")
	Something(className, s_guid, "dispersionMultiplier", s_Instance.dispersionMultiplier, "float")
	Something(className, s_guid, "fadeFromBlackDuration", s_Instance.fadeFromBlackDuration, "float")
	Something(className, s_guid, "fadeToBlackDuration", s_Instance.fadeToBlackDuration, "float")
	Something(className, s_guid, "fadeToBlackInZoomTransition", s_Instance.fadeToBlackInZoomTransition, "bool")
	Something(className, s_guid, "fieldOfView", s_Instance.fieldOfView, "float")
	Something(className, s_guid, "lookSpeedMultiplier", s_Instance.lookSpeedMultiplier, "float")
	Something(className, s_guid, "moveSpeedMultiplier", s_Instance.moveSpeedMultiplier, "float")
	Something(className, s_guid, "onActivateEventType", s_Instance.onActivateEventType, "ZoomLevelActivateEventType")
	Something(className, s_guid, "recoilFovMultiplier", s_Instance.recoilFovMultiplier, "float")
	Something(className, s_guid, "recoilMultiplier", s_Instance.recoilMultiplier, "float")
	Something(className, s_guid, "screenExposureAreaScale", s_Instance.screenExposureAreaScale, "float")
	Something(className, s_guid, "sprintLookSpeedMultiplier", s_Instance.sprintLookSpeedMultiplier, "float")
	Something(className, s_guid, "startFadeFromBlackAtTime", s_Instance.startFadeFromBlackAtTime, "float")
	Something(className, s_guid, "startFadeToBlackAtTime", s_Instance.startFadeToBlackAtTime, "float")
	Something(className, s_guid, "supportedSwayPitchMultiplier", s_Instance.supportedSwayPitchMultiplier, "float")
	Something(className, s_guid, "supportedSwayYawMultiplier", s_Instance.supportedSwayYawMultiplier, "float")
	Something(className, s_guid, "swayPitchMultiplier", s_Instance.swayPitchMultiplier, "float")
	Something(className, s_guid, "swayYawMultiplier", s_Instance.swayYawMultiplier, "float")
	Something(className, s_guid, "timePitchMultiplier", s_Instance.timePitchMultiplier, "float")
	Something(className, s_guid, "timeYawMultiplier", s_Instance.timeYawMultiplier, "float")
	Something(className, s_guid, "useFovSpecialisation", s_Instance.useFovSpecialisation, "bool")
end

function Type:ZoomLevelLockData (p_class, p_guid)
	local s_Instance = ZoomLevelLockData(p_class) 
 	local className = "ZoomLevelLockData"
	local s_guid = p_guid:ToString()
	Something(className, s_guid, "lockType", s_Instance.lockType, "fb.LockType)")
	Something(className, s_guid, "outlineTaggedDistance", s_Instance.outlineTaggedDistance, "float")
end